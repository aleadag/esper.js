/*!
 * esper.js
 * 
 * Compiled: Tue Apr 30 2019 16:59:51 GMT-0700 (PDT)
 * Target  : web (umd)
 * Profile : web
 * Version : 4036339-dirty
 * 
 * 
 * The MIT License (MIT)
 * Copyright (c) 2016 Robert Blanckaert
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * 
 */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
__webpack_require__(322);
__webpack_require__(567);

__webpack_require__(573);
__webpack_require__(575);
__webpack_require__(577);
__webpack_require__(579);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(2);
if(typeof window !== 'undefined' && window.initMochaPhantomJS) { window.initMochaPhantomJS(); }
mocha.setup({"ui":"bdd"});
__webpack_require__(11)
__webpack_require__(321);
if(false) {}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* globals document: true */
/* eslint import/no-unresolved: off, import/no-webpack-loader-syntax: off  */
if (!document.getElementById('mocha')) {
  document.write('<div id="mocha"></div>');
}

__webpack_require__(3);
__webpack_require__(8);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(4);

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(6)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(5)(false);
// Module
exports.push([module.i, "@charset \"utf-8\";\n\nbody {\n  margin:0;\n}\n\n#mocha {\n  font: 20px/1.5 \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  margin: 60px 50px;\n}\n\n#mocha ul,\n#mocha li {\n  margin: 0;\n  padding: 0;\n}\n\n#mocha ul {\n  list-style: none;\n}\n\n#mocha h1,\n#mocha h2 {\n  margin: 0;\n}\n\n#mocha h1 {\n  margin-top: 15px;\n  font-size: 1em;\n  font-weight: 200;\n}\n\n#mocha h1 a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha h1 a:hover {\n  text-decoration: underline;\n}\n\n#mocha .suite .suite h1 {\n  margin-top: 0;\n  font-size: .8em;\n}\n\n#mocha .hidden {\n  display: none;\n}\n\n#mocha h2 {\n  font-size: 12px;\n  font-weight: normal;\n  cursor: pointer;\n}\n\n#mocha .suite {\n  margin-left: 15px;\n}\n\n#mocha .test {\n  margin-left: 15px;\n  overflow: hidden;\n}\n\n#mocha .test.pending:hover h2::after {\n  content: '(pending)';\n  font-family: arial, sans-serif;\n}\n\n#mocha .test.pass.medium .duration {\n  background: #c09853;\n}\n\n#mocha .test.pass.slow .duration {\n  background: #b94a48;\n}\n\n#mocha .test.pass::before {\n  content: '✓';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #00d6b2;\n}\n\n#mocha .test.pass .duration {\n  font-size: 9px;\n  margin-left: 5px;\n  padding: 2px 5px;\n  color: #fff;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -moz-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  -ms-border-radius: 5px;\n  -o-border-radius: 5px;\n  border-radius: 5px;\n}\n\n#mocha .test.pass.fast .duration {\n  display: none;\n}\n\n#mocha .test.pending {\n  color: #0b97c4;\n}\n\n#mocha .test.pending::before {\n  content: '◦';\n  color: #0b97c4;\n}\n\n#mocha .test.fail {\n  color: #c00;\n}\n\n#mocha .test.fail pre {\n  color: black;\n}\n\n#mocha .test.fail::before {\n  content: '✖';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #c00;\n}\n\n#mocha .test pre.error {\n  color: #c00;\n  max-height: 300px;\n  overflow: auto;\n}\n\n#mocha .test .html-error {\n  overflow: auto;\n  color: black;\n  line-height: 1.5;\n  display: block;\n  float: left;\n  clear: left;\n  font: 12px/1.5 monaco, monospace;\n  margin: 5px;\n  padding: 15px;\n  border: 1px solid #eee;\n  max-width: 85%; /*(1)*/\n  max-width: -webkit-calc(100% - 42px);\n  max-width: -moz-calc(100% - 42px);\n  max-width: calc(100% - 42px); /*(2)*/\n  max-height: 300px;\n  word-wrap: break-word;\n  border-bottom-color: #ddd;\n  -webkit-box-shadow: 0 1px 3px #eee;\n  -moz-box-shadow: 0 1px 3px #eee;\n  box-shadow: 0 1px 3px #eee;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n\n#mocha .test .html-error pre.error {\n  border: none;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-box-shadow: 0;\n  -moz-box-shadow: 0;\n  box-shadow: 0;\n  padding: 0;\n  margin: 0;\n  margin-top: 18px;\n  max-height: none;\n}\n\n/**\n * (1): approximate for browsers not supporting calc\n * (2): 42 = 2*15 + 2*10 + 2*1 (padding + margin + border)\n *      ^^ seriously\n */\n#mocha .test pre {\n  display: block;\n  float: left;\n  clear: left;\n  font: 12px/1.5 monaco, monospace;\n  margin: 5px;\n  padding: 15px;\n  border: 1px solid #eee;\n  max-width: 85%; /*(1)*/\n  max-width: -webkit-calc(100% - 42px);\n  max-width: -moz-calc(100% - 42px);\n  max-width: calc(100% - 42px); /*(2)*/\n  word-wrap: break-word;\n  border-bottom-color: #ddd;\n  -webkit-box-shadow: 0 1px 3px #eee;\n  -moz-box-shadow: 0 1px 3px #eee;\n  box-shadow: 0 1px 3px #eee;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n\n#mocha .test h2 {\n  position: relative;\n}\n\n#mocha .test a.replay {\n  position: absolute;\n  top: 3px;\n  right: 0;\n  text-decoration: none;\n  vertical-align: middle;\n  display: block;\n  width: 15px;\n  height: 15px;\n  line-height: 15px;\n  text-align: center;\n  background: #eee;\n  font-size: 15px;\n  -webkit-border-radius: 15px;\n  -moz-border-radius: 15px;\n  border-radius: 15px;\n  -webkit-transition:opacity 200ms;\n  -moz-transition:opacity 200ms;\n  -o-transition:opacity 200ms;\n  transition: opacity 200ms;\n  opacity: 0.3;\n  color: #888;\n}\n\n#mocha .test:hover a.replay {\n  opacity: 1;\n}\n\n#mocha-report.pass .test.fail {\n  display: none;\n}\n\n#mocha-report.fail .test.pass {\n  display: none;\n}\n\n#mocha-report.pending .test.pass,\n#mocha-report.pending .test.fail {\n  display: none;\n}\n#mocha-report.pending .test.pass.pending {\n  display: block;\n}\n\n#mocha-error {\n  color: #c00;\n  font-size: 1.5em;\n  font-weight: 100;\n  letter-spacing: 1px;\n}\n\n#mocha-stats {\n  position: fixed;\n  top: 15px;\n  right: 10px;\n  font-size: 12px;\n  margin: 0;\n  color: #888;\n  z-index: 1;\n}\n\n#mocha-stats .progress {\n  float: right;\n  padding-top: 0;\n\n  /**\n   * Set safe initial values, so mochas .progress does not inherit these\n   * properties from Bootstrap .progress (which causes .progress height to\n   * equal line height set in Bootstrap).\n   */\n  height: auto;\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n  background-color: initial;\n}\n\n#mocha-stats em {\n  color: black;\n}\n\n#mocha-stats a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha-stats a:hover {\n  border-bottom: 1px solid #eee;\n}\n\n#mocha-stats li {\n  display: inline-block;\n  margin: 0 5px;\n  list-style: none;\n  padding-top: 11px;\n}\n\n#mocha-stats canvas {\n  width: 40px;\n  height: 40px;\n}\n\n#mocha code .comment { color: #ddd; }\n#mocha code .init { color: #2f6fad; }\n#mocha code .string { color: #5890ad; }\n#mocha code .keyword { color: #8a6343; }\n#mocha code .number { color: #2f6fad; }\n\n@media screen and (max-device-width: 480px) {\n  #mocha {\n    margin: 60px 0px;\n  }\n\n  #mocha #stats {\n    position: absolute;\n  }\n}\n", ""]);



/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return '@media ' + item[2] + '{' + content + '}';
      } else {
        return content;
      }
    }).join('');
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === 'string') {
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];

      if (id != null) {
        alreadyImportedModules[id] = true;
      }
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      // when a module is imported multiple times with different media queries.
      // I hope this will never occur (Hey this way we have smaller bundles)

      if (item[0] == null || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(7);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 7 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(9)(__webpack_require__(10))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(src) {
	function log(error) {
		(typeof console !== "undefined")
		&& (console.error || console.log)("[Script Loader]", error);
	}

	// Check for IE =< 8
	function isIE() {
		return typeof attachEvent !== "undefined" && typeof addEventListener === "undefined";
	}

	try {
		if (typeof execScript !== "undefined" && isIE()) {
			execScript(src);
		} else if (typeof eval !== "undefined") {
			eval.call(null, src);
		} else {
			log("EvalError: No eval function available");
		}
	} catch (error) {
		log(error);
	}
}


/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n(function (process,global){\n'use strict';\n\n/* eslint no-unused-vars: off */\n/* eslint-env commonjs */\n\n/**\n * Shim process.stdout.\n */\n\nprocess.stdout = require('browser-stdout')({label: false});\n\nvar Mocha = require('./lib/mocha');\n\n/**\n * Create a Mocha instance.\n *\n * @return {undefined}\n */\n\nvar mocha = new Mocha({reporter: 'html'});\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n\nvar uncaughtExceptionHandlers = [];\n\nvar originalOnerrorHandler = global.onerror;\n\n/**\n * Remove uncaughtException listener.\n * Revert to original onerror handler if previously defined.\n */\n\nprocess.removeListener = function(e, fn) {\n  if (e === 'uncaughtException') {\n    if (originalOnerrorHandler) {\n      global.onerror = originalOnerrorHandler;\n    } else {\n      global.onerror = function() {};\n    }\n    var i = uncaughtExceptionHandlers.indexOf(fn);\n    if (i !== -1) {\n      uncaughtExceptionHandlers.splice(i, 1);\n    }\n  }\n};\n\n/**\n * Implements uncaughtException listener.\n */\n\nprocess.on = function(e, fn) {\n  if (e === 'uncaughtException') {\n    global.onerror = function(err, url, line) {\n      fn(new Error(err + ' (' + url + ':' + line + ')'));\n      return !mocha.allowUncaught;\n    };\n    uncaughtExceptionHandlers.push(fn);\n  }\n};\n\n// The BDD UI is registered by default, but no UI will be functional in the\n// browser without an explicit call to the overridden `mocha.ui` (see below).\n// Ensure that this default UI does not expose its methods to the global scope.\nmocha.suite.removeAllListeners('pre-require');\n\nvar immediateQueue = [];\nvar immediateTimeout;\n\nfunction timeslice() {\n  var immediateStart = new Date().getTime();\n  while (immediateQueue.length && new Date().getTime() - immediateStart < 100) {\n    immediateQueue.shift()();\n  }\n  if (immediateQueue.length) {\n    immediateTimeout = setTimeout(timeslice, 0);\n  } else {\n    immediateTimeout = null;\n  }\n}\n\n/**\n * High-performance override of Runner.immediately.\n */\n\nMocha.Runner.immediately = function(callback) {\n  immediateQueue.push(callback);\n  if (!immediateTimeout) {\n    immediateTimeout = setTimeout(timeslice, 0);\n  }\n};\n\n/**\n * Function to allow assertion libraries to throw errors directly into mocha.\n * This is useful when running tests in a browser because window.onerror will\n * only receive the 'message' attribute of the Error.\n */\nmocha.throwError = function(err) {\n  uncaughtExceptionHandlers.forEach(function(fn) {\n    fn(err);\n  });\n  throw err;\n};\n\n/**\n * Override ui to ensure that the ui functions are initialized.\n * Normally this would happen in Mocha.prototype.loadFiles.\n */\n\nmocha.ui = function(ui) {\n  Mocha.prototype.ui.call(this, ui);\n  this.suite.emit('pre-require', global, null, this);\n  return this;\n};\n\n/**\n * Setup mocha with the given setting options.\n */\n\nmocha.setup = function(opts) {\n  if (typeof opts === 'string') {\n    opts = {ui: opts};\n  }\n  for (var opt in opts) {\n    if (opts.hasOwnProperty(opt)) {\n      this[opt](opts[opt]);\n    }\n  }\n  return this;\n};\n\n/**\n * Run mocha, returning the Runner.\n */\n\nmocha.run = function(fn) {\n  var options = mocha.options;\n  mocha.globals('location');\n\n  var query = Mocha.utils.parseQuery(global.location.search || '');\n  if (query.grep) {\n    mocha.grep(query.grep);\n  }\n  if (query.fgrep) {\n    mocha.fgrep(query.fgrep);\n  }\n  if (query.invert) {\n    mocha.invert();\n  }\n\n  return Mocha.prototype.run.call(mocha, function(err) {\n    // The DOM Document is not available in Web Workers.\n    var document = global.document;\n    if (\n      document &&\n      document.getElementById('mocha') &&\n      options.noHighlighting !== true\n    ) {\n      Mocha.utils.highlightTags('code');\n    }\n    if (fn) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Expose the process shim.\n * https://github.com/mochajs/mocha/pull/916\n */\n\nMocha.process = process;\n\n/**\n * Expose mocha.\n */\n\nglobal.Mocha = Mocha;\nglobal.mocha = mocha;\n\n// this allows test/acceptance/required-tokens.js to pass; thus,\n// you can now do `const describe = require('mocha').describe` in a\n// browser context (assuming browserification).  should fix #880\nmodule.exports = global;\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./lib/mocha\":14,\"_process\":69,\"browser-stdout\":41}],2:[function(require,module,exports){\n(function (process,global){\n'use strict';\n\n/**\n * Web Notifications module.\n * @module Growl\n */\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar EVENT_RUN_END = require('../runner').constants.EVENT_RUN_END;\n\n/**\n * Checks if browser notification support exists.\n *\n * @public\n * @see {@link https://caniuse.com/#feat=notifications|Browser support (notifications)}\n * @see {@link https://caniuse.com/#feat=promises|Browser support (promises)}\n * @see {@link Mocha#growl}\n * @see {@link Mocha#isGrowlCapable}\n * @return {boolean} whether browser notification support exists\n */\nexports.isCapable = function() {\n  var hasNotificationSupport = 'Notification' in window;\n  var hasPromiseSupport = typeof Promise === 'function';\n  return process.browser && hasNotificationSupport && hasPromiseSupport;\n};\n\n/**\n * Implements browser notifications as a pseudo-reporter.\n *\n * @public\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/notification|Notification API}\n * @see {@link https://developers.google.com/web/fundamentals/push-notifications/display-a-notification|Displaying a Notification}\n * @see {@link Growl#isPermitted}\n * @see {@link Mocha#_growl}\n * @param {Runner} runner - Runner instance.\n */\nexports.notify = function(runner) {\n  var promise = isPermitted();\n\n  /**\n   * Attempt notification.\n   */\n  var sendNotification = function() {\n    // If user hasn't responded yet... \"No notification for you!\" (Seinfeld)\n    Promise.race([promise, Promise.resolve(undefined)])\n      .then(canNotify)\n      .then(function() {\n        display(runner);\n      })\n      .catch(notPermitted);\n  };\n\n  runner.once(EVENT_RUN_END, sendNotification);\n};\n\n/**\n * Checks if browser notification is permitted by user.\n *\n * @private\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission|Notification.permission}\n * @see {@link Mocha#growl}\n * @see {@link Mocha#isGrowlPermitted}\n * @returns {Promise<boolean>} promise determining if browser notification\n *     permissible when fulfilled.\n */\nfunction isPermitted() {\n  var permitted = {\n    granted: function allow() {\n      return Promise.resolve(true);\n    },\n    denied: function deny() {\n      return Promise.resolve(false);\n    },\n    default: function ask() {\n      return Notification.requestPermission().then(function(permission) {\n        return permission === 'granted';\n      });\n    }\n  };\n\n  return permitted[Notification.permission]();\n}\n\n/**\n * @summary\n * Determines if notification should proceed.\n *\n * @description\n * Notification shall <strong>not</strong> proceed unless `value` is true.\n *\n * `value` will equal one of:\n * <ul>\n *   <li><code>true</code> (from `isPermitted`)</li>\n *   <li><code>false</code> (from `isPermitted`)</li>\n *   <li><code>undefined</code> (from `Promise.race`)</li>\n * </ul>\n *\n * @private\n * @param {boolean|undefined} value - Determines if notification permissible.\n * @returns {Promise<undefined>} Notification can proceed\n */\nfunction canNotify(value) {\n  if (!value) {\n    var why = value === false ? 'blocked' : 'unacknowledged';\n    var reason = 'not permitted by user (' + why + ')';\n    return Promise.reject(new Error(reason));\n  }\n  return Promise.resolve();\n}\n\n/**\n * Displays the notification.\n *\n * @private\n * @param {Runner} runner - Runner instance.\n */\nfunction display(runner) {\n  var stats = runner.stats;\n  var symbol = {\n    cross: '\\u274C',\n    tick: '\\u2705'\n  };\n  var logo = require('../../package').notifyLogo;\n  var _message;\n  var message;\n  var title;\n\n  if (stats.failures) {\n    _message = stats.failures + ' of ' + stats.tests + ' tests failed';\n    message = symbol.cross + ' ' + _message;\n    title = 'Failed';\n  } else {\n    _message = stats.passes + ' tests passed in ' + stats.duration + 'ms';\n    message = symbol.tick + ' ' + _message;\n    title = 'Passed';\n  }\n\n  // Send notification\n  var options = {\n    badge: logo,\n    body: message,\n    dir: 'ltr',\n    icon: logo,\n    lang: 'en-US',\n    name: 'mocha',\n    requireInteraction: false,\n    timestamp: Date.now()\n  };\n  var notification = new Notification(title, options);\n\n  // Autoclose after brief delay (makes various browsers act same)\n  var FORCE_DURATION = 4000;\n  setTimeout(notification.close.bind(notification), FORCE_DURATION);\n}\n\n/**\n * As notifications are tangential to our purpose, just log the error.\n *\n * @private\n * @param {Error} err - Why notification didn't happen.\n */\nfunction notPermitted(err) {\n  console.error('notification error:', err.message);\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../package\":90,\"../runner\":34,\"_process\":69}],3:[function(require,module,exports){\n'use strict';\n\n/**\n * Expose `Progress`.\n */\n\nmodule.exports = Progress;\n\n/**\n * Initialize a new `Progress` indicator.\n */\nfunction Progress() {\n  this.percent = 0;\n  this.size(0);\n  this.fontSize(11);\n  this.font('helvetica, arial, sans-serif');\n}\n\n/**\n * Set progress size to `size`.\n *\n * @public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.size = function(size) {\n  this._size = size;\n  return this;\n};\n\n/**\n * Set text to `text`.\n *\n * @public\n * @param {string} text\n * @return {Progress} Progress instance.\n */\nProgress.prototype.text = function(text) {\n  this._text = text;\n  return this;\n};\n\n/**\n * Set font size to `size`.\n *\n * @public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.fontSize = function(size) {\n  this._fontSize = size;\n  return this;\n};\n\n/**\n * Set font to `family`.\n *\n * @param {string} family\n * @return {Progress} Progress instance.\n */\nProgress.prototype.font = function(family) {\n  this._font = family;\n  return this;\n};\n\n/**\n * Update percentage to `n`.\n *\n * @param {number} n\n * @return {Progress} Progress instance.\n */\nProgress.prototype.update = function(n) {\n  this.percent = n;\n  return this;\n};\n\n/**\n * Draw on `ctx`.\n *\n * @param {CanvasRenderingContext2d} ctx\n * @return {Progress} Progress instance.\n */\nProgress.prototype.draw = function(ctx) {\n  try {\n    var percent = Math.min(this.percent, 100);\n    var size = this._size;\n    var half = size / 2;\n    var x = half;\n    var y = half;\n    var rad = half - 1;\n    var fontSize = this._fontSize;\n\n    ctx.font = fontSize + 'px ' + this._font;\n\n    var angle = Math.PI * 2 * (percent / 100);\n    ctx.clearRect(0, 0, size, size);\n\n    // outer circle\n    ctx.strokeStyle = '#9f9f9f';\n    ctx.beginPath();\n    ctx.arc(x, y, rad, 0, angle, false);\n    ctx.stroke();\n\n    // inner circle\n    ctx.strokeStyle = '#eee';\n    ctx.beginPath();\n    ctx.arc(x, y, rad - 1, 0, angle, true);\n    ctx.stroke();\n\n    // text\n    var text = this._text || (percent | 0) + '%';\n    var w = ctx.measureText(text).width;\n\n    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);\n  } catch (ignore) {\n    // don't fail if we can't render progress\n  }\n  return this;\n};\n\n},{}],4:[function(require,module,exports){\n(function (global){\n'use strict';\n\nexports.isatty = function isatty() {\n  return true;\n};\n\nexports.getWindowSize = function getWindowSize() {\n  if ('innerHeight' in global) {\n    return [global.innerHeight, global.innerWidth];\n  }\n  // In a Web Worker, the DOM Window is not available.\n  return [640, 480];\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],5:[function(require,module,exports){\n'use strict';\n/**\n * @module Context\n */\n/**\n * Expose `Context`.\n */\n\nmodule.exports = Context;\n\n/**\n * Initialize a new `Context`.\n *\n * @private\n */\nfunction Context() {}\n\n/**\n * Set or get the context `Runnable` to `runnable`.\n *\n * @private\n * @param {Runnable} runnable\n * @return {Context} context\n */\nContext.prototype.runnable = function(runnable) {\n  if (!arguments.length) {\n    return this._runnable;\n  }\n  this.test = this._runnable = runnable;\n  return this;\n};\n\n/**\n * Set or get test timeout `ms`.\n *\n * @private\n * @param {number} ms\n * @return {Context} self\n */\nContext.prototype.timeout = function(ms) {\n  if (!arguments.length) {\n    return this.runnable().timeout();\n  }\n  this.runnable().timeout(ms);\n  return this;\n};\n\n/**\n * Set test timeout `enabled`.\n *\n * @private\n * @param {boolean} enabled\n * @return {Context} self\n */\nContext.prototype.enableTimeouts = function(enabled) {\n  if (!arguments.length) {\n    return this.runnable().enableTimeouts();\n  }\n  this.runnable().enableTimeouts(enabled);\n  return this;\n};\n\n/**\n * Set or get test slowness threshold `ms`.\n *\n * @private\n * @param {number} ms\n * @return {Context} self\n */\nContext.prototype.slow = function(ms) {\n  if (!arguments.length) {\n    return this.runnable().slow();\n  }\n  this.runnable().slow(ms);\n  return this;\n};\n\n/**\n * Mark a test as skipped.\n *\n * @private\n * @throws Pending\n */\nContext.prototype.skip = function() {\n  this.runnable().skip();\n};\n\n/**\n * Set or get a number of allowed retries on failed tests\n *\n * @private\n * @param {number} n\n * @return {Context} self\n */\nContext.prototype.retries = function(n) {\n  if (!arguments.length) {\n    return this.runnable().retries();\n  }\n  this.runnable().retries(n);\n  return this;\n};\n\n},{}],6:[function(require,module,exports){\n'use strict';\n/**\n * @module Errors\n */\n/**\n * Factory functions to create throwable error objects\n */\n\n/**\n * Creates an error object to be thrown when no files to be tested could be found using specified pattern.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} pattern - User-specified argument value.\n * @returns {Error} instance detailing the error condition\n */\nfunction createNoFilesMatchPatternError(message, pattern) {\n  var err = new Error(message);\n  err.code = 'ERR_MOCHA_NO_FILES_MATCH_PATTERN';\n  err.pattern = pattern;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when the reporter specified in the options was not found.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} reporter - User-specified reporter value.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidReporterError(message, reporter) {\n  var err = new TypeError(message);\n  err.code = 'ERR_MOCHA_INVALID_REPORTER';\n  err.reporter = reporter;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when the interface specified in the options was not found.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} ui - User-specified interface value.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidInterfaceError(message, ui) {\n  var err = new Error(message);\n  err.code = 'ERR_MOCHA_INVALID_INTERFACE';\n  err.interface = ui;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when a behavior, option, or parameter is unsupported.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\nfunction createUnsupportedError(message) {\n  var err = new Error(message);\n  err.code = 'ERR_MOCHA_UNSUPPORTED';\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when an argument is missing.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} expected - Expected argument datatype.\n * @returns {Error} instance detailing the error condition\n */\nfunction createMissingArgumentError(message, argument, expected) {\n  return createInvalidArgumentTypeError(message, argument, expected);\n}\n\n/**\n * Creates an error object to be thrown when an argument did not use the supported type\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} expected - Expected argument datatype.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidArgumentTypeError(message, argument, expected) {\n  var err = new TypeError(message);\n  err.code = 'ERR_MOCHA_INVALID_ARG_TYPE';\n  err.argument = argument;\n  err.expected = expected;\n  err.actual = typeof argument;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when an argument did not use the supported value\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} value - Argument value.\n * @param {string} [reason] - Why value is invalid.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidArgumentValueError(message, argument, value, reason) {\n  var err = new TypeError(message);\n  err.code = 'ERR_MOCHA_INVALID_ARG_VALUE';\n  err.argument = argument;\n  err.value = value;\n  err.reason = typeof reason !== 'undefined' ? reason : 'is invalid';\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when an exception was caught, but the `Error` is falsy or undefined.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidExceptionError(message, value) {\n  var err = new Error(message);\n  err.code = 'ERR_MOCHA_INVALID_EXCEPTION';\n  err.valueType = typeof value;\n  err.value = value;\n  return err;\n}\n\nmodule.exports = {\n  createInvalidArgumentTypeError: createInvalidArgumentTypeError,\n  createInvalidArgumentValueError: createInvalidArgumentValueError,\n  createInvalidExceptionError: createInvalidExceptionError,\n  createInvalidInterfaceError: createInvalidInterfaceError,\n  createInvalidReporterError: createInvalidReporterError,\n  createMissingArgumentError: createMissingArgumentError,\n  createNoFilesMatchPatternError: createNoFilesMatchPatternError,\n  createUnsupportedError: createUnsupportedError\n};\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\nvar Runnable = require('./runnable');\nvar inherits = require('./utils').inherits;\n\n/**\n * Expose `Hook`.\n */\n\nmodule.exports = Hook;\n\n/**\n * Initialize a new `Hook` with the given `title` and callback `fn`\n *\n * @class\n * @extends Runnable\n * @param {String} title\n * @param {Function} fn\n */\nfunction Hook(title, fn) {\n  Runnable.call(this, title, fn);\n  this.type = 'hook';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\ninherits(Hook, Runnable);\n\n/**\n * Get or set the test `err`.\n *\n * @memberof Hook\n * @public\n * @param {Error} err\n * @return {Error}\n */\nHook.prototype.error = function(err) {\n  if (!arguments.length) {\n    err = this._error;\n    this._error = null;\n    return err;\n  }\n\n  this._error = err;\n};\n\n},{\"./runnable\":33,\"./utils\":38}],8:[function(require,module,exports){\n'use strict';\n\nvar Test = require('../test');\nvar EVENT_FILE_PRE_REQUIRE = require('../suite').constants\n  .EVENT_FILE_PRE_REQUIRE;\n\n/**\n * BDD-style interface:\n *\n *      describe('Array', function() {\n *        describe('#indexOf()', function() {\n *          it('should return -1 when not present', function() {\n *            // ...\n *          });\n *\n *          it('should return the index when present', function() {\n *            // ...\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function bddInterface(suite) {\n  var suites = [suite];\n\n  suite.on(EVENT_FILE_PRE_REQUIRE, function(context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`\n     * and callback `fn` containing nested suites\n     * and/or tests.\n     */\n\n    context.describe = context.context = function(title, fn) {\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Pending describe.\n     */\n\n    context.xdescribe = context.xcontext = context.describe.skip = function(\n      title,\n      fn\n    ) {\n      return common.suite.skip({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Exclusive suite.\n     */\n\n    context.describe.only = function(title, fn) {\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.it = context.specify = function(title, fn) {\n      var suite = suites[0];\n      if (suite.isPending()) {\n        fn = null;\n      }\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.it.only = function(title, fn) {\n      return common.test.only(mocha, context.it(title, fn));\n    };\n\n    /**\n     * Pending test case.\n     */\n\n    context.xit = context.xspecify = context.it.skip = function(title) {\n      return context.it(title);\n    };\n\n    /**\n     * Number of attempts to retry.\n     */\n    context.it.retries = function(n) {\n      context.retries(n);\n    };\n  });\n};\n\nmodule.exports.description = 'BDD or RSpec style [default]';\n\n},{\"../suite\":36,\"../test\":37,\"./common\":9}],9:[function(require,module,exports){\n'use strict';\n\nvar Suite = require('../suite');\nvar errors = require('../errors');\nvar createMissingArgumentError = errors.createMissingArgumentError;\n\n/**\n * Functions common to more than one interface.\n *\n * @param {Suite[]} suites\n * @param {Context} context\n * @param {Mocha} mocha\n * @return {Object} An object containing common functions.\n */\nmodule.exports = function(suites, context, mocha) {\n  /**\n   * Check if the suite should be tested.\n   *\n   * @private\n   * @param {Suite} suite - suite to check\n   * @returns {boolean}\n   */\n  function shouldBeTested(suite) {\n    return (\n      !mocha.options.grep ||\n      (mocha.options.grep &&\n        mocha.options.grep.test(suite.fullTitle()) &&\n        !mocha.options.invert)\n    );\n  }\n\n  return {\n    /**\n     * This is only present if flag --delay is passed into Mocha. It triggers\n     * root suite execution.\n     *\n     * @param {Suite} suite The root suite.\n     * @return {Function} A function which runs the root suite\n     */\n    runWithSuite: function runWithSuite(suite) {\n      return function run() {\n        suite.run();\n      };\n    },\n\n    /**\n     * Execute before running tests.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    before: function(name, fn) {\n      suites[0].beforeAll(name, fn);\n    },\n\n    /**\n     * Execute after running tests.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    after: function(name, fn) {\n      suites[0].afterAll(name, fn);\n    },\n\n    /**\n     * Execute before each test case.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    beforeEach: function(name, fn) {\n      suites[0].beforeEach(name, fn);\n    },\n\n    /**\n     * Execute after each test case.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    afterEach: function(name, fn) {\n      suites[0].afterEach(name, fn);\n    },\n\n    suite: {\n      /**\n       * Create an exclusive Suite; convenience function\n       * See docstring for create() below.\n       *\n       * @param {Object} opts\n       * @returns {Suite}\n       */\n      only: function only(opts) {\n        opts.isOnly = true;\n        return this.create(opts);\n      },\n\n      /**\n       * Create a Suite, but skip it; convenience function\n       * See docstring for create() below.\n       *\n       * @param {Object} opts\n       * @returns {Suite}\n       */\n      skip: function skip(opts) {\n        opts.pending = true;\n        return this.create(opts);\n      },\n\n      /**\n       * Creates a suite.\n       *\n       * @param {Object} opts Options\n       * @param {string} opts.title Title of Suite\n       * @param {Function} [opts.fn] Suite Function (not always applicable)\n       * @param {boolean} [opts.pending] Is Suite pending?\n       * @param {string} [opts.file] Filepath where this Suite resides\n       * @param {boolean} [opts.isOnly] Is Suite exclusive?\n       * @returns {Suite}\n       */\n      create: function create(opts) {\n        var suite = Suite.create(suites[0], opts.title);\n        suite.pending = Boolean(opts.pending);\n        suite.file = opts.file;\n        suites.unshift(suite);\n        if (opts.isOnly) {\n          if (mocha.options.forbidOnly && shouldBeTested(suite)) {\n            throw new Error('`.only` forbidden');\n          }\n\n          suite.parent.appendOnlySuite(suite);\n        }\n        if (suite.pending) {\n          if (mocha.options.forbidPending && shouldBeTested(suite)) {\n            throw new Error('Pending test forbidden');\n          }\n        }\n        if (typeof opts.fn === 'function') {\n          opts.fn.call(suite);\n          suites.shift();\n        } else if (typeof opts.fn === 'undefined' && !suite.pending) {\n          throw createMissingArgumentError(\n            'Suite \"' +\n              suite.fullTitle() +\n              '\" was defined but no callback was supplied. ' +\n              'Supply a callback or explicitly skip the suite.',\n            'callback',\n            'function'\n          );\n        } else if (!opts.fn && suite.pending) {\n          suites.shift();\n        }\n\n        return suite;\n      }\n    },\n\n    test: {\n      /**\n       * Exclusive test-case.\n       *\n       * @param {Object} mocha\n       * @param {Function} test\n       * @returns {*}\n       */\n      only: function(mocha, test) {\n        test.parent.appendOnlyTest(test);\n        return test;\n      },\n\n      /**\n       * Pending test case.\n       *\n       * @param {string} title\n       */\n      skip: function(title) {\n        context.test(title);\n      },\n\n      /**\n       * Number of retry attempts\n       *\n       * @param {number} n\n       */\n      retries: function(n) {\n        context.retries(n);\n      }\n    }\n  };\n};\n\n},{\"../errors\":6,\"../suite\":36}],10:[function(require,module,exports){\n'use strict';\nvar Suite = require('../suite');\nvar Test = require('../test');\n\n/**\n * Exports-style (as Node.js module) interface:\n *\n *     exports.Array = {\n *       '#indexOf()': {\n *         'should return -1 when the value is not present': function() {\n *\n *         },\n *\n *         'should return the correct index when the value is present': function() {\n *\n *         }\n *       }\n *     };\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on(Suite.constants.EVENT_FILE_REQUIRE, visit);\n\n  function visit(obj, file) {\n    var suite;\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        var fn = obj[key];\n        switch (key) {\n          case 'before':\n            suites[0].beforeAll(fn);\n            break;\n          case 'after':\n            suites[0].afterAll(fn);\n            break;\n          case 'beforeEach':\n            suites[0].beforeEach(fn);\n            break;\n          case 'afterEach':\n            suites[0].afterEach(fn);\n            break;\n          default:\n            var test = new Test(key, fn);\n            test.file = file;\n            suites[0].addTest(test);\n        }\n      } else {\n        suite = Suite.create(suites[0], key);\n        suites.unshift(suite);\n        visit(obj[key], file);\n        suites.shift();\n      }\n    }\n  }\n};\n\nmodule.exports.description = 'Node.js module (\"exports\") style';\n\n},{\"../suite\":36,\"../test\":37}],11:[function(require,module,exports){\n'use strict';\n\nexports.bdd = require('./bdd');\nexports.tdd = require('./tdd');\nexports.qunit = require('./qunit');\nexports.exports = require('./exports');\n\n},{\"./bdd\":8,\"./exports\":10,\"./qunit\":12,\"./tdd\":13}],12:[function(require,module,exports){\n'use strict';\n\nvar Test = require('../test');\nvar EVENT_FILE_PRE_REQUIRE = require('../suite').constants\n  .EVENT_FILE_PRE_REQUIRE;\n\n/**\n * QUnit-style interface:\n *\n *     suite('Array');\n *\n *     test('#length', function() {\n *       var arr = [1,2,3];\n *       ok(arr.length == 3);\n *     });\n *\n *     test('#indexOf()', function() {\n *       var arr = [1,2,3];\n *       ok(arr.indexOf(1) == 0);\n *       ok(arr.indexOf(2) == 1);\n *       ok(arr.indexOf(3) == 2);\n *     });\n *\n *     suite('String');\n *\n *     test('#length', function() {\n *       ok('foo'.length == 3);\n *     });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function qUnitInterface(suite) {\n  var suites = [suite];\n\n  suite.on(EVENT_FILE_PRE_REQUIRE, function(context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`.\n     */\n\n    context.suite = function(title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: false\n      });\n    };\n\n    /**\n     * Exclusive Suite.\n     */\n\n    context.suite.only = function(title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: false\n      });\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.test = function(title, fn) {\n      var test = new Test(title, fn);\n      test.file = file;\n      suites[0].addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn) {\n      return common.test.only(mocha, context.test(title, fn));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n\nmodule.exports.description = 'QUnit style';\n\n},{\"../suite\":36,\"../test\":37,\"./common\":9}],13:[function(require,module,exports){\n'use strict';\n\nvar Test = require('../test');\nvar EVENT_FILE_PRE_REQUIRE = require('../suite').constants\n  .EVENT_FILE_PRE_REQUIRE;\n\n/**\n * TDD-style interface:\n *\n *      suite('Array', function() {\n *        suite('#indexOf()', function() {\n *          suiteSetup(function() {\n *\n *          });\n *\n *          test('should return -1 when not present', function() {\n *\n *          });\n *\n *          test('should return the index when present', function() {\n *\n *          });\n *\n *          suiteTeardown(function() {\n *\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on(EVENT_FILE_PRE_REQUIRE, function(context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.setup = common.beforeEach;\n    context.teardown = common.afterEach;\n    context.suiteSetup = common.before;\n    context.suiteTeardown = common.after;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n\n    /**\n     * Describe a \"suite\" with the given `title` and callback `fn` containing\n     * nested suites and/or tests.\n     */\n    context.suite = function(title, fn) {\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Pending suite.\n     */\n    context.suite.skip = function(title, fn) {\n      return common.suite.skip({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n    context.suite.only = function(title, fn) {\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Describe a specification or test-case with the given `title` and\n     * callback `fn` acting as a thunk.\n     */\n    context.test = function(title, fn) {\n      var suite = suites[0];\n      if (suite.isPending()) {\n        fn = null;\n      }\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn) {\n      return common.test.only(mocha, context.test(title, fn));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n\nmodule.exports.description =\n  'traditional \"suite\"/\"test\" instead of BDD\\'s \"describe\"/\"it\"';\n\n},{\"../suite\":36,\"../test\":37,\"./common\":9}],14:[function(require,module,exports){\n(function (process,global){\n'use strict';\n\n/*!\n * mocha\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar escapeRe = require('escape-string-regexp');\nvar path = require('path');\nvar builtinReporters = require('./reporters');\nvar growl = require('./growl');\nvar utils = require('./utils');\nvar mocharc = require('./mocharc.json');\nvar errors = require('./errors');\nvar Suite = require('./suite');\nvar createStatsCollector = require('./stats-collector');\nvar createInvalidReporterError = errors.createInvalidReporterError;\nvar createInvalidInterfaceError = errors.createInvalidInterfaceError;\nvar EVENT_FILE_PRE_REQUIRE = Suite.constants.EVENT_FILE_PRE_REQUIRE;\nvar EVENT_FILE_POST_REQUIRE = Suite.constants.EVENT_FILE_POST_REQUIRE;\nvar EVENT_FILE_REQUIRE = Suite.constants.EVENT_FILE_REQUIRE;\nvar sQuote = utils.sQuote;\n\nexports = module.exports = Mocha;\n\n/**\n * To require local UIs and reporters when running in node.\n */\n\nif (!process.browser) {\n  var cwd = process.cwd();\n  module.paths.push(cwd, path.join(cwd, 'node_modules'));\n}\n\n/**\n * Expose internals.\n */\n\n/**\n * @public\n * @class utils\n * @memberof Mocha\n */\nexports.utils = utils;\nexports.interfaces = require('./interfaces');\n/**\n * @public\n * @memberof Mocha\n */\nexports.reporters = builtinReporters;\nexports.Runnable = require('./runnable');\nexports.Context = require('./context');\n/**\n *\n * @memberof Mocha\n */\nexports.Runner = require('./runner');\nexports.Suite = Suite;\nexports.Hook = require('./hook');\nexports.Test = require('./test');\n\n/**\n * Constructs a new Mocha instance with `options`.\n *\n * @public\n * @class Mocha\n * @param {Object} [options] - Settings object.\n * @param {boolean} [options.allowUncaught] - Propagate uncaught errors?\n * @param {boolean} [options.asyncOnly] - Force `done` callback or promise?\n * @param {boolean} [options.bail] - Bail after first test failure?\n * @param {boolean} [options.checkLeaks] - If true, check leaks.\n * @param {boolean} [options.delay] - Delay root suite execution?\n * @param {boolean} [options.enableTimeouts] - Enable timeouts?\n * @param {string} [options.fgrep] - Test filter given string.\n * @param {boolean} [options.forbidOnly] - Tests marked `only` fail the suite?\n * @param {boolean} [options.forbidPending] - Pending tests fail the suite?\n * @param {boolean} [options.fullStackTrace] - Full stacktrace upon failure?\n * @param {string[]} [options.global] - Variables expected in global scope.\n * @param {RegExp|string} [options.grep] - Test filter given regular expression.\n * @param {boolean} [options.growl] - Enable desktop notifications?\n * @param {boolean} [options.hideDiff] - Suppress diffs from failures?\n * @param {boolean} [options.ignoreLeaks] - Ignore global leaks?\n * @param {boolean} [options.invert] - Invert test filter matches?\n * @param {boolean} [options.noHighlighting] - Disable syntax highlighting?\n * @param {string} [options.reporter] - Reporter name.\n * @param {Object} [options.reporterOption] - Reporter settings object.\n * @param {number} [options.retries] - Number of times to retry failed tests.\n * @param {number} [options.slow] - Slow threshold value.\n * @param {number|string} [options.timeout] - Timeout threshold value.\n * @param {string} [options.ui] - Interface name.\n * @param {boolean} [options.color] - Color TTY output from reporter?\n * @param {boolean} [options.useInlineDiffs] - Use inline diffs?\n */\nfunction Mocha(options) {\n  options = utils.assign({}, mocharc, options || {});\n  this.files = [];\n  this.options = options;\n  // root suite\n  this.suite = new exports.Suite('', new exports.Context(), true);\n\n  if ('useColors' in options) {\n    utils.deprecate(\n      'useColors is DEPRECATED and will be removed from a future version of Mocha. Instead, use the \"color\" option'\n    );\n    options.color = 'color' in options ? options.color : options.useColors;\n  }\n\n  this.grep(options.grep)\n    .fgrep(options.fgrep)\n    .ui(options.ui)\n    .bail(options.bail)\n    .reporter(options.reporter, options.reporterOptions)\n    .useColors(options.color)\n    .slow(options.slow)\n    .useInlineDiffs(options.inlineDiffs)\n    .globals(options.globals);\n\n  if ('enableTimeouts' in options) {\n    utils.deprecate(\n      'enableTimeouts is DEPRECATED and will be removed from a future version of Mocha. Instead, use \"timeout: false\" to disable timeouts.'\n    );\n    if (options.enableTimeouts === false) {\n      this.timeout(0);\n    }\n  }\n\n  // this guard exists because Suite#timeout does not consider `undefined` to be valid input\n  if (typeof options.timeout !== 'undefined') {\n    this.timeout(options.timeout === false ? 0 : options.timeout);\n  }\n\n  if ('retries' in options) {\n    this.retries(options.retries);\n  }\n\n  if ('diff' in options) {\n    this.hideDiff(!options.diff);\n  }\n\n  [\n    'allowUncaught',\n    'asyncOnly',\n    'checkLeaks',\n    'delay',\n    'forbidOnly',\n    'forbidPending',\n    'fullTrace',\n    'growl',\n    'invert'\n  ].forEach(function(opt) {\n    if (options[opt]) {\n      this[opt]();\n    }\n  }, this);\n}\n\n/**\n * Enables or disables bailing on the first failure.\n *\n * @public\n * @see {@link https://mochajs.org/#-b---bail|CLI option}\n * @param {boolean} [bail=true] - Whether to bail on first error.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.bail = function(bail) {\n  if (!arguments.length) {\n    bail = true;\n  }\n  this.suite.bail(bail);\n  return this;\n};\n\n/**\n * @summary\n * Adds `file` to be loaded for execution.\n *\n * @description\n * Useful for generic setup code that must be included within test suite.\n *\n * @public\n * @see {@link https://mochajs.org/#--file-file|CLI option}\n * @param {string} file - Pathname of file to be loaded.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.addFile = function(file) {\n  this.files.push(file);\n  return this;\n};\n\n/**\n * Sets reporter to `reporter`, defaults to \"spec\".\n *\n * @public\n * @see {@link https://mochajs.org/#-r---reporter-name|CLI option}\n * @see {@link https://mochajs.org/#reporters|Reporters}\n * @param {String|Function} reporter - Reporter name or constructor.\n * @param {Object} [reporterOptions] - Options used to configure the reporter.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested reporter cannot be loaded\n * @example\n *\n * // Use XUnit reporter and direct its output to file\n * mocha.reporter('xunit', { output: '/path/to/testspec.xunit.xml' });\n */\nMocha.prototype.reporter = function(reporter, reporterOptions) {\n  if (typeof reporter === 'function') {\n    this._reporter = reporter;\n  } else {\n    reporter = reporter || 'spec';\n    var _reporter;\n    // Try to load a built-in reporter.\n    if (builtinReporters[reporter]) {\n      _reporter = builtinReporters[reporter];\n    }\n    // Try to load reporters from process.cwd() and node_modules\n    if (!_reporter) {\n      try {\n        _reporter = require(reporter);\n      } catch (err) {\n        if (\n          err.code !== 'MODULE_NOT_FOUND' ||\n          err.message.indexOf('Cannot find module') !== -1\n        ) {\n          // Try to load reporters from a path (absolute or relative)\n          try {\n            _reporter = require(path.resolve(process.cwd(), reporter));\n          } catch (_err) {\n            _err.code !== 'MODULE_NOT_FOUND' ||\n            _err.message.indexOf('Cannot find module') !== -1\n              ? console.warn(sQuote(reporter) + ' reporter not found')\n              : console.warn(\n                  sQuote(reporter) +\n                    ' reporter blew up with error:\\n' +\n                    err.stack\n                );\n          }\n        } else {\n          console.warn(\n            sQuote(reporter) + ' reporter blew up with error:\\n' + err.stack\n          );\n        }\n      }\n    }\n    if (!_reporter) {\n      throw createInvalidReporterError(\n        'invalid reporter ' + sQuote(reporter),\n        reporter\n      );\n    }\n    this._reporter = _reporter;\n  }\n  this.options.reporterOptions = reporterOptions;\n  return this;\n};\n\n/**\n * Sets test UI `name`, defaults to \"bdd\".\n *\n * @public\n * @see {@link https://mochajs.org/#-u---ui-name|CLI option}\n * @see {@link https://mochajs.org/#interfaces|Interface DSLs}\n * @param {string|Function} [ui=bdd] - Interface name or class.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested interface cannot be loaded\n */\nMocha.prototype.ui = function(ui) {\n  var bindInterface;\n  if (typeof ui === 'function') {\n    bindInterface = ui;\n  } else {\n    ui = ui || 'bdd';\n    bindInterface = exports.interfaces[ui];\n    if (!bindInterface) {\n      try {\n        bindInterface = require(ui);\n      } catch (err) {\n        throw createInvalidInterfaceError(\n          'invalid interface ' + sQuote(ui),\n          ui\n        );\n      }\n    }\n  }\n  bindInterface(this.suite);\n\n  this.suite.on(EVENT_FILE_PRE_REQUIRE, function(context) {\n    exports.afterEach = context.afterEach || context.teardown;\n    exports.after = context.after || context.suiteTeardown;\n    exports.beforeEach = context.beforeEach || context.setup;\n    exports.before = context.before || context.suiteSetup;\n    exports.describe = context.describe || context.suite;\n    exports.it = context.it || context.test;\n    exports.xit = context.xit || (context.test && context.test.skip);\n    exports.setup = context.setup || context.beforeEach;\n    exports.suiteSetup = context.suiteSetup || context.before;\n    exports.suiteTeardown = context.suiteTeardown || context.after;\n    exports.suite = context.suite || context.describe;\n    exports.teardown = context.teardown || context.afterEach;\n    exports.test = context.test || context.it;\n    exports.run = context.run;\n  });\n\n  return this;\n};\n\n/**\n * Loads `files` prior to execution.\n *\n * @description\n * The implementation relies on Node's `require` to execute\n * the test interface functions and will be subject to its cache.\n *\n * @private\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @param {Function} [fn] - Callback invoked upon completion.\n */\nMocha.prototype.loadFiles = function(fn) {\n  var self = this;\n  var suite = this.suite;\n  this.files.forEach(function(file) {\n    file = path.resolve(file);\n    suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n    suite.emit(EVENT_FILE_REQUIRE, require(file), file, self);\n    suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n  });\n  fn && fn();\n};\n\n/**\n * Removes a previously loaded file from Node's `require` cache.\n *\n * @private\n * @static\n * @see {@link Mocha#unloadFiles}\n * @param {string} file - Pathname of file to be unloaded.\n */\nMocha.unloadFile = function(file) {\n  delete require.cache[require.resolve(file)];\n};\n\n/**\n * Unloads `files` from Node's `require` cache.\n *\n * @description\n * This allows files to be \"freshly\" reloaded, providing the ability\n * to reuse a Mocha instance programmatically.\n *\n * <strong>Intended for consumers &mdash; not used internally</strong>\n *\n * @public\n * @see {@link Mocha.unloadFile}\n * @see {@link Mocha#loadFiles}\n * @see {@link Mocha#run}\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.unloadFiles = function() {\n  this.files.forEach(Mocha.unloadFile);\n  return this;\n};\n\n/**\n * Sets `grep` filter after escaping RegExp special characters.\n *\n * @public\n * @see {@link Mocha#grep}\n * @param {string} str - Value to be converted to a regexp.\n * @returns {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title begins with `\"foo\"` followed by a period\n * mocha.fgrep('foo.');\n */\nMocha.prototype.fgrep = function(str) {\n  if (!str) {\n    return this;\n  }\n  return this.grep(new RegExp(escapeRe(str)));\n};\n\n/**\n * @summary\n * Sets `grep` filter used to select specific tests for execution.\n *\n * @description\n * If `re` is a regexp-like string, it will be converted to regexp.\n * The regexp is tested against the full title of each test (i.e., the\n * name of the test preceded by titles of each its ancestral suites).\n * As such, using an <em>exact-match</em> fixed pattern against the\n * test name itself will not yield any matches.\n * <br>\n * <strong>Previous filter value will be overwritten on each call!</strong>\n *\n * @public\n * @see {@link https://mochajs.org/#-g---grep-pattern|CLI option}\n * @see {@link Mocha#fgrep}\n * @see {@link Mocha#invert}\n * @param {RegExp|String} re - Regular expression used to select tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title contains `\"match\"`, ignoring case\n * mocha.grep(/match/i);\n * @example\n *\n * // Same as above but with regexp-like string argument\n * mocha.grep('/match/i');\n * @example\n *\n * // ## Anti-example\n * // Given embedded test `it('only-this-test')`...\n * mocha.grep('/^only-this-test$/');    // NO! Use `.only()` to do this!\n */\nMocha.prototype.grep = function(re) {\n  if (utils.isString(re)) {\n    // extract args if it's regex-like, i.e: [string, pattern, flag]\n    var arg = re.match(/^\\/(.*)\\/(g|i|)$|.*/);\n    this.options.grep = new RegExp(arg[1] || arg[0], arg[2]);\n  } else {\n    this.options.grep = re;\n  }\n  return this;\n};\n\n/**\n * Inverts `grep` matches.\n *\n * @public\n * @see {@link Mocha#grep}\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title does *not* contain `\"match\"`, ignoring case\n * mocha.grep(/match/i).invert();\n */\nMocha.prototype.invert = function() {\n  this.options.invert = true;\n  return this;\n};\n\n/**\n * Enables or disables ignoring global leaks.\n *\n * @public\n * @see {@link Mocha#checkLeaks}\n * @param {boolean} ignoreLeaks - Whether to ignore global leaks.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Ignore global leaks\n * mocha.ignoreLeaks(true);\n */\nMocha.prototype.ignoreLeaks = function(ignoreLeaks) {\n  this.options.ignoreLeaks = Boolean(ignoreLeaks);\n  return this;\n};\n\n/**\n * Enables checking for global variables leaked while running tests.\n *\n * @public\n * @see {@link https://mochajs.org/#--check-leaks|CLI option}\n * @see {@link Mocha#ignoreLeaks}\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.checkLeaks = function() {\n  this.options.ignoreLeaks = false;\n  return this;\n};\n\n/**\n * Displays full stack trace upon test failure.\n *\n * @public\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.fullTrace = function() {\n  this.options.fullStackTrace = true;\n  return this;\n};\n\n/**\n * Enables desktop notification support if prerequisite software installed.\n *\n * @public\n * @see {@link Mocha#isGrowlCapable}\n * @see {@link Mocha#_growl}\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.growl = function() {\n  this.options.growl = this.isGrowlCapable();\n  if (!this.options.growl) {\n    var detail = process.browser\n      ? 'notification support not available in this browser...'\n      : 'notification support prerequisites not installed...';\n    console.error(detail + ' cannot enable!');\n  }\n  return this;\n};\n\n/**\n * @summary\n * Determines if Growl support seems likely.\n *\n * @description\n * <strong>Not available when run in browser.</strong>\n *\n * @private\n * @see {@link Growl#isCapable}\n * @see {@link Mocha#growl}\n * @return {boolean} whether Growl support can be expected\n */\nMocha.prototype.isGrowlCapable = growl.isCapable;\n\n/**\n * Implements desktop notifications using a pseudo-reporter.\n *\n * @private\n * @see {@link Mocha#growl}\n * @see {@link Growl#notify}\n * @param {Runner} runner - Runner instance.\n */\nMocha.prototype._growl = growl.notify;\n\n/**\n * Specifies whitelist of variable names to be expected in global scope.\n *\n * @public\n * @see {@link https://mochajs.org/#--globals-names|CLI option}\n * @see {@link Mocha#checkLeaks}\n * @param {String[]|String} globals - Accepted global variable name(s).\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Specify variables to be expected in global scope\n * mocha.globals(['jQuery', 'MyLib']);\n */\nMocha.prototype.globals = function(globals) {\n  this.options.globals = (this.options.globals || [])\n    .concat(globals)\n    .filter(Boolean);\n  return this;\n};\n\n/**\n * Enables or disables TTY color output by screen-oriented reporters.\n *\n * @public\n * @param {boolean} colors - Whether to enable color output.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.useColors = function(colors) {\n  if (colors !== undefined) {\n    this.options.useColors = colors;\n  }\n  return this;\n};\n\n/**\n * Determines if reporter should use inline diffs (rather than +/-)\n * in test failure output.\n *\n * @public\n * @param {boolean} inlineDiffs - Whether to use inline diffs.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.useInlineDiffs = function(inlineDiffs) {\n  this.options.useInlineDiffs = inlineDiffs !== undefined && inlineDiffs;\n  return this;\n};\n\n/**\n * Determines if reporter should include diffs in test failure output.\n *\n * @public\n * @param {boolean} hideDiff - Whether to hide diffs.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.hideDiff = function(hideDiff) {\n  this.options.hideDiff = hideDiff !== undefined && hideDiff;\n  return this;\n};\n\n/**\n * @summary\n * Sets timeout threshold value.\n *\n * @description\n * A string argument can use shorthand (such as \"2s\") and will be converted.\n * If the value is `0`, timeouts will be disabled.\n *\n * @public\n * @see {@link https://mochajs.org/#-t---timeout-ms|CLI option}\n * @see {@link https://mochajs.org/#--no-timeouts|CLI option}\n * @see {@link https://mochajs.org/#timeouts|Timeouts}\n * @see {@link Mocha#enableTimeouts}\n * @param {number|string} msecs - Timeout threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets timeout to one second\n * mocha.timeout(1000);\n * @example\n *\n * // Same as above but using string argument\n * mocha.timeout('1s');\n */\nMocha.prototype.timeout = function(msecs) {\n  this.suite.timeout(msecs);\n  return this;\n};\n\n/**\n * Sets the number of times to retry failed tests.\n *\n * @public\n * @see {@link https://mochajs.org/#retry-tests|Retry Tests}\n * @param {number} retry - Number of times to retry failed tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Allow any failed test to retry one more time\n * mocha.retries(1);\n */\nMocha.prototype.retries = function(n) {\n  this.suite.retries(n);\n  return this;\n};\n\n/**\n * Sets slowness threshold value.\n *\n * @public\n * @see {@link https://mochajs.org/#-s---slow-ms|CLI option}\n * @param {number} msecs - Slowness threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets \"slow\" threshold to half a second\n * mocha.slow(500);\n * @example\n *\n * // Same as above but using string argument\n * mocha.slow('0.5s');\n */\nMocha.prototype.slow = function(msecs) {\n  this.suite.slow(msecs);\n  return this;\n};\n\n/**\n * Enables or disables timeouts.\n *\n * @public\n * @see {@link https://mochajs.org/#-t---timeout-ms|CLI option}\n * @see {@link https://mochajs.org/#--no-timeouts|CLI option}\n * @param {boolean} enableTimeouts - Whether to enable timeouts.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.enableTimeouts = function(enableTimeouts) {\n  this.suite.enableTimeouts(\n    arguments.length && enableTimeouts !== undefined ? enableTimeouts : true\n  );\n  return this;\n};\n\n/**\n * Forces all tests to either accept a `done` callback or return a promise.\n *\n * @public\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.asyncOnly = function() {\n  this.options.asyncOnly = true;\n  return this;\n};\n\n/**\n * Disables syntax highlighting (in browser).\n *\n * @public\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.noHighlighting = function() {\n  this.options.noHighlighting = true;\n  return this;\n};\n\n/**\n * Enables uncaught errors to propagate (in browser).\n *\n * @public\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.allowUncaught = function() {\n  this.options.allowUncaught = true;\n  return this;\n};\n\n/**\n * @summary\n * Delays root suite execution.\n *\n * @description\n * Used to perform asynch operations before any suites are run.\n *\n * @public\n * @see {@link https://mochajs.org/#delayed-root-suite|delayed root suite}\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.delay = function delay() {\n  this.options.delay = true;\n  return this;\n};\n\n/**\n * Causes tests marked `only` to fail the suite.\n *\n * @public\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.forbidOnly = function() {\n  this.options.forbidOnly = true;\n  return this;\n};\n\n/**\n * Causes pending tests and tests marked `skip` to fail the suite.\n *\n * @public\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.forbidPending = function() {\n  this.options.forbidPending = true;\n  return this;\n};\n\n/**\n * Mocha version as specified by \"package.json\".\n *\n * @name Mocha#version\n * @type string\n * @readonly\n */\nObject.defineProperty(Mocha.prototype, 'version', {\n  value: require('../package.json').version,\n  configurable: false,\n  enumerable: true,\n  writable: false\n});\n\n/**\n * Callback to be invoked when test execution is complete.\n *\n * @callback DoneCB\n * @param {number} failures - Number of failures that occurred.\n */\n\n/**\n * Runs root suite and invokes `fn()` when complete.\n *\n * @description\n * To run tests multiple times (or to run tests in files that are\n * already in the `require` cache), make sure to clear them from\n * the cache first!\n *\n * @public\n * @see {@link Mocha#loadFiles}\n * @see {@link Mocha#unloadFiles}\n * @see {@link Runner#run}\n * @param {DoneCB} [fn] - Callback invoked when test execution completed.\n * @return {Runner} runner instance\n */\nMocha.prototype.run = function(fn) {\n  if (this.files.length) {\n    this.loadFiles();\n  }\n  var suite = this.suite;\n  var options = this.options;\n  options.files = this.files;\n  var runner = new exports.Runner(suite, options.delay);\n  createStatsCollector(runner);\n  var reporter = new this._reporter(runner, options);\n  runner.ignoreLeaks = options.ignoreLeaks !== false;\n  runner.fullStackTrace = options.fullStackTrace;\n  runner.asyncOnly = options.asyncOnly;\n  runner.allowUncaught = options.allowUncaught;\n  runner.forbidOnly = options.forbidOnly;\n  runner.forbidPending = options.forbidPending;\n  if (options.grep) {\n    runner.grep(options.grep, options.invert);\n  }\n  if (options.globals) {\n    runner.globals(options.globals);\n  }\n  if (options.growl) {\n    this._growl(runner);\n  }\n  if (options.useColors !== undefined) {\n    exports.reporters.Base.useColors = options.useColors;\n  }\n  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;\n  exports.reporters.Base.hideDiff = options.hideDiff;\n\n  function done(failures) {\n    fn = fn || utils.noop;\n    if (reporter.done) {\n      reporter.done(failures, fn);\n    } else {\n      fn(failures);\n    }\n  }\n\n  return runner.run(done);\n};\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../package.json\":90,\"./context\":5,\"./errors\":6,\"./growl\":2,\"./hook\":7,\"./interfaces\":11,\"./mocharc.json\":15,\"./reporters\":21,\"./runnable\":33,\"./runner\":34,\"./stats-collector\":35,\"./suite\":36,\"./test\":37,\"./utils\":38,\"_process\":69,\"escape-string-regexp\":49,\"path\":42}],15:[function(require,module,exports){\nmodule.exports={\n  \"diff\": true,\n  \"extension\": [\"js\"],\n  \"opts\": \"./test/mocha.opts\",\n  \"package\": \"./package.json\",\n  \"reporter\": \"spec\",\n  \"slow\": 75,\n  \"timeout\": 2000,\n  \"ui\": \"bdd\"\n}\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nmodule.exports = Pending;\n\n/**\n * Initialize a new `Pending` error with the given message.\n *\n * @param {string} message\n */\nfunction Pending(message) {\n  this.message = message;\n}\n\n},{}],17:[function(require,module,exports){\n(function (process){\n'use strict';\n/**\n * @module Base\n */\n/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar diff = require('diff');\nvar milliseconds = require('ms');\nvar utils = require('../utils');\nvar supportsColor = process.browser ? null : require('supports-color');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = tty.isatty(1) && tty.isatty(2);\n\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors =\n  !process.browser &&\n  (supportsColor.stdout || process.env.MOCHA_COLORS !== undefined);\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: '✓',\n  err: '✖',\n  dot: '․',\n  comma: ',',\n  bang: '!'\n};\n\n// With node.js on Windows: use symbols available in terminal default fonts\nif (process.platform === 'win32') {\n  exports.symbols.ok = '\\u221A';\n  exports.symbols.err = '\\u00D7';\n  exports.symbols.dot = '.';\n}\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @private\n * @param {string} type\n * @param {string} str\n * @return {string}\n */\nvar color = (exports.color = function(type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n});\n\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  exports.window.width = process.stdout.getWindowSize\n    ? process.stdout.getWindowSize(1)[0]\n    : tty.getWindowSize()[1];\n}\n\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function() {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n\n  show: function() {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n\n  deleteLine: function() {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n\n  beginningOfLine: function() {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n\n  CR: function() {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\nfunction showDiff(err) {\n  return (\n    err &&\n    err.showDiff !== false &&\n    sameType(err.actual, err.expected) &&\n    err.expected !== undefined\n  );\n}\n\nfunction stringifyDiffObjs(err) {\n  if (!utils.isString(err.actual) || !utils.isString(err.expected)) {\n    err.actual = utils.stringify(err.actual);\n    err.expected = utils.stringify(err.expected);\n  }\n}\n\n/**\n * Returns a diff between 2 strings with coloured ANSI output.\n *\n * @description\n * The diff will be either inline or unified dependent on the value\n * of `Base.inlineDiff`.\n *\n * @param {string} actual\n * @param {string} expected\n * @return {string} Diff\n */\nvar generateDiff = (exports.generateDiff = function(actual, expected) {\n  return exports.inlineDiffs\n    ? inlineDiff(actual, expected)\n    : unifiedDiff(actual, expected);\n});\n\n/**\n * Outputs the given `failures` as a list.\n *\n * @public\n * @memberof Mocha.reporters.Base\n * @variation 1\n * @param {Object[]} failures - Each is Test instance with corresponding\n *     Error property\n */\nexports.list = function(failures) {\n  console.log();\n  failures.forEach(function(test, i) {\n    // format\n    var fmt =\n      color('error title', '  %s) %s:\\n') +\n      color('error message', '     %s') +\n      color('error stack', '\\n%s\\n');\n\n    // msg\n    var msg;\n    var err = test.err;\n    var message;\n    if (err.message && typeof err.message.toString === 'function') {\n      message = err.message + '';\n    } else if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else {\n      message = '';\n    }\n    var stack = err.stack || message;\n    var index = message ? stack.indexOf(message) : -1;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index);\n      // remove msg from stack\n      stack = stack.slice(index + 1);\n    }\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n    // explicitly show diff\n    if (!exports.hideDiff && showDiff(err)) {\n      stringifyDiffObjs(err);\n      fmt =\n        color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      msg += generateDiff(err.actual, err.expected);\n    }\n\n    // indent stack trace\n    stack = stack.replace(/^/gm, '  ');\n\n    // indented test title\n    var testTitle = '';\n    test.titlePath().forEach(function(str, index) {\n      if (index !== 0) {\n        testTitle += '\\n     ';\n      }\n      for (var i = 0; i < index; i++) {\n        testTitle += '  ';\n      }\n      testTitle += str;\n    });\n\n    console.log(fmt, i + 1, testTitle, msg, stack);\n  });\n};\n\n/**\n * Constructs a new `Base` reporter instance.\n *\n * @description\n * All other reporters generally inherit from this reporter.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Base(runner, options) {\n  var failures = (this.failures = []);\n\n  if (!runner) {\n    throw new TypeError('Missing runner argument');\n  }\n  this.options = options || {};\n  this.runner = runner;\n  this.stats = runner.stats; // assigned so Reporters keep a closer reference\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n  });\n\n  runner.on(EVENT_TEST_FAIL, function(test, err) {\n    if (showDiff(err)) {\n      stringifyDiffObjs(err);\n    }\n    test.err = err;\n    failures.push(test);\n  });\n}\n\n/**\n * Outputs common epilogue used by many of the bundled reporters.\n *\n * @public\n * @memberof Mocha.reporters.Base\n */\nBase.prototype.epilogue = function() {\n  var stats = this.stats;\n  var fmt;\n\n  console.log();\n\n  // passes\n  fmt =\n    color('bright pass', ' ') +\n    color('green', ' %d passing') +\n    color('light', ' (%s)');\n\n  console.log(fmt, stats.passes || 0, milliseconds(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ') + color('pending', ' %d pending');\n\n    console.log(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n\n    console.log(fmt, stats.failures);\n\n    Base.list(this.failures);\n    console.log();\n  }\n\n  console.log();\n};\n\n/**\n * Pads the given `str` to `len`.\n *\n * @private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n/**\n * Returns inline diff between 2 strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} Diff\n */\nfunction inlineDiff(actual, expected) {\n  var msg = errorDiff(actual, expected);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines\n      .map(function(str, i) {\n        return pad(++i, width) + ' |' + ' ' + str;\n      })\n      .join('\\n');\n  }\n\n  // legend\n  msg =\n    '\\n' +\n    color('diff removed', 'actual') +\n    ' ' +\n    color('diff added', 'expected') +\n    '\\n\\n' +\n    msg +\n    '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns unified diff between two strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} The diff.\n */\nfunction unifiedDiff(actual, expected) {\n  var indent = '      ';\n  function cleanUp(line) {\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n    if (line.match(/@@/)) {\n      return '--';\n    }\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n    return indent + line;\n  }\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n  var msg = diff.createPatch('string', actual, expected);\n  var lines = msg.split('\\n').splice(5);\n  return (\n    '\\n      ' +\n    colorLines('diff added', '+ expected') +\n    ' ' +\n    colorLines('diff removed', '- actual') +\n    '\\n\\n' +\n    lines\n      .map(cleanUp)\n      .filter(notBlank)\n      .join('\\n')\n  );\n}\n\n/**\n * Returns character diff for `err`.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} the diff\n */\nfunction errorDiff(actual, expected) {\n  return diff\n    .diffWordsWithSpace(actual, expected)\n    .map(function(str) {\n      if (str.added) {\n        return colorLines('diff added', str.value);\n      }\n      if (str.removed) {\n        return colorLines('diff removed', str.value);\n      }\n      return str.value;\n    })\n    .join('');\n}\n\n/**\n * Colors lines for `str`, using the color `name`.\n *\n * @private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\nfunction colorLines(name, str) {\n  return str\n    .split('\\n')\n    .map(function(str) {\n      return color(name, str);\n    })\n    .join('\\n');\n}\n\n/**\n * Object#toString reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Checks that a / b have the same type.\n *\n * @private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\n\nBase.abstract = true;\n\n}).call(this,require('_process'))\n},{\"../runner\":34,\"../utils\":38,\"_process\":69,\"diff\":48,\"ms\":60,\"supports-color\":42,\"tty\":4}],18:[function(require,module,exports){\n'use strict';\n/**\n * @module Doc\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;\nvar EVENT_SUITE_END = constants.EVENT_SUITE_END;\n\n/**\n * Expose `Doc`.\n */\n\nexports = module.exports = Doc;\n\n/**\n * Constructs a new `Doc` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Doc(runner, options) {\n  Base.call(this, runner, options);\n\n  var indents = 2;\n\n  function indent() {\n    return Array(indents).join('  ');\n  }\n\n  runner.on(EVENT_SUITE_BEGIN, function(suite) {\n    if (suite.root) {\n      return;\n    }\n    ++indents;\n    console.log('%s<section class=\"suite\">', indent());\n    ++indents;\n    console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));\n    console.log('%s<dl>', indent());\n  });\n\n  runner.on(EVENT_SUITE_END, function(suite) {\n    if (suite.root) {\n      return;\n    }\n    console.log('%s</dl>', indent());\n    --indents;\n    console.log('%s</section>', indent());\n    --indents;\n  });\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));\n    var code = utils.escape(utils.clean(test.body));\n    console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);\n  });\n\n  runner.on(EVENT_TEST_FAIL, function(test, err) {\n    console.log(\n      '%s  <dt class=\"error\">%s</dt>',\n      indent(),\n      utils.escape(test.title)\n    );\n    var code = utils.escape(utils.clean(test.body));\n    console.log(\n      '%s  <dd class=\"error\"><pre><code>%s</code></pre></dd>',\n      indent(),\n      code\n    );\n    console.log('%s  <dd class=\"error\">%s</dd>', indent(), utils.escape(err));\n  });\n}\n\nDoc.description = 'HTML documentation';\n\n},{\"../runner\":34,\"../utils\":38,\"./base\":17}],19:[function(require,module,exports){\n(function (process){\n'use strict';\n/**\n * @module Dot\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\n\n/**\n * Expose `Dot`.\n */\n\nexports = module.exports = Dot;\n\n/**\n * Constructs a new `Dot` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Dot(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var width = (Base.window.width * 0.75) | 0;\n  var n = -1;\n\n  runner.on(EVENT_RUN_BEGIN, function() {\n    process.stdout.write('\\n');\n  });\n\n  runner.on(EVENT_TEST_PENDING, function() {\n    if (++n % width === 0) {\n      process.stdout.write('\\n  ');\n    }\n    process.stdout.write(Base.color('pending', Base.symbols.comma));\n  });\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    if (++n % width === 0) {\n      process.stdout.write('\\n  ');\n    }\n    if (test.speed === 'slow') {\n      process.stdout.write(Base.color('bright yellow', Base.symbols.dot));\n    } else {\n      process.stdout.write(Base.color(test.speed, Base.symbols.dot));\n    }\n  });\n\n  runner.on(EVENT_TEST_FAIL, function() {\n    if (++n % width === 0) {\n      process.stdout.write('\\n  ');\n    }\n    process.stdout.write(Base.color('fail', Base.symbols.bang));\n  });\n\n  runner.once(EVENT_RUN_END, function() {\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Dot, Base);\n\nDot.description = 'dot matrix representation';\n\n}).call(this,require('_process'))\n},{\"../runner\":34,\"../utils\":38,\"./base\":17,\"_process\":69}],20:[function(require,module,exports){\n(function (global){\n'use strict';\n\n/* eslint-env browser */\n/**\n * @module HTML\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\nvar Progress = require('../browser/progress');\nvar escapeRe = require('escape-string-regexp');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;\nvar EVENT_SUITE_END = constants.EVENT_SUITE_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date;\n\n/**\n * Expose `HTML`.\n */\n\nexports = module.exports = HTML;\n\n/**\n * Stats template.\n */\n\nvar statsTemplate =\n  '<ul id=\"mocha-stats\">' +\n  '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>' +\n  '<li class=\"passes\"><a href=\"javascript:void(0);\">passes:</a> <em>0</em></li>' +\n  '<li class=\"failures\"><a href=\"javascript:void(0);\">failures:</a> <em>0</em></li>' +\n  '<li class=\"duration\">duration: <em>0</em>s</li>' +\n  '</ul>';\n\nvar playIcon = '&#x2023;';\n\n/**\n * Constructs a new `HTML` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction HTML(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var stats = this.stats;\n  var stat = fragment(statsTemplate);\n  var items = stat.getElementsByTagName('li');\n  var passes = items[1].getElementsByTagName('em')[0];\n  var passesLink = items[1].getElementsByTagName('a')[0];\n  var failures = items[2].getElementsByTagName('em')[0];\n  var failuresLink = items[2].getElementsByTagName('a')[0];\n  var duration = items[3].getElementsByTagName('em')[0];\n  var canvas = stat.getElementsByTagName('canvas')[0];\n  var report = fragment('<ul id=\"mocha-report\"></ul>');\n  var stack = [report];\n  var progress;\n  var ctx;\n  var root = document.getElementById('mocha');\n\n  if (canvas.getContext) {\n    var ratio = window.devicePixelRatio || 1;\n    canvas.style.width = canvas.width;\n    canvas.style.height = canvas.height;\n    canvas.width *= ratio;\n    canvas.height *= ratio;\n    ctx = canvas.getContext('2d');\n    ctx.scale(ratio, ratio);\n    progress = new Progress();\n  }\n\n  if (!root) {\n    return error('#mocha div missing, add it to your document');\n  }\n\n  // pass toggle\n  on(passesLink, 'click', function(evt) {\n    evt.preventDefault();\n    unhide();\n    var name = /pass/.test(report.className) ? '' : ' pass';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) {\n      hideSuitesWithout('test pass');\n    }\n  });\n\n  // failure toggle\n  on(failuresLink, 'click', function(evt) {\n    evt.preventDefault();\n    unhide();\n    var name = /fail/.test(report.className) ? '' : ' fail';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) {\n      hideSuitesWithout('test fail');\n    }\n  });\n\n  root.appendChild(stat);\n  root.appendChild(report);\n\n  if (progress) {\n    progress.size(40);\n  }\n\n  runner.on(EVENT_SUITE_BEGIN, function(suite) {\n    if (suite.root) {\n      return;\n    }\n\n    // suite\n    var url = self.suiteURL(suite);\n    var el = fragment(\n      '<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>',\n      url,\n      escape(suite.title)\n    );\n\n    // container\n    stack[0].appendChild(el);\n    stack.unshift(document.createElement('ul'));\n    el.appendChild(stack[0]);\n  });\n\n  runner.on(EVENT_SUITE_END, function(suite) {\n    if (suite.root) {\n      updateStats();\n      return;\n    }\n    stack.shift();\n  });\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    var url = self.testURL(test);\n    var markup =\n      '<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> ' +\n      '<a href=\"%s\" class=\"replay\">' +\n      playIcon +\n      '</a></h2></li>';\n    var el = fragment(markup, test.speed, test.title, test.duration, url);\n    self.addCodeToggle(el, test.body);\n    appendToStack(el);\n    updateStats();\n  });\n\n  runner.on(EVENT_TEST_FAIL, function(test) {\n    var el = fragment(\n      '<li class=\"test fail\"><h2>%e <a href=\"%e\" class=\"replay\">' +\n        playIcon +\n        '</a></h2></li>',\n      test.title,\n      self.testURL(test)\n    );\n    var stackString; // Note: Includes leading newline\n    var message = test.err.toString();\n\n    // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we\n    // check for the result of the stringifying.\n    if (message === '[object Error]') {\n      message = test.err.message;\n    }\n\n    if (test.err.stack) {\n      var indexOfMessage = test.err.stack.indexOf(test.err.message);\n      if (indexOfMessage === -1) {\n        stackString = test.err.stack;\n      } else {\n        stackString = test.err.stack.substr(\n          test.err.message.length + indexOfMessage\n        );\n      }\n    } else if (test.err.sourceURL && test.err.line !== undefined) {\n      // Safari doesn't give you a stack. Let's at least provide a source line.\n      stackString = '\\n(' + test.err.sourceURL + ':' + test.err.line + ')';\n    }\n\n    stackString = stackString || '';\n\n    if (test.err.htmlMessage && stackString) {\n      el.appendChild(\n        fragment(\n          '<div class=\"html-error\">%s\\n<pre class=\"error\">%e</pre></div>',\n          test.err.htmlMessage,\n          stackString\n        )\n      );\n    } else if (test.err.htmlMessage) {\n      el.appendChild(\n        fragment('<div class=\"html-error\">%s</div>', test.err.htmlMessage)\n      );\n    } else {\n      el.appendChild(\n        fragment('<pre class=\"error\">%e%e</pre>', message, stackString)\n      );\n    }\n\n    self.addCodeToggle(el, test.body);\n    appendToStack(el);\n    updateStats();\n  });\n\n  runner.on(EVENT_TEST_PENDING, function(test) {\n    var el = fragment(\n      '<li class=\"test pass pending\"><h2>%e</h2></li>',\n      test.title\n    );\n    appendToStack(el);\n    updateStats();\n  });\n\n  function appendToStack(el) {\n    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.\n    if (stack[0]) {\n      stack[0].appendChild(el);\n    }\n  }\n\n  function updateStats() {\n    // TODO: add to stats\n    var percent = ((stats.tests / runner.total) * 100) | 0;\n    if (progress) {\n      progress.update(percent).draw(ctx);\n    }\n\n    // update stats\n    var ms = new Date() - stats.start;\n    text(passes, stats.passes);\n    text(failures, stats.failures);\n    text(duration, (ms / 1000).toFixed(2));\n  }\n}\n\n/**\n * Makes a URL, preserving querystring (\"search\") parameters.\n *\n * @param {string} s\n * @return {string} A new URL.\n */\nfunction makeUrl(s) {\n  var search = window.location.search;\n\n  // Remove previous grep query parameter if present\n  if (search) {\n    search = search.replace(/[?&]grep=[^&\\s]*/g, '').replace(/^&/, '?');\n  }\n\n  return (\n    window.location.pathname +\n    (search ? search + '&' : '?') +\n    'grep=' +\n    encodeURIComponent(escapeRe(s))\n  );\n}\n\n/**\n * Provide suite URL.\n *\n * @param {Object} [suite]\n */\nHTML.prototype.suiteURL = function(suite) {\n  return makeUrl(suite.fullTitle());\n};\n\n/**\n * Provide test URL.\n *\n * @param {Object} [test]\n */\nHTML.prototype.testURL = function(test) {\n  return makeUrl(test.fullTitle());\n};\n\n/**\n * Adds code toggle functionality for the provided test's list element.\n *\n * @param {HTMLLIElement} el\n * @param {string} contents\n */\nHTML.prototype.addCodeToggle = function(el, contents) {\n  var h2 = el.getElementsByTagName('h2')[0];\n\n  on(h2, 'click', function() {\n    pre.style.display = pre.style.display === 'none' ? 'block' : 'none';\n  });\n\n  var pre = fragment('<pre><code>%e</code></pre>', utils.clean(contents));\n  el.appendChild(pre);\n  pre.style.display = 'none';\n};\n\n/**\n * Display error `msg`.\n *\n * @param {string} msg\n */\nfunction error(msg) {\n  document.body.appendChild(fragment('<div id=\"mocha-error\">%s</div>', msg));\n}\n\n/**\n * Return a DOM fragment from `html`.\n *\n * @param {string} html\n */\nfunction fragment(html) {\n  var args = arguments;\n  var div = document.createElement('div');\n  var i = 1;\n\n  div.innerHTML = html.replace(/%([se])/g, function(_, type) {\n    switch (type) {\n      case 's':\n        return String(args[i++]);\n      case 'e':\n        return escape(args[i++]);\n      // no default\n    }\n  });\n\n  return div.firstChild;\n}\n\n/**\n * Check for suites that do not have elements\n * with `classname`, and hide them.\n *\n * @param {text} classname\n */\nfunction hideSuitesWithout(classname) {\n  var suites = document.getElementsByClassName('suite');\n  for (var i = 0; i < suites.length; i++) {\n    var els = suites[i].getElementsByClassName(classname);\n    if (!els.length) {\n      suites[i].className += ' hidden';\n    }\n  }\n}\n\n/**\n * Unhide .hidden suites.\n */\nfunction unhide() {\n  var els = document.getElementsByClassName('suite hidden');\n  for (var i = 0; i < els.length; ++i) {\n    els[i].className = els[i].className.replace('suite hidden', 'suite');\n  }\n}\n\n/**\n * Set an element's text contents.\n *\n * @param {HTMLElement} el\n * @param {string} contents\n */\nfunction text(el, contents) {\n  if (el.textContent) {\n    el.textContent = contents;\n  } else {\n    el.innerText = contents;\n  }\n}\n\n/**\n * Listen on `event` with callback `fn`.\n */\nfunction on(el, event, fn) {\n  if (el.addEventListener) {\n    el.addEventListener(event, fn, false);\n  } else {\n    el.attachEvent('on' + event, fn);\n  }\n}\n\nHTML.browserOnly = true;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../browser/progress\":3,\"../runner\":34,\"../utils\":38,\"./base\":17,\"escape-string-regexp\":49}],21:[function(require,module,exports){\n'use strict';\n\n// Alias exports to a their normalized format Mocha#reporter to prevent a need\n// for dynamic (try/catch) requires, which Browserify doesn't handle.\nexports.Base = exports.base = require('./base');\nexports.Dot = exports.dot = require('./dot');\nexports.Doc = exports.doc = require('./doc');\nexports.TAP = exports.tap = require('./tap');\nexports.JSON = exports.json = require('./json');\nexports.HTML = exports.html = require('./html');\nexports.List = exports.list = require('./list');\nexports.Min = exports.min = require('./min');\nexports.Spec = exports.spec = require('./spec');\nexports.Nyan = exports.nyan = require('./nyan');\nexports.XUnit = exports.xunit = require('./xunit');\nexports.Markdown = exports.markdown = require('./markdown');\nexports.Progress = exports.progress = require('./progress');\nexports.Landing = exports.landing = require('./landing');\nexports.JSONStream = exports['json-stream'] = require('./json-stream');\n\n},{\"./base\":17,\"./doc\":18,\"./dot\":19,\"./html\":20,\"./json\":23,\"./json-stream\":22,\"./landing\":24,\"./list\":25,\"./markdown\":26,\"./min\":27,\"./nyan\":28,\"./progress\":29,\"./spec\":30,\"./tap\":31,\"./xunit\":32}],22:[function(require,module,exports){\n(function (process){\n'use strict';\n/**\n * @module JSONStream\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\n\n/**\n * Expose `JSONStream`.\n */\n\nexports = module.exports = JSONStream;\n\n/**\n * Constructs a new `JSONStream` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction JSONStream(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var total = runner.total;\n\n  runner.once(EVENT_RUN_BEGIN, function() {\n    writeEvent(['start', {total: total}]);\n  });\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    writeEvent(['pass', clean(test)]);\n  });\n\n  runner.on(EVENT_TEST_FAIL, function(test, err) {\n    test = clean(test);\n    test.err = err.message;\n    test.stack = err.stack || null;\n    writeEvent(['fail', test]);\n  });\n\n  runner.once(EVENT_RUN_END, function() {\n    writeEvent(['end', self.stats]);\n  });\n}\n\n/**\n * Mocha event to be written to the output stream.\n * @typedef {Array} JSONStream~MochaEvent\n */\n\n/**\n * Writes Mocha event to reporter output stream.\n *\n * @private\n * @param {JSONStream~MochaEvent} event - Mocha event to be output.\n */\nfunction writeEvent(event) {\n  process.stdout.write(JSON.stringify(event) + '\\n');\n}\n\n/**\n * Returns an object literal representation of `test`\n * free of cyclic properties, etc.\n *\n * @private\n * @param {Test} test - Instance used as data source.\n * @return {Object} object containing pared-down test instance data\n */\nfunction clean(test) {\n  return {\n    title: test.title,\n    fullTitle: test.fullTitle(),\n    duration: test.duration,\n    currentRetry: test.currentRetry()\n  };\n}\n\nJSONStream.description = 'newline delimited JSON events';\n\n}).call(this,require('_process'))\n},{\"../runner\":34,\"./base\":17,\"_process\":69}],23:[function(require,module,exports){\n(function (process){\n'use strict';\n/**\n * @module JSON\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_TEST_END = constants.EVENT_TEST_END;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\n\n/**\n * Expose `JSON`.\n */\n\nexports = module.exports = JSONReporter;\n\n/**\n * Constructs a new `JSON` reporter instance.\n *\n * @public\n * @class JSON\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction JSONReporter(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var tests = [];\n  var pending = [];\n  var failures = [];\n  var passes = [];\n\n  runner.on(EVENT_TEST_END, function(test) {\n    tests.push(test);\n  });\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    passes.push(test);\n  });\n\n  runner.on(EVENT_TEST_FAIL, function(test) {\n    failures.push(test);\n  });\n\n  runner.on(EVENT_TEST_PENDING, function(test) {\n    pending.push(test);\n  });\n\n  runner.once(EVENT_RUN_END, function() {\n    var obj = {\n      stats: self.stats,\n      tests: tests.map(clean),\n      pending: pending.map(clean),\n      failures: failures.map(clean),\n      passes: passes.map(clean)\n    };\n\n    runner.testResults = obj;\n\n    process.stdout.write(JSON.stringify(obj, null, 2));\n  });\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @private\n * @param {Object} test\n * @return {Object}\n */\nfunction clean(test) {\n  var err = test.err || {};\n  if (err instanceof Error) {\n    err = errorJSON(err);\n  }\n\n  return {\n    title: test.title,\n    fullTitle: test.fullTitle(),\n    duration: test.duration,\n    currentRetry: test.currentRetry(),\n    err: cleanCycles(err)\n  };\n}\n\n/**\n * Replaces any circular references inside `obj` with '[object Object]'\n *\n * @private\n * @param {Object} obj\n * @return {Object}\n */\nfunction cleanCycles(obj) {\n  var cache = [];\n  return JSON.parse(\n    JSON.stringify(obj, function(key, value) {\n      if (typeof value === 'object' && value !== null) {\n        if (cache.indexOf(value) !== -1) {\n          // Instead of going in a circle, we'll print [object Object]\n          return '' + value;\n        }\n        cache.push(value);\n      }\n\n      return value;\n    })\n  );\n}\n\n/**\n * Transform an Error object into a JSON object.\n *\n * @private\n * @param {Error} err\n * @return {Object}\n */\nfunction errorJSON(err) {\n  var res = {};\n  Object.getOwnPropertyNames(err).forEach(function(key) {\n    res[key] = err[key];\n  }, err);\n  return res;\n}\n\nJSONReporter.description = 'single JSON object';\n\n}).call(this,require('_process'))\n},{\"../runner\":34,\"./base\":17,\"_process\":69}],24:[function(require,module,exports){\n(function (process){\n'use strict';\n/**\n * @module Landing\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar constants = require('../runner').constants;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_END = constants.EVENT_TEST_END;\nvar STATE_FAILED = require('../runnable').constants.STATE_FAILED;\n\nvar cursor = Base.cursor;\nvar color = Base.color;\n\n/**\n * Expose `Landing`.\n */\n\nexports = module.exports = Landing;\n\n/**\n * Airplane color.\n */\n\nBase.colors.plane = 0;\n\n/**\n * Airplane crash color.\n */\n\nBase.colors['plane crash'] = 31;\n\n/**\n * Runway color.\n */\n\nBase.colors.runway = 90;\n\n/**\n * Constructs a new `Landing` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Landing(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var width = (Base.window.width * 0.75) | 0;\n  var total = runner.total;\n  var stream = process.stdout;\n  var plane = color('plane', '✈');\n  var crashed = -1;\n  var n = 0;\n\n  function runway() {\n    var buf = Array(width).join('-');\n    return '  ' + color('runway', buf);\n  }\n\n  runner.on(EVENT_RUN_BEGIN, function() {\n    stream.write('\\n\\n\\n  ');\n    cursor.hide();\n  });\n\n  runner.on(EVENT_TEST_END, function(test) {\n    // check if the plane crashed\n    var col = crashed === -1 ? ((width * ++n) / total) | 0 : crashed;\n\n    // show the crash\n    if (test.state === STATE_FAILED) {\n      plane = color('plane crash', '✈');\n      crashed = col;\n    }\n\n    // render landing strip\n    stream.write('\\u001b[' + (width + 1) + 'D\\u001b[2A');\n    stream.write(runway());\n    stream.write('\\n  ');\n    stream.write(color('runway', Array(col).join('⋅')));\n    stream.write(plane);\n    stream.write(color('runway', Array(width - col).join('⋅') + '\\n'));\n    stream.write(runway());\n    stream.write('\\u001b[0m');\n  });\n\n  runner.once(EVENT_RUN_END, function() {\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Landing, Base);\n\nLanding.description = 'Unicode landing strip';\n\n}).call(this,require('_process'))\n},{\"../runnable\":33,\"../runner\":34,\"../utils\":38,\"./base\":17,\"_process\":69}],25:[function(require,module,exports){\n(function (process){\n'use strict';\n/**\n * @module List\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar constants = require('../runner').constants;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_BEGIN = constants.EVENT_TEST_BEGIN;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar color = Base.color;\nvar cursor = Base.cursor;\n\n/**\n * Expose `List`.\n */\n\nexports = module.exports = List;\n\n/**\n * Constructs a new `List` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction List(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var n = 0;\n\n  runner.on(EVENT_RUN_BEGIN, function() {\n    console.log();\n  });\n\n  runner.on(EVENT_TEST_BEGIN, function(test) {\n    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));\n  });\n\n  runner.on(EVENT_TEST_PENDING, function(test) {\n    var fmt = color('checkmark', '  -') + color('pending', ' %s');\n    console.log(fmt, test.fullTitle());\n  });\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    var fmt =\n      color('checkmark', '  ' + Base.symbols.ok) +\n      color('pass', ' %s: ') +\n      color(test.speed, '%dms');\n    cursor.CR();\n    console.log(fmt, test.fullTitle(), test.duration);\n  });\n\n  runner.on(EVENT_TEST_FAIL, function(test) {\n    cursor.CR();\n    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());\n  });\n\n  runner.once(EVENT_RUN_END, self.epilogue.bind(self));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(List, Base);\n\nList.description = 'like \"spec\" reporter but flat';\n\n}).call(this,require('_process'))\n},{\"../runner\":34,\"../utils\":38,\"./base\":17,\"_process\":69}],26:[function(require,module,exports){\n(function (process){\n'use strict';\n/**\n * @module Markdown\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\nvar constants = require('../runner').constants;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;\nvar EVENT_SUITE_END = constants.EVENT_SUITE_END;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\n\n/**\n * Constants\n */\n\nvar SUITE_PREFIX = '$';\n\n/**\n * Expose `Markdown`.\n */\n\nexports = module.exports = Markdown;\n\n/**\n * Constructs a new `Markdown` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Markdown(runner, options) {\n  Base.call(this, runner, options);\n\n  var level = 0;\n  var buf = '';\n\n  function title(str) {\n    return Array(level).join('#') + ' ' + str;\n  }\n\n  function mapTOC(suite, obj) {\n    var ret = obj;\n    var key = SUITE_PREFIX + suite.title;\n\n    obj = obj[key] = obj[key] || {suite: suite};\n    suite.suites.forEach(function(suite) {\n      mapTOC(suite, obj);\n    });\n\n    return ret;\n  }\n\n  function stringifyTOC(obj, level) {\n    ++level;\n    var buf = '';\n    var link;\n    for (var key in obj) {\n      if (key === 'suite') {\n        continue;\n      }\n      if (key !== SUITE_PREFIX) {\n        link = ' - [' + key.substring(1) + ']';\n        link += '(#' + utils.slug(obj[key].suite.fullTitle()) + ')\\n';\n        buf += Array(level).join('  ') + link;\n      }\n      buf += stringifyTOC(obj[key], level);\n    }\n    return buf;\n  }\n\n  function generateTOC(suite) {\n    var obj = mapTOC(suite, {});\n    return stringifyTOC(obj, 0);\n  }\n\n  generateTOC(runner.suite);\n\n  runner.on(EVENT_SUITE_BEGIN, function(suite) {\n    ++level;\n    var slug = utils.slug(suite.fullTitle());\n    buf += '<a name=\"' + slug + '\"></a>' + '\\n';\n    buf += title(suite.title) + '\\n';\n  });\n\n  runner.on(EVENT_SUITE_END, function() {\n    --level;\n  });\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    var code = utils.clean(test.body);\n    buf += test.title + '.\\n';\n    buf += '\\n```js\\n';\n    buf += code + '\\n';\n    buf += '```\\n\\n';\n  });\n\n  runner.once(EVENT_RUN_END, function() {\n    process.stdout.write('# TOC\\n');\n    process.stdout.write(generateTOC(runner.suite));\n    process.stdout.write(buf);\n  });\n}\n\nMarkdown.description = 'GitHub Flavored Markdown';\n\n}).call(this,require('_process'))\n},{\"../runner\":34,\"../utils\":38,\"./base\":17,\"_process\":69}],27:[function(require,module,exports){\n(function (process){\n'use strict';\n/**\n * @module Min\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar constants = require('../runner').constants;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\n\n/**\n * Expose `Min`.\n */\n\nexports = module.exports = Min;\n\n/**\n * Constructs a new `Min` reporter instance.\n *\n * @description\n * This minimal test reporter is best used with '--watch'.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Min(runner, options) {\n  Base.call(this, runner, options);\n\n  runner.on(EVENT_RUN_BEGIN, function() {\n    // clear screen\n    process.stdout.write('\\u001b[2J');\n    // set cursor position\n    process.stdout.write('\\u001b[1;3H');\n  });\n\n  runner.once(EVENT_RUN_END, this.epilogue.bind(this));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Min, Base);\n\nMin.description = 'essentially just a summary';\n\n}).call(this,require('_process'))\n},{\"../runner\":34,\"../utils\":38,\"./base\":17,\"_process\":69}],28:[function(require,module,exports){\n(function (process){\n'use strict';\n/**\n * @module Nyan\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar constants = require('../runner').constants;\nvar inherits = require('../utils').inherits;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\n\n/**\n * Expose `Dot`.\n */\n\nexports = module.exports = NyanCat;\n\n/**\n * Constructs a new `Nyan` reporter instance.\n *\n * @public\n * @class Nyan\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction NyanCat(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var width = (Base.window.width * 0.75) | 0;\n  var nyanCatWidth = (this.nyanCatWidth = 11);\n\n  this.colorIndex = 0;\n  this.numberOfLines = 4;\n  this.rainbowColors = self.generateColors();\n  this.scoreboardWidth = 5;\n  this.tick = 0;\n  this.trajectories = [[], [], [], []];\n  this.trajectoryWidthMax = width - nyanCatWidth;\n\n  runner.on(EVENT_RUN_BEGIN, function() {\n    Base.cursor.hide();\n    self.draw();\n  });\n\n  runner.on(EVENT_TEST_PENDING, function() {\n    self.draw();\n  });\n\n  runner.on(EVENT_TEST_PASS, function() {\n    self.draw();\n  });\n\n  runner.on(EVENT_TEST_FAIL, function() {\n    self.draw();\n  });\n\n  runner.once(EVENT_RUN_END, function() {\n    Base.cursor.show();\n    for (var i = 0; i < self.numberOfLines; i++) {\n      write('\\n');\n    }\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(NyanCat, Base);\n\n/**\n * Draw the nyan cat\n *\n * @private\n */\n\nNyanCat.prototype.draw = function() {\n  this.appendRainbow();\n  this.drawScoreboard();\n  this.drawRainbow();\n  this.drawNyanCat();\n  this.tick = !this.tick;\n};\n\n/**\n * Draw the \"scoreboard\" showing the number\n * of passes, failures and pending tests.\n *\n * @private\n */\n\nNyanCat.prototype.drawScoreboard = function() {\n  var stats = this.stats;\n\n  function draw(type, n) {\n    write(' ');\n    write(Base.color(type, n));\n    write('\\n');\n  }\n\n  draw('green', stats.passes);\n  draw('fail', stats.failures);\n  draw('pending', stats.pending);\n  write('\\n');\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Append the rainbow.\n *\n * @private\n */\n\nNyanCat.prototype.appendRainbow = function() {\n  var segment = this.tick ? '_' : '-';\n  var rainbowified = this.rainbowify(segment);\n\n  for (var index = 0; index < this.numberOfLines; index++) {\n    var trajectory = this.trajectories[index];\n    if (trajectory.length >= this.trajectoryWidthMax) {\n      trajectory.shift();\n    }\n    trajectory.push(rainbowified);\n  }\n};\n\n/**\n * Draw the rainbow.\n *\n * @private\n */\n\nNyanCat.prototype.drawRainbow = function() {\n  var self = this;\n\n  this.trajectories.forEach(function(line) {\n    write('\\u001b[' + self.scoreboardWidth + 'C');\n    write(line.join(''));\n    write('\\n');\n  });\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Draw the nyan cat\n *\n * @private\n */\nNyanCat.prototype.drawNyanCat = function() {\n  var self = this;\n  var startWidth = this.scoreboardWidth + this.trajectories[0].length;\n  var dist = '\\u001b[' + startWidth + 'C';\n  var padding = '';\n\n  write(dist);\n  write('_,------,');\n  write('\\n');\n\n  write(dist);\n  padding = self.tick ? '  ' : '   ';\n  write('_|' + padding + '/\\\\_/\\\\ ');\n  write('\\n');\n\n  write(dist);\n  padding = self.tick ? '_' : '__';\n  var tail = self.tick ? '~' : '^';\n  write(tail + '|' + padding + this.face() + ' ');\n  write('\\n');\n\n  write(dist);\n  padding = self.tick ? ' ' : '  ';\n  write(padding + '\"\"  \"\" ');\n  write('\\n');\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Draw nyan cat face.\n *\n * @private\n * @return {string}\n */\n\nNyanCat.prototype.face = function() {\n  var stats = this.stats;\n  if (stats.failures) {\n    return '( x .x)';\n  } else if (stats.pending) {\n    return '( o .o)';\n  } else if (stats.passes) {\n    return '( ^ .^)';\n  }\n  return '( - .-)';\n};\n\n/**\n * Move cursor up `n`.\n *\n * @private\n * @param {number} n\n */\n\nNyanCat.prototype.cursorUp = function(n) {\n  write('\\u001b[' + n + 'A');\n};\n\n/**\n * Move cursor down `n`.\n *\n * @private\n * @param {number} n\n */\n\nNyanCat.prototype.cursorDown = function(n) {\n  write('\\u001b[' + n + 'B');\n};\n\n/**\n * Generate rainbow colors.\n *\n * @private\n * @return {Array}\n */\nNyanCat.prototype.generateColors = function() {\n  var colors = [];\n\n  for (var i = 0; i < 6 * 7; i++) {\n    var pi3 = Math.floor(Math.PI / 3);\n    var n = i * (1.0 / 6);\n    var r = Math.floor(3 * Math.sin(n) + 3);\n    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);\n    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);\n    colors.push(36 * r + 6 * g + b + 16);\n  }\n\n  return colors;\n};\n\n/**\n * Apply rainbow to the given `str`.\n *\n * @private\n * @param {string} str\n * @return {string}\n */\nNyanCat.prototype.rainbowify = function(str) {\n  if (!Base.useColors) {\n    return str;\n  }\n  var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];\n  this.colorIndex += 1;\n  return '\\u001b[38;5;' + color + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Stdout helper.\n *\n * @param {string} string A message to write to stdout.\n */\nfunction write(string) {\n  process.stdout.write(string);\n}\n\nNyanCat.description = '\"nyan cat\"';\n\n}).call(this,require('_process'))\n},{\"../runner\":34,\"../utils\":38,\"./base\":17,\"_process\":69}],29:[function(require,module,exports){\n(function (process){\n'use strict';\n/**\n * @module Progress\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar constants = require('../runner').constants;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_TEST_END = constants.EVENT_TEST_END;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\nvar cursor = Base.cursor;\n\n/**\n * Expose `Progress`.\n */\n\nexports = module.exports = Progress;\n\n/**\n * General progress bar color.\n */\n\nBase.colors.progress = 90;\n\n/**\n * Constructs a new `Progress` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Progress(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var width = (Base.window.width * 0.5) | 0;\n  var total = runner.total;\n  var complete = 0;\n  var lastN = -1;\n\n  // default chars\n  options = options || {};\n  var reporterOptions = options.reporterOptions || {};\n\n  options.open = reporterOptions.open || '[';\n  options.complete = reporterOptions.complete || '▬';\n  options.incomplete = reporterOptions.incomplete || Base.symbols.dot;\n  options.close = reporterOptions.close || ']';\n  options.verbose = reporterOptions.verbose || false;\n\n  // tests started\n  runner.on(EVENT_RUN_BEGIN, function() {\n    console.log();\n    cursor.hide();\n  });\n\n  // tests complete\n  runner.on(EVENT_TEST_END, function() {\n    complete++;\n\n    var percent = complete / total;\n    var n = (width * percent) | 0;\n    var i = width - n;\n\n    if (n === lastN && !options.verbose) {\n      // Don't re-render the line if it hasn't changed\n      return;\n    }\n    lastN = n;\n\n    cursor.CR();\n    process.stdout.write('\\u001b[J');\n    process.stdout.write(color('progress', '  ' + options.open));\n    process.stdout.write(Array(n).join(options.complete));\n    process.stdout.write(Array(i).join(options.incomplete));\n    process.stdout.write(color('progress', options.close));\n    if (options.verbose) {\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));\n    }\n  });\n\n  // tests are complete, output some stats\n  // and the failures if any\n  runner.once(EVENT_RUN_END, function() {\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Progress, Base);\n\nProgress.description = 'a progress bar';\n\n}).call(this,require('_process'))\n},{\"../runner\":34,\"../utils\":38,\"./base\":17,\"_process\":69}],30:[function(require,module,exports){\n'use strict';\n/**\n * @module Spec\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar constants = require('../runner').constants;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;\nvar EVENT_SUITE_END = constants.EVENT_SUITE_END;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\n\n/**\n * Expose `Spec`.\n */\n\nexports = module.exports = Spec;\n\n/**\n * Constructs a new `Spec` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Spec(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var indents = 0;\n  var n = 0;\n\n  function indent() {\n    return Array(indents).join('  ');\n  }\n\n  runner.on(EVENT_RUN_BEGIN, function() {\n    console.log();\n  });\n\n  runner.on(EVENT_SUITE_BEGIN, function(suite) {\n    ++indents;\n    console.log(color('suite', '%s%s'), indent(), suite.title);\n  });\n\n  runner.on(EVENT_SUITE_END, function() {\n    --indents;\n    if (indents === 1) {\n      console.log();\n    }\n  });\n\n  runner.on(EVENT_TEST_PENDING, function(test) {\n    var fmt = indent() + color('pending', '  - %s');\n    console.log(fmt, test.title);\n  });\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    var fmt;\n    if (test.speed === 'fast') {\n      fmt =\n        indent() +\n        color('checkmark', '  ' + Base.symbols.ok) +\n        color('pass', ' %s');\n      console.log(fmt, test.title);\n    } else {\n      fmt =\n        indent() +\n        color('checkmark', '  ' + Base.symbols.ok) +\n        color('pass', ' %s') +\n        color(test.speed, ' (%dms)');\n      console.log(fmt, test.title, test.duration);\n    }\n  });\n\n  runner.on(EVENT_TEST_FAIL, function(test) {\n    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);\n  });\n\n  runner.once(EVENT_RUN_END, self.epilogue.bind(self));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Spec, Base);\n\nSpec.description = 'hierarchical & verbose [default]';\n\n},{\"../runner\":34,\"../utils\":38,\"./base\":17}],31:[function(require,module,exports){\n(function (process){\n'use strict';\n/**\n * @module TAP\n */\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar Base = require('./base');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar EVENT_TEST_END = constants.EVENT_TEST_END;\nvar inherits = require('../utils').inherits;\nvar sprintf = util.format;\n\n/**\n * Expose `TAP`.\n */\n\nexports = module.exports = TAP;\n\n/**\n * Constructs a new `TAP` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction TAP(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var n = 1;\n\n  var tapVersion = '12';\n  if (options && options.reporterOptions) {\n    if (options.reporterOptions.tapVersion) {\n      tapVersion = options.reporterOptions.tapVersion.toString();\n    }\n  }\n\n  this._producer = createProducer(tapVersion);\n\n  runner.once(EVENT_RUN_BEGIN, function() {\n    var ntests = runner.grepTotal(runner.suite);\n    self._producer.writeVersion();\n    self._producer.writePlan(ntests);\n  });\n\n  runner.on(EVENT_TEST_END, function() {\n    ++n;\n  });\n\n  runner.on(EVENT_TEST_PENDING, function(test) {\n    self._producer.writePending(n, test);\n  });\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    self._producer.writePass(n, test);\n  });\n\n  runner.on(EVENT_TEST_FAIL, function(test, err) {\n    self._producer.writeFail(n, test, err);\n  });\n\n  runner.once(EVENT_RUN_END, function() {\n    self._producer.writeEpilogue(runner.stats);\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(TAP, Base);\n\n/**\n * Returns a TAP-safe title of `test`.\n *\n * @private\n * @param {Test} test - Test instance.\n * @return {String} title with any hash character removed\n */\nfunction title(test) {\n  return test.fullTitle().replace(/#/g, '');\n}\n\n/**\n * Writes newline-terminated formatted string to reporter output stream.\n *\n * @private\n * @param {string} format - `printf`-like format string\n * @param {...*} [varArgs] - Format string arguments\n */\nfunction println(format, varArgs) {\n  var vargs = Array.from(arguments);\n  vargs[0] += '\\n';\n  process.stdout.write(sprintf.apply(null, vargs));\n}\n\n/**\n * Returns a `tapVersion`-appropriate TAP producer instance, if possible.\n *\n * @private\n * @param {string} tapVersion - Version of TAP specification to produce.\n * @returns {TAPProducer} specification-appropriate instance\n * @throws {Error} if specification version has no associated producer.\n */\nfunction createProducer(tapVersion) {\n  var producers = {\n    '12': new TAP12Producer(),\n    '13': new TAP13Producer()\n  };\n  var producer = producers[tapVersion];\n\n  if (!producer) {\n    throw new Error(\n      'invalid or unsupported TAP version: ' + JSON.stringify(tapVersion)\n    );\n  }\n\n  return producer;\n}\n\n/**\n * @summary\n * Constructs a new TAPProducer.\n *\n * @description\n * <em>Only</em> to be used as an abstract base class.\n *\n * @private\n * @constructor\n */\nfunction TAPProducer() {}\n\n/**\n * Writes the TAP version to reporter output stream.\n *\n * @abstract\n */\nTAPProducer.prototype.writeVersion = function() {};\n\n/**\n * Writes the plan to reporter output stream.\n *\n * @abstract\n * @param {number} ntests - Number of tests that are planned to run.\n */\nTAPProducer.prototype.writePlan = function(ntests) {\n  println('%d..%d', 1, ntests);\n};\n\n/**\n * Writes that test passed to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that passed.\n * @param {Test} test - Instance containing test information.\n */\nTAPProducer.prototype.writePass = function(n, test) {\n  println('ok %d %s', n, title(test));\n};\n\n/**\n * Writes that test was skipped to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that was skipped.\n * @param {Test} test - Instance containing test information.\n */\nTAPProducer.prototype.writePending = function(n, test) {\n  println('ok %d %s # SKIP -', n, title(test));\n};\n\n/**\n * Writes that test failed to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that failed.\n * @param {Test} test - Instance containing test information.\n * @param {Error} err - Reason the test failed.\n */\nTAPProducer.prototype.writeFail = function(n, test, err) {\n  println('not ok %d %s', n, title(test));\n};\n\n/**\n * Writes the summary epilogue to reporter output stream.\n *\n * @abstract\n * @param {Object} stats - Object containing run statistics.\n */\nTAPProducer.prototype.writeEpilogue = function(stats) {\n  // :TBD: Why is this not counting pending tests?\n  println('# tests ' + (stats.passes + stats.failures));\n  println('# pass ' + stats.passes);\n  // :TBD: Why are we not showing pending results?\n  println('# fail ' + stats.failures);\n};\n\n/**\n * @summary\n * Constructs a new TAP12Producer.\n *\n * @description\n * Produces output conforming to the TAP12 specification.\n *\n * @private\n * @constructor\n * @extends TAPProducer\n * @see {@link https://testanything.org/tap-specification.html|Specification}\n */\nfunction TAP12Producer() {\n  /**\n   * Writes that test failed to reporter output stream, with error formatting.\n   * @override\n   */\n  this.writeFail = function(n, test, err) {\n    TAPProducer.prototype.writeFail.call(this, n, test, err);\n    if (err.message) {\n      println(err.message.replace(/^/gm, '  '));\n    }\n    if (err.stack) {\n      println(err.stack.replace(/^/gm, '  '));\n    }\n  };\n}\n\n/**\n * Inherit from `TAPProducer.prototype`.\n */\ninherits(TAP12Producer, TAPProducer);\n\n/**\n * @summary\n * Constructs a new TAP13Producer.\n *\n * @description\n * Produces output conforming to the TAP13 specification.\n *\n * @private\n * @constructor\n * @extends TAPProducer\n * @see {@link https://testanything.org/tap-version-13-specification.html|Specification}\n */\nfunction TAP13Producer() {\n  /**\n   * Writes the TAP version to reporter output stream.\n   * @override\n   */\n  this.writeVersion = function() {\n    println('TAP version 13');\n  };\n\n  /**\n   * Writes that test failed to reporter output stream, with error formatting.\n   * @override\n   */\n  this.writeFail = function(n, test, err) {\n    TAPProducer.prototype.writeFail.call(this, n, test, err);\n    var emitYamlBlock = err.message != null || err.stack != null;\n    if (emitYamlBlock) {\n      println(indent(1) + '---');\n      if (err.message) {\n        println(indent(2) + 'message: |-');\n        println(err.message.replace(/^/gm, indent(3)));\n      }\n      if (err.stack) {\n        println(indent(2) + 'stack: |-');\n        println(err.stack.replace(/^/gm, indent(3)));\n      }\n      println(indent(1) + '...');\n    }\n  };\n\n  function indent(level) {\n    return Array(level + 1).join('  ');\n  }\n}\n\n/**\n * Inherit from `TAPProducer.prototype`.\n */\ninherits(TAP13Producer, TAPProducer);\n\nTAP.description = 'TAP-compatible output';\n\n}).call(this,require('_process'))\n},{\"../runner\":34,\"../utils\":38,\"./base\":17,\"_process\":69,\"util\":89}],32:[function(require,module,exports){\n(function (process,global){\n'use strict';\n/**\n * @module XUnit\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar errors = require('../errors');\nvar createUnsupportedError = errors.createUnsupportedError;\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar STATE_FAILED = require('../runnable').constants.STATE_FAILED;\nvar inherits = utils.inherits;\nvar escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\nvar Date = global.Date;\n\n/**\n * Expose `XUnit`.\n */\n\nexports = module.exports = XUnit;\n\n/**\n * Constructs a new `XUnit` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction XUnit(runner, options) {\n  Base.call(this, runner, options);\n\n  var stats = this.stats;\n  var tests = [];\n  var self = this;\n\n  // the name of the test suite, as it will appear in the resulting XML file\n  var suiteName;\n\n  // the default name of the test suite if none is provided\n  var DEFAULT_SUITE_NAME = 'Mocha Tests';\n\n  if (options && options.reporterOptions) {\n    if (options.reporterOptions.output) {\n      if (!fs.createWriteStream) {\n        throw createUnsupportedError('file output not supported in browser');\n      }\n\n      mkdirp.sync(path.dirname(options.reporterOptions.output));\n      self.fileStream = fs.createWriteStream(options.reporterOptions.output);\n    }\n\n    // get the suite name from the reporter options (if provided)\n    suiteName = options.reporterOptions.suiteName;\n  }\n\n  // fall back to the default suite name\n  suiteName = suiteName || DEFAULT_SUITE_NAME;\n\n  runner.on(EVENT_TEST_PENDING, function(test) {\n    tests.push(test);\n  });\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    tests.push(test);\n  });\n\n  runner.on(EVENT_TEST_FAIL, function(test) {\n    tests.push(test);\n  });\n\n  runner.once(EVENT_RUN_END, function() {\n    self.write(\n      tag(\n        'testsuite',\n        {\n          name: suiteName,\n          tests: stats.tests,\n          failures: 0,\n          errors: stats.failures,\n          skipped: stats.tests - stats.failures - stats.passes,\n          timestamp: new Date().toUTCString(),\n          time: stats.duration / 1000 || 0\n        },\n        false\n      )\n    );\n\n    tests.forEach(function(t) {\n      self.test(t);\n    });\n\n    self.write('</testsuite>');\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(XUnit, Base);\n\n/**\n * Override done to close the stream (if it's a file).\n *\n * @param failures\n * @param {Function} fn\n */\nXUnit.prototype.done = function(failures, fn) {\n  if (this.fileStream) {\n    this.fileStream.end(function() {\n      fn(failures);\n    });\n  } else {\n    fn(failures);\n  }\n};\n\n/**\n * Write out the given line.\n *\n * @param {string} line\n */\nXUnit.prototype.write = function(line) {\n  if (this.fileStream) {\n    this.fileStream.write(line + '\\n');\n  } else if (typeof process === 'object' && process.stdout) {\n    process.stdout.write(line + '\\n');\n  } else {\n    console.log(line);\n  }\n};\n\n/**\n * Output tag for the given `test.`\n *\n * @param {Test} test\n */\nXUnit.prototype.test = function(test) {\n  Base.useColors = false;\n\n  var attrs = {\n    classname: test.parent.fullTitle(),\n    name: test.title,\n    time: test.duration / 1000 || 0\n  };\n\n  if (test.state === STATE_FAILED) {\n    var err = test.err;\n    var diff =\n      Base.hideDiff || !err.actual || !err.expected\n        ? ''\n        : '\\n' + Base.generateDiff(err.actual, err.expected);\n    this.write(\n      tag(\n        'testcase',\n        attrs,\n        false,\n        tag(\n          'failure',\n          {},\n          false,\n          escape(err.message) + escape(diff) + '\\n' + escape(err.stack)\n        )\n      )\n    );\n  } else if (test.isPending()) {\n    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));\n  } else {\n    this.write(tag('testcase', attrs, true));\n  }\n};\n\n/**\n * HTML tag helper.\n *\n * @param name\n * @param attrs\n * @param close\n * @param content\n * @return {string}\n */\nfunction tag(name, attrs, close, content) {\n  var end = close ? '/>' : '>';\n  var pairs = [];\n  var tag;\n\n  for (var key in attrs) {\n    if (Object.prototype.hasOwnProperty.call(attrs, key)) {\n      pairs.push(key + '=\"' + escape(attrs[key]) + '\"');\n    }\n  }\n\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;\n  if (content) {\n    tag += content + '</' + name + end;\n  }\n  return tag;\n}\n\nXUnit.description = 'XUnit-compatible XML output';\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../errors\":6,\"../runnable\":33,\"../runner\":34,\"../utils\":38,\"./base\":17,\"_process\":69,\"fs\":42,\"mkdirp\":59,\"path\":42}],33:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar Pending = require('./pending');\nvar debug = require('debug')('mocha:runnable');\nvar milliseconds = require('ms');\nvar utils = require('./utils');\nvar createInvalidExceptionError = require('./errors')\n  .createInvalidExceptionError;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar clearTimeout = global.clearTimeout;\nvar toString = Object.prototype.toString;\n\nmodule.exports = Runnable;\n\n/**\n * Initialize a new `Runnable` with the given `title` and callback `fn`.\n *\n * @class\n * @extends external:EventEmitter\n * @public\n * @param {String} title\n * @param {Function} fn\n */\nfunction Runnable(title, fn) {\n  this.title = title;\n  this.fn = fn;\n  this.body = (fn || '').toString();\n  this.async = fn && fn.length;\n  this.sync = !this.async;\n  this._timeout = 2000;\n  this._slow = 75;\n  this._enableTimeouts = true;\n  this.timedOut = false;\n  this._retries = -1;\n  this._currentRetry = 0;\n  this.pending = false;\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\nutils.inherits(Runnable, EventEmitter);\n\n/**\n * Get current timeout value in msecs.\n *\n * @private\n * @returns {number} current timeout threshold value\n */\n/**\n * @summary\n * Set timeout threshold value (msecs).\n *\n * @description\n * A string argument can use shorthand (e.g., \"2s\") and will be converted.\n * The value will be clamped to range [<code>0</code>, <code>2^<sup>31</sup>-1</code>].\n * If clamped value matches either range endpoint, timeouts will be disabled.\n *\n * @private\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum_delay_value}\n * @param {number|string} ms - Timeout threshold value.\n * @returns {Runnable} this\n * @chainable\n */\nRunnable.prototype.timeout = function(ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n\n  // Clamp to range\n  var INT_MAX = Math.pow(2, 31) - 1;\n  var range = [0, INT_MAX];\n  ms = utils.clamp(ms, range);\n\n  // see #1652 for reasoning\n  if (ms === range[0] || ms === range[1]) {\n    this._enableTimeouts = false;\n  }\n  debug('timeout %d', ms);\n  this._timeout = ms;\n  if (this.timer) {\n    this.resetTimeout();\n  }\n  return this;\n};\n\n/**\n * Set or get slow `ms`.\n *\n * @private\n * @param {number|string} ms\n * @return {Runnable|number} ms or Runnable instance.\n */\nRunnable.prototype.slow = function(ms) {\n  if (!arguments.length || typeof ms === 'undefined') {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Set and get whether timeout is `enabled`.\n *\n * @private\n * @param {boolean} enabled\n * @return {Runnable|boolean} enabled or Runnable instance.\n */\nRunnable.prototype.enableTimeouts = function(enabled) {\n  if (!arguments.length) {\n    return this._enableTimeouts;\n  }\n  debug('enableTimeouts %s', enabled);\n  this._enableTimeouts = enabled;\n  return this;\n};\n\n/**\n * Halt and mark as pending.\n *\n * @memberof Mocha.Runnable\n * @public\n */\nRunnable.prototype.skip = function() {\n  throw new Pending('sync skip');\n};\n\n/**\n * Check if this runnable or its parent suite is marked as pending.\n *\n * @private\n */\nRunnable.prototype.isPending = function() {\n  return this.pending || (this.parent && this.parent.isPending());\n};\n\n/**\n * Return `true` if this Runnable has failed.\n * @return {boolean}\n * @private\n */\nRunnable.prototype.isFailed = function() {\n  return !this.isPending() && this.state === constants.STATE_FAILED;\n};\n\n/**\n * Return `true` if this Runnable has passed.\n * @return {boolean}\n * @private\n */\nRunnable.prototype.isPassed = function() {\n  return !this.isPending() && this.state === constants.STATE_PASSED;\n};\n\n/**\n * Set or get number of retries.\n *\n * @private\n */\nRunnable.prototype.retries = function(n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n  this._retries = n;\n};\n\n/**\n * Set or get current retry\n *\n * @private\n */\nRunnable.prototype.currentRetry = function(n) {\n  if (!arguments.length) {\n    return this._currentRetry;\n  }\n  this._currentRetry = n;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @memberof Mocha.Runnable\n * @public\n * @return {string}\n */\nRunnable.prototype.fullTitle = function() {\n  return this.titlePath().join(' ');\n};\n\n/**\n * Return the title path generated by concatenating the parent's title path with the title.\n *\n * @memberof Mocha.Runnable\n * @public\n * @return {string}\n */\nRunnable.prototype.titlePath = function() {\n  return this.parent.titlePath().concat([this.title]);\n};\n\n/**\n * Clear the timeout.\n *\n * @private\n */\nRunnable.prototype.clearTimeout = function() {\n  clearTimeout(this.timer);\n};\n\n/**\n * Inspect the runnable void of private properties.\n *\n * @private\n * @return {string}\n */\nRunnable.prototype.inspect = function() {\n  return JSON.stringify(\n    this,\n    function(key, val) {\n      if (key[0] === '_') {\n        return;\n      }\n      if (key === 'parent') {\n        return '#<Suite>';\n      }\n      if (key === 'ctx') {\n        return '#<Context>';\n      }\n      return val;\n    },\n    2\n  );\n};\n\n/**\n * Reset the timeout.\n *\n * @private\n */\nRunnable.prototype.resetTimeout = function() {\n  var self = this;\n  var ms = this.timeout() || 1e9;\n\n  if (!this._enableTimeouts) {\n    return;\n  }\n  this.clearTimeout();\n  this.timer = setTimeout(function() {\n    if (!self._enableTimeouts) {\n      return;\n    }\n    self.callback(self._timeoutError(ms));\n    self.timedOut = true;\n  }, ms);\n};\n\n/**\n * Set or get a list of whitelisted globals for this test run.\n *\n * @private\n * @param {string[]} globals\n */\nRunnable.prototype.globals = function(globals) {\n  if (!arguments.length) {\n    return this._allowedGlobals;\n  }\n  this._allowedGlobals = globals;\n};\n\n/**\n * Run the test and invoke `fn(err)`.\n *\n * @param {Function} fn\n * @private\n */\nRunnable.prototype.run = function(fn) {\n  var self = this;\n  var start = new Date();\n  var ctx = this.ctx;\n  var finished;\n  var emitted;\n\n  // Sometimes the ctx exists, but it is not runnable\n  if (ctx && ctx.runnable) {\n    ctx.runnable(this);\n  }\n\n  // called multiple times\n  function multiple(err) {\n    if (emitted) {\n      return;\n    }\n    emitted = true;\n    var msg = 'done() called multiple times';\n    if (err && err.message) {\n      err.message += \" (and Mocha's \" + msg + ')';\n      self.emit('error', err);\n    } else {\n      self.emit('error', new Error(msg));\n    }\n  }\n\n  // finished\n  function done(err) {\n    var ms = self.timeout();\n    if (self.timedOut) {\n      return;\n    }\n\n    if (finished) {\n      return multiple(err);\n    }\n\n    self.clearTimeout();\n    self.duration = new Date() - start;\n    finished = true;\n    if (!err && self.duration > ms && self._enableTimeouts) {\n      err = self._timeoutError(ms);\n    }\n    fn(err);\n  }\n\n  // for .resetTimeout()\n  this.callback = done;\n\n  // explicit async with `done` argument\n  if (this.async) {\n    this.resetTimeout();\n\n    // allows skip() to be used in an explicit async context\n    this.skip = function asyncSkip() {\n      done(new Pending('async skip call'));\n      // halt execution.  the Runnable will be marked pending\n      // by the previous call, and the uncaught handler will ignore\n      // the failure.\n      throw new Pending('async skip; aborting execution');\n    };\n\n    if (this.allowUncaught) {\n      return callFnAsync(this.fn);\n    }\n    try {\n      callFnAsync(this.fn);\n    } catch (err) {\n      emitted = true;\n      done(Runnable.toValueOrError(err));\n    }\n    return;\n  }\n\n  if (this.allowUncaught) {\n    if (this.isPending()) {\n      done();\n    } else {\n      callFn(this.fn);\n    }\n    return;\n  }\n\n  // sync or promise-returning\n  try {\n    if (this.isPending()) {\n      done();\n    } else {\n      callFn(this.fn);\n    }\n  } catch (err) {\n    emitted = true;\n    done(Runnable.toValueOrError(err));\n  }\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn about\n          // subsequently constructed Promises.\n          return null;\n        },\n        function(reason) {\n          done(reason || new Error('Promise rejected with no or falsy reason'));\n        }\n      );\n    } else {\n      if (self.asyncOnly) {\n        return done(\n          new Error(\n            '--async-only option in use without declaring `done()` or returning a promise'\n          )\n        );\n      }\n\n      done();\n    }\n  }\n\n  function callFnAsync(fn) {\n    var result = fn.call(ctx, function(err) {\n      if (err instanceof Error || toString.call(err) === '[object Error]') {\n        return done(err);\n      }\n      if (err) {\n        if (Object.prototype.toString.call(err) === '[object Object]') {\n          return done(\n            new Error('done() invoked with non-Error: ' + JSON.stringify(err))\n          );\n        }\n        return done(new Error('done() invoked with non-Error: ' + err));\n      }\n      if (result && utils.isPromise(result)) {\n        return done(\n          new Error(\n            'Resolution method is overspecified. Specify a callback *or* return a Promise; not both.'\n          )\n        );\n      }\n\n      done();\n    });\n  }\n};\n\n/**\n * Instantiates a \"timeout\" error\n *\n * @param {number} ms - Timeout (in milliseconds)\n * @returns {Error} a \"timeout\" error\n * @private\n */\nRunnable.prototype._timeoutError = function(ms) {\n  var msg =\n    'Timeout of ' +\n    ms +\n    'ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.';\n  if (this.file) {\n    msg += ' (' + this.file + ')';\n  }\n  return new Error(msg);\n};\n\nvar constants = utils.defineConstants(\n  /**\n   * {@link Runnable}-related constants.\n   * @public\n   * @memberof Runnable\n   * @readonly\n   * @static\n   * @alias constants\n   * @enum {string}\n   */\n  {\n    /**\n     * Value of `state` prop when a `Runnable` has failed\n     */\n    STATE_FAILED: 'failed',\n    /**\n     * Value of `state` prop when a `Runnable` has passed\n     */\n    STATE_PASSED: 'passed'\n  }\n);\n\n/**\n * Given `value`, return identity if truthy, otherwise create an \"invalid exception\" error and return that.\n * @param {*} [value] - Value to return, if present\n * @returns {*|Error} `value`, otherwise an `Error`\n * @private\n */\nRunnable.toValueOrError = function(value) {\n  return (\n    value ||\n    createInvalidExceptionError(\n      'Runnable failed with falsy or undefined exception. Please throw an Error instead.',\n      value\n    )\n  );\n};\n\nRunnable.constants = constants;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./errors\":6,\"./pending\":16,\"./utils\":38,\"debug\":45,\"events\":50,\"ms\":60}],34:[function(require,module,exports){\n(function (process,global){\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar Pending = require('./pending');\nvar utils = require('./utils');\nvar inherits = utils.inherits;\nvar debug = require('debug')('mocha:runner');\nvar Runnable = require('./runnable');\nvar Suite = require('./suite');\nvar HOOK_TYPE_BEFORE_EACH = Suite.constants.HOOK_TYPE_BEFORE_EACH;\nvar HOOK_TYPE_AFTER_EACH = Suite.constants.HOOK_TYPE_AFTER_EACH;\nvar HOOK_TYPE_AFTER_ALL = Suite.constants.HOOK_TYPE_AFTER_ALL;\nvar HOOK_TYPE_BEFORE_ALL = Suite.constants.HOOK_TYPE_BEFORE_ALL;\nvar EVENT_ROOT_SUITE_RUN = Suite.constants.EVENT_ROOT_SUITE_RUN;\nvar STATE_FAILED = Runnable.constants.STATE_FAILED;\nvar STATE_PASSED = Runnable.constants.STATE_PASSED;\nvar dQuote = utils.dQuote;\nvar ngettext = utils.ngettext;\nvar sQuote = utils.sQuote;\nvar stackFilter = utils.stackTraceFilter();\nvar stringify = utils.stringify;\nvar type = utils.type;\nvar createInvalidExceptionError = require('./errors')\n  .createInvalidExceptionError;\n\n/**\n * Non-enumerable globals.\n * @readonly\n */\nvar globals = [\n  'setTimeout',\n  'clearTimeout',\n  'setInterval',\n  'clearInterval',\n  'XMLHttpRequest',\n  'Date',\n  'setImmediate',\n  'clearImmediate'\n];\n\nvar constants = utils.defineConstants(\n  /**\n   * {@link Runner}-related constants.\n   * @public\n   * @memberof Runner\n   * @readonly\n   * @alias constants\n   * @static\n   * @enum {string}\n   */\n  {\n    /**\n     * Emitted when {@link Hook} execution begins\n     */\n    EVENT_HOOK_BEGIN: 'hook',\n    /**\n     * Emitted when {@link Hook} execution ends\n     */\n    EVENT_HOOK_END: 'hook end',\n    /**\n     * Emitted when Root {@link Suite} execution begins (all files have been parsed and hooks/tests are ready for execution)\n     */\n    EVENT_RUN_BEGIN: 'start',\n    /**\n     * Emitted when Root {@link Suite} execution has been delayed via `delay` option\n     */\n    EVENT_DELAY_BEGIN: 'waiting',\n    /**\n     * Emitted when delayed Root {@link Suite} execution is triggered by user via `global.run()`\n     */\n    EVENT_DELAY_END: 'ready',\n    /**\n     * Emitted when Root {@link Suite} execution ends\n     */\n    EVENT_RUN_END: 'end',\n    /**\n     * Emitted when {@link Suite} execution begins\n     */\n    EVENT_SUITE_BEGIN: 'suite',\n    /**\n     * Emitted when {@link Suite} execution ends\n     */\n    EVENT_SUITE_END: 'suite end',\n    /**\n     * Emitted when {@link Test} execution begins\n     */\n    EVENT_TEST_BEGIN: 'test',\n    /**\n     * Emitted when {@link Test} execution ends\n     */\n    EVENT_TEST_END: 'test end',\n    /**\n     * Emitted when {@link Test} execution fails\n     */\n    EVENT_TEST_FAIL: 'fail',\n    /**\n     * Emitted when {@link Test} execution succeeds\n     */\n    EVENT_TEST_PASS: 'pass',\n    /**\n     * Emitted when {@link Test} becomes pending\n     */\n    EVENT_TEST_PENDING: 'pending',\n    /**\n     * Emitted when {@link Test} execution has failed, but will retry\n     */\n    EVENT_TEST_RETRY: 'retry'\n  }\n);\n\nmodule.exports = Runner;\n\n/**\n * Initialize a `Runner` at the Root {@link Suite}, which represents a hierarchy of {@link Suite|Suites} and {@link Test|Tests}.\n *\n * @extends external:EventEmitter\n * @public\n * @class\n * @param {Suite} suite Root suite\n * @param {boolean} [delay] Whether or not to delay execution of root suite\n * until ready.\n */\nfunction Runner(suite, delay) {\n  var self = this;\n  this._globals = [];\n  this._abort = false;\n  this._delay = delay;\n  this.suite = suite;\n  this.started = false;\n  this.total = suite.total();\n  this.failures = 0;\n  this.on(constants.EVENT_TEST_END, function(test) {\n    self.checkGlobals(test);\n  });\n  this.on(constants.EVENT_HOOK_END, function(hook) {\n    self.checkGlobals(hook);\n  });\n  this._defaultGrep = /.*/;\n  this.grep(this._defaultGrep);\n  this.globals(this.globalProps().concat(extraGlobals()));\n}\n\n/**\n * Wrapper for setImmediate, process.nextTick, or browser polyfill.\n *\n * @param {Function} fn\n * @private\n */\nRunner.immediately = global.setImmediate || process.nextTick;\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\ninherits(Runner, EventEmitter);\n\n/**\n * Run tests with full titles matching `re`. Updates runner.total\n * with number of tests matched.\n *\n * @public\n * @memberof Runner\n * @param {RegExp} re\n * @param {boolean} invert\n * @return {Runner} Runner instance.\n */\nRunner.prototype.grep = function(re, invert) {\n  debug('grep %s', re);\n  this._grep = re;\n  this._invert = invert;\n  this.total = this.grepTotal(this.suite);\n  return this;\n};\n\n/**\n * Returns the number of tests matching the grep search for the\n * given suite.\n *\n * @memberof Runner\n * @public\n * @param {Suite} suite\n * @return {number}\n */\nRunner.prototype.grepTotal = function(suite) {\n  var self = this;\n  var total = 0;\n\n  suite.eachTest(function(test) {\n    var match = self._grep.test(test.fullTitle());\n    if (self._invert) {\n      match = !match;\n    }\n    if (match) {\n      total++;\n    }\n  });\n\n  return total;\n};\n\n/**\n * Return a list of global properties.\n *\n * @return {Array}\n * @private\n */\nRunner.prototype.globalProps = function() {\n  var props = Object.keys(global);\n\n  // non-enumerables\n  for (var i = 0; i < globals.length; ++i) {\n    if (~props.indexOf(globals[i])) {\n      continue;\n    }\n    props.push(globals[i]);\n  }\n\n  return props;\n};\n\n/**\n * Allow the given `arr` of globals.\n *\n * @public\n * @memberof Runner\n * @param {Array} arr\n * @return {Runner} Runner instance.\n */\nRunner.prototype.globals = function(arr) {\n  if (!arguments.length) {\n    return this._globals;\n  }\n  debug('globals %j', arr);\n  this._globals = this._globals.concat(arr);\n  return this;\n};\n\n/**\n * Check for global variable leaks.\n *\n * @private\n */\nRunner.prototype.checkGlobals = function(test) {\n  if (this.ignoreLeaks) {\n    return;\n  }\n  var ok = this._globals;\n\n  var globals = this.globalProps();\n  var leaks;\n\n  if (test) {\n    ok = ok.concat(test._allowedGlobals || []);\n  }\n\n  if (this.prevGlobalsLength === globals.length) {\n    return;\n  }\n  this.prevGlobalsLength = globals.length;\n\n  leaks = filterLeaks(ok, globals);\n  this._globals = this._globals.concat(leaks);\n\n  if (leaks.length) {\n    var format = ngettext(\n      leaks.length,\n      'global leak detected: %s',\n      'global leaks detected: %s'\n    );\n    var error = new Error(util.format(format, leaks.map(sQuote).join(', ')));\n    this.fail(test, error);\n  }\n};\n\n/**\n * Fail the given `test`.\n *\n * @private\n * @param {Test} test\n * @param {Error} err\n */\nRunner.prototype.fail = function(test, err) {\n  if (test.isPending()) {\n    return;\n  }\n\n  ++this.failures;\n  test.state = STATE_FAILED;\n\n  if (!isError(err)) {\n    err = thrown2Error(err);\n  }\n\n  try {\n    err.stack =\n      this.fullStackTrace || !err.stack ? err.stack : stackFilter(err.stack);\n  } catch (ignore) {\n    // some environments do not take kindly to monkeying with the stack\n  }\n\n  this.emit(constants.EVENT_TEST_FAIL, test, err);\n};\n\n/**\n * Fail the given `hook` with `err`.\n *\n * Hook failures work in the following pattern:\n * - If bail, run corresponding `after each` and `after` hooks,\n *   then exit\n * - Failed `before` hook skips all tests in a suite and subsuites,\n *   but jumps to corresponding `after` hook\n * - Failed `before each` hook skips remaining tests in a\n *   suite and jumps to corresponding `after each` hook,\n *   which is run only once\n * - Failed `after` hook does not alter\n *   execution order\n * - Failed `after each` hook skips remaining tests in a\n *   suite and subsuites, but executes other `after each`\n *   hooks\n *\n * @private\n * @param {Hook} hook\n * @param {Error} err\n */\nRunner.prototype.failHook = function(hook, err) {\n  hook.originalTitle = hook.originalTitle || hook.title;\n  if (hook.ctx && hook.ctx.currentTest) {\n    hook.title =\n      hook.originalTitle + ' for ' + dQuote(hook.ctx.currentTest.title);\n  } else {\n    var parentTitle;\n    if (hook.parent.title) {\n      parentTitle = hook.parent.title;\n    } else {\n      parentTitle = hook.parent.root ? '{root}' : '';\n    }\n    hook.title = hook.originalTitle + ' in ' + dQuote(parentTitle);\n  }\n\n  this.fail(hook, err);\n};\n\n/**\n * Run hook `name` callbacks and then invoke `fn()`.\n *\n * @private\n * @param {string} name\n * @param {Function} fn\n */\n\nRunner.prototype.hook = function(name, fn) {\n  var suite = this.suite;\n  var hooks = suite.getHooks(name);\n  var self = this;\n\n  function next(i) {\n    var hook = hooks[i];\n    if (!hook) {\n      return fn();\n    }\n    self.currentRunnable = hook;\n\n    if (name === HOOK_TYPE_BEFORE_ALL) {\n      hook.ctx.currentTest = hook.parent.tests[0];\n    } else if (name === HOOK_TYPE_AFTER_ALL) {\n      hook.ctx.currentTest = hook.parent.tests[hook.parent.tests.length - 1];\n    } else {\n      hook.ctx.currentTest = self.test;\n    }\n\n    hook.allowUncaught = self.allowUncaught;\n\n    self.emit(constants.EVENT_HOOK_BEGIN, hook);\n\n    if (!hook.listeners('error').length) {\n      hook.on('error', function(err) {\n        self.failHook(hook, err);\n      });\n    }\n\n    hook.run(function(err) {\n      var testError = hook.error();\n      if (testError) {\n        self.fail(self.test, testError);\n      }\n      if (err) {\n        if (err instanceof Pending) {\n          if (name === HOOK_TYPE_AFTER_ALL) {\n            utils.deprecate(\n              'Skipping a test within an \"after all\" hook is DEPRECATED and will throw an exception in a future version of Mocha. ' +\n                'Use a return statement or other means to abort hook execution.'\n            );\n          }\n          if (name === HOOK_TYPE_BEFORE_EACH || name === HOOK_TYPE_AFTER_EACH) {\n            if (self.test) {\n              self.test.pending = true;\n            }\n          } else {\n            suite.tests.forEach(function(test) {\n              test.pending = true;\n            });\n            suite.suites.forEach(function(suite) {\n              suite.pending = true;\n            });\n            // a pending hook won't be executed twice.\n            hook.pending = true;\n          }\n        } else {\n          self.failHook(hook, err);\n\n          // stop executing hooks, notify callee of hook err\n          return fn(err);\n        }\n      }\n      self.emit(constants.EVENT_HOOK_END, hook);\n      delete hook.ctx.currentTest;\n      next(++i);\n    });\n  }\n\n  Runner.immediately(function() {\n    next(0);\n  });\n};\n\n/**\n * Run hook `name` for the given array of `suites`\n * in order, and callback `fn(err, errSuite)`.\n *\n * @private\n * @param {string} name\n * @param {Array} suites\n * @param {Function} fn\n */\nRunner.prototype.hooks = function(name, suites, fn) {\n  var self = this;\n  var orig = this.suite;\n\n  function next(suite) {\n    self.suite = suite;\n\n    if (!suite) {\n      self.suite = orig;\n      return fn();\n    }\n\n    self.hook(name, function(err) {\n      if (err) {\n        var errSuite = self.suite;\n        self.suite = orig;\n        return fn(err, errSuite);\n      }\n\n      next(suites.pop());\n    });\n  }\n\n  next(suites.pop());\n};\n\n/**\n * Run hooks from the top level down.\n *\n * @param {String} name\n * @param {Function} fn\n * @private\n */\nRunner.prototype.hookUp = function(name, fn) {\n  var suites = [this.suite].concat(this.parents()).reverse();\n  this.hooks(name, suites, fn);\n};\n\n/**\n * Run hooks from the bottom up.\n *\n * @param {String} name\n * @param {Function} fn\n * @private\n */\nRunner.prototype.hookDown = function(name, fn) {\n  var suites = [this.suite].concat(this.parents());\n  this.hooks(name, suites, fn);\n};\n\n/**\n * Return an array of parent Suites from\n * closest to furthest.\n *\n * @return {Array}\n * @private\n */\nRunner.prototype.parents = function() {\n  var suite = this.suite;\n  var suites = [];\n  while (suite.parent) {\n    suite = suite.parent;\n    suites.push(suite);\n  }\n  return suites;\n};\n\n/**\n * Run the current test and callback `fn(err)`.\n *\n * @param {Function} fn\n * @private\n */\nRunner.prototype.runTest = function(fn) {\n  var self = this;\n  var test = this.test;\n\n  if (!test) {\n    return;\n  }\n\n  var suite = this.parents().reverse()[0] || this.suite;\n  if (this.forbidOnly && suite.hasOnly()) {\n    fn(new Error('`.only` forbidden'));\n    return;\n  }\n  if (this.asyncOnly) {\n    test.asyncOnly = true;\n  }\n  test.on('error', function(err) {\n    self.fail(test, err);\n  });\n  if (this.allowUncaught) {\n    test.allowUncaught = true;\n    return test.run(fn);\n  }\n  try {\n    test.run(fn);\n  } catch (err) {\n    fn(err);\n  }\n};\n\n/**\n * Run tests in the given `suite` and invoke the callback `fn()` when complete.\n *\n * @private\n * @param {Suite} suite\n * @param {Function} fn\n */\nRunner.prototype.runTests = function(suite, fn) {\n  var self = this;\n  var tests = suite.tests.slice();\n  var test;\n\n  function hookErr(_, errSuite, after) {\n    // before/after Each hook for errSuite failed:\n    var orig = self.suite;\n\n    // for failed 'after each' hook start from errSuite parent,\n    // otherwise start from errSuite itself\n    self.suite = after ? errSuite.parent : errSuite;\n\n    if (self.suite) {\n      // call hookUp afterEach\n      self.hookUp(HOOK_TYPE_AFTER_EACH, function(err2, errSuite2) {\n        self.suite = orig;\n        // some hooks may fail even now\n        if (err2) {\n          return hookErr(err2, errSuite2, true);\n        }\n        // report error suite\n        fn(errSuite);\n      });\n    } else {\n      // there is no need calling other 'after each' hooks\n      self.suite = orig;\n      fn(errSuite);\n    }\n  }\n\n  function next(err, errSuite) {\n    // if we bail after first err\n    if (self.failures && suite._bail) {\n      tests = [];\n    }\n\n    if (self._abort) {\n      return fn();\n    }\n\n    if (err) {\n      return hookErr(err, errSuite, true);\n    }\n\n    // next test\n    test = tests.shift();\n\n    // all done\n    if (!test) {\n      return fn();\n    }\n\n    // grep\n    var match = self._grep.test(test.fullTitle());\n    if (self._invert) {\n      match = !match;\n    }\n    if (!match) {\n      // Run immediately only if we have defined a grep. When we\n      // define a grep — It can cause maximum callstack error if\n      // the grep is doing a large recursive loop by neglecting\n      // all tests. The run immediately function also comes with\n      // a performance cost. So we don't want to run immediately\n      // if we run the whole test suite, because running the whole\n      // test suite don't do any immediate recursive loops. Thus,\n      // allowing a JS runtime to breathe.\n      if (self._grep !== self._defaultGrep) {\n        Runner.immediately(next);\n      } else {\n        next();\n      }\n      return;\n    }\n\n    if (test.isPending()) {\n      if (self.forbidPending) {\n        test.isPending = alwaysFalse;\n        self.fail(test, new Error('Pending test forbidden'));\n        delete test.isPending;\n      } else {\n        self.emit(constants.EVENT_TEST_PENDING, test);\n      }\n      self.emit(constants.EVENT_TEST_END, test);\n      return next();\n    }\n\n    // execute test and hook(s)\n    self.emit(constants.EVENT_TEST_BEGIN, (self.test = test));\n    self.hookDown(HOOK_TYPE_BEFORE_EACH, function(err, errSuite) {\n      if (test.isPending()) {\n        if (self.forbidPending) {\n          test.isPending = alwaysFalse;\n          self.fail(test, new Error('Pending test forbidden'));\n          delete test.isPending;\n        } else {\n          self.emit(constants.EVENT_TEST_PENDING, test);\n        }\n        self.emit(constants.EVENT_TEST_END, test);\n        return next();\n      }\n      if (err) {\n        return hookErr(err, errSuite, false);\n      }\n      self.currentRunnable = self.test;\n      self.runTest(function(err) {\n        test = self.test;\n        if (err) {\n          var retry = test.currentRetry();\n          if (err instanceof Pending && self.forbidPending) {\n            self.fail(test, new Error('Pending test forbidden'));\n          } else if (err instanceof Pending) {\n            test.pending = true;\n            self.emit(constants.EVENT_TEST_PENDING, test);\n          } else if (retry < test.retries()) {\n            var clonedTest = test.clone();\n            clonedTest.currentRetry(retry + 1);\n            tests.unshift(clonedTest);\n\n            self.emit(constants.EVENT_TEST_RETRY, test, err);\n\n            // Early return + hook trigger so that it doesn't\n            // increment the count wrong\n            return self.hookUp(HOOK_TYPE_AFTER_EACH, next);\n          } else {\n            self.fail(test, err);\n          }\n          self.emit(constants.EVENT_TEST_END, test);\n\n          if (err instanceof Pending) {\n            return next();\n          }\n\n          return self.hookUp(HOOK_TYPE_AFTER_EACH, next);\n        }\n\n        test.state = STATE_PASSED;\n        self.emit(constants.EVENT_TEST_PASS, test);\n        self.emit(constants.EVENT_TEST_END, test);\n        self.hookUp(HOOK_TYPE_AFTER_EACH, next);\n      });\n    });\n  }\n\n  this.next = next;\n  this.hookErr = hookErr;\n  next();\n};\n\nfunction alwaysFalse() {\n  return false;\n}\n\n/**\n * Run the given `suite` and invoke the callback `fn()` when complete.\n *\n * @private\n * @param {Suite} suite\n * @param {Function} fn\n */\nRunner.prototype.runSuite = function(suite, fn) {\n  var i = 0;\n  var self = this;\n  var total = this.grepTotal(suite);\n  var afterAllHookCalled = false;\n\n  debug('run suite %s', suite.fullTitle());\n\n  if (!total || (self.failures && suite._bail)) {\n    return fn();\n  }\n\n  this.emit(constants.EVENT_SUITE_BEGIN, (this.suite = suite));\n\n  function next(errSuite) {\n    if (errSuite) {\n      // current suite failed on a hook from errSuite\n      if (errSuite === suite) {\n        // if errSuite is current suite\n        // continue to the next sibling suite\n        return done();\n      }\n      // errSuite is among the parents of current suite\n      // stop execution of errSuite and all sub-suites\n      return done(errSuite);\n    }\n\n    if (self._abort) {\n      return done();\n    }\n\n    var curr = suite.suites[i++];\n    if (!curr) {\n      return done();\n    }\n\n    // Avoid grep neglecting large number of tests causing a\n    // huge recursive loop and thus a maximum call stack error.\n    // See comment in `this.runTests()` for more information.\n    if (self._grep !== self._defaultGrep) {\n      Runner.immediately(function() {\n        self.runSuite(curr, next);\n      });\n    } else {\n      self.runSuite(curr, next);\n    }\n  }\n\n  function done(errSuite) {\n    self.suite = suite;\n    self.nextSuite = next;\n\n    if (afterAllHookCalled) {\n      fn(errSuite);\n    } else {\n      // mark that the afterAll block has been called once\n      // and so can be skipped if there is an error in it.\n      afterAllHookCalled = true;\n\n      // remove reference to test\n      delete self.test;\n\n      self.hook(HOOK_TYPE_AFTER_ALL, function() {\n        self.emit(constants.EVENT_SUITE_END, suite);\n        fn(errSuite);\n      });\n    }\n  }\n\n  this.nextSuite = next;\n\n  this.hook(HOOK_TYPE_BEFORE_ALL, function(err) {\n    if (err) {\n      return done();\n    }\n    self.runTests(suite, next);\n  });\n};\n\n/**\n * Handle uncaught exceptions.\n *\n * @param {Error} err\n * @private\n */\nRunner.prototype.uncaught = function(err) {\n  if (err instanceof Pending) {\n    return;\n  }\n  if (err) {\n    debug('uncaught exception %O', err);\n  } else {\n    debug('uncaught undefined/falsy exception');\n    err = createInvalidExceptionError(\n      'Caught falsy/undefined exception which would otherwise be uncaught. No stack trace found; try a debugger',\n      err\n    );\n  }\n\n  if (!isError(err)) {\n    err = thrown2Error(err);\n  }\n  err.uncaught = true;\n\n  var runnable = this.currentRunnable;\n\n  if (!runnable) {\n    runnable = new Runnable('Uncaught error outside test suite');\n    runnable.parent = this.suite;\n\n    if (this.started) {\n      this.fail(runnable, err);\n    } else {\n      // Can't recover from this failure\n      this.emit(constants.EVENT_RUN_BEGIN);\n      this.fail(runnable, err);\n      this.emit(constants.EVENT_RUN_END);\n    }\n\n    return;\n  }\n\n  runnable.clearTimeout();\n\n  // Ignore errors if already failed or pending\n  // See #3226\n  if (runnable.isFailed() || runnable.isPending()) {\n    return;\n  }\n  // we cannot recover gracefully if a Runnable has already passed\n  // then fails asynchronously\n  var alreadyPassed = runnable.isPassed();\n  // this will change the state to \"failed\" regardless of the current value\n  this.fail(runnable, err);\n  if (!alreadyPassed) {\n    // recover from test\n    if (runnable.type === constants.EVENT_TEST_BEGIN) {\n      this.emit(constants.EVENT_TEST_END, runnable);\n      this.hookUp(HOOK_TYPE_AFTER_EACH, this.next);\n      return;\n    }\n    debug(runnable);\n\n    // recover from hooks\n    var errSuite = this.suite;\n\n    // XXX how about a less awful way to determine this?\n    // if hook failure is in afterEach block\n    if (runnable.fullTitle().indexOf('after each') > -1) {\n      return this.hookErr(err, errSuite, true);\n    }\n    // if hook failure is in beforeEach block\n    if (runnable.fullTitle().indexOf('before each') > -1) {\n      return this.hookErr(err, errSuite, false);\n    }\n    // if hook failure is in after or before blocks\n    return this.nextSuite(errSuite);\n  }\n\n  // bail\n  this.emit(constants.EVENT_RUN_END);\n};\n\n/**\n * Run the root suite and invoke `fn(failures)`\n * on completion.\n *\n * @public\n * @memberof Runner\n * @param {Function} fn\n * @return {Runner} Runner instance.\n */\nRunner.prototype.run = function(fn) {\n  var self = this;\n  var rootSuite = this.suite;\n\n  fn = fn || function() {};\n\n  function uncaught(err) {\n    self.uncaught(err);\n  }\n\n  function start() {\n    // If there is an `only` filter\n    if (rootSuite.hasOnly()) {\n      rootSuite.filterOnly();\n    }\n    self.started = true;\n    if (self._delay) {\n      self.emit(constants.EVENT_DELAY_END);\n    }\n    self.emit(constants.EVENT_RUN_BEGIN);\n\n    self.runSuite(rootSuite, function() {\n      debug('finished running');\n      self.emit(constants.EVENT_RUN_END);\n    });\n  }\n\n  debug(constants.EVENT_RUN_BEGIN);\n\n  // references cleanup to avoid memory leaks\n  this.on(constants.EVENT_SUITE_END, function(suite) {\n    suite.cleanReferences();\n  });\n\n  // callback\n  this.on(constants.EVENT_RUN_END, function() {\n    debug(constants.EVENT_RUN_END);\n    process.removeListener('uncaughtException', uncaught);\n    fn(self.failures);\n  });\n\n  // uncaught exception\n  process.on('uncaughtException', uncaught);\n\n  if (this._delay) {\n    // for reporters, I guess.\n    // might be nice to debounce some dots while we wait.\n    this.emit(constants.EVENT_DELAY_BEGIN, rootSuite);\n    rootSuite.once(EVENT_ROOT_SUITE_RUN, start);\n  } else {\n    start();\n  }\n\n  return this;\n};\n\n/**\n * Cleanly abort execution.\n *\n * @memberof Runner\n * @public\n * @return {Runner} Runner instance.\n */\nRunner.prototype.abort = function() {\n  debug('aborting');\n  this._abort = true;\n\n  return this;\n};\n\n/**\n * Filter leaks with the given globals flagged as `ok`.\n *\n * @private\n * @param {Array} ok\n * @param {Array} globals\n * @return {Array}\n */\nfunction filterLeaks(ok, globals) {\n  return globals.filter(function(key) {\n    // Firefox and Chrome exposes iframes as index inside the window object\n    if (/^\\d+/.test(key)) {\n      return false;\n    }\n\n    // in firefox\n    // if runner runs in an iframe, this iframe's window.getInterface method\n    // not init at first it is assigned in some seconds\n    if (global.navigator && /^getInterface/.test(key)) {\n      return false;\n    }\n\n    // an iframe could be approached by window[iframeIndex]\n    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak\n    if (global.navigator && /^\\d+/.test(key)) {\n      return false;\n    }\n\n    // Opera and IE expose global variables for HTML element IDs (issue #243)\n    if (/^mocha-/.test(key)) {\n      return false;\n    }\n\n    var matched = ok.filter(function(ok) {\n      if (~ok.indexOf('*')) {\n        return key.indexOf(ok.split('*')[0]) === 0;\n      }\n      return key === ok;\n    });\n    return !matched.length && (!global.navigator || key !== 'onerror');\n  });\n}\n\n/**\n * Check if argument is an instance of Error object or a duck-typed equivalent.\n *\n * @private\n * @param {Object} err - object to check\n * @param {string} err.message - error message\n * @returns {boolean}\n */\nfunction isError(err) {\n  return err instanceof Error || (err && typeof err.message === 'string');\n}\n\n/**\n *\n * Converts thrown non-extensible type into proper Error.\n *\n * @private\n * @param {*} thrown - Non-extensible type thrown by code\n * @return {Error}\n */\nfunction thrown2Error(err) {\n  return new Error(\n    'the ' + type(err) + ' ' + stringify(err) + ' was thrown, throw an Error :)'\n  );\n}\n\n/**\n * Array of globals dependent on the environment.\n *\n * @return {Array}\n * @deprecated\n * @todo remove; long since unsupported\n * @private\n */\nfunction extraGlobals() {\n  if (typeof process === 'object' && typeof process.version === 'string') {\n    var parts = process.version.split('.');\n    var nodeVersion = parts.reduce(function(a, v) {\n      return (a << 8) | v;\n    });\n\n    // 'errno' was renamed to process._errno in v0.9.11.\n    if (nodeVersion < 0x00090b) {\n      return ['errno'];\n    }\n  }\n\n  return [];\n}\n\nRunner.constants = constants;\n\n/**\n * Node.js' `EventEmitter`\n * @external EventEmitter\n * @see {@link https://nodejs.org/api/events.html#events_class_eventemitter}\n */\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./errors\":6,\"./pending\":16,\"./runnable\":33,\"./suite\":36,\"./utils\":38,\"_process\":69,\"debug\":45,\"events\":50,\"util\":89}],35:[function(require,module,exports){\n(function (global){\n'use strict';\n\n/**\n * Provides a factory function for a {@link StatsCollector} object.\n * @module\n */\n\nvar constants = require('./runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_END = constants.EVENT_TEST_END;\n\n/**\n * Test statistics collector.\n *\n * @public\n * @typedef {Object} StatsCollector\n * @property {number} suites - integer count of suites run.\n * @property {number} tests - integer count of tests run.\n * @property {number} passes - integer count of passing tests.\n * @property {number} pending - integer count of pending tests.\n * @property {number} failures - integer count of failed tests.\n * @property {Date} start - time when testing began.\n * @property {Date} end - time when testing concluded.\n * @property {number} duration - number of msecs that testing took.\n */\n\nvar Date = global.Date;\n\n/**\n * Provides stats such as test duration, number of tests passed / failed etc., by listening for events emitted by `runner`.\n *\n * @private\n * @param {Runner} runner - Runner instance\n * @throws {TypeError} If falsy `runner`\n */\nfunction createStatsCollector(runner) {\n  /**\n   * @type StatsCollector\n   */\n  var stats = {\n    suites: 0,\n    tests: 0,\n    passes: 0,\n    pending: 0,\n    failures: 0\n  };\n\n  if (!runner) {\n    throw new TypeError('Missing runner argument');\n  }\n\n  runner.stats = stats;\n\n  runner.once(EVENT_RUN_BEGIN, function() {\n    stats.start = new Date();\n  });\n  runner.on(EVENT_SUITE_BEGIN, function(suite) {\n    suite.root || stats.suites++;\n  });\n  runner.on(EVENT_TEST_PASS, function() {\n    stats.passes++;\n  });\n  runner.on(EVENT_TEST_FAIL, function() {\n    stats.failures++;\n  });\n  runner.on(EVENT_TEST_PENDING, function() {\n    stats.pending++;\n  });\n  runner.on(EVENT_TEST_END, function() {\n    stats.tests++;\n  });\n  runner.once(EVENT_RUN_END, function() {\n    stats.end = new Date();\n    stats.duration = stats.end - stats.start;\n  });\n}\n\nmodule.exports = createStatsCollector;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./runner\":34}],36:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar EventEmitter = require('events').EventEmitter;\nvar Hook = require('./hook');\nvar utils = require('./utils');\nvar inherits = utils.inherits;\nvar debug = require('debug')('mocha:suite');\nvar milliseconds = require('ms');\nvar errors = require('./errors');\nvar createInvalidArgumentTypeError = errors.createInvalidArgumentTypeError;\n\n/**\n * Expose `Suite`.\n */\n\nexports = module.exports = Suite;\n\n/**\n * Create a new `Suite` with the given `title` and parent `Suite`.\n *\n * @public\n * @param {Suite} parent - Parent suite (required!)\n * @param {string} title - Title\n * @return {Suite}\n */\nSuite.create = function(parent, title) {\n  var suite = new Suite(title, parent.ctx);\n  suite.parent = parent;\n  title = suite.fullTitle();\n  parent.addSuite(suite);\n  return suite;\n};\n\n/**\n * Constructs a new `Suite` instance with the given `title`, `ctx`, and `isRoot`.\n *\n * @public\n * @class\n * @extends EventEmitter\n * @see {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}\n * @param {string} title - Suite title.\n * @param {Context} parentContext - Parent context instance.\n * @param {boolean} [isRoot=false] - Whether this is the root suite.\n */\nfunction Suite(title, parentContext, isRoot) {\n  if (!utils.isString(title)) {\n    throw createInvalidArgumentTypeError(\n      'Suite argument \"title\" must be a string. Received type \"' +\n        typeof title +\n        '\"',\n      'title',\n      'string'\n    );\n  }\n  this.title = title;\n  function Context() {}\n  Context.prototype = parentContext;\n  this.ctx = new Context();\n  this.suites = [];\n  this.tests = [];\n  this.pending = false;\n  this._beforeEach = [];\n  this._beforeAll = [];\n  this._afterEach = [];\n  this._afterAll = [];\n  this.root = isRoot === true;\n  this._timeout = 2000;\n  this._enableTimeouts = true;\n  this._slow = 75;\n  this._bail = false;\n  this._retries = -1;\n  this._onlyTests = [];\n  this._onlySuites = [];\n  this.delayed = false;\n\n  this.on('newListener', function(event) {\n    if (deprecatedEvents[event]) {\n      utils.deprecate(\n        'Event \"' +\n          event +\n          '\" is deprecated.  Please let the Mocha team know about your use case: https://git.io/v6Lwm'\n      );\n    }\n  });\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\ninherits(Suite, EventEmitter);\n\n/**\n * Return a clone of this `Suite`.\n *\n * @private\n * @return {Suite}\n */\nSuite.prototype.clone = function() {\n  var suite = new Suite(this.title);\n  debug('clone');\n  suite.ctx = this.ctx;\n  suite.root = this.root;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.enableTimeouts(this.enableTimeouts());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  return suite;\n};\n\n/**\n * Set or get timeout `ms` or short-hand such as \"2s\".\n *\n * @private\n * @todo Do not attempt to set value if `ms` is undefined\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.timeout = function(ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (ms.toString() === '0') {\n    this._enableTimeouts = false;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('timeout %d', ms);\n  this._timeout = parseInt(ms, 10);\n  return this;\n};\n\n/**\n * Set or get number of times to retry a failed test.\n *\n * @private\n * @param {number|string} n\n * @return {Suite|number} for chaining\n */\nSuite.prototype.retries = function(n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n  debug('retries %d', n);\n  this._retries = parseInt(n, 10) || 0;\n  return this;\n};\n\n/**\n * Set or get timeout to `enabled`.\n *\n * @private\n * @param {boolean} enabled\n * @return {Suite|boolean} self or enabled\n */\nSuite.prototype.enableTimeouts = function(enabled) {\n  if (!arguments.length) {\n    return this._enableTimeouts;\n  }\n  debug('enableTimeouts %s', enabled);\n  this._enableTimeouts = enabled;\n  return this;\n};\n\n/**\n * Set or get slow `ms` or short-hand such as \"2s\".\n *\n * @private\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.slow = function(ms) {\n  if (!arguments.length) {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Set or get whether to bail after first error.\n *\n * @private\n * @param {boolean} bail\n * @return {Suite|number} for chaining\n */\nSuite.prototype.bail = function(bail) {\n  if (!arguments.length) {\n    return this._bail;\n  }\n  debug('bail %s', bail);\n  this._bail = bail;\n  return this;\n};\n\n/**\n * Check if this suite or its parent suite is marked as pending.\n *\n * @private\n */\nSuite.prototype.isPending = function() {\n  return this.pending || (this.parent && this.parent.isPending());\n};\n\n/**\n * Generic hook-creator.\n * @private\n * @param {string} title - Title of hook\n * @param {Function} fn - Hook callback\n * @returns {Hook} A new hook\n */\nSuite.prototype._createHook = function(title, fn) {\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  hook.file = this.file;\n  return hook;\n};\n\n/**\n * Run `fn(test[, done])` before running tests.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeAll = function(title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before all\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._beforeAll.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_ALL, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after running tests.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterAll = function(title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after all\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._afterAll.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_ALL, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before each test case.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeEach = function(title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before each\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._beforeEach.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_EACH, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after each test case.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterEach = function(title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after each\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._afterEach.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_EACH, hook);\n  return this;\n};\n\n/**\n * Add a test `suite`.\n *\n * @private\n * @param {Suite} suite\n * @return {Suite} for chaining\n */\nSuite.prototype.addSuite = function(suite) {\n  suite.parent = this;\n  suite.root = false;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.enableTimeouts(this.enableTimeouts());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  this.suites.push(suite);\n  this.emit(constants.EVENT_SUITE_ADD_SUITE, suite);\n  return this;\n};\n\n/**\n * Add a `test` to this suite.\n *\n * @private\n * @param {Test} test\n * @return {Suite} for chaining\n */\nSuite.prototype.addTest = function(test) {\n  test.parent = this;\n  test.timeout(this.timeout());\n  test.retries(this.retries());\n  test.enableTimeouts(this.enableTimeouts());\n  test.slow(this.slow());\n  test.ctx = this.ctx;\n  this.tests.push(test);\n  this.emit(constants.EVENT_SUITE_ADD_TEST, test);\n  return this;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @memberof Suite\n * @public\n * @return {string}\n */\nSuite.prototype.fullTitle = function() {\n  return this.titlePath().join(' ');\n};\n\n/**\n * Return the title path generated by recursively concatenating the parent's\n * title path.\n *\n * @memberof Suite\n * @public\n * @return {string}\n */\nSuite.prototype.titlePath = function() {\n  var result = [];\n  if (this.parent) {\n    result = result.concat(this.parent.titlePath());\n  }\n  if (!this.root) {\n    result.push(this.title);\n  }\n  return result;\n};\n\n/**\n * Return the total number of tests.\n *\n * @memberof Suite\n * @public\n * @return {number}\n */\nSuite.prototype.total = function() {\n  return (\n    this.suites.reduce(function(sum, suite) {\n      return sum + suite.total();\n    }, 0) + this.tests.length\n  );\n};\n\n/**\n * Iterates through each suite recursively to find all tests. Applies a\n * function in the format `fn(test)`.\n *\n * @private\n * @param {Function} fn\n * @return {Suite}\n */\nSuite.prototype.eachTest = function(fn) {\n  this.tests.forEach(fn);\n  this.suites.forEach(function(suite) {\n    suite.eachTest(fn);\n  });\n  return this;\n};\n\n/**\n * This will run the root suite if we happen to be running in delayed mode.\n * @private\n */\nSuite.prototype.run = function run() {\n  if (this.root) {\n    this.emit(constants.EVENT_ROOT_SUITE_RUN);\n  }\n};\n\n/**\n * Determines whether a suite has an `only` test or suite as a descendant.\n *\n * @private\n * @returns {Boolean}\n */\nSuite.prototype.hasOnly = function hasOnly() {\n  return (\n    this._onlyTests.length > 0 ||\n    this._onlySuites.length > 0 ||\n    this.suites.some(function(suite) {\n      return suite.hasOnly();\n    })\n  );\n};\n\n/**\n * Filter suites based on `isOnly` logic.\n *\n * @private\n * @returns {Boolean}\n */\nSuite.prototype.filterOnly = function filterOnly() {\n  if (this._onlyTests.length) {\n    // If the suite contains `only` tests, run those and ignore any nested suites.\n    this.tests = this._onlyTests;\n    this.suites = [];\n  } else {\n    // Otherwise, do not run any of the tests in this suite.\n    this.tests = [];\n    this._onlySuites.forEach(function(onlySuite) {\n      // If there are other `only` tests/suites nested in the current `only` suite, then filter that `only` suite.\n      // Otherwise, all of the tests on this `only` suite should be run, so don't filter it.\n      if (onlySuite.hasOnly()) {\n        onlySuite.filterOnly();\n      }\n    });\n    // Run the `only` suites, as well as any other suites that have `only` tests/suites as descendants.\n    var onlySuites = this._onlySuites;\n    this.suites = this.suites.filter(function(childSuite) {\n      return onlySuites.indexOf(childSuite) !== -1 || childSuite.filterOnly();\n    });\n  }\n  // Keep the suite only if there is something to run\n  return this.tests.length > 0 || this.suites.length > 0;\n};\n\n/**\n * Adds a suite to the list of subsuites marked `only`.\n *\n * @private\n * @param {Suite} suite\n */\nSuite.prototype.appendOnlySuite = function(suite) {\n  this._onlySuites.push(suite);\n};\n\n/**\n * Adds a test to the list of tests marked `only`.\n *\n * @private\n * @param {Test} test\n */\nSuite.prototype.appendOnlyTest = function(test) {\n  this._onlyTests.push(test);\n};\n\n/**\n * Returns the array of hooks by hook name; see `HOOK_TYPE_*` constants.\n * @private\n */\nSuite.prototype.getHooks = function getHooks(name) {\n  return this['_' + name];\n};\n\n/**\n * Cleans up the references to all the deferred functions\n * (before/after/beforeEach/afterEach) and tests of a Suite.\n * These must be deleted otherwise a memory leak can happen,\n * as those functions may reference variables from closures,\n * thus those variables can never be garbage collected as long\n * as the deferred functions exist.\n *\n * @private\n */\nSuite.prototype.cleanReferences = function cleanReferences() {\n  function cleanArrReferences(arr) {\n    for (var i = 0; i < arr.length; i++) {\n      delete arr[i].fn;\n    }\n  }\n\n  if (Array.isArray(this._beforeAll)) {\n    cleanArrReferences(this._beforeAll);\n  }\n\n  if (Array.isArray(this._beforeEach)) {\n    cleanArrReferences(this._beforeEach);\n  }\n\n  if (Array.isArray(this._afterAll)) {\n    cleanArrReferences(this._afterAll);\n  }\n\n  if (Array.isArray(this._afterEach)) {\n    cleanArrReferences(this._afterEach);\n  }\n\n  for (var i = 0; i < this.tests.length; i++) {\n    delete this.tests[i].fn;\n  }\n};\n\nvar constants = utils.defineConstants(\n  /**\n   * {@link Suite}-related constants.\n   * @public\n   * @memberof Suite\n   * @alias constants\n   * @readonly\n   * @static\n   * @enum {string}\n   */\n  {\n    /**\n     * Event emitted after a test file has been loaded Not emitted in browser.\n     */\n    EVENT_FILE_POST_REQUIRE: 'post-require',\n    /**\n     * Event emitted before a test file has been loaded. In browser, this is emitted once an interface has been selected.\n     */\n    EVENT_FILE_PRE_REQUIRE: 'pre-require',\n    /**\n     * Event emitted immediately after a test file has been loaded. Not emitted in browser.\n     */\n    EVENT_FILE_REQUIRE: 'require',\n    /**\n     * Event emitted when `global.run()` is called (use with `delay` option)\n     */\n    EVENT_ROOT_SUITE_RUN: 'run',\n\n    /**\n     * Namespace for collection of a `Suite`'s \"after all\" hooks\n     */\n    HOOK_TYPE_AFTER_ALL: 'afterAll',\n    /**\n     * Namespace for collection of a `Suite`'s \"after each\" hooks\n     */\n    HOOK_TYPE_AFTER_EACH: 'afterEach',\n    /**\n     * Namespace for collection of a `Suite`'s \"before all\" hooks\n     */\n    HOOK_TYPE_BEFORE_ALL: 'beforeAll',\n    /**\n     * Namespace for collection of a `Suite`'s \"before all\" hooks\n     */\n    HOOK_TYPE_BEFORE_EACH: 'beforeEach',\n\n    // the following events are all deprecated\n\n    /**\n     * Emitted after an \"after all\" `Hook` has been added to a `Suite`. Deprecated\n     */\n    EVENT_SUITE_ADD_HOOK_AFTER_ALL: 'afterAll',\n    /**\n     * Emitted after an \"after each\" `Hook` has been added to a `Suite` Deprecated\n     */\n    EVENT_SUITE_ADD_HOOK_AFTER_EACH: 'afterEach',\n    /**\n     * Emitted after an \"before all\" `Hook` has been added to a `Suite` Deprecated\n     */\n    EVENT_SUITE_ADD_HOOK_BEFORE_ALL: 'beforeAll',\n    /**\n     * Emitted after an \"before each\" `Hook` has been added to a `Suite` Deprecated\n     */\n    EVENT_SUITE_ADD_HOOK_BEFORE_EACH: 'beforeEach',\n    /**\n     * Emitted after a child `Suite` has been added to a `Suite`. Deprecated\n     */\n    EVENT_SUITE_ADD_SUITE: 'suite',\n    /**\n     * Emitted after a `Test` has been added to a `Suite`. Deprecated\n     */\n    EVENT_SUITE_ADD_TEST: 'test'\n  }\n);\n\n/**\n * @summary There are no known use cases for these events.\n * @desc This is a `Set`-like object having all keys being the constant's string value and the value being `true`.\n * @todo Remove eventually\n * @type {Object<string,boolean>}\n * @ignore\n */\nvar deprecatedEvents = Object.keys(constants)\n  .filter(function(constant) {\n    return constant.substring(0, 15) === 'EVENT_SUITE_ADD';\n  })\n  .reduce(function(acc, constant) {\n    acc[constants[constant]] = true;\n    return acc;\n  }, utils.createMap());\n\nSuite.constants = constants;\n\n},{\"./errors\":6,\"./hook\":7,\"./utils\":38,\"debug\":45,\"events\":50,\"ms\":60}],37:[function(require,module,exports){\n'use strict';\nvar Runnable = require('./runnable');\nvar utils = require('./utils');\nvar errors = require('./errors');\nvar createInvalidArgumentTypeError = errors.createInvalidArgumentTypeError;\nvar isString = utils.isString;\n\nmodule.exports = Test;\n\n/**\n * Initialize a new `Test` with the given `title` and callback `fn`.\n *\n * @public\n * @class\n * @extends Runnable\n * @param {String} title - Test title (required)\n * @param {Function} [fn] - Test callback.  If omitted, the Test is considered \"pending\"\n */\nfunction Test(title, fn) {\n  if (!isString(title)) {\n    throw createInvalidArgumentTypeError(\n      'Test argument \"title\" should be a string. Received type \"' +\n        typeof title +\n        '\"',\n      'title',\n      'string'\n    );\n  }\n  Runnable.call(this, title, fn);\n  this.pending = !fn;\n  this.type = 'test';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\nutils.inherits(Test, Runnable);\n\nTest.prototype.clone = function() {\n  var test = new Test(this.title, this.fn);\n  test.timeout(this.timeout());\n  test.slow(this.slow());\n  test.enableTimeouts(this.enableTimeouts());\n  test.retries(this.retries());\n  test.currentRetry(this.currentRetry());\n  test.globals(this.globals());\n  test.parent = this.parent;\n  test.file = this.file;\n  test.ctx = this.ctx;\n  return test;\n};\n\n},{\"./errors\":6,\"./runnable\":33,\"./utils\":38}],38:[function(require,module,exports){\n(function (process,Buffer){\n'use strict';\n\n/**\n * Various utility functions used throughout Mocha's codebase.\n * @module utils\n */\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('util');\nvar glob = require('glob');\nvar he = require('he');\nvar errors = require('./errors');\nvar createNoFilesMatchPatternError = errors.createNoFilesMatchPatternError;\nvar createMissingArgumentError = errors.createMissingArgumentError;\n\nvar assign = (exports.assign = require('object.assign').getPolyfill());\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * @param {function} ctor - Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor - Constructor function to inherit prototype from.\n * @throws {TypeError} if either constructor is null, or if super constructor\n *     lacks a prototype.\n */\nexports.inherits = util.inherits;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @private\n * @param  {string} html\n * @return {string}\n */\nexports.escape = function(html) {\n  return he.encode(String(html), {useNamedReferences: false});\n};\n\n/**\n * Test if the given obj is type of string.\n *\n * @private\n * @param {Object} obj\n * @return {boolean}\n */\nexports.isString = function(obj) {\n  return typeof obj === 'string';\n};\n\n/**\n * Watch the given `files` for changes\n * and invoke `fn(file)` on modification.\n *\n * @private\n * @param {Array} files\n * @param {Function} fn\n */\nexports.watch = function(files, fn) {\n  var options = {interval: 100};\n  var debug = require('debug')('mocha:watch');\n  files.forEach(function(file) {\n    debug('file %s', file);\n    fs.watchFile(file, options, function(curr, prev) {\n      if (prev.mtime < curr.mtime) {\n        fn(file);\n      }\n    });\n  });\n};\n\n/**\n * Predicate to screen `pathname` for further consideration.\n *\n * @description\n * Returns <code>false</code> for pathname referencing:\n * <ul>\n *   <li>'npm' package installation directory\n *   <li>'git' version control directory\n * </ul>\n *\n * @private\n * @param {string} pathname - File or directory name to screen\n * @return {boolean} whether pathname should be further considered\n * @example\n * ['node_modules', 'test.js'].filter(considerFurther); // => ['test.js']\n */\nfunction considerFurther(pathname) {\n  var ignore = ['node_modules', '.git'];\n\n  return !~ignore.indexOf(pathname);\n}\n\n/**\n * Lookup files in the given `dir`.\n *\n * @description\n * Filenames are returned in _traversal_ order by the OS/filesystem.\n * **Make no assumption that the names will be sorted in any fashion.**\n *\n * @private\n * @param {string} dir\n * @param {string[]} [exts=['js']]\n * @param {Array} [ret=[]]\n * @return {Array}\n */\nexports.files = function(dir, exts, ret) {\n  ret = ret || [];\n  exts = exts || ['js'];\n\n  fs.readdirSync(dir)\n    .filter(considerFurther)\n    .forEach(function(dirent) {\n      var pathname = path.join(dir, dirent);\n      if (fs.lstatSync(pathname).isDirectory()) {\n        exports.files(pathname, exts, ret);\n      } else if (hasMatchingExtname(pathname, exts)) {\n        ret.push(pathname);\n      }\n    });\n\n  return ret;\n};\n\n/**\n * Compute a slug from the given `str`.\n *\n * @private\n * @param {string} str\n * @return {string}\n */\nexports.slug = function(str) {\n  return str\n    .toLowerCase()\n    .replace(/ +/g, '-')\n    .replace(/[^-\\w]/g, '');\n};\n\n/**\n * Strip the function definition from `str`, and re-indent for pre whitespace.\n *\n * @param {string} str\n * @return {string}\n */\nexports.clean = function(str) {\n  str = str\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n')\n    .replace(/^\\uFEFF/, '')\n    // (traditional)->  space/name     parameters    body     (lambda)-> parameters       body   multi-statement/single          keep body content\n    .replace(\n      /^function(?:\\s*|\\s+[^(]*)\\([^)]*\\)\\s*\\{((?:.|\\n)*?)\\s*\\}$|^\\([^)]*\\)\\s*=>\\s*(?:\\{((?:.|\\n)*?)\\s*\\}|((?:.|\\n)*))$/,\n      '$1$2$3'\n    );\n\n  var spaces = str.match(/^\\n?( *)/)[1].length;\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;\n  var re = new RegExp(\n    '^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs || spaces) + '}',\n    'gm'\n  );\n\n  str = str.replace(re, '');\n\n  return str.trim();\n};\n\n/**\n * Parse the given `qs`.\n *\n * @private\n * @param {string} qs\n * @return {Object}\n */\nexports.parseQuery = function(qs) {\n  return qs\n    .replace('?', '')\n    .split('&')\n    .reduce(function(obj, pair) {\n      var i = pair.indexOf('=');\n      var key = pair.slice(0, i);\n      var val = pair.slice(++i);\n\n      // Due to how the URLSearchParams API treats spaces\n      obj[key] = decodeURIComponent(val.replace(/\\+/g, '%20'));\n\n      return obj;\n    }, {});\n};\n\n/**\n * Highlight the given string of `js`.\n *\n * @private\n * @param {string} js\n * @return {string}\n */\nfunction highlight(js) {\n  return js\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(\n      /\\bnew[ \\t]+(\\w+)/gm,\n      '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>'\n    )\n    .replace(\n      /\\b(function|new|throw|return|var|if|else)\\b/gm,\n      '<span class=\"keyword\">$1</span>'\n    );\n}\n\n/**\n * Highlight the contents of tag `name`.\n *\n * @private\n * @param {string} name\n */\nexports.highlightTags = function(name) {\n  var code = document.getElementById('mocha').getElementsByTagName(name);\n  for (var i = 0, len = code.length; i < len; ++i) {\n    code[i].innerHTML = highlight(code[i].innerHTML);\n  }\n};\n\n/**\n * If a value could have properties, and has none, this function is called,\n * which returns a string representation of the empty value.\n *\n * Functions w/ no properties return `'[Function]'`\n * Arrays w/ length === 0 return `'[]'`\n * Objects w/ no properties return `'{}'`\n * All else: return result of `value.toString()`\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} typeHint The type of the value\n * @returns {string}\n */\nfunction emptyRepresentation(value, typeHint) {\n  switch (typeHint) {\n    case 'function':\n      return '[Function]';\n    case 'object':\n      return '{}';\n    case 'array':\n      return '[]';\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Takes some variable and asks `Object.prototype.toString()` what it thinks it\n * is.\n *\n * @private\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n * @param {*} value The value to test.\n * @returns {string} Computed type\n * @example\n * type({}) // 'object'\n * type([]) // 'array'\n * type(1) // 'number'\n * type(false) // 'boolean'\n * type(Infinity) // 'number'\n * type(null) // 'null'\n * type(new Date()) // 'date'\n * type(/foo/) // 'regexp'\n * type('type') // 'string'\n * type(global) // 'global'\n * type(new String('foo') // 'object'\n */\nvar type = (exports.type = function type(value) {\n  if (value === undefined) {\n    return 'undefined';\n  } else if (value === null) {\n    return 'null';\n  } else if (Buffer.isBuffer(value)) {\n    return 'buffer';\n  }\n  return Object.prototype.toString\n    .call(value)\n    .replace(/^\\[.+\\s(.+?)]$/, '$1')\n    .toLowerCase();\n});\n\n/**\n * Stringify `value`. Different behavior depending on type of value:\n *\n * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.\n * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.\n * - If `value` is an *empty* object, function, or array, return result of function\n *   {@link emptyRepresentation}.\n * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of\n *   JSON.stringify().\n *\n * @private\n * @see exports.type\n * @param {*} value\n * @return {string}\n */\nexports.stringify = function(value) {\n  var typeHint = type(value);\n\n  if (!~['object', 'array', 'function'].indexOf(typeHint)) {\n    if (typeHint === 'buffer') {\n      var json = Buffer.prototype.toJSON.call(value);\n      // Based on the toJSON result\n      return jsonStringify(\n        json.data && json.type ? json.data : json,\n        2\n      ).replace(/,(\\n|$)/g, '$1');\n    }\n\n    // IE7/IE8 has a bizarre String constructor; needs to be coerced\n    // into an array and back to obj.\n    if (typeHint === 'string' && typeof value === 'object') {\n      value = value.split('').reduce(function(acc, char, idx) {\n        acc[idx] = char;\n        return acc;\n      }, {});\n      typeHint = 'object';\n    } else {\n      return jsonStringify(value);\n    }\n  }\n\n  for (var prop in value) {\n    if (Object.prototype.hasOwnProperty.call(value, prop)) {\n      return jsonStringify(\n        exports.canonicalize(value, null, typeHint),\n        2\n      ).replace(/,(\\n|$)/g, '$1');\n    }\n  }\n\n  return emptyRepresentation(value, typeHint);\n};\n\n/**\n * like JSON.stringify but more sense.\n *\n * @private\n * @param {Object}  object\n * @param {number=} spaces\n * @param {number=} depth\n * @returns {*}\n */\nfunction jsonStringify(object, spaces, depth) {\n  if (typeof spaces === 'undefined') {\n    // primitive types\n    return _stringify(object);\n  }\n\n  depth = depth || 1;\n  var space = spaces * depth;\n  var str = Array.isArray(object) ? '[' : '{';\n  var end = Array.isArray(object) ? ']' : '}';\n  var length =\n    typeof object.length === 'number'\n      ? object.length\n      : Object.keys(object).length;\n  // `.repeat()` polyfill\n  function repeat(s, n) {\n    return new Array(n).join(s);\n  }\n\n  function _stringify(val) {\n    switch (type(val)) {\n      case 'null':\n      case 'undefined':\n        val = '[' + val + ']';\n        break;\n      case 'array':\n      case 'object':\n        val = jsonStringify(val, spaces, depth + 1);\n        break;\n      case 'boolean':\n      case 'regexp':\n      case 'symbol':\n      case 'number':\n        val =\n          val === 0 && 1 / val === -Infinity // `-0`\n            ? '-0'\n            : val.toString();\n        break;\n      case 'date':\n        var sDate = isNaN(val.getTime()) ? val.toString() : val.toISOString();\n        val = '[Date: ' + sDate + ']';\n        break;\n      case 'buffer':\n        var json = val.toJSON();\n        // Based on the toJSON result\n        json = json.data && json.type ? json.data : json;\n        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';\n        break;\n      default:\n        val =\n          val === '[Function]' || val === '[Circular]'\n            ? val\n            : JSON.stringify(val); // string\n    }\n    return val;\n  }\n\n  for (var i in object) {\n    if (!Object.prototype.hasOwnProperty.call(object, i)) {\n      continue; // not my business\n    }\n    --length;\n    str +=\n      '\\n ' +\n      repeat(' ', space) +\n      (Array.isArray(object) ? '' : '\"' + i + '\": ') + // key\n      _stringify(object[i]) + // value\n      (length ? ',' : ''); // comma\n  }\n\n  return (\n    str +\n    // [], {}\n    (str.length !== 1 ? '\\n' + repeat(' ', --space) + end : end)\n  );\n}\n\n/**\n * Return a new Thing that has the keys in sorted order. Recursive.\n *\n * If the Thing...\n * - has already been seen, return string `'[Circular]'`\n * - is `undefined`, return string `'[undefined]'`\n * - is `null`, return value `null`\n * - is some other primitive, return the value\n * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method\n * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.\n * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`\n *\n * @private\n * @see {@link exports.stringify}\n * @param {*} value Thing to inspect.  May or may not have properties.\n * @param {Array} [stack=[]] Stack of seen values\n * @param {string} [typeHint] Type hint\n * @return {(Object|Array|Function|string|undefined)}\n */\nexports.canonicalize = function canonicalize(value, stack, typeHint) {\n  var canonicalizedObj;\n  /* eslint-disable no-unused-vars */\n  var prop;\n  /* eslint-enable no-unused-vars */\n  typeHint = typeHint || type(value);\n  function withStack(value, fn) {\n    stack.push(value);\n    fn();\n    stack.pop();\n  }\n\n  stack = stack || [];\n\n  if (stack.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  switch (typeHint) {\n    case 'undefined':\n    case 'buffer':\n    case 'null':\n      canonicalizedObj = value;\n      break;\n    case 'array':\n      withStack(value, function() {\n        canonicalizedObj = value.map(function(item) {\n          return exports.canonicalize(item, stack);\n        });\n      });\n      break;\n    case 'function':\n      /* eslint-disable guard-for-in */\n      for (prop in value) {\n        canonicalizedObj = {};\n        break;\n      }\n      /* eslint-enable guard-for-in */\n      if (!canonicalizedObj) {\n        canonicalizedObj = emptyRepresentation(value, typeHint);\n        break;\n      }\n    /* falls through */\n    case 'object':\n      canonicalizedObj = canonicalizedObj || {};\n      withStack(value, function() {\n        Object.keys(value)\n          .sort()\n          .forEach(function(key) {\n            canonicalizedObj[key] = exports.canonicalize(value[key], stack);\n          });\n      });\n      break;\n    case 'date':\n    case 'number':\n    case 'regexp':\n    case 'boolean':\n    case 'symbol':\n      canonicalizedObj = value;\n      break;\n    default:\n      canonicalizedObj = value + '';\n  }\n\n  return canonicalizedObj;\n};\n\n/**\n * Determines if pathname has a matching file extension.\n *\n * @private\n * @param {string} pathname - Pathname to check for match.\n * @param {string[]} exts - List of file extensions (sans period).\n * @return {boolean} whether file extension matches.\n * @example\n * hasMatchingExtname('foo.html', ['js', 'css']); // => false\n */\nfunction hasMatchingExtname(pathname, exts) {\n  var suffix = path.extname(pathname).slice(1);\n  return exts.some(function(element) {\n    return suffix === element;\n  });\n}\n\n/**\n * Determines if pathname would be a \"hidden\" file (or directory) on UN*X.\n *\n * @description\n * On UN*X, pathnames beginning with a full stop (aka dot) are hidden during\n * typical usage. Dotfiles, plain-text configuration files, are prime examples.\n *\n * @see {@link http://xahlee.info/UnixResource_dir/writ/unix_origin_of_dot_filename.html|Origin of Dot File Names}\n *\n * @private\n * @param {string} pathname - Pathname to check for match.\n * @return {boolean} whether pathname would be considered a hidden file.\n * @example\n * isHiddenOnUnix('.profile'); // => true\n */\nfunction isHiddenOnUnix(pathname) {\n  return path.basename(pathname)[0] === '.';\n}\n\n/**\n * Lookup file names at the given `path`.\n *\n * @description\n * Filenames are returned in _traversal_ order by the OS/filesystem.\n * **Make no assumption that the names will be sorted in any fashion.**\n *\n * @public\n * @memberof Mocha.utils\n * @todo Fix extension handling\n * @param {string} filepath - Base path to start searching from.\n * @param {string[]} extensions - File extensions to look for.\n * @param {boolean} recursive - Whether to recurse into subdirectories.\n * @return {string[]} An array of paths.\n * @throws {Error} if no files match pattern.\n * @throws {TypeError} if `filepath` is directory and `extensions` not provided.\n */\nexports.lookupFiles = function lookupFiles(filepath, extensions, recursive) {\n  var files = [];\n  var stat;\n\n  if (!fs.existsSync(filepath)) {\n    if (fs.existsSync(filepath + '.js')) {\n      filepath += '.js';\n    } else {\n      // Handle glob\n      files = glob.sync(filepath);\n      if (!files.length) {\n        throw createNoFilesMatchPatternError(\n          'Cannot find any files matching pattern ' + exports.dQuote(filepath),\n          filepath\n        );\n      }\n      return files;\n    }\n  }\n\n  // Handle file\n  try {\n    stat = fs.statSync(filepath);\n    if (stat.isFile()) {\n      return filepath;\n    }\n  } catch (err) {\n    // ignore error\n    return;\n  }\n\n  // Handle directory\n  fs.readdirSync(filepath).forEach(function(dirent) {\n    var pathname = path.join(filepath, dirent);\n    var stat;\n\n    try {\n      stat = fs.statSync(pathname);\n      if (stat.isDirectory()) {\n        if (recursive) {\n          files = files.concat(lookupFiles(pathname, extensions, recursive));\n        }\n        return;\n      }\n    } catch (err) {\n      // ignore error\n      return;\n    }\n    if (!extensions) {\n      throw createMissingArgumentError(\n        util.format(\n          'Argument %s required when argument %s is a directory',\n          exports.sQuote('extensions'),\n          exports.sQuote('filepath')\n        ),\n        'extensions',\n        'array'\n      );\n    }\n\n    if (\n      !stat.isFile() ||\n      !hasMatchingExtname(pathname, extensions) ||\n      isHiddenOnUnix(pathname)\n    ) {\n      return;\n    }\n    files.push(pathname);\n  });\n\n  return files;\n};\n\n/**\n * process.emitWarning or a polyfill\n * @see https://nodejs.org/api/process.html#process_process_emitwarning_warning_options\n * @ignore\n */\nfunction emitWarning(msg, type) {\n  if (process.emitWarning) {\n    process.emitWarning(msg, type);\n  } else {\n    process.nextTick(function() {\n      console.warn(type + ': ' + msg);\n    });\n  }\n}\n\n/**\n * Show a deprecation warning. Each distinct message is only displayed once.\n * Ignores empty messages.\n *\n * @param {string} [msg] - Warning to print\n * @private\n */\nexports.deprecate = function deprecate(msg) {\n  msg = String(msg);\n  if (msg && !deprecate.cache[msg]) {\n    deprecate.cache[msg] = true;\n    emitWarning(msg, 'DeprecationWarning');\n  }\n};\nexports.deprecate.cache = {};\n\n/**\n * Show a generic warning.\n * Ignores empty messages.\n *\n * @param {string} [msg] - Warning to print\n * @private\n */\nexports.warn = function warn(msg) {\n  if (msg) {\n    emitWarning(msg);\n  }\n};\n\n/**\n * @summary\n * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)\n * @description\n * When invoking this function you get a filter function that get the Error.stack as an input,\n * and return a prettify output.\n * (i.e: strip Mocha and internal node functions from stack trace).\n * @returns {Function}\n */\nexports.stackTraceFilter = function() {\n  // TODO: Replace with `process.browser`\n  var is = typeof document === 'undefined' ? {node: true} : {browser: true};\n  var slash = path.sep;\n  var cwd;\n  if (is.node) {\n    cwd = process.cwd() + slash;\n  } else {\n    cwd = (typeof location === 'undefined'\n      ? window.location\n      : location\n    ).href.replace(/\\/[^/]*$/, '/');\n    slash = '/';\n  }\n\n  function isMochaInternal(line) {\n    return (\n      ~line.indexOf('node_modules' + slash + 'mocha' + slash) ||\n      ~line.indexOf(slash + 'mocha.js')\n    );\n  }\n\n  function isNodeInternal(line) {\n    return (\n      ~line.indexOf('(timers.js:') ||\n      ~line.indexOf('(events.js:') ||\n      ~line.indexOf('(node.js:') ||\n      ~line.indexOf('(module.js:') ||\n      ~line.indexOf('GeneratorFunctionPrototype.next (native)') ||\n      false\n    );\n  }\n\n  return function(stack) {\n    stack = stack.split('\\n');\n\n    stack = stack.reduce(function(list, line) {\n      if (isMochaInternal(line)) {\n        return list;\n      }\n\n      if (is.node && isNodeInternal(line)) {\n        return list;\n      }\n\n      // Clean up cwd(absolute)\n      if (/:\\d+:\\d+\\)?$/.test(line)) {\n        line = line.replace('(' + cwd, '(');\n      }\n\n      list.push(line);\n      return list;\n    }, []);\n\n    return stack.join('\\n');\n  };\n};\n\n/**\n * Crude, but effective.\n * @public\n * @param {*} value\n * @returns {boolean} Whether or not `value` is a Promise\n */\nexports.isPromise = function isPromise(value) {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.then === 'function'\n  );\n};\n\n/**\n * Clamps a numeric value to an inclusive range.\n *\n * @param {number} value - Value to be clamped.\n * @param {numer[]} range - Two element array specifying [min, max] range.\n * @returns {number} clamped value\n */\nexports.clamp = function clamp(value, range) {\n  return Math.min(Math.max(value, range[0]), range[1]);\n};\n\n/**\n * Single quote text by combining with undirectional ASCII quotation marks.\n *\n * @description\n * Provides a simple means of markup for quoting text to be used in output.\n * Use this to quote names of variables, methods, and packages.\n *\n * <samp>package 'foo' cannot be found</samp>\n *\n * @private\n * @param {string} str - Value to be quoted.\n * @returns {string} quoted value\n * @example\n * sQuote('n') // => 'n'\n */\nexports.sQuote = function(str) {\n  return \"'\" + str + \"'\";\n};\n\n/**\n * Double quote text by combining with undirectional ASCII quotation marks.\n *\n * @description\n * Provides a simple means of markup for quoting text to be used in output.\n * Use this to quote names of datatypes, classes, pathnames, and strings.\n *\n * <samp>argument 'value' must be \"string\" or \"number\"</samp>\n *\n * @private\n * @param {string} str - Value to be quoted.\n * @returns {string} quoted value\n * @example\n * dQuote('number') // => \"number\"\n */\nexports.dQuote = function(str) {\n  return '\"' + str + '\"';\n};\n\n/**\n * Provides simplistic message translation for dealing with plurality.\n *\n * @description\n * Use this to create messages which need to be singular or plural.\n * Some languages have several plural forms, so _complete_ message clauses\n * are preferable to generating the message on the fly.\n *\n * @private\n * @param {number} n - Non-negative integer\n * @param {string} msg1 - Message to be used in English for `n = 1`\n * @param {string} msg2 - Message to be used in English for `n = 0, 2, 3, ...`\n * @returns {string} message corresponding to value of `n`\n * @example\n * var sprintf = require('util').format;\n * var pkgs = ['one', 'two'];\n * var msg = sprintf(\n *   ngettext(\n *     pkgs.length,\n *     'cannot load package: %s',\n *     'cannot load packages: %s'\n *   ),\n *   pkgs.map(sQuote).join(', ')\n * );\n * console.log(msg); // => cannot load packages: 'one', 'two'\n */\nexports.ngettext = function(n, msg1, msg2) {\n  if (typeof n === 'number' && n >= 0) {\n    return n === 1 ? msg1 : msg2;\n  }\n};\n\n/**\n * It's a noop.\n * @public\n */\nexports.noop = function() {};\n\n/**\n * Creates a map-like object.\n *\n * @description\n * A \"map\" is an object with no prototype, for our purposes. In some cases\n * this would be more appropriate than a `Map`, especially if your environment\n * doesn't support it. Recommended for use in Mocha's public APIs.\n *\n * @public\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map|MDN:Map}\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Custom_and_Null_objects|MDN:Object.create - Custom objects}\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign|MDN:Object.assign}\n * @param {...*} [obj] - Arguments to `Object.assign()`.\n * @returns {Object} An object with no prototype, having `...obj` properties\n */\nexports.createMap = function(obj) {\n  return assign.apply(\n    null,\n    [Object.create(null)].concat(Array.prototype.slice.call(arguments))\n  );\n};\n\n/**\n * Creates a read-only map-like object.\n *\n * @description\n * This differs from {@link module:utils.createMap createMap} only in that\n * the argument must be non-empty, because the result is frozen.\n *\n * @see {@link module:utils.createMap createMap}\n * @param {...*} [obj] - Arguments to `Object.assign()`.\n * @returns {Object} A frozen object with no prototype, having `...obj` properties\n * @throws {TypeError} if argument is not a non-empty object.\n */\nexports.defineConstants = function(obj) {\n  if (type(obj) !== 'object' || !Object.keys(obj).length) {\n    throw new TypeError('Invalid argument; expected a non-empty object');\n  }\n  return Object.freeze(exports.createMap(obj));\n};\n\n}).call(this,require('_process'),require(\"buffer\").Buffer)\n},{\"./errors\":6,\"_process\":69,\"buffer\":43,\"debug\":45,\"fs\":42,\"glob\":42,\"he\":54,\"object.assign\":65,\"path\":42,\"util\":89}],39:[function(require,module,exports){\n'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n},{}],40:[function(require,module,exports){\n\n},{}],41:[function(require,module,exports){\n(function (process){\nvar WritableStream = require('stream').Writable\nvar inherits = require('util').inherits\n\nmodule.exports = BrowserStdout\n\n\ninherits(BrowserStdout, WritableStream)\n\nfunction BrowserStdout(opts) {\n  if (!(this instanceof BrowserStdout)) return new BrowserStdout(opts)\n\n  opts = opts || {}\n  WritableStream.call(this, opts)\n  this.label = (opts.label !== undefined) ? opts.label : 'stdout'\n}\n\nBrowserStdout.prototype._write = function(chunks, encoding, cb) {\n  var output = chunks.toString ? chunks.toString() : chunks\n  if (this.label === false) {\n    console.log(output)\n  } else {\n    console.log(this.label+':', output)\n  }\n  process.nextTick(cb)\n}\n\n}).call(this,require('_process'))\n},{\"_process\":69,\"stream\":84,\"util\":89}],42:[function(require,module,exports){\narguments[4][40][0].apply(exports,arguments)\n},{\"dup\":40}],43:[function(require,module,exports){\n(function (Buffer){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n}).call(this,require(\"buffer\").Buffer)\n},{\"base64-js\":39,\"buffer\":43,\"ieee754\":55}],44:[function(require,module,exports){\n(function (Buffer){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n}).call(this,{\"isBuffer\":require(\"../../is-buffer/index.js\")})\n},{\"../../is-buffer/index.js\":57}],45:[function(require,module,exports){\n(function (process){\n\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n// eslint-disable-next-line complexity\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n    return true;\n  } // Internet Explorer and Edge do not support colors.\n\n\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  } // Is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n\n  if (!this.useColors) {\n    return;\n  }\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit'); // The final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if (match === '%%') {\n      return;\n    }\n\n    index++;\n\n    if (match === '%c') {\n      // We only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  var _console;\n\n  // This hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return (typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (namespaces) {\n      exports.storage.setItem('debug', namespaces);\n    } else {\n      exports.storage.removeItem('debug');\n    }\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    r = exports.storage.getItem('debug');\n  } catch (error) {} // Swallow\n  // XXX (@Qix-) should we be logging these?\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\n\nfunction localstorage() {\n  try {\n    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n    // The Browser also has localStorage in the global context.\n    return localStorage;\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n\nmodule.exports = require('./common')(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (error) {\n    return '[UnexpectedJSONParseError]: ' + error.message;\n  }\n};\n\n\n}).call(this,require('_process'))\n},{\"./common\":46,\"_process\":69}],46:[function(require,module,exports){\n\"use strict\";\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug.default = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = require('ms');\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  /**\n  * Active `debug` instances.\n  */\n\n  createDebug.instances = [];\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var self = debug; // Set `diff` timestamp\n\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\n    // debug.rawLog = rawLog;\n    // env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @api public\n  */\n\n\n  function disable() {\n    createDebug.enable('');\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;\n\n\n},{\"ms\":60}],47:[function(require,module,exports){\n'use strict';\n\nvar keys = require('object-keys');\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';\n\nvar toStr = Object.prototype.toString;\nvar concat = Array.prototype.concat;\nvar origDefineProperty = Object.defineProperty;\n\nvar isFunction = function (fn) {\n\treturn typeof fn === 'function' && toStr.call(fn) === '[object Function]';\n};\n\nvar arePropertyDescriptorsSupported = function () {\n\tvar obj = {};\n\ttry {\n\t\torigDefineProperty(obj, 'x', { enumerable: false, value: obj });\n\t\t// eslint-disable-next-line no-unused-vars, no-restricted-syntax\n\t\tfor (var _ in obj) { // jscs:ignore disallowUnusedVariables\n\t\t\treturn false;\n\t\t}\n\t\treturn obj.x === obj;\n\t} catch (e) { /* this is IE 8. */\n\t\treturn false;\n\t}\n};\nvar supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();\n\nvar defineProperty = function (object, name, value, predicate) {\n\tif (name in object && (!isFunction(predicate) || !predicate())) {\n\t\treturn;\n\t}\n\tif (supportsDescriptors) {\n\t\torigDefineProperty(object, name, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tvalue: value,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\tobject[name] = value;\n\t}\n};\n\nvar defineProperties = function (object, map) {\n\tvar predicates = arguments.length > 2 ? arguments[2] : {};\n\tvar props = keys(map);\n\tif (hasSymbols) {\n\t\tprops = concat.call(props, Object.getOwnPropertySymbols(map));\n\t}\n\tfor (var i = 0; i < props.length; i += 1) {\n\t\tdefineProperty(object, props[i], map[props[i]], predicates[props[i]]);\n\t}\n};\n\ndefineProperties.supportsDescriptors = !!supportsDescriptors;\n\nmodule.exports = defineProperties;\n\n},{\"object-keys\":62}],48:[function(require,module,exports){\n/*!\n\n diff v3.5.0\n\nSoftware License Agreement (BSD License)\n\nCopyright (c) 2009-2015, Kevin Decker <kpdecker@gmail.com>\n\nAll rights reserved.\n\nRedistribution and use of this software in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above\n  copyright notice, this list of conditions and the\n  following disclaimer.\n\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the\n  following disclaimer in the documentation and/or other\n  materials provided with the distribution.\n\n* Neither the name of Kevin Decker nor the names of its\n  contributors may be used to endorse or promote products\n  derived from this software without specific prior\n  written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\nIN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\nOF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n@license\n*/\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(false)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JsDiff\"] = factory();\n\telse\n\t\troot[\"JsDiff\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports.canonicalize = exports.convertChangesToXML = exports.convertChangesToDMP = exports.merge = exports.parsePatch = exports.applyPatches = exports.applyPatch = exports.createPatch = exports.createTwoFilesPatch = exports.structuredPatch = exports.diffArrays = exports.diffJson = exports.diffCss = exports.diffSentences = exports.diffTrimmedLines = exports.diffLines = exports.diffWordsWithSpace = exports.diffWords = exports.diffChars = exports.Diff = undefined;\n\n\t/*istanbul ignore end*/var /*istanbul ignore start*/_base = __webpack_require__(1) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/var _base2 = _interopRequireDefault(_base);\n\n\t/*istanbul ignore end*/var /*istanbul ignore start*/_character = __webpack_require__(2) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_word = __webpack_require__(3) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_line = __webpack_require__(5) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_sentence = __webpack_require__(6) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_css = __webpack_require__(7) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_json = __webpack_require__(8) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_array = __webpack_require__(9) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_apply = __webpack_require__(10) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_parse = __webpack_require__(11) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_merge = __webpack_require__(13) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_create = __webpack_require__(14) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_dmp = __webpack_require__(16) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_xml = __webpack_require__(17) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\t/* See LICENSE file for terms of use */\n\n\t/*\n\t * Text diff implementation.\n\t *\n\t * This library supports the following APIS:\n\t * JsDiff.diffChars: Character by character diff\n\t * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace\n\t * JsDiff.diffLines: Line based diff\n\t *\n\t * JsDiff.diffCss: Diff targeted at CSS content\n\t *\n\t * These methods are based on the implementation proposed in\n\t * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).\n\t * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927\n\t */\n\texports. /*istanbul ignore end*/Diff = _base2['default'];\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/diffChars = _character.diffChars;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/diffWords = _word.diffWords;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/diffWordsWithSpace = _word.diffWordsWithSpace;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/diffLines = _line.diffLines;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/diffTrimmedLines = _line.diffTrimmedLines;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/diffSentences = _sentence.diffSentences;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/diffCss = _css.diffCss;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/diffJson = _json.diffJson;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/diffArrays = _array.diffArrays;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/structuredPatch = _create.structuredPatch;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/createTwoFilesPatch = _create.createTwoFilesPatch;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/createPatch = _create.createPatch;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/applyPatch = _apply.applyPatch;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/applyPatches = _apply.applyPatches;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/parsePatch = _parse.parsePatch;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/merge = _merge.merge;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/convertChangesToDMP = _dmp.convertChangesToDMP;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/convertChangesToXML = _xml.convertChangesToXML;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/canonicalize = _json.canonicalize;\n\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports['default'] = /*istanbul ignore end*/Diff;\n\tfunction Diff() {}\n\n\tDiff.prototype = {\n\t  /*istanbul ignore start*/ /*istanbul ignore end*/diff: function diff(oldString, newString) {\n\t    /*istanbul ignore start*/var /*istanbul ignore end*/options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t    var callback = options.callback;\n\t    if (typeof options === 'function') {\n\t      callback = options;\n\t      options = {};\n\t    }\n\t    this.options = options;\n\n\t    var self = this;\n\n\t    function done(value) {\n\t      if (callback) {\n\t        setTimeout(function () {\n\t          callback(undefined, value);\n\t        }, 0);\n\t        return true;\n\t      } else {\n\t        return value;\n\t      }\n\t    }\n\n\t    // Allow subclasses to massage the input prior to running\n\t    oldString = this.castInput(oldString);\n\t    newString = this.castInput(newString);\n\n\t    oldString = this.removeEmpty(this.tokenize(oldString));\n\t    newString = this.removeEmpty(this.tokenize(newString));\n\n\t    var newLen = newString.length,\n\t        oldLen = oldString.length;\n\t    var editLength = 1;\n\t    var maxEditLength = newLen + oldLen;\n\t    var bestPath = [{ newPos: -1, components: [] }];\n\n\t    // Seed editLength = 0, i.e. the content starts with the same values\n\t    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n\t    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n\t      // Identity per the equality and tokenizer\n\t      return done([{ value: this.join(newString), count: newString.length }]);\n\t    }\n\n\t    // Main worker method. checks all permutations of a given edit length for acceptance.\n\t    function execEditLength() {\n\t      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n\t        var basePath = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n\t        var addPath = bestPath[diagonalPath - 1],\n\t            removePath = bestPath[diagonalPath + 1],\n\t            _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n\t        if (addPath) {\n\t          // No one else is going to attempt to use this value, clear it\n\t          bestPath[diagonalPath - 1] = undefined;\n\t        }\n\n\t        var canAdd = addPath && addPath.newPos + 1 < newLen,\n\t            canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;\n\t        if (!canAdd && !canRemove) {\n\t          // If this path is a terminal then prune\n\t          bestPath[diagonalPath] = undefined;\n\t          continue;\n\t        }\n\n\t        // Select the diagonal that we want to branch from. We select the prior\n\t        // path whose position in the new string is the farthest from the origin\n\t        // and does not pass the bounds of the diff graph\n\t        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\n\t          basePath = clonePath(removePath);\n\t          self.pushComponent(basePath.components, undefined, true);\n\t        } else {\n\t          basePath = addPath; // No need to clone, we've pulled it from the list\n\t          basePath.newPos++;\n\t          self.pushComponent(basePath.components, true, undefined);\n\t        }\n\n\t        _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);\n\n\t        // If we have hit the end of both strings, then we are done\n\t        if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {\n\t          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));\n\t        } else {\n\t          // Otherwise track this path as a potential candidate and continue.\n\t          bestPath[diagonalPath] = basePath;\n\t        }\n\t      }\n\n\t      editLength++;\n\t    }\n\n\t    // Performs the length of edit iteration. Is a bit fugly as this has to support the\n\t    // sync and async mode which is never fun. Loops over execEditLength until a value\n\t    // is produced.\n\t    if (callback) {\n\t      (function exec() {\n\t        setTimeout(function () {\n\t          // This should not happen, but we want to be safe.\n\t          /* istanbul ignore next */\n\t          if (editLength > maxEditLength) {\n\t            return callback();\n\t          }\n\n\t          if (!execEditLength()) {\n\t            exec();\n\t          }\n\t        }, 0);\n\t      })();\n\t    } else {\n\t      while (editLength <= maxEditLength) {\n\t        var ret = execEditLength();\n\t        if (ret) {\n\t          return ret;\n\t        }\n\t      }\n\t    }\n\t  },\n\t  /*istanbul ignore start*/ /*istanbul ignore end*/pushComponent: function pushComponent(components, added, removed) {\n\t    var last = components[components.length - 1];\n\t    if (last && last.added === added && last.removed === removed) {\n\t      // We need to clone here as the component clone operation is just\n\t      // as shallow array clone\n\t      components[components.length - 1] = { count: last.count + 1, added: added, removed: removed };\n\t    } else {\n\t      components.push({ count: 1, added: added, removed: removed });\n\t    }\n\t  },\n\t  /*istanbul ignore start*/ /*istanbul ignore end*/extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\n\t    var newLen = newString.length,\n\t        oldLen = oldString.length,\n\t        newPos = basePath.newPos,\n\t        oldPos = newPos - diagonalPath,\n\t        commonCount = 0;\n\t    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n\t      newPos++;\n\t      oldPos++;\n\t      commonCount++;\n\t    }\n\n\t    if (commonCount) {\n\t      basePath.components.push({ count: commonCount });\n\t    }\n\n\t    basePath.newPos = newPos;\n\t    return oldPos;\n\t  },\n\t  /*istanbul ignore start*/ /*istanbul ignore end*/equals: function equals(left, right) {\n\t    if (this.options.comparator) {\n\t      return this.options.comparator(left, right);\n\t    } else {\n\t      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\n\t    }\n\t  },\n\t  /*istanbul ignore start*/ /*istanbul ignore end*/removeEmpty: function removeEmpty(array) {\n\t    var ret = [];\n\t    for (var i = 0; i < array.length; i++) {\n\t      if (array[i]) {\n\t        ret.push(array[i]);\n\t      }\n\t    }\n\t    return ret;\n\t  },\n\t  /*istanbul ignore start*/ /*istanbul ignore end*/castInput: function castInput(value) {\n\t    return value;\n\t  },\n\t  /*istanbul ignore start*/ /*istanbul ignore end*/tokenize: function tokenize(value) {\n\t    return value.split('');\n\t  },\n\t  /*istanbul ignore start*/ /*istanbul ignore end*/join: function join(chars) {\n\t    return chars.join('');\n\t  }\n\t};\n\n\tfunction buildValues(diff, components, newString, oldString, useLongestToken) {\n\t  var componentPos = 0,\n\t      componentLen = components.length,\n\t      newPos = 0,\n\t      oldPos = 0;\n\n\t  for (; componentPos < componentLen; componentPos++) {\n\t    var component = components[componentPos];\n\t    if (!component.removed) {\n\t      if (!component.added && useLongestToken) {\n\t        var value = newString.slice(newPos, newPos + component.count);\n\t        value = value.map(function (value, i) {\n\t          var oldValue = oldString[oldPos + i];\n\t          return oldValue.length > value.length ? oldValue : value;\n\t        });\n\n\t        component.value = diff.join(value);\n\t      } else {\n\t        component.value = diff.join(newString.slice(newPos, newPos + component.count));\n\t      }\n\t      newPos += component.count;\n\n\t      // Common case\n\t      if (!component.added) {\n\t        oldPos += component.count;\n\t      }\n\t    } else {\n\t      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\n\t      oldPos += component.count;\n\n\t      // Reverse add and remove so removes are output first to match common convention\n\t      // The diffing algorithm is tied to add then remove output and this is the simplest\n\t      // route to get the desired output with minimal overhead.\n\t      if (componentPos && components[componentPos - 1].added) {\n\t        var tmp = components[componentPos - 1];\n\t        components[componentPos - 1] = components[componentPos];\n\t        components[componentPos] = tmp;\n\t      }\n\t    }\n\t  }\n\n\t  // Special case handle for when one terminal is ignored (i.e. whitespace).\n\t  // For this case we merge the terminal into the prior string and drop the change.\n\t  // This is only available for string mode.\n\t  var lastComponent = components[componentLen - 1];\n\t  if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {\n\t    components[componentLen - 2].value += lastComponent.value;\n\t    components.pop();\n\t  }\n\n\t  return components;\n\t}\n\n\tfunction clonePath(path) {\n\t  return { newPos: path.newPos, components: path.components.slice(0) };\n\t}\n\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports.characterDiff = undefined;\n\texports. /*istanbul ignore end*/diffChars = diffChars;\n\n\tvar /*istanbul ignore start*/_base = __webpack_require__(1) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/var _base2 = _interopRequireDefault(_base);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\t/*istanbul ignore end*/var characterDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/characterDiff = new /*istanbul ignore start*/_base2['default'] /*istanbul ignore end*/();\n\tfunction diffChars(oldStr, newStr, options) {\n\t  return characterDiff.diff(oldStr, newStr, options);\n\t}\n\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports.wordDiff = undefined;\n\texports. /*istanbul ignore end*/diffWords = diffWords;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/diffWordsWithSpace = diffWordsWithSpace;\n\n\tvar /*istanbul ignore start*/_base = __webpack_require__(1) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/var _base2 = _interopRequireDefault(_base);\n\n\t/*istanbul ignore end*/var /*istanbul ignore start*/_params = __webpack_require__(4) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\t/*istanbul ignore end*/ // Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode\n\t//\n\t// Ranges and exceptions:\n\t// Latin-1 Supplement, 0080–00FF\n\t//  - U+00D7  × Multiplication sign\n\t//  - U+00F7  ÷ Division sign\n\t// Latin Extended-A, 0100–017F\n\t// Latin Extended-B, 0180–024F\n\t// IPA Extensions, 0250–02AF\n\t// Spacing Modifier Letters, 02B0–02FF\n\t//  - U+02C7  ˇ &#711;  Caron\n\t//  - U+02D8  ˘ &#728;  Breve\n\t//  - U+02D9  ˙ &#729;  Dot Above\n\t//  - U+02DA  ˚ &#730;  Ring Above\n\t//  - U+02DB  ˛ &#731;  Ogonek\n\t//  - U+02DC  ˜ &#732;  Small Tilde\n\t//  - U+02DD  ˝ &#733;  Double Acute Accent\n\t// Latin Extended Additional, 1E00–1EFF\n\tvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\n\n\tvar reWhitespace = /\\S/;\n\n\tvar wordDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/wordDiff = new /*istanbul ignore start*/_base2['default'] /*istanbul ignore end*/();\n\twordDiff.equals = function (left, right) {\n\t  if (this.options.ignoreCase) {\n\t    left = left.toLowerCase();\n\t    right = right.toLowerCase();\n\t  }\n\t  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n\t};\n\twordDiff.tokenize = function (value) {\n\t  var tokens = value.split(/(\\s+|\\b)/);\n\n\t  // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n\t  for (var i = 0; i < tokens.length - 1; i++) {\n\t    // If we have an empty string in the next field and we have only word chars before and after, merge\n\t    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n\t      tokens[i] += tokens[i + 2];\n\t      tokens.splice(i + 1, 2);\n\t      i--;\n\t    }\n\t  }\n\n\t  return tokens;\n\t};\n\n\tfunction diffWords(oldStr, newStr, options) {\n\t  options = /*istanbul ignore start*/(0, _params.generateOptions) /*istanbul ignore end*/(options, { ignoreWhitespace: true });\n\t  return wordDiff.diff(oldStr, newStr, options);\n\t}\n\n\tfunction diffWordsWithSpace(oldStr, newStr, options) {\n\t  return wordDiff.diff(oldStr, newStr, options);\n\t}\n\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports. /*istanbul ignore end*/generateOptions = generateOptions;\n\tfunction generateOptions(options, defaults) {\n\t  if (typeof options === 'function') {\n\t    defaults.callback = options;\n\t  } else if (options) {\n\t    for (var name in options) {\n\t      /* istanbul ignore else */\n\t      if (options.hasOwnProperty(name)) {\n\t        defaults[name] = options[name];\n\t      }\n\t    }\n\t  }\n\t  return defaults;\n\t}\n\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports.lineDiff = undefined;\n\texports. /*istanbul ignore end*/diffLines = diffLines;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/diffTrimmedLines = diffTrimmedLines;\n\n\tvar /*istanbul ignore start*/_base = __webpack_require__(1) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/var _base2 = _interopRequireDefault(_base);\n\n\t/*istanbul ignore end*/var /*istanbul ignore start*/_params = __webpack_require__(4) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\t/*istanbul ignore end*/var lineDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/lineDiff = new /*istanbul ignore start*/_base2['default'] /*istanbul ignore end*/();\n\tlineDiff.tokenize = function (value) {\n\t  var retLines = [],\n\t      linesAndNewlines = value.split(/(\\n|\\r\\n)/);\n\n\t  // Ignore the final empty token that occurs if the string ends with a new line\n\t  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n\t    linesAndNewlines.pop();\n\t  }\n\n\t  // Merge the content and line separators into single tokens\n\t  for (var i = 0; i < linesAndNewlines.length; i++) {\n\t    var line = linesAndNewlines[i];\n\n\t    if (i % 2 && !this.options.newlineIsToken) {\n\t      retLines[retLines.length - 1] += line;\n\t    } else {\n\t      if (this.options.ignoreWhitespace) {\n\t        line = line.trim();\n\t      }\n\t      retLines.push(line);\n\t    }\n\t  }\n\n\t  return retLines;\n\t};\n\n\tfunction diffLines(oldStr, newStr, callback) {\n\t  return lineDiff.diff(oldStr, newStr, callback);\n\t}\n\tfunction diffTrimmedLines(oldStr, newStr, callback) {\n\t  var options = /*istanbul ignore start*/(0, _params.generateOptions) /*istanbul ignore end*/(callback, { ignoreWhitespace: true });\n\t  return lineDiff.diff(oldStr, newStr, options);\n\t}\n\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports.sentenceDiff = undefined;\n\texports. /*istanbul ignore end*/diffSentences = diffSentences;\n\n\tvar /*istanbul ignore start*/_base = __webpack_require__(1) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/var _base2 = _interopRequireDefault(_base);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\t/*istanbul ignore end*/var sentenceDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/sentenceDiff = new /*istanbul ignore start*/_base2['default'] /*istanbul ignore end*/();\n\tsentenceDiff.tokenize = function (value) {\n\t  return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n\t};\n\n\tfunction diffSentences(oldStr, newStr, callback) {\n\t  return sentenceDiff.diff(oldStr, newStr, callback);\n\t}\n\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports.cssDiff = undefined;\n\texports. /*istanbul ignore end*/diffCss = diffCss;\n\n\tvar /*istanbul ignore start*/_base = __webpack_require__(1) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/var _base2 = _interopRequireDefault(_base);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\t/*istanbul ignore end*/var cssDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/cssDiff = new /*istanbul ignore start*/_base2['default'] /*istanbul ignore end*/();\n\tcssDiff.tokenize = function (value) {\n\t  return value.split(/([{}:;,]|\\s+)/);\n\t};\n\n\tfunction diffCss(oldStr, newStr, callback) {\n\t  return cssDiff.diff(oldStr, newStr, callback);\n\t}\n\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports.jsonDiff = undefined;\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\texports. /*istanbul ignore end*/diffJson = diffJson;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/canonicalize = canonicalize;\n\n\tvar /*istanbul ignore start*/_base = __webpack_require__(1) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/var _base2 = _interopRequireDefault(_base);\n\n\t/*istanbul ignore end*/var /*istanbul ignore start*/_line = __webpack_require__(5) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\t/*istanbul ignore end*/var objectPrototypeToString = Object.prototype.toString;\n\n\tvar jsonDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/jsonDiff = new /*istanbul ignore start*/_base2['default'] /*istanbul ignore end*/();\n\t// Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n\t// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\n\tjsonDiff.useLongestToken = true;\n\n\tjsonDiff.tokenize = /*istanbul ignore start*/_line.lineDiff /*istanbul ignore end*/.tokenize;\n\tjsonDiff.castInput = function (value) {\n\t  /*istanbul ignore start*/var _options = /*istanbul ignore end*/this.options,\n\t      undefinedReplacement = _options.undefinedReplacement,\n\t      _options$stringifyRep = _options.stringifyReplacer,\n\t      stringifyReplacer = _options$stringifyRep === undefined ? function (k, v) /*istanbul ignore start*/{\n\t    return (/*istanbul ignore end*/typeof v === 'undefined' ? undefinedReplacement : v\n\t    );\n\t  } : _options$stringifyRep;\n\n\n\t  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\n\t};\n\tjsonDiff.equals = function (left, right) {\n\t  return (/*istanbul ignore start*/_base2['default'] /*istanbul ignore end*/.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'))\n\t  );\n\t};\n\n\tfunction diffJson(oldObj, newObj, options) {\n\t  return jsonDiff.diff(oldObj, newObj, options);\n\t}\n\n\t// This function handles the presence of circular references by bailing out when encountering an\n\t// object that is already on the \"stack\" of items being processed. Accepts an optional replacer\n\tfunction canonicalize(obj, stack, replacementStack, replacer, key) {\n\t  stack = stack || [];\n\t  replacementStack = replacementStack || [];\n\n\t  if (replacer) {\n\t    obj = replacer(key, obj);\n\t  }\n\n\t  var i = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n\n\t  for (i = 0; i < stack.length; i += 1) {\n\t    if (stack[i] === obj) {\n\t      return replacementStack[i];\n\t    }\n\t  }\n\n\t  var canonicalizedObj = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n\n\t  if ('[object Array]' === objectPrototypeToString.call(obj)) {\n\t    stack.push(obj);\n\t    canonicalizedObj = new Array(obj.length);\n\t    replacementStack.push(canonicalizedObj);\n\t    for (i = 0; i < obj.length; i += 1) {\n\t      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\n\t    }\n\t    stack.pop();\n\t    replacementStack.pop();\n\t    return canonicalizedObj;\n\t  }\n\n\t  if (obj && obj.toJSON) {\n\t    obj = obj.toJSON();\n\t  }\n\n\t  if ( /*istanbul ignore start*/(typeof /*istanbul ignore end*/obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null) {\n\t    stack.push(obj);\n\t    canonicalizedObj = {};\n\t    replacementStack.push(canonicalizedObj);\n\t    var sortedKeys = [],\n\t        _key = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n\t    for (_key in obj) {\n\t      /* istanbul ignore else */\n\t      if (obj.hasOwnProperty(_key)) {\n\t        sortedKeys.push(_key);\n\t      }\n\t    }\n\t    sortedKeys.sort();\n\t    for (i = 0; i < sortedKeys.length; i += 1) {\n\t      _key = sortedKeys[i];\n\t      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\n\t    }\n\t    stack.pop();\n\t    replacementStack.pop();\n\t  } else {\n\t    canonicalizedObj = obj;\n\t  }\n\t  return canonicalizedObj;\n\t}\n\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports.arrayDiff = undefined;\n\texports. /*istanbul ignore end*/diffArrays = diffArrays;\n\n\tvar /*istanbul ignore start*/_base = __webpack_require__(1) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/var _base2 = _interopRequireDefault(_base);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\t/*istanbul ignore end*/var arrayDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/arrayDiff = new /*istanbul ignore start*/_base2['default'] /*istanbul ignore end*/();\n\tarrayDiff.tokenize = function (value) {\n\t  return value.slice();\n\t};\n\tarrayDiff.join = arrayDiff.removeEmpty = function (value) {\n\t  return value;\n\t};\n\n\tfunction diffArrays(oldArr, newArr, callback) {\n\t  return arrayDiff.diff(oldArr, newArr, callback);\n\t}\n\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports. /*istanbul ignore end*/applyPatch = applyPatch;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/applyPatches = applyPatches;\n\n\tvar /*istanbul ignore start*/_parse = __webpack_require__(11) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_distanceIterator = __webpack_require__(12) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/var _distanceIterator2 = _interopRequireDefault(_distanceIterator);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\t/*istanbul ignore end*/function applyPatch(source, uniDiff) {\n\t  /*istanbul ignore start*/var /*istanbul ignore end*/options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t  if (typeof uniDiff === 'string') {\n\t    uniDiff = /*istanbul ignore start*/(0, _parse.parsePatch) /*istanbul ignore end*/(uniDiff);\n\t  }\n\n\t  if (Array.isArray(uniDiff)) {\n\t    if (uniDiff.length > 1) {\n\t      throw new Error('applyPatch only works with a single input.');\n\t    }\n\n\t    uniDiff = uniDiff[0];\n\t  }\n\n\t  // Apply the diff to the input\n\t  var lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n\t      delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n\t      hunks = uniDiff.hunks,\n\t      compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) /*istanbul ignore start*/{\n\t    return (/*istanbul ignore end*/line === patchContent\n\t    );\n\t  },\n\t      errorCount = 0,\n\t      fuzzFactor = options.fuzzFactor || 0,\n\t      minLine = 0,\n\t      offset = 0,\n\t      removeEOFNL = /*istanbul ignore start*/void 0 /*istanbul ignore end*/,\n\t      addEOFNL = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n\n\t  /**\n\t   * Checks if the hunk exactly fits on the provided location\n\t   */\n\t  function hunkFits(hunk, toPos) {\n\t    for (var j = 0; j < hunk.lines.length; j++) {\n\t      var line = hunk.lines[j],\n\t          operation = line.length > 0 ? line[0] : ' ',\n\t          content = line.length > 0 ? line.substr(1) : line;\n\n\t      if (operation === ' ' || operation === '-') {\n\t        // Context sanity check\n\t        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\n\t          errorCount++;\n\n\t          if (errorCount > fuzzFactor) {\n\t            return false;\n\t          }\n\t        }\n\t        toPos++;\n\t      }\n\t    }\n\n\t    return true;\n\t  }\n\n\t  // Search best fit offsets for each hunk based on the previous ones\n\t  for (var i = 0; i < hunks.length; i++) {\n\t    var hunk = hunks[i],\n\t        maxLine = lines.length - hunk.oldLines,\n\t        localOffset = 0,\n\t        toPos = offset + hunk.oldStart - 1;\n\n\t    var iterator = /*istanbul ignore start*/(0, _distanceIterator2['default']) /*istanbul ignore end*/(toPos, minLine, maxLine);\n\n\t    for (; localOffset !== undefined; localOffset = iterator()) {\n\t      if (hunkFits(hunk, toPos + localOffset)) {\n\t        hunk.offset = offset += localOffset;\n\t        break;\n\t      }\n\t    }\n\n\t    if (localOffset === undefined) {\n\t      return false;\n\t    }\n\n\t    // Set lower text limit to end of the current hunk, so next ones don't try\n\t    // to fit over already patched text\n\t    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\n\t  }\n\n\t  // Apply patch hunks\n\t  var diffOffset = 0;\n\t  for (var _i = 0; _i < hunks.length; _i++) {\n\t    var _hunk = hunks[_i],\n\t        _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;\n\t    diffOffset += _hunk.newLines - _hunk.oldLines;\n\n\t    if (_toPos < 0) {\n\t      // Creating a new file\n\t      _toPos = 0;\n\t    }\n\n\t    for (var j = 0; j < _hunk.lines.length; j++) {\n\t      var line = _hunk.lines[j],\n\t          operation = line.length > 0 ? line[0] : ' ',\n\t          content = line.length > 0 ? line.substr(1) : line,\n\t          delimiter = _hunk.linedelimiters[j];\n\n\t      if (operation === ' ') {\n\t        _toPos++;\n\t      } else if (operation === '-') {\n\t        lines.splice(_toPos, 1);\n\t        delimiters.splice(_toPos, 1);\n\t        /* istanbul ignore else */\n\t      } else if (operation === '+') {\n\t        lines.splice(_toPos, 0, content);\n\t        delimiters.splice(_toPos, 0, delimiter);\n\t        _toPos++;\n\t      } else if (operation === '\\\\') {\n\t        var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\n\t        if (previousOperation === '+') {\n\t          removeEOFNL = true;\n\t        } else if (previousOperation === '-') {\n\t          addEOFNL = true;\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  // Handle EOFNL insertion/removal\n\t  if (removeEOFNL) {\n\t    while (!lines[lines.length - 1]) {\n\t      lines.pop();\n\t      delimiters.pop();\n\t    }\n\t  } else if (addEOFNL) {\n\t    lines.push('');\n\t    delimiters.push('\\n');\n\t  }\n\t  for (var _k = 0; _k < lines.length - 1; _k++) {\n\t    lines[_k] = lines[_k] + delimiters[_k];\n\t  }\n\t  return lines.join('');\n\t}\n\n\t// Wrapper that supports multiple file patches via callbacks.\n\tfunction applyPatches(uniDiff, options) {\n\t  if (typeof uniDiff === 'string') {\n\t    uniDiff = /*istanbul ignore start*/(0, _parse.parsePatch) /*istanbul ignore end*/(uniDiff);\n\t  }\n\n\t  var currentIndex = 0;\n\t  function processIndex() {\n\t    var index = uniDiff[currentIndex++];\n\t    if (!index) {\n\t      return options.complete();\n\t    }\n\n\t    options.loadFile(index, function (err, data) {\n\t      if (err) {\n\t        return options.complete(err);\n\t      }\n\n\t      var updatedContent = applyPatch(data, index, options);\n\t      options.patched(index, updatedContent, function (err) {\n\t        if (err) {\n\t          return options.complete(err);\n\t        }\n\n\t        processIndex();\n\t      });\n\t    });\n\t  }\n\t  processIndex();\n\t}\n\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports. /*istanbul ignore end*/parsePatch = parsePatch;\n\tfunction parsePatch(uniDiff) {\n\t  /*istanbul ignore start*/var /*istanbul ignore end*/options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t  var diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n\t      delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n\t      list = [],\n\t      i = 0;\n\n\t  function parseIndex() {\n\t    var index = {};\n\t    list.push(index);\n\n\t    // Parse diff metadata\n\t    while (i < diffstr.length) {\n\t      var line = diffstr[i];\n\n\t      // File header found, end parsing diff metadata\n\t      if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\n\t        break;\n\t      }\n\n\t      // Diff index\n\t      var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\n\t      if (header) {\n\t        index.index = header[1];\n\t      }\n\n\t      i++;\n\t    }\n\n\t    // Parse file headers if they are defined. Unified diff requires them, but\n\t    // there's no technical issues to have an isolated hunk without file header\n\t    parseFileHeader(index);\n\t    parseFileHeader(index);\n\n\t    // Parse hunks\n\t    index.hunks = [];\n\n\t    while (i < diffstr.length) {\n\t      var _line = diffstr[i];\n\n\t      if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\n\t        break;\n\t      } else if (/^@@/.test(_line)) {\n\t        index.hunks.push(parseHunk());\n\t      } else if (_line && options.strict) {\n\t        // Ignore unexpected content unless in strict mode\n\t        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));\n\t      } else {\n\t        i++;\n\t      }\n\t    }\n\t  }\n\n\t  // Parses the --- and +++ headers, if none are found, no lines\n\t  // are consumed.\n\t  function parseFileHeader(index) {\n\t    var fileHeader = /^(---|\\+\\+\\+)\\s+(.*)$/.exec(diffstr[i]);\n\t    if (fileHeader) {\n\t      var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\n\t      var data = fileHeader[2].split('\\t', 2);\n\t      var fileName = data[0].replace(/\\\\\\\\/g, '\\\\');\n\t      if (/^\".*\"$/.test(fileName)) {\n\t        fileName = fileName.substr(1, fileName.length - 2);\n\t      }\n\t      index[keyPrefix + 'FileName'] = fileName;\n\t      index[keyPrefix + 'Header'] = (data[1] || '').trim();\n\n\t      i++;\n\t    }\n\t  }\n\n\t  // Parses a hunk\n\t  // This assumes that we are at the start of a hunk.\n\t  function parseHunk() {\n\t    var chunkHeaderIndex = i,\n\t        chunkHeaderLine = diffstr[i++],\n\t        chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\n\n\t    var hunk = {\n\t      oldStart: +chunkHeader[1],\n\t      oldLines: +chunkHeader[2] || 1,\n\t      newStart: +chunkHeader[3],\n\t      newLines: +chunkHeader[4] || 1,\n\t      lines: [],\n\t      linedelimiters: []\n\t    };\n\n\t    var addCount = 0,\n\t        removeCount = 0;\n\t    for (; i < diffstr.length; i++) {\n\t      // Lines starting with '---' could be mistaken for the \"remove line\" operation\n\t      // But they could be the header for the next file. Therefore prune such cases out.\n\t      if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {\n\t        break;\n\t      }\n\t      var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];\n\n\t      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\n\t        hunk.lines.push(diffstr[i]);\n\t        hunk.linedelimiters.push(delimiters[i] || '\\n');\n\n\t        if (operation === '+') {\n\t          addCount++;\n\t        } else if (operation === '-') {\n\t          removeCount++;\n\t        } else if (operation === ' ') {\n\t          addCount++;\n\t          removeCount++;\n\t        }\n\t      } else {\n\t        break;\n\t      }\n\t    }\n\n\t    // Handle the empty block count case\n\t    if (!addCount && hunk.newLines === 1) {\n\t      hunk.newLines = 0;\n\t    }\n\t    if (!removeCount && hunk.oldLines === 1) {\n\t      hunk.oldLines = 0;\n\t    }\n\n\t    // Perform optional sanity checking\n\t    if (options.strict) {\n\t      if (addCount !== hunk.newLines) {\n\t        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n\t      }\n\t      if (removeCount !== hunk.oldLines) {\n\t        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n\t      }\n\t    }\n\n\t    return hunk;\n\t  }\n\n\t  while (i < diffstr.length) {\n\t    parseIndex();\n\t  }\n\n\t  return list;\n\t}\n\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n\t/*istanbul ignore start*/\"use strict\";\n\n\texports.__esModule = true;\n\n\texports[\"default\"] = /*istanbul ignore end*/function (start, minLine, maxLine) {\n\t  var wantForward = true,\n\t      backwardExhausted = false,\n\t      forwardExhausted = false,\n\t      localOffset = 1;\n\n\t  return function iterator() {\n\t    if (wantForward && !forwardExhausted) {\n\t      if (backwardExhausted) {\n\t        localOffset++;\n\t      } else {\n\t        wantForward = false;\n\t      }\n\n\t      // Check if trying to fit beyond text length, and if not, check it fits\n\t      // after offset location (or desired location on first iteration)\n\t      if (start + localOffset <= maxLine) {\n\t        return localOffset;\n\t      }\n\n\t      forwardExhausted = true;\n\t    }\n\n\t    if (!backwardExhausted) {\n\t      if (!forwardExhausted) {\n\t        wantForward = true;\n\t      }\n\n\t      // Check if trying to fit before text beginning, and if not, check it fits\n\t      // before offset location\n\t      if (minLine <= start - localOffset) {\n\t        return -localOffset++;\n\t      }\n\n\t      backwardExhausted = true;\n\t      return iterator();\n\t    }\n\n\t    // We tried to fit hunk before text beginning and beyond text length, then\n\t    // hunk can't fit on the text. Return undefined\n\t  };\n\t};\n\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports. /*istanbul ignore end*/calcLineCount = calcLineCount;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/merge = merge;\n\n\tvar /*istanbul ignore start*/_create = __webpack_require__(14) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_parse = __webpack_require__(11) /*istanbul ignore end*/;\n\n\tvar /*istanbul ignore start*/_array = __webpack_require__(15) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n\t/*istanbul ignore end*/function calcLineCount(hunk) {\n\t  /*istanbul ignore start*/var _calcOldNewLineCount = /*istanbul ignore end*/calcOldNewLineCount(hunk.lines),\n\t      oldLines = _calcOldNewLineCount.oldLines,\n\t      newLines = _calcOldNewLineCount.newLines;\n\n\t  if (oldLines !== undefined) {\n\t    hunk.oldLines = oldLines;\n\t  } else {\n\t    delete hunk.oldLines;\n\t  }\n\n\t  if (newLines !== undefined) {\n\t    hunk.newLines = newLines;\n\t  } else {\n\t    delete hunk.newLines;\n\t  }\n\t}\n\n\tfunction merge(mine, theirs, base) {\n\t  mine = loadPatch(mine, base);\n\t  theirs = loadPatch(theirs, base);\n\n\t  var ret = {};\n\n\t  // For index we just let it pass through as it doesn't have any necessary meaning.\n\t  // Leaving sanity checks on this to the API consumer that may know more about the\n\t  // meaning in their own context.\n\t  if (mine.index || theirs.index) {\n\t    ret.index = mine.index || theirs.index;\n\t  }\n\n\t  if (mine.newFileName || theirs.newFileName) {\n\t    if (!fileNameChanged(mine)) {\n\t      // No header or no change in ours, use theirs (and ours if theirs does not exist)\n\t      ret.oldFileName = theirs.oldFileName || mine.oldFileName;\n\t      ret.newFileName = theirs.newFileName || mine.newFileName;\n\t      ret.oldHeader = theirs.oldHeader || mine.oldHeader;\n\t      ret.newHeader = theirs.newHeader || mine.newHeader;\n\t    } else if (!fileNameChanged(theirs)) {\n\t      // No header or no change in theirs, use ours\n\t      ret.oldFileName = mine.oldFileName;\n\t      ret.newFileName = mine.newFileName;\n\t      ret.oldHeader = mine.oldHeader;\n\t      ret.newHeader = mine.newHeader;\n\t    } else {\n\t      // Both changed... figure it out\n\t      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\n\t      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\n\t      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\n\t      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\n\t    }\n\t  }\n\n\t  ret.hunks = [];\n\n\t  var mineIndex = 0,\n\t      theirsIndex = 0,\n\t      mineOffset = 0,\n\t      theirsOffset = 0;\n\n\t  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\n\t    var mineCurrent = mine.hunks[mineIndex] || { oldStart: Infinity },\n\t        theirsCurrent = theirs.hunks[theirsIndex] || { oldStart: Infinity };\n\n\t    if (hunkBefore(mineCurrent, theirsCurrent)) {\n\t      // This patch does not overlap with any of the others, yay.\n\t      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\n\t      mineIndex++;\n\t      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\n\t    } else if (hunkBefore(theirsCurrent, mineCurrent)) {\n\t      // This patch does not overlap with any of the others, yay.\n\t      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\n\t      theirsIndex++;\n\t      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\n\t    } else {\n\t      // Overlap, merge as best we can\n\t      var mergedHunk = {\n\t        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\n\t        oldLines: 0,\n\t        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\n\t        newLines: 0,\n\t        lines: []\n\t      };\n\t      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\n\t      theirsIndex++;\n\t      mineIndex++;\n\n\t      ret.hunks.push(mergedHunk);\n\t    }\n\t  }\n\n\t  return ret;\n\t}\n\n\tfunction loadPatch(param, base) {\n\t  if (typeof param === 'string') {\n\t    if (/^@@/m.test(param) || /^Index:/m.test(param)) {\n\t      return (/*istanbul ignore start*/(0, _parse.parsePatch) /*istanbul ignore end*/(param)[0]\n\t      );\n\t    }\n\n\t    if (!base) {\n\t      throw new Error('Must provide a base reference or pass in a patch');\n\t    }\n\t    return (/*istanbul ignore start*/(0, _create.structuredPatch) /*istanbul ignore end*/(undefined, undefined, base, param)\n\t    );\n\t  }\n\n\t  return param;\n\t}\n\n\tfunction fileNameChanged(patch) {\n\t  return patch.newFileName && patch.newFileName !== patch.oldFileName;\n\t}\n\n\tfunction selectField(index, mine, theirs) {\n\t  if (mine === theirs) {\n\t    return mine;\n\t  } else {\n\t    index.conflict = true;\n\t    return { mine: mine, theirs: theirs };\n\t  }\n\t}\n\n\tfunction hunkBefore(test, check) {\n\t  return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\n\t}\n\n\tfunction cloneHunk(hunk, offset) {\n\t  return {\n\t    oldStart: hunk.oldStart, oldLines: hunk.oldLines,\n\t    newStart: hunk.newStart + offset, newLines: hunk.newLines,\n\t    lines: hunk.lines\n\t  };\n\t}\n\n\tfunction mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\n\t  // This will generally result in a conflicted hunk, but there are cases where the context\n\t  // is the only overlap where we can successfully merge the content here.\n\t  var mine = { offset: mineOffset, lines: mineLines, index: 0 },\n\t      their = { offset: theirOffset, lines: theirLines, index: 0 };\n\n\t  // Handle any leading content\n\t  insertLeading(hunk, mine, their);\n\t  insertLeading(hunk, their, mine);\n\n\t  // Now in the overlap content. Scan through and select the best changes from each.\n\t  while (mine.index < mine.lines.length && their.index < their.lines.length) {\n\t    var mineCurrent = mine.lines[mine.index],\n\t        theirCurrent = their.lines[their.index];\n\n\t    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\n\t      // Both modified ...\n\t      mutualChange(hunk, mine, their);\n\t    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\n\t      /*istanbul ignore start*/var _hunk$lines;\n\n\t      /*istanbul ignore end*/ // Mine inserted\n\t      /*istanbul ignore start*/(_hunk$lines = /*istanbul ignore end*/hunk.lines).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_hunk$lines /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/collectChange(mine)));\n\t    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\n\t      /*istanbul ignore start*/var _hunk$lines2;\n\n\t      /*istanbul ignore end*/ // Theirs inserted\n\t      /*istanbul ignore start*/(_hunk$lines2 = /*istanbul ignore end*/hunk.lines).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_hunk$lines2 /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/collectChange(their)));\n\t    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\n\t      // Mine removed or edited\n\t      removal(hunk, mine, their);\n\t    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\n\t      // Their removed or edited\n\t      removal(hunk, their, mine, true);\n\t    } else if (mineCurrent === theirCurrent) {\n\t      // Context identity\n\t      hunk.lines.push(mineCurrent);\n\t      mine.index++;\n\t      their.index++;\n\t    } else {\n\t      // Context mismatch\n\t      conflict(hunk, collectChange(mine), collectChange(their));\n\t    }\n\t  }\n\n\t  // Now push anything that may be remaining\n\t  insertTrailing(hunk, mine);\n\t  insertTrailing(hunk, their);\n\n\t  calcLineCount(hunk);\n\t}\n\n\tfunction mutualChange(hunk, mine, their) {\n\t  var myChanges = collectChange(mine),\n\t      theirChanges = collectChange(their);\n\n\t  if (allRemoves(myChanges) && allRemoves(theirChanges)) {\n\t    // Special case for remove changes that are supersets of one another\n\t    if ( /*istanbul ignore start*/(0, _array.arrayStartsWith) /*istanbul ignore end*/(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\n\t      /*istanbul ignore start*/var _hunk$lines3;\n\n\t      /*istanbul ignore end*/ /*istanbul ignore start*/(_hunk$lines3 = /*istanbul ignore end*/hunk.lines).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_hunk$lines3 /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/myChanges));\n\t      return;\n\t    } else if ( /*istanbul ignore start*/(0, _array.arrayStartsWith) /*istanbul ignore end*/(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\n\t      /*istanbul ignore start*/var _hunk$lines4;\n\n\t      /*istanbul ignore end*/ /*istanbul ignore start*/(_hunk$lines4 = /*istanbul ignore end*/hunk.lines).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_hunk$lines4 /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/theirChanges));\n\t      return;\n\t    }\n\t  } else if ( /*istanbul ignore start*/(0, _array.arrayEqual) /*istanbul ignore end*/(myChanges, theirChanges)) {\n\t    /*istanbul ignore start*/var _hunk$lines5;\n\n\t    /*istanbul ignore end*/ /*istanbul ignore start*/(_hunk$lines5 = /*istanbul ignore end*/hunk.lines).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_hunk$lines5 /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/myChanges));\n\t    return;\n\t  }\n\n\t  conflict(hunk, myChanges, theirChanges);\n\t}\n\n\tfunction removal(hunk, mine, their, swap) {\n\t  var myChanges = collectChange(mine),\n\t      theirChanges = collectContext(their, myChanges);\n\t  if (theirChanges.merged) {\n\t    /*istanbul ignore start*/var _hunk$lines6;\n\n\t    /*istanbul ignore end*/ /*istanbul ignore start*/(_hunk$lines6 = /*istanbul ignore end*/hunk.lines).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_hunk$lines6 /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/theirChanges.merged));\n\t  } else {\n\t    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\n\t  }\n\t}\n\n\tfunction conflict(hunk, mine, their) {\n\t  hunk.conflict = true;\n\t  hunk.lines.push({\n\t    conflict: true,\n\t    mine: mine,\n\t    theirs: their\n\t  });\n\t}\n\n\tfunction insertLeading(hunk, insert, their) {\n\t  while (insert.offset < their.offset && insert.index < insert.lines.length) {\n\t    var line = insert.lines[insert.index++];\n\t    hunk.lines.push(line);\n\t    insert.offset++;\n\t  }\n\t}\n\tfunction insertTrailing(hunk, insert) {\n\t  while (insert.index < insert.lines.length) {\n\t    var line = insert.lines[insert.index++];\n\t    hunk.lines.push(line);\n\t  }\n\t}\n\n\tfunction collectChange(state) {\n\t  var ret = [],\n\t      operation = state.lines[state.index][0];\n\t  while (state.index < state.lines.length) {\n\t    var line = state.lines[state.index];\n\n\t    // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\n\t    if (operation === '-' && line[0] === '+') {\n\t      operation = '+';\n\t    }\n\n\t    if (operation === line[0]) {\n\t      ret.push(line);\n\t      state.index++;\n\t    } else {\n\t      break;\n\t    }\n\t  }\n\n\t  return ret;\n\t}\n\tfunction collectContext(state, matchChanges) {\n\t  var changes = [],\n\t      merged = [],\n\t      matchIndex = 0,\n\t      contextChanges = false,\n\t      conflicted = false;\n\t  while (matchIndex < matchChanges.length && state.index < state.lines.length) {\n\t    var change = state.lines[state.index],\n\t        match = matchChanges[matchIndex];\n\n\t    // Once we've hit our add, then we are done\n\t    if (match[0] === '+') {\n\t      break;\n\t    }\n\n\t    contextChanges = contextChanges || change[0] !== ' ';\n\n\t    merged.push(match);\n\t    matchIndex++;\n\n\t    // Consume any additions in the other block as a conflict to attempt\n\t    // to pull in the remaining context after this\n\t    if (change[0] === '+') {\n\t      conflicted = true;\n\n\t      while (change[0] === '+') {\n\t        changes.push(change);\n\t        change = state.lines[++state.index];\n\t      }\n\t    }\n\n\t    if (match.substr(1) === change.substr(1)) {\n\t      changes.push(change);\n\t      state.index++;\n\t    } else {\n\t      conflicted = true;\n\t    }\n\t  }\n\n\t  if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {\n\t    conflicted = true;\n\t  }\n\n\t  if (conflicted) {\n\t    return changes;\n\t  }\n\n\t  while (matchIndex < matchChanges.length) {\n\t    merged.push(matchChanges[matchIndex++]);\n\t  }\n\n\t  return {\n\t    merged: merged,\n\t    changes: changes\n\t  };\n\t}\n\n\tfunction allRemoves(changes) {\n\t  return changes.reduce(function (prev, change) {\n\t    return prev && change[0] === '-';\n\t  }, true);\n\t}\n\tfunction skipRemoveSuperset(state, removeChanges, delta) {\n\t  for (var i = 0; i < delta; i++) {\n\t    var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\n\t    if (state.lines[state.index + i] !== ' ' + changeContent) {\n\t      return false;\n\t    }\n\t  }\n\n\t  state.index += delta;\n\t  return true;\n\t}\n\n\tfunction calcOldNewLineCount(lines) {\n\t  var oldLines = 0;\n\t  var newLines = 0;\n\n\t  lines.forEach(function (line) {\n\t    if (typeof line !== 'string') {\n\t      var myCount = calcOldNewLineCount(line.mine);\n\t      var theirCount = calcOldNewLineCount(line.theirs);\n\n\t      if (oldLines !== undefined) {\n\t        if (myCount.oldLines === theirCount.oldLines) {\n\t          oldLines += myCount.oldLines;\n\t        } else {\n\t          oldLines = undefined;\n\t        }\n\t      }\n\n\t      if (newLines !== undefined) {\n\t        if (myCount.newLines === theirCount.newLines) {\n\t          newLines += myCount.newLines;\n\t        } else {\n\t          newLines = undefined;\n\t        }\n\t      }\n\t    } else {\n\t      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\n\t        newLines++;\n\t      }\n\t      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\n\t        oldLines++;\n\t      }\n\t    }\n\t  });\n\n\t  return { oldLines: oldLines, newLines: newLines };\n\t}\n\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports. /*istanbul ignore end*/structuredPatch = structuredPatch;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/createTwoFilesPatch = createTwoFilesPatch;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/createPatch = createPatch;\n\n\tvar /*istanbul ignore start*/_line = __webpack_require__(5) /*istanbul ignore end*/;\n\n\t/*istanbul ignore start*/function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n\t/*istanbul ignore end*/function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n\t  if (!options) {\n\t    options = {};\n\t  }\n\t  if (typeof options.context === 'undefined') {\n\t    options.context = 4;\n\t  }\n\n\t  var diff = /*istanbul ignore start*/(0, _line.diffLines) /*istanbul ignore end*/(oldStr, newStr, options);\n\t  diff.push({ value: '', lines: [] }); // Append an empty value to make cleanup easier\n\n\t  function contextLines(lines) {\n\t    return lines.map(function (entry) {\n\t      return ' ' + entry;\n\t    });\n\t  }\n\n\t  var hunks = [];\n\t  var oldRangeStart = 0,\n\t      newRangeStart = 0,\n\t      curRange = [],\n\t      oldLine = 1,\n\t      newLine = 1;\n\n\t  /*istanbul ignore start*/var _loop = function _loop( /*istanbul ignore end*/i) {\n\t    var current = diff[i],\n\t        lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n\t    current.lines = lines;\n\n\t    if (current.added || current.removed) {\n\t      /*istanbul ignore start*/var _curRange;\n\n\t      /*istanbul ignore end*/ // If we have previous context, start with that\n\t      if (!oldRangeStart) {\n\t        var prev = diff[i - 1];\n\t        oldRangeStart = oldLine;\n\t        newRangeStart = newLine;\n\n\t        if (prev) {\n\t          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\n\t          oldRangeStart -= curRange.length;\n\t          newRangeStart -= curRange.length;\n\t        }\n\t      }\n\n\t      // Output our changes\n\t      /*istanbul ignore start*/(_curRange = /*istanbul ignore end*/curRange).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_curRange /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/lines.map(function (entry) {\n\t        return (current.added ? '+' : '-') + entry;\n\t      })));\n\n\t      // Track the updated file position\n\t      if (current.added) {\n\t        newLine += lines.length;\n\t      } else {\n\t        oldLine += lines.length;\n\t      }\n\t    } else {\n\t      // Identical context lines. Track line changes\n\t      if (oldRangeStart) {\n\t        // Close out any changes that have been output (or join overlapping)\n\t        if (lines.length <= options.context * 2 && i < diff.length - 2) {\n\t          /*istanbul ignore start*/var _curRange2;\n\n\t          /*istanbul ignore end*/ // Overlapping\n\t          /*istanbul ignore start*/(_curRange2 = /*istanbul ignore end*/curRange).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_curRange2 /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/contextLines(lines)));\n\t        } else {\n\t          /*istanbul ignore start*/var _curRange3;\n\n\t          /*istanbul ignore end*/ // end the range and output\n\t          var contextSize = Math.min(lines.length, options.context);\n\t          /*istanbul ignore start*/(_curRange3 = /*istanbul ignore end*/curRange).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_curRange3 /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/contextLines(lines.slice(0, contextSize))));\n\n\t          var hunk = {\n\t            oldStart: oldRangeStart,\n\t            oldLines: oldLine - oldRangeStart + contextSize,\n\t            newStart: newRangeStart,\n\t            newLines: newLine - newRangeStart + contextSize,\n\t            lines: curRange\n\t          };\n\t          if (i >= diff.length - 2 && lines.length <= options.context) {\n\t            // EOF is inside this hunk\n\t            var oldEOFNewline = /\\n$/.test(oldStr);\n\t            var newEOFNewline = /\\n$/.test(newStr);\n\t            if (lines.length == 0 && !oldEOFNewline) {\n\t              // special case: old has no eol and no trailing context; no-nl can end up before adds\n\t              curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\n\t            } else if (!oldEOFNewline || !newEOFNewline) {\n\t              curRange.push('\\\\ No newline at end of file');\n\t            }\n\t          }\n\t          hunks.push(hunk);\n\n\t          oldRangeStart = 0;\n\t          newRangeStart = 0;\n\t          curRange = [];\n\t        }\n\t      }\n\t      oldLine += lines.length;\n\t      newLine += lines.length;\n\t    }\n\t  };\n\n\t  for (var i = 0; i < diff.length; i++) {\n\t    /*istanbul ignore start*/_loop( /*istanbul ignore end*/i);\n\t  }\n\n\t  return {\n\t    oldFileName: oldFileName, newFileName: newFileName,\n\t    oldHeader: oldHeader, newHeader: newHeader,\n\t    hunks: hunks\n\t  };\n\t}\n\n\tfunction createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n\t  var diff = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);\n\n\t  var ret = [];\n\t  if (oldFileName == newFileName) {\n\t    ret.push('Index: ' + oldFileName);\n\t  }\n\t  ret.push('===================================================================');\n\t  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\n\t  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\n\n\t  for (var i = 0; i < diff.hunks.length; i++) {\n\t    var hunk = diff.hunks[i];\n\t    ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');\n\t    ret.push.apply(ret, hunk.lines);\n\t  }\n\n\t  return ret.join('\\n') + '\\n';\n\t}\n\n\tfunction createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\n\t  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\n\t}\n\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n\t/*istanbul ignore start*/\"use strict\";\n\n\texports.__esModule = true;\n\texports. /*istanbul ignore end*/arrayEqual = arrayEqual;\n\t/*istanbul ignore start*/exports. /*istanbul ignore end*/arrayStartsWith = arrayStartsWith;\n\tfunction arrayEqual(a, b) {\n\t  if (a.length !== b.length) {\n\t    return false;\n\t  }\n\n\t  return arrayStartsWith(a, b);\n\t}\n\n\tfunction arrayStartsWith(array, start) {\n\t  if (start.length > array.length) {\n\t    return false;\n\t  }\n\n\t  for (var i = 0; i < start.length; i++) {\n\t    if (start[i] !== array[i]) {\n\t      return false;\n\t    }\n\t  }\n\n\t  return true;\n\t}\n\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n\t/*istanbul ignore start*/\"use strict\";\n\n\texports.__esModule = true;\n\texports. /*istanbul ignore end*/convertChangesToDMP = convertChangesToDMP;\n\t// See: http://code.google.com/p/google-diff-match-patch/wiki/API\n\tfunction convertChangesToDMP(changes) {\n\t  var ret = [],\n\t      change = /*istanbul ignore start*/void 0 /*istanbul ignore end*/,\n\t      operation = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n\t  for (var i = 0; i < changes.length; i++) {\n\t    change = changes[i];\n\t    if (change.added) {\n\t      operation = 1;\n\t    } else if (change.removed) {\n\t      operation = -1;\n\t    } else {\n\t      operation = 0;\n\t    }\n\n\t    ret.push([operation, change.value]);\n\t  }\n\t  return ret;\n\t}\n\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n\t/*istanbul ignore start*/'use strict';\n\n\texports.__esModule = true;\n\texports. /*istanbul ignore end*/convertChangesToXML = convertChangesToXML;\n\tfunction convertChangesToXML(changes) {\n\t  var ret = [];\n\t  for (var i = 0; i < changes.length; i++) {\n\t    var change = changes[i];\n\t    if (change.added) {\n\t      ret.push('<ins>');\n\t    } else if (change.removed) {\n\t      ret.push('<del>');\n\t    }\n\n\t    ret.push(escapeHTML(change.value));\n\n\t    if (change.added) {\n\t      ret.push('</ins>');\n\t    } else if (change.removed) {\n\t      ret.push('</del>');\n\t    }\n\t  }\n\t  return ret.join('');\n\t}\n\n\tfunction escapeHTML(s) {\n\t  var n = s;\n\t  n = n.replace(/&/g, '&amp;');\n\t  n = n.replace(/</g, '&lt;');\n\t  n = n.replace(/>/g, '&gt;');\n\t  n = n.replace(/\"/g, '&quot;');\n\n\t  return n;\n\t}\n\n\n\n/***/ })\n/******/ ])\n});\n;\n},{}],49:[function(require,module,exports){\n'use strict';\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe, '\\\\$&');\n};\n\n},{}],50:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n\n},{}],51:[function(require,module,exports){\n'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n\n},{}],52:[function(require,module,exports){\n'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n\n},{\"./implementation\":51}],53:[function(require,module,exports){\n'use strict';\n\n/* eslint complexity: [2, 17], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n\n},{}],54:[function(require,module,exports){\n(function (global){\n/*! https://mths.be/he v1.2.0 by @mathias | MIT license */\n;(function(root) {\n\n\t// Detect free variables `exports`.\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`.\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`.\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t// All astral symbols.\n\tvar regexAstralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\t// All ASCII symbols (not just printable ASCII) except those listed in the\n\t// first column of the overrides table.\n\t// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides\n\tvar regexAsciiWhitelist = /[\\x01-\\x7F]/g;\n\t// All BMP symbols that are not ASCII newlines, printable ASCII symbols, or\n\t// code points listed in the first column of the overrides table on\n\t// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides.\n\tvar regexBmpWhitelist = /[\\x01-\\t\\x0B\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g;\n\n\tvar regexEncodeNonAscii = /<\\u20D2|=\\u20E5|>\\u20D2|\\u205F\\u200A|\\u219D\\u0338|\\u2202\\u0338|\\u2220\\u20D2|\\u2229\\uFE00|\\u222A\\uFE00|\\u223C\\u20D2|\\u223D\\u0331|\\u223E\\u0333|\\u2242\\u0338|\\u224B\\u0338|\\u224D\\u20D2|\\u224E\\u0338|\\u224F\\u0338|\\u2250\\u0338|\\u2261\\u20E5|\\u2264\\u20D2|\\u2265\\u20D2|\\u2266\\u0338|\\u2267\\u0338|\\u2268\\uFE00|\\u2269\\uFE00|\\u226A\\u0338|\\u226A\\u20D2|\\u226B\\u0338|\\u226B\\u20D2|\\u227F\\u0338|\\u2282\\u20D2|\\u2283\\u20D2|\\u228A\\uFE00|\\u228B\\uFE00|\\u228F\\u0338|\\u2290\\u0338|\\u2293\\uFE00|\\u2294\\uFE00|\\u22B4\\u20D2|\\u22B5\\u20D2|\\u22D8\\u0338|\\u22D9\\u0338|\\u22DA\\uFE00|\\u22DB\\uFE00|\\u22F5\\u0338|\\u22F9\\u0338|\\u2933\\u0338|\\u29CF\\u0338|\\u29D0\\u0338|\\u2A6D\\u0338|\\u2A70\\u0338|\\u2A7D\\u0338|\\u2A7E\\u0338|\\u2AA1\\u0338|\\u2AA2\\u0338|\\u2AAC\\uFE00|\\u2AAD\\uFE00|\\u2AAF\\u0338|\\u2AB0\\u0338|\\u2AC5\\u0338|\\u2AC6\\u0338|\\u2ACB\\uFE00|\\u2ACC\\uFE00|\\u2AFD\\u20E5|[\\xA0-\\u0113\\u0116-\\u0122\\u0124-\\u012B\\u012E-\\u014D\\u0150-\\u017E\\u0192\\u01B5\\u01F5\\u0237\\u02C6\\u02C7\\u02D8-\\u02DD\\u0311\\u0391-\\u03A1\\u03A3-\\u03A9\\u03B1-\\u03C9\\u03D1\\u03D2\\u03D5\\u03D6\\u03DC\\u03DD\\u03F0\\u03F1\\u03F5\\u03F6\\u0401-\\u040C\\u040E-\\u044F\\u0451-\\u045C\\u045E\\u045F\\u2002-\\u2005\\u2007-\\u2010\\u2013-\\u2016\\u2018-\\u201A\\u201C-\\u201E\\u2020-\\u2022\\u2025\\u2026\\u2030-\\u2035\\u2039\\u203A\\u203E\\u2041\\u2043\\u2044\\u204F\\u2057\\u205F-\\u2063\\u20AC\\u20DB\\u20DC\\u2102\\u2105\\u210A-\\u2113\\u2115-\\u211E\\u2122\\u2124\\u2127-\\u2129\\u212C\\u212D\\u212F-\\u2131\\u2133-\\u2138\\u2145-\\u2148\\u2153-\\u215E\\u2190-\\u219B\\u219D-\\u21A7\\u21A9-\\u21AE\\u21B0-\\u21B3\\u21B5-\\u21B7\\u21BA-\\u21DB\\u21DD\\u21E4\\u21E5\\u21F5\\u21FD-\\u2205\\u2207-\\u2209\\u220B\\u220C\\u220F-\\u2214\\u2216-\\u2218\\u221A\\u221D-\\u2238\\u223A-\\u2257\\u2259\\u225A\\u225C\\u225F-\\u2262\\u2264-\\u228B\\u228D-\\u229B\\u229D-\\u22A5\\u22A7-\\u22B0\\u22B2-\\u22BB\\u22BD-\\u22DB\\u22DE-\\u22E3\\u22E6-\\u22F7\\u22F9-\\u22FE\\u2305\\u2306\\u2308-\\u2310\\u2312\\u2313\\u2315\\u2316\\u231C-\\u231F\\u2322\\u2323\\u232D\\u232E\\u2336\\u233D\\u233F\\u237C\\u23B0\\u23B1\\u23B4-\\u23B6\\u23DC-\\u23DF\\u23E2\\u23E7\\u2423\\u24C8\\u2500\\u2502\\u250C\\u2510\\u2514\\u2518\\u251C\\u2524\\u252C\\u2534\\u253C\\u2550-\\u256C\\u2580\\u2584\\u2588\\u2591-\\u2593\\u25A1\\u25AA\\u25AB\\u25AD\\u25AE\\u25B1\\u25B3-\\u25B5\\u25B8\\u25B9\\u25BD-\\u25BF\\u25C2\\u25C3\\u25CA\\u25CB\\u25EC\\u25EF\\u25F8-\\u25FC\\u2605\\u2606\\u260E\\u2640\\u2642\\u2660\\u2663\\u2665\\u2666\\u266A\\u266D-\\u266F\\u2713\\u2717\\u2720\\u2736\\u2758\\u2772\\u2773\\u27C8\\u27C9\\u27E6-\\u27ED\\u27F5-\\u27FA\\u27FC\\u27FF\\u2902-\\u2905\\u290C-\\u2913\\u2916\\u2919-\\u2920\\u2923-\\u292A\\u2933\\u2935-\\u2939\\u293C\\u293D\\u2945\\u2948-\\u294B\\u294E-\\u2976\\u2978\\u2979\\u297B-\\u297F\\u2985\\u2986\\u298B-\\u2996\\u299A\\u299C\\u299D\\u29A4-\\u29B7\\u29B9\\u29BB\\u29BC\\u29BE-\\u29C5\\u29C9\\u29CD-\\u29D0\\u29DC-\\u29DE\\u29E3-\\u29E5\\u29EB\\u29F4\\u29F6\\u2A00-\\u2A02\\u2A04\\u2A06\\u2A0C\\u2A0D\\u2A10-\\u2A17\\u2A22-\\u2A27\\u2A29\\u2A2A\\u2A2D-\\u2A31\\u2A33-\\u2A3C\\u2A3F\\u2A40\\u2A42-\\u2A4D\\u2A50\\u2A53-\\u2A58\\u2A5A-\\u2A5D\\u2A5F\\u2A66\\u2A6A\\u2A6D-\\u2A75\\u2A77-\\u2A9A\\u2A9D-\\u2AA2\\u2AA4-\\u2AB0\\u2AB3-\\u2AC8\\u2ACB\\u2ACC\\u2ACF-\\u2ADB\\u2AE4\\u2AE6-\\u2AE9\\u2AEB-\\u2AF3\\u2AFD\\uFB00-\\uFB04]|\\uD835[\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDD6B]/g;\n\tvar encodeMap = {'\\xAD':'shy','\\u200C':'zwnj','\\u200D':'zwj','\\u200E':'lrm','\\u2063':'ic','\\u2062':'it','\\u2061':'af','\\u200F':'rlm','\\u200B':'ZeroWidthSpace','\\u2060':'NoBreak','\\u0311':'DownBreve','\\u20DB':'tdot','\\u20DC':'DotDot','\\t':'Tab','\\n':'NewLine','\\u2008':'puncsp','\\u205F':'MediumSpace','\\u2009':'thinsp','\\u200A':'hairsp','\\u2004':'emsp13','\\u2002':'ensp','\\u2005':'emsp14','\\u2003':'emsp','\\u2007':'numsp','\\xA0':'nbsp','\\u205F\\u200A':'ThickSpace','\\u203E':'oline','_':'lowbar','\\u2010':'dash','\\u2013':'ndash','\\u2014':'mdash','\\u2015':'horbar',',':'comma',';':'semi','\\u204F':'bsemi',':':'colon','\\u2A74':'Colone','!':'excl','\\xA1':'iexcl','?':'quest','\\xBF':'iquest','.':'period','\\u2025':'nldr','\\u2026':'mldr','\\xB7':'middot','\\'':'apos','\\u2018':'lsquo','\\u2019':'rsquo','\\u201A':'sbquo','\\u2039':'lsaquo','\\u203A':'rsaquo','\"':'quot','\\u201C':'ldquo','\\u201D':'rdquo','\\u201E':'bdquo','\\xAB':'laquo','\\xBB':'raquo','(':'lpar',')':'rpar','[':'lsqb',']':'rsqb','{':'lcub','}':'rcub','\\u2308':'lceil','\\u2309':'rceil','\\u230A':'lfloor','\\u230B':'rfloor','\\u2985':'lopar','\\u2986':'ropar','\\u298B':'lbrke','\\u298C':'rbrke','\\u298D':'lbrkslu','\\u298E':'rbrksld','\\u298F':'lbrksld','\\u2990':'rbrkslu','\\u2991':'langd','\\u2992':'rangd','\\u2993':'lparlt','\\u2994':'rpargt','\\u2995':'gtlPar','\\u2996':'ltrPar','\\u27E6':'lobrk','\\u27E7':'robrk','\\u27E8':'lang','\\u27E9':'rang','\\u27EA':'Lang','\\u27EB':'Rang','\\u27EC':'loang','\\u27ED':'roang','\\u2772':'lbbrk','\\u2773':'rbbrk','\\u2016':'Vert','\\xA7':'sect','\\xB6':'para','@':'commat','*':'ast','/':'sol','undefined':null,'&':'amp','#':'num','%':'percnt','\\u2030':'permil','\\u2031':'pertenk','\\u2020':'dagger','\\u2021':'Dagger','\\u2022':'bull','\\u2043':'hybull','\\u2032':'prime','\\u2033':'Prime','\\u2034':'tprime','\\u2057':'qprime','\\u2035':'bprime','\\u2041':'caret','`':'grave','\\xB4':'acute','\\u02DC':'tilde','^':'Hat','\\xAF':'macr','\\u02D8':'breve','\\u02D9':'dot','\\xA8':'die','\\u02DA':'ring','\\u02DD':'dblac','\\xB8':'cedil','\\u02DB':'ogon','\\u02C6':'circ','\\u02C7':'caron','\\xB0':'deg','\\xA9':'copy','\\xAE':'reg','\\u2117':'copysr','\\u2118':'wp','\\u211E':'rx','\\u2127':'mho','\\u2129':'iiota','\\u2190':'larr','\\u219A':'nlarr','\\u2192':'rarr','\\u219B':'nrarr','\\u2191':'uarr','\\u2193':'darr','\\u2194':'harr','\\u21AE':'nharr','\\u2195':'varr','\\u2196':'nwarr','\\u2197':'nearr','\\u2198':'searr','\\u2199':'swarr','\\u219D':'rarrw','\\u219D\\u0338':'nrarrw','\\u219E':'Larr','\\u219F':'Uarr','\\u21A0':'Rarr','\\u21A1':'Darr','\\u21A2':'larrtl','\\u21A3':'rarrtl','\\u21A4':'mapstoleft','\\u21A5':'mapstoup','\\u21A6':'map','\\u21A7':'mapstodown','\\u21A9':'larrhk','\\u21AA':'rarrhk','\\u21AB':'larrlp','\\u21AC':'rarrlp','\\u21AD':'harrw','\\u21B0':'lsh','\\u21B1':'rsh','\\u21B2':'ldsh','\\u21B3':'rdsh','\\u21B5':'crarr','\\u21B6':'cularr','\\u21B7':'curarr','\\u21BA':'olarr','\\u21BB':'orarr','\\u21BC':'lharu','\\u21BD':'lhard','\\u21BE':'uharr','\\u21BF':'uharl','\\u21C0':'rharu','\\u21C1':'rhard','\\u21C2':'dharr','\\u21C3':'dharl','\\u21C4':'rlarr','\\u21C5':'udarr','\\u21C6':'lrarr','\\u21C7':'llarr','\\u21C8':'uuarr','\\u21C9':'rrarr','\\u21CA':'ddarr','\\u21CB':'lrhar','\\u21CC':'rlhar','\\u21D0':'lArr','\\u21CD':'nlArr','\\u21D1':'uArr','\\u21D2':'rArr','\\u21CF':'nrArr','\\u21D3':'dArr','\\u21D4':'iff','\\u21CE':'nhArr','\\u21D5':'vArr','\\u21D6':'nwArr','\\u21D7':'neArr','\\u21D8':'seArr','\\u21D9':'swArr','\\u21DA':'lAarr','\\u21DB':'rAarr','\\u21DD':'zigrarr','\\u21E4':'larrb','\\u21E5':'rarrb','\\u21F5':'duarr','\\u21FD':'loarr','\\u21FE':'roarr','\\u21FF':'hoarr','\\u2200':'forall','\\u2201':'comp','\\u2202':'part','\\u2202\\u0338':'npart','\\u2203':'exist','\\u2204':'nexist','\\u2205':'empty','\\u2207':'Del','\\u2208':'in','\\u2209':'notin','\\u220B':'ni','\\u220C':'notni','\\u03F6':'bepsi','\\u220F':'prod','\\u2210':'coprod','\\u2211':'sum','+':'plus','\\xB1':'pm','\\xF7':'div','\\xD7':'times','<':'lt','\\u226E':'nlt','<\\u20D2':'nvlt','=':'equals','\\u2260':'ne','=\\u20E5':'bne','\\u2A75':'Equal','>':'gt','\\u226F':'ngt','>\\u20D2':'nvgt','\\xAC':'not','|':'vert','\\xA6':'brvbar','\\u2212':'minus','\\u2213':'mp','\\u2214':'plusdo','\\u2044':'frasl','\\u2216':'setmn','\\u2217':'lowast','\\u2218':'compfn','\\u221A':'Sqrt','\\u221D':'prop','\\u221E':'infin','\\u221F':'angrt','\\u2220':'ang','\\u2220\\u20D2':'nang','\\u2221':'angmsd','\\u2222':'angsph','\\u2223':'mid','\\u2224':'nmid','\\u2225':'par','\\u2226':'npar','\\u2227':'and','\\u2228':'or','\\u2229':'cap','\\u2229\\uFE00':'caps','\\u222A':'cup','\\u222A\\uFE00':'cups','\\u222B':'int','\\u222C':'Int','\\u222D':'tint','\\u2A0C':'qint','\\u222E':'oint','\\u222F':'Conint','\\u2230':'Cconint','\\u2231':'cwint','\\u2232':'cwconint','\\u2233':'awconint','\\u2234':'there4','\\u2235':'becaus','\\u2236':'ratio','\\u2237':'Colon','\\u2238':'minusd','\\u223A':'mDDot','\\u223B':'homtht','\\u223C':'sim','\\u2241':'nsim','\\u223C\\u20D2':'nvsim','\\u223D':'bsim','\\u223D\\u0331':'race','\\u223E':'ac','\\u223E\\u0333':'acE','\\u223F':'acd','\\u2240':'wr','\\u2242':'esim','\\u2242\\u0338':'nesim','\\u2243':'sime','\\u2244':'nsime','\\u2245':'cong','\\u2247':'ncong','\\u2246':'simne','\\u2248':'ap','\\u2249':'nap','\\u224A':'ape','\\u224B':'apid','\\u224B\\u0338':'napid','\\u224C':'bcong','\\u224D':'CupCap','\\u226D':'NotCupCap','\\u224D\\u20D2':'nvap','\\u224E':'bump','\\u224E\\u0338':'nbump','\\u224F':'bumpe','\\u224F\\u0338':'nbumpe','\\u2250':'doteq','\\u2250\\u0338':'nedot','\\u2251':'eDot','\\u2252':'efDot','\\u2253':'erDot','\\u2254':'colone','\\u2255':'ecolon','\\u2256':'ecir','\\u2257':'cire','\\u2259':'wedgeq','\\u225A':'veeeq','\\u225C':'trie','\\u225F':'equest','\\u2261':'equiv','\\u2262':'nequiv','\\u2261\\u20E5':'bnequiv','\\u2264':'le','\\u2270':'nle','\\u2264\\u20D2':'nvle','\\u2265':'ge','\\u2271':'nge','\\u2265\\u20D2':'nvge','\\u2266':'lE','\\u2266\\u0338':'nlE','\\u2267':'gE','\\u2267\\u0338':'ngE','\\u2268\\uFE00':'lvnE','\\u2268':'lnE','\\u2269':'gnE','\\u2269\\uFE00':'gvnE','\\u226A':'ll','\\u226A\\u0338':'nLtv','\\u226A\\u20D2':'nLt','\\u226B':'gg','\\u226B\\u0338':'nGtv','\\u226B\\u20D2':'nGt','\\u226C':'twixt','\\u2272':'lsim','\\u2274':'nlsim','\\u2273':'gsim','\\u2275':'ngsim','\\u2276':'lg','\\u2278':'ntlg','\\u2277':'gl','\\u2279':'ntgl','\\u227A':'pr','\\u2280':'npr','\\u227B':'sc','\\u2281':'nsc','\\u227C':'prcue','\\u22E0':'nprcue','\\u227D':'sccue','\\u22E1':'nsccue','\\u227E':'prsim','\\u227F':'scsim','\\u227F\\u0338':'NotSucceedsTilde','\\u2282':'sub','\\u2284':'nsub','\\u2282\\u20D2':'vnsub','\\u2283':'sup','\\u2285':'nsup','\\u2283\\u20D2':'vnsup','\\u2286':'sube','\\u2288':'nsube','\\u2287':'supe','\\u2289':'nsupe','\\u228A\\uFE00':'vsubne','\\u228A':'subne','\\u228B\\uFE00':'vsupne','\\u228B':'supne','\\u228D':'cupdot','\\u228E':'uplus','\\u228F':'sqsub','\\u228F\\u0338':'NotSquareSubset','\\u2290':'sqsup','\\u2290\\u0338':'NotSquareSuperset','\\u2291':'sqsube','\\u22E2':'nsqsube','\\u2292':'sqsupe','\\u22E3':'nsqsupe','\\u2293':'sqcap','\\u2293\\uFE00':'sqcaps','\\u2294':'sqcup','\\u2294\\uFE00':'sqcups','\\u2295':'oplus','\\u2296':'ominus','\\u2297':'otimes','\\u2298':'osol','\\u2299':'odot','\\u229A':'ocir','\\u229B':'oast','\\u229D':'odash','\\u229E':'plusb','\\u229F':'minusb','\\u22A0':'timesb','\\u22A1':'sdotb','\\u22A2':'vdash','\\u22AC':'nvdash','\\u22A3':'dashv','\\u22A4':'top','\\u22A5':'bot','\\u22A7':'models','\\u22A8':'vDash','\\u22AD':'nvDash','\\u22A9':'Vdash','\\u22AE':'nVdash','\\u22AA':'Vvdash','\\u22AB':'VDash','\\u22AF':'nVDash','\\u22B0':'prurel','\\u22B2':'vltri','\\u22EA':'nltri','\\u22B3':'vrtri','\\u22EB':'nrtri','\\u22B4':'ltrie','\\u22EC':'nltrie','\\u22B4\\u20D2':'nvltrie','\\u22B5':'rtrie','\\u22ED':'nrtrie','\\u22B5\\u20D2':'nvrtrie','\\u22B6':'origof','\\u22B7':'imof','\\u22B8':'mumap','\\u22B9':'hercon','\\u22BA':'intcal','\\u22BB':'veebar','\\u22BD':'barvee','\\u22BE':'angrtvb','\\u22BF':'lrtri','\\u22C0':'Wedge','\\u22C1':'Vee','\\u22C2':'xcap','\\u22C3':'xcup','\\u22C4':'diam','\\u22C5':'sdot','\\u22C6':'Star','\\u22C7':'divonx','\\u22C8':'bowtie','\\u22C9':'ltimes','\\u22CA':'rtimes','\\u22CB':'lthree','\\u22CC':'rthree','\\u22CD':'bsime','\\u22CE':'cuvee','\\u22CF':'cuwed','\\u22D0':'Sub','\\u22D1':'Sup','\\u22D2':'Cap','\\u22D3':'Cup','\\u22D4':'fork','\\u22D5':'epar','\\u22D6':'ltdot','\\u22D7':'gtdot','\\u22D8':'Ll','\\u22D8\\u0338':'nLl','\\u22D9':'Gg','\\u22D9\\u0338':'nGg','\\u22DA\\uFE00':'lesg','\\u22DA':'leg','\\u22DB':'gel','\\u22DB\\uFE00':'gesl','\\u22DE':'cuepr','\\u22DF':'cuesc','\\u22E6':'lnsim','\\u22E7':'gnsim','\\u22E8':'prnsim','\\u22E9':'scnsim','\\u22EE':'vellip','\\u22EF':'ctdot','\\u22F0':'utdot','\\u22F1':'dtdot','\\u22F2':'disin','\\u22F3':'isinsv','\\u22F4':'isins','\\u22F5':'isindot','\\u22F5\\u0338':'notindot','\\u22F6':'notinvc','\\u22F7':'notinvb','\\u22F9':'isinE','\\u22F9\\u0338':'notinE','\\u22FA':'nisd','\\u22FB':'xnis','\\u22FC':'nis','\\u22FD':'notnivc','\\u22FE':'notnivb','\\u2305':'barwed','\\u2306':'Barwed','\\u230C':'drcrop','\\u230D':'dlcrop','\\u230E':'urcrop','\\u230F':'ulcrop','\\u2310':'bnot','\\u2312':'profline','\\u2313':'profsurf','\\u2315':'telrec','\\u2316':'target','\\u231C':'ulcorn','\\u231D':'urcorn','\\u231E':'dlcorn','\\u231F':'drcorn','\\u2322':'frown','\\u2323':'smile','\\u232D':'cylcty','\\u232E':'profalar','\\u2336':'topbot','\\u233D':'ovbar','\\u233F':'solbar','\\u237C':'angzarr','\\u23B0':'lmoust','\\u23B1':'rmoust','\\u23B4':'tbrk','\\u23B5':'bbrk','\\u23B6':'bbrktbrk','\\u23DC':'OverParenthesis','\\u23DD':'UnderParenthesis','\\u23DE':'OverBrace','\\u23DF':'UnderBrace','\\u23E2':'trpezium','\\u23E7':'elinters','\\u2423':'blank','\\u2500':'boxh','\\u2502':'boxv','\\u250C':'boxdr','\\u2510':'boxdl','\\u2514':'boxur','\\u2518':'boxul','\\u251C':'boxvr','\\u2524':'boxvl','\\u252C':'boxhd','\\u2534':'boxhu','\\u253C':'boxvh','\\u2550':'boxH','\\u2551':'boxV','\\u2552':'boxdR','\\u2553':'boxDr','\\u2554':'boxDR','\\u2555':'boxdL','\\u2556':'boxDl','\\u2557':'boxDL','\\u2558':'boxuR','\\u2559':'boxUr','\\u255A':'boxUR','\\u255B':'boxuL','\\u255C':'boxUl','\\u255D':'boxUL','\\u255E':'boxvR','\\u255F':'boxVr','\\u2560':'boxVR','\\u2561':'boxvL','\\u2562':'boxVl','\\u2563':'boxVL','\\u2564':'boxHd','\\u2565':'boxhD','\\u2566':'boxHD','\\u2567':'boxHu','\\u2568':'boxhU','\\u2569':'boxHU','\\u256A':'boxvH','\\u256B':'boxVh','\\u256C':'boxVH','\\u2580':'uhblk','\\u2584':'lhblk','\\u2588':'block','\\u2591':'blk14','\\u2592':'blk12','\\u2593':'blk34','\\u25A1':'squ','\\u25AA':'squf','\\u25AB':'EmptyVerySmallSquare','\\u25AD':'rect','\\u25AE':'marker','\\u25B1':'fltns','\\u25B3':'xutri','\\u25B4':'utrif','\\u25B5':'utri','\\u25B8':'rtrif','\\u25B9':'rtri','\\u25BD':'xdtri','\\u25BE':'dtrif','\\u25BF':'dtri','\\u25C2':'ltrif','\\u25C3':'ltri','\\u25CA':'loz','\\u25CB':'cir','\\u25EC':'tridot','\\u25EF':'xcirc','\\u25F8':'ultri','\\u25F9':'urtri','\\u25FA':'lltri','\\u25FB':'EmptySmallSquare','\\u25FC':'FilledSmallSquare','\\u2605':'starf','\\u2606':'star','\\u260E':'phone','\\u2640':'female','\\u2642':'male','\\u2660':'spades','\\u2663':'clubs','\\u2665':'hearts','\\u2666':'diams','\\u266A':'sung','\\u2713':'check','\\u2717':'cross','\\u2720':'malt','\\u2736':'sext','\\u2758':'VerticalSeparator','\\u27C8':'bsolhsub','\\u27C9':'suphsol','\\u27F5':'xlarr','\\u27F6':'xrarr','\\u27F7':'xharr','\\u27F8':'xlArr','\\u27F9':'xrArr','\\u27FA':'xhArr','\\u27FC':'xmap','\\u27FF':'dzigrarr','\\u2902':'nvlArr','\\u2903':'nvrArr','\\u2904':'nvHarr','\\u2905':'Map','\\u290C':'lbarr','\\u290D':'rbarr','\\u290E':'lBarr','\\u290F':'rBarr','\\u2910':'RBarr','\\u2911':'DDotrahd','\\u2912':'UpArrowBar','\\u2913':'DownArrowBar','\\u2916':'Rarrtl','\\u2919':'latail','\\u291A':'ratail','\\u291B':'lAtail','\\u291C':'rAtail','\\u291D':'larrfs','\\u291E':'rarrfs','\\u291F':'larrbfs','\\u2920':'rarrbfs','\\u2923':'nwarhk','\\u2924':'nearhk','\\u2925':'searhk','\\u2926':'swarhk','\\u2927':'nwnear','\\u2928':'toea','\\u2929':'tosa','\\u292A':'swnwar','\\u2933':'rarrc','\\u2933\\u0338':'nrarrc','\\u2935':'cudarrr','\\u2936':'ldca','\\u2937':'rdca','\\u2938':'cudarrl','\\u2939':'larrpl','\\u293C':'curarrm','\\u293D':'cularrp','\\u2945':'rarrpl','\\u2948':'harrcir','\\u2949':'Uarrocir','\\u294A':'lurdshar','\\u294B':'ldrushar','\\u294E':'LeftRightVector','\\u294F':'RightUpDownVector','\\u2950':'DownLeftRightVector','\\u2951':'LeftUpDownVector','\\u2952':'LeftVectorBar','\\u2953':'RightVectorBar','\\u2954':'RightUpVectorBar','\\u2955':'RightDownVectorBar','\\u2956':'DownLeftVectorBar','\\u2957':'DownRightVectorBar','\\u2958':'LeftUpVectorBar','\\u2959':'LeftDownVectorBar','\\u295A':'LeftTeeVector','\\u295B':'RightTeeVector','\\u295C':'RightUpTeeVector','\\u295D':'RightDownTeeVector','\\u295E':'DownLeftTeeVector','\\u295F':'DownRightTeeVector','\\u2960':'LeftUpTeeVector','\\u2961':'LeftDownTeeVector','\\u2962':'lHar','\\u2963':'uHar','\\u2964':'rHar','\\u2965':'dHar','\\u2966':'luruhar','\\u2967':'ldrdhar','\\u2968':'ruluhar','\\u2969':'rdldhar','\\u296A':'lharul','\\u296B':'llhard','\\u296C':'rharul','\\u296D':'lrhard','\\u296E':'udhar','\\u296F':'duhar','\\u2970':'RoundImplies','\\u2971':'erarr','\\u2972':'simrarr','\\u2973':'larrsim','\\u2974':'rarrsim','\\u2975':'rarrap','\\u2976':'ltlarr','\\u2978':'gtrarr','\\u2979':'subrarr','\\u297B':'suplarr','\\u297C':'lfisht','\\u297D':'rfisht','\\u297E':'ufisht','\\u297F':'dfisht','\\u299A':'vzigzag','\\u299C':'vangrt','\\u299D':'angrtvbd','\\u29A4':'ange','\\u29A5':'range','\\u29A6':'dwangle','\\u29A7':'uwangle','\\u29A8':'angmsdaa','\\u29A9':'angmsdab','\\u29AA':'angmsdac','\\u29AB':'angmsdad','\\u29AC':'angmsdae','\\u29AD':'angmsdaf','\\u29AE':'angmsdag','\\u29AF':'angmsdah','\\u29B0':'bemptyv','\\u29B1':'demptyv','\\u29B2':'cemptyv','\\u29B3':'raemptyv','\\u29B4':'laemptyv','\\u29B5':'ohbar','\\u29B6':'omid','\\u29B7':'opar','\\u29B9':'operp','\\u29BB':'olcross','\\u29BC':'odsold','\\u29BE':'olcir','\\u29BF':'ofcir','\\u29C0':'olt','\\u29C1':'ogt','\\u29C2':'cirscir','\\u29C3':'cirE','\\u29C4':'solb','\\u29C5':'bsolb','\\u29C9':'boxbox','\\u29CD':'trisb','\\u29CE':'rtriltri','\\u29CF':'LeftTriangleBar','\\u29CF\\u0338':'NotLeftTriangleBar','\\u29D0':'RightTriangleBar','\\u29D0\\u0338':'NotRightTriangleBar','\\u29DC':'iinfin','\\u29DD':'infintie','\\u29DE':'nvinfin','\\u29E3':'eparsl','\\u29E4':'smeparsl','\\u29E5':'eqvparsl','\\u29EB':'lozf','\\u29F4':'RuleDelayed','\\u29F6':'dsol','\\u2A00':'xodot','\\u2A01':'xoplus','\\u2A02':'xotime','\\u2A04':'xuplus','\\u2A06':'xsqcup','\\u2A0D':'fpartint','\\u2A10':'cirfnint','\\u2A11':'awint','\\u2A12':'rppolint','\\u2A13':'scpolint','\\u2A14':'npolint','\\u2A15':'pointint','\\u2A16':'quatint','\\u2A17':'intlarhk','\\u2A22':'pluscir','\\u2A23':'plusacir','\\u2A24':'simplus','\\u2A25':'plusdu','\\u2A26':'plussim','\\u2A27':'plustwo','\\u2A29':'mcomma','\\u2A2A':'minusdu','\\u2A2D':'loplus','\\u2A2E':'roplus','\\u2A2F':'Cross','\\u2A30':'timesd','\\u2A31':'timesbar','\\u2A33':'smashp','\\u2A34':'lotimes','\\u2A35':'rotimes','\\u2A36':'otimesas','\\u2A37':'Otimes','\\u2A38':'odiv','\\u2A39':'triplus','\\u2A3A':'triminus','\\u2A3B':'tritime','\\u2A3C':'iprod','\\u2A3F':'amalg','\\u2A40':'capdot','\\u2A42':'ncup','\\u2A43':'ncap','\\u2A44':'capand','\\u2A45':'cupor','\\u2A46':'cupcap','\\u2A47':'capcup','\\u2A48':'cupbrcap','\\u2A49':'capbrcup','\\u2A4A':'cupcup','\\u2A4B':'capcap','\\u2A4C':'ccups','\\u2A4D':'ccaps','\\u2A50':'ccupssm','\\u2A53':'And','\\u2A54':'Or','\\u2A55':'andand','\\u2A56':'oror','\\u2A57':'orslope','\\u2A58':'andslope','\\u2A5A':'andv','\\u2A5B':'orv','\\u2A5C':'andd','\\u2A5D':'ord','\\u2A5F':'wedbar','\\u2A66':'sdote','\\u2A6A':'simdot','\\u2A6D':'congdot','\\u2A6D\\u0338':'ncongdot','\\u2A6E':'easter','\\u2A6F':'apacir','\\u2A70':'apE','\\u2A70\\u0338':'napE','\\u2A71':'eplus','\\u2A72':'pluse','\\u2A73':'Esim','\\u2A77':'eDDot','\\u2A78':'equivDD','\\u2A79':'ltcir','\\u2A7A':'gtcir','\\u2A7B':'ltquest','\\u2A7C':'gtquest','\\u2A7D':'les','\\u2A7D\\u0338':'nles','\\u2A7E':'ges','\\u2A7E\\u0338':'nges','\\u2A7F':'lesdot','\\u2A80':'gesdot','\\u2A81':'lesdoto','\\u2A82':'gesdoto','\\u2A83':'lesdotor','\\u2A84':'gesdotol','\\u2A85':'lap','\\u2A86':'gap','\\u2A87':'lne','\\u2A88':'gne','\\u2A89':'lnap','\\u2A8A':'gnap','\\u2A8B':'lEg','\\u2A8C':'gEl','\\u2A8D':'lsime','\\u2A8E':'gsime','\\u2A8F':'lsimg','\\u2A90':'gsiml','\\u2A91':'lgE','\\u2A92':'glE','\\u2A93':'lesges','\\u2A94':'gesles','\\u2A95':'els','\\u2A96':'egs','\\u2A97':'elsdot','\\u2A98':'egsdot','\\u2A99':'el','\\u2A9A':'eg','\\u2A9D':'siml','\\u2A9E':'simg','\\u2A9F':'simlE','\\u2AA0':'simgE','\\u2AA1':'LessLess','\\u2AA1\\u0338':'NotNestedLessLess','\\u2AA2':'GreaterGreater','\\u2AA2\\u0338':'NotNestedGreaterGreater','\\u2AA4':'glj','\\u2AA5':'gla','\\u2AA6':'ltcc','\\u2AA7':'gtcc','\\u2AA8':'lescc','\\u2AA9':'gescc','\\u2AAA':'smt','\\u2AAB':'lat','\\u2AAC':'smte','\\u2AAC\\uFE00':'smtes','\\u2AAD':'late','\\u2AAD\\uFE00':'lates','\\u2AAE':'bumpE','\\u2AAF':'pre','\\u2AAF\\u0338':'npre','\\u2AB0':'sce','\\u2AB0\\u0338':'nsce','\\u2AB3':'prE','\\u2AB4':'scE','\\u2AB5':'prnE','\\u2AB6':'scnE','\\u2AB7':'prap','\\u2AB8':'scap','\\u2AB9':'prnap','\\u2ABA':'scnap','\\u2ABB':'Pr','\\u2ABC':'Sc','\\u2ABD':'subdot','\\u2ABE':'supdot','\\u2ABF':'subplus','\\u2AC0':'supplus','\\u2AC1':'submult','\\u2AC2':'supmult','\\u2AC3':'subedot','\\u2AC4':'supedot','\\u2AC5':'subE','\\u2AC5\\u0338':'nsubE','\\u2AC6':'supE','\\u2AC6\\u0338':'nsupE','\\u2AC7':'subsim','\\u2AC8':'supsim','\\u2ACB\\uFE00':'vsubnE','\\u2ACB':'subnE','\\u2ACC\\uFE00':'vsupnE','\\u2ACC':'supnE','\\u2ACF':'csub','\\u2AD0':'csup','\\u2AD1':'csube','\\u2AD2':'csupe','\\u2AD3':'subsup','\\u2AD4':'supsub','\\u2AD5':'subsub','\\u2AD6':'supsup','\\u2AD7':'suphsub','\\u2AD8':'supdsub','\\u2AD9':'forkv','\\u2ADA':'topfork','\\u2ADB':'mlcp','\\u2AE4':'Dashv','\\u2AE6':'Vdashl','\\u2AE7':'Barv','\\u2AE8':'vBar','\\u2AE9':'vBarv','\\u2AEB':'Vbar','\\u2AEC':'Not','\\u2AED':'bNot','\\u2AEE':'rnmid','\\u2AEF':'cirmid','\\u2AF0':'midcir','\\u2AF1':'topcir','\\u2AF2':'nhpar','\\u2AF3':'parsim','\\u2AFD':'parsl','\\u2AFD\\u20E5':'nparsl','\\u266D':'flat','\\u266E':'natur','\\u266F':'sharp','\\xA4':'curren','\\xA2':'cent','$':'dollar','\\xA3':'pound','\\xA5':'yen','\\u20AC':'euro','\\xB9':'sup1','\\xBD':'half','\\u2153':'frac13','\\xBC':'frac14','\\u2155':'frac15','\\u2159':'frac16','\\u215B':'frac18','\\xB2':'sup2','\\u2154':'frac23','\\u2156':'frac25','\\xB3':'sup3','\\xBE':'frac34','\\u2157':'frac35','\\u215C':'frac38','\\u2158':'frac45','\\u215A':'frac56','\\u215D':'frac58','\\u215E':'frac78','\\uD835\\uDCB6':'ascr','\\uD835\\uDD52':'aopf','\\uD835\\uDD1E':'afr','\\uD835\\uDD38':'Aopf','\\uD835\\uDD04':'Afr','\\uD835\\uDC9C':'Ascr','\\xAA':'ordf','\\xE1':'aacute','\\xC1':'Aacute','\\xE0':'agrave','\\xC0':'Agrave','\\u0103':'abreve','\\u0102':'Abreve','\\xE2':'acirc','\\xC2':'Acirc','\\xE5':'aring','\\xC5':'angst','\\xE4':'auml','\\xC4':'Auml','\\xE3':'atilde','\\xC3':'Atilde','\\u0105':'aogon','\\u0104':'Aogon','\\u0101':'amacr','\\u0100':'Amacr','\\xE6':'aelig','\\xC6':'AElig','\\uD835\\uDCB7':'bscr','\\uD835\\uDD53':'bopf','\\uD835\\uDD1F':'bfr','\\uD835\\uDD39':'Bopf','\\u212C':'Bscr','\\uD835\\uDD05':'Bfr','\\uD835\\uDD20':'cfr','\\uD835\\uDCB8':'cscr','\\uD835\\uDD54':'copf','\\u212D':'Cfr','\\uD835\\uDC9E':'Cscr','\\u2102':'Copf','\\u0107':'cacute','\\u0106':'Cacute','\\u0109':'ccirc','\\u0108':'Ccirc','\\u010D':'ccaron','\\u010C':'Ccaron','\\u010B':'cdot','\\u010A':'Cdot','\\xE7':'ccedil','\\xC7':'Ccedil','\\u2105':'incare','\\uD835\\uDD21':'dfr','\\u2146':'dd','\\uD835\\uDD55':'dopf','\\uD835\\uDCB9':'dscr','\\uD835\\uDC9F':'Dscr','\\uD835\\uDD07':'Dfr','\\u2145':'DD','\\uD835\\uDD3B':'Dopf','\\u010F':'dcaron','\\u010E':'Dcaron','\\u0111':'dstrok','\\u0110':'Dstrok','\\xF0':'eth','\\xD0':'ETH','\\u2147':'ee','\\u212F':'escr','\\uD835\\uDD22':'efr','\\uD835\\uDD56':'eopf','\\u2130':'Escr','\\uD835\\uDD08':'Efr','\\uD835\\uDD3C':'Eopf','\\xE9':'eacute','\\xC9':'Eacute','\\xE8':'egrave','\\xC8':'Egrave','\\xEA':'ecirc','\\xCA':'Ecirc','\\u011B':'ecaron','\\u011A':'Ecaron','\\xEB':'euml','\\xCB':'Euml','\\u0117':'edot','\\u0116':'Edot','\\u0119':'eogon','\\u0118':'Eogon','\\u0113':'emacr','\\u0112':'Emacr','\\uD835\\uDD23':'ffr','\\uD835\\uDD57':'fopf','\\uD835\\uDCBB':'fscr','\\uD835\\uDD09':'Ffr','\\uD835\\uDD3D':'Fopf','\\u2131':'Fscr','\\uFB00':'fflig','\\uFB03':'ffilig','\\uFB04':'ffllig','\\uFB01':'filig','fj':'fjlig','\\uFB02':'fllig','\\u0192':'fnof','\\u210A':'gscr','\\uD835\\uDD58':'gopf','\\uD835\\uDD24':'gfr','\\uD835\\uDCA2':'Gscr','\\uD835\\uDD3E':'Gopf','\\uD835\\uDD0A':'Gfr','\\u01F5':'gacute','\\u011F':'gbreve','\\u011E':'Gbreve','\\u011D':'gcirc','\\u011C':'Gcirc','\\u0121':'gdot','\\u0120':'Gdot','\\u0122':'Gcedil','\\uD835\\uDD25':'hfr','\\u210E':'planckh','\\uD835\\uDCBD':'hscr','\\uD835\\uDD59':'hopf','\\u210B':'Hscr','\\u210C':'Hfr','\\u210D':'Hopf','\\u0125':'hcirc','\\u0124':'Hcirc','\\u210F':'hbar','\\u0127':'hstrok','\\u0126':'Hstrok','\\uD835\\uDD5A':'iopf','\\uD835\\uDD26':'ifr','\\uD835\\uDCBE':'iscr','\\u2148':'ii','\\uD835\\uDD40':'Iopf','\\u2110':'Iscr','\\u2111':'Im','\\xED':'iacute','\\xCD':'Iacute','\\xEC':'igrave','\\xCC':'Igrave','\\xEE':'icirc','\\xCE':'Icirc','\\xEF':'iuml','\\xCF':'Iuml','\\u0129':'itilde','\\u0128':'Itilde','\\u0130':'Idot','\\u012F':'iogon','\\u012E':'Iogon','\\u012B':'imacr','\\u012A':'Imacr','\\u0133':'ijlig','\\u0132':'IJlig','\\u0131':'imath','\\uD835\\uDCBF':'jscr','\\uD835\\uDD5B':'jopf','\\uD835\\uDD27':'jfr','\\uD835\\uDCA5':'Jscr','\\uD835\\uDD0D':'Jfr','\\uD835\\uDD41':'Jopf','\\u0135':'jcirc','\\u0134':'Jcirc','\\u0237':'jmath','\\uD835\\uDD5C':'kopf','\\uD835\\uDCC0':'kscr','\\uD835\\uDD28':'kfr','\\uD835\\uDCA6':'Kscr','\\uD835\\uDD42':'Kopf','\\uD835\\uDD0E':'Kfr','\\u0137':'kcedil','\\u0136':'Kcedil','\\uD835\\uDD29':'lfr','\\uD835\\uDCC1':'lscr','\\u2113':'ell','\\uD835\\uDD5D':'lopf','\\u2112':'Lscr','\\uD835\\uDD0F':'Lfr','\\uD835\\uDD43':'Lopf','\\u013A':'lacute','\\u0139':'Lacute','\\u013E':'lcaron','\\u013D':'Lcaron','\\u013C':'lcedil','\\u013B':'Lcedil','\\u0142':'lstrok','\\u0141':'Lstrok','\\u0140':'lmidot','\\u013F':'Lmidot','\\uD835\\uDD2A':'mfr','\\uD835\\uDD5E':'mopf','\\uD835\\uDCC2':'mscr','\\uD835\\uDD10':'Mfr','\\uD835\\uDD44':'Mopf','\\u2133':'Mscr','\\uD835\\uDD2B':'nfr','\\uD835\\uDD5F':'nopf','\\uD835\\uDCC3':'nscr','\\u2115':'Nopf','\\uD835\\uDCA9':'Nscr','\\uD835\\uDD11':'Nfr','\\u0144':'nacute','\\u0143':'Nacute','\\u0148':'ncaron','\\u0147':'Ncaron','\\xF1':'ntilde','\\xD1':'Ntilde','\\u0146':'ncedil','\\u0145':'Ncedil','\\u2116':'numero','\\u014B':'eng','\\u014A':'ENG','\\uD835\\uDD60':'oopf','\\uD835\\uDD2C':'ofr','\\u2134':'oscr','\\uD835\\uDCAA':'Oscr','\\uD835\\uDD12':'Ofr','\\uD835\\uDD46':'Oopf','\\xBA':'ordm','\\xF3':'oacute','\\xD3':'Oacute','\\xF2':'ograve','\\xD2':'Ograve','\\xF4':'ocirc','\\xD4':'Ocirc','\\xF6':'ouml','\\xD6':'Ouml','\\u0151':'odblac','\\u0150':'Odblac','\\xF5':'otilde','\\xD5':'Otilde','\\xF8':'oslash','\\xD8':'Oslash','\\u014D':'omacr','\\u014C':'Omacr','\\u0153':'oelig','\\u0152':'OElig','\\uD835\\uDD2D':'pfr','\\uD835\\uDCC5':'pscr','\\uD835\\uDD61':'popf','\\u2119':'Popf','\\uD835\\uDD13':'Pfr','\\uD835\\uDCAB':'Pscr','\\uD835\\uDD62':'qopf','\\uD835\\uDD2E':'qfr','\\uD835\\uDCC6':'qscr','\\uD835\\uDCAC':'Qscr','\\uD835\\uDD14':'Qfr','\\u211A':'Qopf','\\u0138':'kgreen','\\uD835\\uDD2F':'rfr','\\uD835\\uDD63':'ropf','\\uD835\\uDCC7':'rscr','\\u211B':'Rscr','\\u211C':'Re','\\u211D':'Ropf','\\u0155':'racute','\\u0154':'Racute','\\u0159':'rcaron','\\u0158':'Rcaron','\\u0157':'rcedil','\\u0156':'Rcedil','\\uD835\\uDD64':'sopf','\\uD835\\uDCC8':'sscr','\\uD835\\uDD30':'sfr','\\uD835\\uDD4A':'Sopf','\\uD835\\uDD16':'Sfr','\\uD835\\uDCAE':'Sscr','\\u24C8':'oS','\\u015B':'sacute','\\u015A':'Sacute','\\u015D':'scirc','\\u015C':'Scirc','\\u0161':'scaron','\\u0160':'Scaron','\\u015F':'scedil','\\u015E':'Scedil','\\xDF':'szlig','\\uD835\\uDD31':'tfr','\\uD835\\uDCC9':'tscr','\\uD835\\uDD65':'topf','\\uD835\\uDCAF':'Tscr','\\uD835\\uDD17':'Tfr','\\uD835\\uDD4B':'Topf','\\u0165':'tcaron','\\u0164':'Tcaron','\\u0163':'tcedil','\\u0162':'Tcedil','\\u2122':'trade','\\u0167':'tstrok','\\u0166':'Tstrok','\\uD835\\uDCCA':'uscr','\\uD835\\uDD66':'uopf','\\uD835\\uDD32':'ufr','\\uD835\\uDD4C':'Uopf','\\uD835\\uDD18':'Ufr','\\uD835\\uDCB0':'Uscr','\\xFA':'uacute','\\xDA':'Uacute','\\xF9':'ugrave','\\xD9':'Ugrave','\\u016D':'ubreve','\\u016C':'Ubreve','\\xFB':'ucirc','\\xDB':'Ucirc','\\u016F':'uring','\\u016E':'Uring','\\xFC':'uuml','\\xDC':'Uuml','\\u0171':'udblac','\\u0170':'Udblac','\\u0169':'utilde','\\u0168':'Utilde','\\u0173':'uogon','\\u0172':'Uogon','\\u016B':'umacr','\\u016A':'Umacr','\\uD835\\uDD33':'vfr','\\uD835\\uDD67':'vopf','\\uD835\\uDCCB':'vscr','\\uD835\\uDD19':'Vfr','\\uD835\\uDD4D':'Vopf','\\uD835\\uDCB1':'Vscr','\\uD835\\uDD68':'wopf','\\uD835\\uDCCC':'wscr','\\uD835\\uDD34':'wfr','\\uD835\\uDCB2':'Wscr','\\uD835\\uDD4E':'Wopf','\\uD835\\uDD1A':'Wfr','\\u0175':'wcirc','\\u0174':'Wcirc','\\uD835\\uDD35':'xfr','\\uD835\\uDCCD':'xscr','\\uD835\\uDD69':'xopf','\\uD835\\uDD4F':'Xopf','\\uD835\\uDD1B':'Xfr','\\uD835\\uDCB3':'Xscr','\\uD835\\uDD36':'yfr','\\uD835\\uDCCE':'yscr','\\uD835\\uDD6A':'yopf','\\uD835\\uDCB4':'Yscr','\\uD835\\uDD1C':'Yfr','\\uD835\\uDD50':'Yopf','\\xFD':'yacute','\\xDD':'Yacute','\\u0177':'ycirc','\\u0176':'Ycirc','\\xFF':'yuml','\\u0178':'Yuml','\\uD835\\uDCCF':'zscr','\\uD835\\uDD37':'zfr','\\uD835\\uDD6B':'zopf','\\u2128':'Zfr','\\u2124':'Zopf','\\uD835\\uDCB5':'Zscr','\\u017A':'zacute','\\u0179':'Zacute','\\u017E':'zcaron','\\u017D':'Zcaron','\\u017C':'zdot','\\u017B':'Zdot','\\u01B5':'imped','\\xFE':'thorn','\\xDE':'THORN','\\u0149':'napos','\\u03B1':'alpha','\\u0391':'Alpha','\\u03B2':'beta','\\u0392':'Beta','\\u03B3':'gamma','\\u0393':'Gamma','\\u03B4':'delta','\\u0394':'Delta','\\u03B5':'epsi','\\u03F5':'epsiv','\\u0395':'Epsilon','\\u03DD':'gammad','\\u03DC':'Gammad','\\u03B6':'zeta','\\u0396':'Zeta','\\u03B7':'eta','\\u0397':'Eta','\\u03B8':'theta','\\u03D1':'thetav','\\u0398':'Theta','\\u03B9':'iota','\\u0399':'Iota','\\u03BA':'kappa','\\u03F0':'kappav','\\u039A':'Kappa','\\u03BB':'lambda','\\u039B':'Lambda','\\u03BC':'mu','\\xB5':'micro','\\u039C':'Mu','\\u03BD':'nu','\\u039D':'Nu','\\u03BE':'xi','\\u039E':'Xi','\\u03BF':'omicron','\\u039F':'Omicron','\\u03C0':'pi','\\u03D6':'piv','\\u03A0':'Pi','\\u03C1':'rho','\\u03F1':'rhov','\\u03A1':'Rho','\\u03C3':'sigma','\\u03A3':'Sigma','\\u03C2':'sigmaf','\\u03C4':'tau','\\u03A4':'Tau','\\u03C5':'upsi','\\u03A5':'Upsilon','\\u03D2':'Upsi','\\u03C6':'phi','\\u03D5':'phiv','\\u03A6':'Phi','\\u03C7':'chi','\\u03A7':'Chi','\\u03C8':'psi','\\u03A8':'Psi','\\u03C9':'omega','\\u03A9':'ohm','\\u0430':'acy','\\u0410':'Acy','\\u0431':'bcy','\\u0411':'Bcy','\\u0432':'vcy','\\u0412':'Vcy','\\u0433':'gcy','\\u0413':'Gcy','\\u0453':'gjcy','\\u0403':'GJcy','\\u0434':'dcy','\\u0414':'Dcy','\\u0452':'djcy','\\u0402':'DJcy','\\u0435':'iecy','\\u0415':'IEcy','\\u0451':'iocy','\\u0401':'IOcy','\\u0454':'jukcy','\\u0404':'Jukcy','\\u0436':'zhcy','\\u0416':'ZHcy','\\u0437':'zcy','\\u0417':'Zcy','\\u0455':'dscy','\\u0405':'DScy','\\u0438':'icy','\\u0418':'Icy','\\u0456':'iukcy','\\u0406':'Iukcy','\\u0457':'yicy','\\u0407':'YIcy','\\u0439':'jcy','\\u0419':'Jcy','\\u0458':'jsercy','\\u0408':'Jsercy','\\u043A':'kcy','\\u041A':'Kcy','\\u045C':'kjcy','\\u040C':'KJcy','\\u043B':'lcy','\\u041B':'Lcy','\\u0459':'ljcy','\\u0409':'LJcy','\\u043C':'mcy','\\u041C':'Mcy','\\u043D':'ncy','\\u041D':'Ncy','\\u045A':'njcy','\\u040A':'NJcy','\\u043E':'ocy','\\u041E':'Ocy','\\u043F':'pcy','\\u041F':'Pcy','\\u0440':'rcy','\\u0420':'Rcy','\\u0441':'scy','\\u0421':'Scy','\\u0442':'tcy','\\u0422':'Tcy','\\u045B':'tshcy','\\u040B':'TSHcy','\\u0443':'ucy','\\u0423':'Ucy','\\u045E':'ubrcy','\\u040E':'Ubrcy','\\u0444':'fcy','\\u0424':'Fcy','\\u0445':'khcy','\\u0425':'KHcy','\\u0446':'tscy','\\u0426':'TScy','\\u0447':'chcy','\\u0427':'CHcy','\\u045F':'dzcy','\\u040F':'DZcy','\\u0448':'shcy','\\u0428':'SHcy','\\u0449':'shchcy','\\u0429':'SHCHcy','\\u044A':'hardcy','\\u042A':'HARDcy','\\u044B':'ycy','\\u042B':'Ycy','\\u044C':'softcy','\\u042C':'SOFTcy','\\u044D':'ecy','\\u042D':'Ecy','\\u044E':'yucy','\\u042E':'YUcy','\\u044F':'yacy','\\u042F':'YAcy','\\u2135':'aleph','\\u2136':'beth','\\u2137':'gimel','\\u2138':'daleth'};\n\n\tvar regexEscape = /[\"&'<>`]/g;\n\tvar escapeMap = {\n\t\t'\"': '&quot;',\n\t\t'&': '&amp;',\n\t\t'\\'': '&#x27;',\n\t\t'<': '&lt;',\n\t\t// See https://mathiasbynens.be/notes/ambiguous-ampersands: in HTML, the\n\t\t// following is not strictly necessary unless it’s part of a tag or an\n\t\t// unquoted attribute value. We’re only escaping it to support those\n\t\t// situations, and for XML support.\n\t\t'>': '&gt;',\n\t\t// In Internet Explorer ≤ 8, the backtick character can be used\n\t\t// to break out of (un)quoted attribute values or HTML comments.\n\t\t// See http://html5sec.org/#102, http://html5sec.org/#108, and\n\t\t// http://html5sec.org/#133.\n\t\t'`': '&#x60;'\n\t};\n\n\tvar regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;\n\tvar regexInvalidRawCodePoint = /[\\0-\\x08\\x0B\\x0E-\\x1F\\x7F-\\x9F\\uFDD0-\\uFDEF\\uFFFE\\uFFFF]|[\\uD83F\\uD87F\\uD8BF\\uD8FF\\uD93F\\uD97F\\uD9BF\\uD9FF\\uDA3F\\uDA7F\\uDABF\\uDAFF\\uDB3F\\uDB7F\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\tvar regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;\n\tvar decodeMap = {'aacute':'\\xE1','Aacute':'\\xC1','abreve':'\\u0103','Abreve':'\\u0102','ac':'\\u223E','acd':'\\u223F','acE':'\\u223E\\u0333','acirc':'\\xE2','Acirc':'\\xC2','acute':'\\xB4','acy':'\\u0430','Acy':'\\u0410','aelig':'\\xE6','AElig':'\\xC6','af':'\\u2061','afr':'\\uD835\\uDD1E','Afr':'\\uD835\\uDD04','agrave':'\\xE0','Agrave':'\\xC0','alefsym':'\\u2135','aleph':'\\u2135','alpha':'\\u03B1','Alpha':'\\u0391','amacr':'\\u0101','Amacr':'\\u0100','amalg':'\\u2A3F','amp':'&','AMP':'&','and':'\\u2227','And':'\\u2A53','andand':'\\u2A55','andd':'\\u2A5C','andslope':'\\u2A58','andv':'\\u2A5A','ang':'\\u2220','ange':'\\u29A4','angle':'\\u2220','angmsd':'\\u2221','angmsdaa':'\\u29A8','angmsdab':'\\u29A9','angmsdac':'\\u29AA','angmsdad':'\\u29AB','angmsdae':'\\u29AC','angmsdaf':'\\u29AD','angmsdag':'\\u29AE','angmsdah':'\\u29AF','angrt':'\\u221F','angrtvb':'\\u22BE','angrtvbd':'\\u299D','angsph':'\\u2222','angst':'\\xC5','angzarr':'\\u237C','aogon':'\\u0105','Aogon':'\\u0104','aopf':'\\uD835\\uDD52','Aopf':'\\uD835\\uDD38','ap':'\\u2248','apacir':'\\u2A6F','ape':'\\u224A','apE':'\\u2A70','apid':'\\u224B','apos':'\\'','ApplyFunction':'\\u2061','approx':'\\u2248','approxeq':'\\u224A','aring':'\\xE5','Aring':'\\xC5','ascr':'\\uD835\\uDCB6','Ascr':'\\uD835\\uDC9C','Assign':'\\u2254','ast':'*','asymp':'\\u2248','asympeq':'\\u224D','atilde':'\\xE3','Atilde':'\\xC3','auml':'\\xE4','Auml':'\\xC4','awconint':'\\u2233','awint':'\\u2A11','backcong':'\\u224C','backepsilon':'\\u03F6','backprime':'\\u2035','backsim':'\\u223D','backsimeq':'\\u22CD','Backslash':'\\u2216','Barv':'\\u2AE7','barvee':'\\u22BD','barwed':'\\u2305','Barwed':'\\u2306','barwedge':'\\u2305','bbrk':'\\u23B5','bbrktbrk':'\\u23B6','bcong':'\\u224C','bcy':'\\u0431','Bcy':'\\u0411','bdquo':'\\u201E','becaus':'\\u2235','because':'\\u2235','Because':'\\u2235','bemptyv':'\\u29B0','bepsi':'\\u03F6','bernou':'\\u212C','Bernoullis':'\\u212C','beta':'\\u03B2','Beta':'\\u0392','beth':'\\u2136','between':'\\u226C','bfr':'\\uD835\\uDD1F','Bfr':'\\uD835\\uDD05','bigcap':'\\u22C2','bigcirc':'\\u25EF','bigcup':'\\u22C3','bigodot':'\\u2A00','bigoplus':'\\u2A01','bigotimes':'\\u2A02','bigsqcup':'\\u2A06','bigstar':'\\u2605','bigtriangledown':'\\u25BD','bigtriangleup':'\\u25B3','biguplus':'\\u2A04','bigvee':'\\u22C1','bigwedge':'\\u22C0','bkarow':'\\u290D','blacklozenge':'\\u29EB','blacksquare':'\\u25AA','blacktriangle':'\\u25B4','blacktriangledown':'\\u25BE','blacktriangleleft':'\\u25C2','blacktriangleright':'\\u25B8','blank':'\\u2423','blk12':'\\u2592','blk14':'\\u2591','blk34':'\\u2593','block':'\\u2588','bne':'=\\u20E5','bnequiv':'\\u2261\\u20E5','bnot':'\\u2310','bNot':'\\u2AED','bopf':'\\uD835\\uDD53','Bopf':'\\uD835\\uDD39','bot':'\\u22A5','bottom':'\\u22A5','bowtie':'\\u22C8','boxbox':'\\u29C9','boxdl':'\\u2510','boxdL':'\\u2555','boxDl':'\\u2556','boxDL':'\\u2557','boxdr':'\\u250C','boxdR':'\\u2552','boxDr':'\\u2553','boxDR':'\\u2554','boxh':'\\u2500','boxH':'\\u2550','boxhd':'\\u252C','boxhD':'\\u2565','boxHd':'\\u2564','boxHD':'\\u2566','boxhu':'\\u2534','boxhU':'\\u2568','boxHu':'\\u2567','boxHU':'\\u2569','boxminus':'\\u229F','boxplus':'\\u229E','boxtimes':'\\u22A0','boxul':'\\u2518','boxuL':'\\u255B','boxUl':'\\u255C','boxUL':'\\u255D','boxur':'\\u2514','boxuR':'\\u2558','boxUr':'\\u2559','boxUR':'\\u255A','boxv':'\\u2502','boxV':'\\u2551','boxvh':'\\u253C','boxvH':'\\u256A','boxVh':'\\u256B','boxVH':'\\u256C','boxvl':'\\u2524','boxvL':'\\u2561','boxVl':'\\u2562','boxVL':'\\u2563','boxvr':'\\u251C','boxvR':'\\u255E','boxVr':'\\u255F','boxVR':'\\u2560','bprime':'\\u2035','breve':'\\u02D8','Breve':'\\u02D8','brvbar':'\\xA6','bscr':'\\uD835\\uDCB7','Bscr':'\\u212C','bsemi':'\\u204F','bsim':'\\u223D','bsime':'\\u22CD','bsol':'\\\\','bsolb':'\\u29C5','bsolhsub':'\\u27C8','bull':'\\u2022','bullet':'\\u2022','bump':'\\u224E','bumpe':'\\u224F','bumpE':'\\u2AAE','bumpeq':'\\u224F','Bumpeq':'\\u224E','cacute':'\\u0107','Cacute':'\\u0106','cap':'\\u2229','Cap':'\\u22D2','capand':'\\u2A44','capbrcup':'\\u2A49','capcap':'\\u2A4B','capcup':'\\u2A47','capdot':'\\u2A40','CapitalDifferentialD':'\\u2145','caps':'\\u2229\\uFE00','caret':'\\u2041','caron':'\\u02C7','Cayleys':'\\u212D','ccaps':'\\u2A4D','ccaron':'\\u010D','Ccaron':'\\u010C','ccedil':'\\xE7','Ccedil':'\\xC7','ccirc':'\\u0109','Ccirc':'\\u0108','Cconint':'\\u2230','ccups':'\\u2A4C','ccupssm':'\\u2A50','cdot':'\\u010B','Cdot':'\\u010A','cedil':'\\xB8','Cedilla':'\\xB8','cemptyv':'\\u29B2','cent':'\\xA2','centerdot':'\\xB7','CenterDot':'\\xB7','cfr':'\\uD835\\uDD20','Cfr':'\\u212D','chcy':'\\u0447','CHcy':'\\u0427','check':'\\u2713','checkmark':'\\u2713','chi':'\\u03C7','Chi':'\\u03A7','cir':'\\u25CB','circ':'\\u02C6','circeq':'\\u2257','circlearrowleft':'\\u21BA','circlearrowright':'\\u21BB','circledast':'\\u229B','circledcirc':'\\u229A','circleddash':'\\u229D','CircleDot':'\\u2299','circledR':'\\xAE','circledS':'\\u24C8','CircleMinus':'\\u2296','CirclePlus':'\\u2295','CircleTimes':'\\u2297','cire':'\\u2257','cirE':'\\u29C3','cirfnint':'\\u2A10','cirmid':'\\u2AEF','cirscir':'\\u29C2','ClockwiseContourIntegral':'\\u2232','CloseCurlyDoubleQuote':'\\u201D','CloseCurlyQuote':'\\u2019','clubs':'\\u2663','clubsuit':'\\u2663','colon':':','Colon':'\\u2237','colone':'\\u2254','Colone':'\\u2A74','coloneq':'\\u2254','comma':',','commat':'@','comp':'\\u2201','compfn':'\\u2218','complement':'\\u2201','complexes':'\\u2102','cong':'\\u2245','congdot':'\\u2A6D','Congruent':'\\u2261','conint':'\\u222E','Conint':'\\u222F','ContourIntegral':'\\u222E','copf':'\\uD835\\uDD54','Copf':'\\u2102','coprod':'\\u2210','Coproduct':'\\u2210','copy':'\\xA9','COPY':'\\xA9','copysr':'\\u2117','CounterClockwiseContourIntegral':'\\u2233','crarr':'\\u21B5','cross':'\\u2717','Cross':'\\u2A2F','cscr':'\\uD835\\uDCB8','Cscr':'\\uD835\\uDC9E','csub':'\\u2ACF','csube':'\\u2AD1','csup':'\\u2AD0','csupe':'\\u2AD2','ctdot':'\\u22EF','cudarrl':'\\u2938','cudarrr':'\\u2935','cuepr':'\\u22DE','cuesc':'\\u22DF','cularr':'\\u21B6','cularrp':'\\u293D','cup':'\\u222A','Cup':'\\u22D3','cupbrcap':'\\u2A48','cupcap':'\\u2A46','CupCap':'\\u224D','cupcup':'\\u2A4A','cupdot':'\\u228D','cupor':'\\u2A45','cups':'\\u222A\\uFE00','curarr':'\\u21B7','curarrm':'\\u293C','curlyeqprec':'\\u22DE','curlyeqsucc':'\\u22DF','curlyvee':'\\u22CE','curlywedge':'\\u22CF','curren':'\\xA4','curvearrowleft':'\\u21B6','curvearrowright':'\\u21B7','cuvee':'\\u22CE','cuwed':'\\u22CF','cwconint':'\\u2232','cwint':'\\u2231','cylcty':'\\u232D','dagger':'\\u2020','Dagger':'\\u2021','daleth':'\\u2138','darr':'\\u2193','dArr':'\\u21D3','Darr':'\\u21A1','dash':'\\u2010','dashv':'\\u22A3','Dashv':'\\u2AE4','dbkarow':'\\u290F','dblac':'\\u02DD','dcaron':'\\u010F','Dcaron':'\\u010E','dcy':'\\u0434','Dcy':'\\u0414','dd':'\\u2146','DD':'\\u2145','ddagger':'\\u2021','ddarr':'\\u21CA','DDotrahd':'\\u2911','ddotseq':'\\u2A77','deg':'\\xB0','Del':'\\u2207','delta':'\\u03B4','Delta':'\\u0394','demptyv':'\\u29B1','dfisht':'\\u297F','dfr':'\\uD835\\uDD21','Dfr':'\\uD835\\uDD07','dHar':'\\u2965','dharl':'\\u21C3','dharr':'\\u21C2','DiacriticalAcute':'\\xB4','DiacriticalDot':'\\u02D9','DiacriticalDoubleAcute':'\\u02DD','DiacriticalGrave':'`','DiacriticalTilde':'\\u02DC','diam':'\\u22C4','diamond':'\\u22C4','Diamond':'\\u22C4','diamondsuit':'\\u2666','diams':'\\u2666','die':'\\xA8','DifferentialD':'\\u2146','digamma':'\\u03DD','disin':'\\u22F2','div':'\\xF7','divide':'\\xF7','divideontimes':'\\u22C7','divonx':'\\u22C7','djcy':'\\u0452','DJcy':'\\u0402','dlcorn':'\\u231E','dlcrop':'\\u230D','dollar':'$','dopf':'\\uD835\\uDD55','Dopf':'\\uD835\\uDD3B','dot':'\\u02D9','Dot':'\\xA8','DotDot':'\\u20DC','doteq':'\\u2250','doteqdot':'\\u2251','DotEqual':'\\u2250','dotminus':'\\u2238','dotplus':'\\u2214','dotsquare':'\\u22A1','doublebarwedge':'\\u2306','DoubleContourIntegral':'\\u222F','DoubleDot':'\\xA8','DoubleDownArrow':'\\u21D3','DoubleLeftArrow':'\\u21D0','DoubleLeftRightArrow':'\\u21D4','DoubleLeftTee':'\\u2AE4','DoubleLongLeftArrow':'\\u27F8','DoubleLongLeftRightArrow':'\\u27FA','DoubleLongRightArrow':'\\u27F9','DoubleRightArrow':'\\u21D2','DoubleRightTee':'\\u22A8','DoubleUpArrow':'\\u21D1','DoubleUpDownArrow':'\\u21D5','DoubleVerticalBar':'\\u2225','downarrow':'\\u2193','Downarrow':'\\u21D3','DownArrow':'\\u2193','DownArrowBar':'\\u2913','DownArrowUpArrow':'\\u21F5','DownBreve':'\\u0311','downdownarrows':'\\u21CA','downharpoonleft':'\\u21C3','downharpoonright':'\\u21C2','DownLeftRightVector':'\\u2950','DownLeftTeeVector':'\\u295E','DownLeftVector':'\\u21BD','DownLeftVectorBar':'\\u2956','DownRightTeeVector':'\\u295F','DownRightVector':'\\u21C1','DownRightVectorBar':'\\u2957','DownTee':'\\u22A4','DownTeeArrow':'\\u21A7','drbkarow':'\\u2910','drcorn':'\\u231F','drcrop':'\\u230C','dscr':'\\uD835\\uDCB9','Dscr':'\\uD835\\uDC9F','dscy':'\\u0455','DScy':'\\u0405','dsol':'\\u29F6','dstrok':'\\u0111','Dstrok':'\\u0110','dtdot':'\\u22F1','dtri':'\\u25BF','dtrif':'\\u25BE','duarr':'\\u21F5','duhar':'\\u296F','dwangle':'\\u29A6','dzcy':'\\u045F','DZcy':'\\u040F','dzigrarr':'\\u27FF','eacute':'\\xE9','Eacute':'\\xC9','easter':'\\u2A6E','ecaron':'\\u011B','Ecaron':'\\u011A','ecir':'\\u2256','ecirc':'\\xEA','Ecirc':'\\xCA','ecolon':'\\u2255','ecy':'\\u044D','Ecy':'\\u042D','eDDot':'\\u2A77','edot':'\\u0117','eDot':'\\u2251','Edot':'\\u0116','ee':'\\u2147','efDot':'\\u2252','efr':'\\uD835\\uDD22','Efr':'\\uD835\\uDD08','eg':'\\u2A9A','egrave':'\\xE8','Egrave':'\\xC8','egs':'\\u2A96','egsdot':'\\u2A98','el':'\\u2A99','Element':'\\u2208','elinters':'\\u23E7','ell':'\\u2113','els':'\\u2A95','elsdot':'\\u2A97','emacr':'\\u0113','Emacr':'\\u0112','empty':'\\u2205','emptyset':'\\u2205','EmptySmallSquare':'\\u25FB','emptyv':'\\u2205','EmptyVerySmallSquare':'\\u25AB','emsp':'\\u2003','emsp13':'\\u2004','emsp14':'\\u2005','eng':'\\u014B','ENG':'\\u014A','ensp':'\\u2002','eogon':'\\u0119','Eogon':'\\u0118','eopf':'\\uD835\\uDD56','Eopf':'\\uD835\\uDD3C','epar':'\\u22D5','eparsl':'\\u29E3','eplus':'\\u2A71','epsi':'\\u03B5','epsilon':'\\u03B5','Epsilon':'\\u0395','epsiv':'\\u03F5','eqcirc':'\\u2256','eqcolon':'\\u2255','eqsim':'\\u2242','eqslantgtr':'\\u2A96','eqslantless':'\\u2A95','Equal':'\\u2A75','equals':'=','EqualTilde':'\\u2242','equest':'\\u225F','Equilibrium':'\\u21CC','equiv':'\\u2261','equivDD':'\\u2A78','eqvparsl':'\\u29E5','erarr':'\\u2971','erDot':'\\u2253','escr':'\\u212F','Escr':'\\u2130','esdot':'\\u2250','esim':'\\u2242','Esim':'\\u2A73','eta':'\\u03B7','Eta':'\\u0397','eth':'\\xF0','ETH':'\\xD0','euml':'\\xEB','Euml':'\\xCB','euro':'\\u20AC','excl':'!','exist':'\\u2203','Exists':'\\u2203','expectation':'\\u2130','exponentiale':'\\u2147','ExponentialE':'\\u2147','fallingdotseq':'\\u2252','fcy':'\\u0444','Fcy':'\\u0424','female':'\\u2640','ffilig':'\\uFB03','fflig':'\\uFB00','ffllig':'\\uFB04','ffr':'\\uD835\\uDD23','Ffr':'\\uD835\\uDD09','filig':'\\uFB01','FilledSmallSquare':'\\u25FC','FilledVerySmallSquare':'\\u25AA','fjlig':'fj','flat':'\\u266D','fllig':'\\uFB02','fltns':'\\u25B1','fnof':'\\u0192','fopf':'\\uD835\\uDD57','Fopf':'\\uD835\\uDD3D','forall':'\\u2200','ForAll':'\\u2200','fork':'\\u22D4','forkv':'\\u2AD9','Fouriertrf':'\\u2131','fpartint':'\\u2A0D','frac12':'\\xBD','frac13':'\\u2153','frac14':'\\xBC','frac15':'\\u2155','frac16':'\\u2159','frac18':'\\u215B','frac23':'\\u2154','frac25':'\\u2156','frac34':'\\xBE','frac35':'\\u2157','frac38':'\\u215C','frac45':'\\u2158','frac56':'\\u215A','frac58':'\\u215D','frac78':'\\u215E','frasl':'\\u2044','frown':'\\u2322','fscr':'\\uD835\\uDCBB','Fscr':'\\u2131','gacute':'\\u01F5','gamma':'\\u03B3','Gamma':'\\u0393','gammad':'\\u03DD','Gammad':'\\u03DC','gap':'\\u2A86','gbreve':'\\u011F','Gbreve':'\\u011E','Gcedil':'\\u0122','gcirc':'\\u011D','Gcirc':'\\u011C','gcy':'\\u0433','Gcy':'\\u0413','gdot':'\\u0121','Gdot':'\\u0120','ge':'\\u2265','gE':'\\u2267','gel':'\\u22DB','gEl':'\\u2A8C','geq':'\\u2265','geqq':'\\u2267','geqslant':'\\u2A7E','ges':'\\u2A7E','gescc':'\\u2AA9','gesdot':'\\u2A80','gesdoto':'\\u2A82','gesdotol':'\\u2A84','gesl':'\\u22DB\\uFE00','gesles':'\\u2A94','gfr':'\\uD835\\uDD24','Gfr':'\\uD835\\uDD0A','gg':'\\u226B','Gg':'\\u22D9','ggg':'\\u22D9','gimel':'\\u2137','gjcy':'\\u0453','GJcy':'\\u0403','gl':'\\u2277','gla':'\\u2AA5','glE':'\\u2A92','glj':'\\u2AA4','gnap':'\\u2A8A','gnapprox':'\\u2A8A','gne':'\\u2A88','gnE':'\\u2269','gneq':'\\u2A88','gneqq':'\\u2269','gnsim':'\\u22E7','gopf':'\\uD835\\uDD58','Gopf':'\\uD835\\uDD3E','grave':'`','GreaterEqual':'\\u2265','GreaterEqualLess':'\\u22DB','GreaterFullEqual':'\\u2267','GreaterGreater':'\\u2AA2','GreaterLess':'\\u2277','GreaterSlantEqual':'\\u2A7E','GreaterTilde':'\\u2273','gscr':'\\u210A','Gscr':'\\uD835\\uDCA2','gsim':'\\u2273','gsime':'\\u2A8E','gsiml':'\\u2A90','gt':'>','Gt':'\\u226B','GT':'>','gtcc':'\\u2AA7','gtcir':'\\u2A7A','gtdot':'\\u22D7','gtlPar':'\\u2995','gtquest':'\\u2A7C','gtrapprox':'\\u2A86','gtrarr':'\\u2978','gtrdot':'\\u22D7','gtreqless':'\\u22DB','gtreqqless':'\\u2A8C','gtrless':'\\u2277','gtrsim':'\\u2273','gvertneqq':'\\u2269\\uFE00','gvnE':'\\u2269\\uFE00','Hacek':'\\u02C7','hairsp':'\\u200A','half':'\\xBD','hamilt':'\\u210B','hardcy':'\\u044A','HARDcy':'\\u042A','harr':'\\u2194','hArr':'\\u21D4','harrcir':'\\u2948','harrw':'\\u21AD','Hat':'^','hbar':'\\u210F','hcirc':'\\u0125','Hcirc':'\\u0124','hearts':'\\u2665','heartsuit':'\\u2665','hellip':'\\u2026','hercon':'\\u22B9','hfr':'\\uD835\\uDD25','Hfr':'\\u210C','HilbertSpace':'\\u210B','hksearow':'\\u2925','hkswarow':'\\u2926','hoarr':'\\u21FF','homtht':'\\u223B','hookleftarrow':'\\u21A9','hookrightarrow':'\\u21AA','hopf':'\\uD835\\uDD59','Hopf':'\\u210D','horbar':'\\u2015','HorizontalLine':'\\u2500','hscr':'\\uD835\\uDCBD','Hscr':'\\u210B','hslash':'\\u210F','hstrok':'\\u0127','Hstrok':'\\u0126','HumpDownHump':'\\u224E','HumpEqual':'\\u224F','hybull':'\\u2043','hyphen':'\\u2010','iacute':'\\xED','Iacute':'\\xCD','ic':'\\u2063','icirc':'\\xEE','Icirc':'\\xCE','icy':'\\u0438','Icy':'\\u0418','Idot':'\\u0130','iecy':'\\u0435','IEcy':'\\u0415','iexcl':'\\xA1','iff':'\\u21D4','ifr':'\\uD835\\uDD26','Ifr':'\\u2111','igrave':'\\xEC','Igrave':'\\xCC','ii':'\\u2148','iiiint':'\\u2A0C','iiint':'\\u222D','iinfin':'\\u29DC','iiota':'\\u2129','ijlig':'\\u0133','IJlig':'\\u0132','Im':'\\u2111','imacr':'\\u012B','Imacr':'\\u012A','image':'\\u2111','ImaginaryI':'\\u2148','imagline':'\\u2110','imagpart':'\\u2111','imath':'\\u0131','imof':'\\u22B7','imped':'\\u01B5','Implies':'\\u21D2','in':'\\u2208','incare':'\\u2105','infin':'\\u221E','infintie':'\\u29DD','inodot':'\\u0131','int':'\\u222B','Int':'\\u222C','intcal':'\\u22BA','integers':'\\u2124','Integral':'\\u222B','intercal':'\\u22BA','Intersection':'\\u22C2','intlarhk':'\\u2A17','intprod':'\\u2A3C','InvisibleComma':'\\u2063','InvisibleTimes':'\\u2062','iocy':'\\u0451','IOcy':'\\u0401','iogon':'\\u012F','Iogon':'\\u012E','iopf':'\\uD835\\uDD5A','Iopf':'\\uD835\\uDD40','iota':'\\u03B9','Iota':'\\u0399','iprod':'\\u2A3C','iquest':'\\xBF','iscr':'\\uD835\\uDCBE','Iscr':'\\u2110','isin':'\\u2208','isindot':'\\u22F5','isinE':'\\u22F9','isins':'\\u22F4','isinsv':'\\u22F3','isinv':'\\u2208','it':'\\u2062','itilde':'\\u0129','Itilde':'\\u0128','iukcy':'\\u0456','Iukcy':'\\u0406','iuml':'\\xEF','Iuml':'\\xCF','jcirc':'\\u0135','Jcirc':'\\u0134','jcy':'\\u0439','Jcy':'\\u0419','jfr':'\\uD835\\uDD27','Jfr':'\\uD835\\uDD0D','jmath':'\\u0237','jopf':'\\uD835\\uDD5B','Jopf':'\\uD835\\uDD41','jscr':'\\uD835\\uDCBF','Jscr':'\\uD835\\uDCA5','jsercy':'\\u0458','Jsercy':'\\u0408','jukcy':'\\u0454','Jukcy':'\\u0404','kappa':'\\u03BA','Kappa':'\\u039A','kappav':'\\u03F0','kcedil':'\\u0137','Kcedil':'\\u0136','kcy':'\\u043A','Kcy':'\\u041A','kfr':'\\uD835\\uDD28','Kfr':'\\uD835\\uDD0E','kgreen':'\\u0138','khcy':'\\u0445','KHcy':'\\u0425','kjcy':'\\u045C','KJcy':'\\u040C','kopf':'\\uD835\\uDD5C','Kopf':'\\uD835\\uDD42','kscr':'\\uD835\\uDCC0','Kscr':'\\uD835\\uDCA6','lAarr':'\\u21DA','lacute':'\\u013A','Lacute':'\\u0139','laemptyv':'\\u29B4','lagran':'\\u2112','lambda':'\\u03BB','Lambda':'\\u039B','lang':'\\u27E8','Lang':'\\u27EA','langd':'\\u2991','langle':'\\u27E8','lap':'\\u2A85','Laplacetrf':'\\u2112','laquo':'\\xAB','larr':'\\u2190','lArr':'\\u21D0','Larr':'\\u219E','larrb':'\\u21E4','larrbfs':'\\u291F','larrfs':'\\u291D','larrhk':'\\u21A9','larrlp':'\\u21AB','larrpl':'\\u2939','larrsim':'\\u2973','larrtl':'\\u21A2','lat':'\\u2AAB','latail':'\\u2919','lAtail':'\\u291B','late':'\\u2AAD','lates':'\\u2AAD\\uFE00','lbarr':'\\u290C','lBarr':'\\u290E','lbbrk':'\\u2772','lbrace':'{','lbrack':'[','lbrke':'\\u298B','lbrksld':'\\u298F','lbrkslu':'\\u298D','lcaron':'\\u013E','Lcaron':'\\u013D','lcedil':'\\u013C','Lcedil':'\\u013B','lceil':'\\u2308','lcub':'{','lcy':'\\u043B','Lcy':'\\u041B','ldca':'\\u2936','ldquo':'\\u201C','ldquor':'\\u201E','ldrdhar':'\\u2967','ldrushar':'\\u294B','ldsh':'\\u21B2','le':'\\u2264','lE':'\\u2266','LeftAngleBracket':'\\u27E8','leftarrow':'\\u2190','Leftarrow':'\\u21D0','LeftArrow':'\\u2190','LeftArrowBar':'\\u21E4','LeftArrowRightArrow':'\\u21C6','leftarrowtail':'\\u21A2','LeftCeiling':'\\u2308','LeftDoubleBracket':'\\u27E6','LeftDownTeeVector':'\\u2961','LeftDownVector':'\\u21C3','LeftDownVectorBar':'\\u2959','LeftFloor':'\\u230A','leftharpoondown':'\\u21BD','leftharpoonup':'\\u21BC','leftleftarrows':'\\u21C7','leftrightarrow':'\\u2194','Leftrightarrow':'\\u21D4','LeftRightArrow':'\\u2194','leftrightarrows':'\\u21C6','leftrightharpoons':'\\u21CB','leftrightsquigarrow':'\\u21AD','LeftRightVector':'\\u294E','LeftTee':'\\u22A3','LeftTeeArrow':'\\u21A4','LeftTeeVector':'\\u295A','leftthreetimes':'\\u22CB','LeftTriangle':'\\u22B2','LeftTriangleBar':'\\u29CF','LeftTriangleEqual':'\\u22B4','LeftUpDownVector':'\\u2951','LeftUpTeeVector':'\\u2960','LeftUpVector':'\\u21BF','LeftUpVectorBar':'\\u2958','LeftVector':'\\u21BC','LeftVectorBar':'\\u2952','leg':'\\u22DA','lEg':'\\u2A8B','leq':'\\u2264','leqq':'\\u2266','leqslant':'\\u2A7D','les':'\\u2A7D','lescc':'\\u2AA8','lesdot':'\\u2A7F','lesdoto':'\\u2A81','lesdotor':'\\u2A83','lesg':'\\u22DA\\uFE00','lesges':'\\u2A93','lessapprox':'\\u2A85','lessdot':'\\u22D6','lesseqgtr':'\\u22DA','lesseqqgtr':'\\u2A8B','LessEqualGreater':'\\u22DA','LessFullEqual':'\\u2266','LessGreater':'\\u2276','lessgtr':'\\u2276','LessLess':'\\u2AA1','lesssim':'\\u2272','LessSlantEqual':'\\u2A7D','LessTilde':'\\u2272','lfisht':'\\u297C','lfloor':'\\u230A','lfr':'\\uD835\\uDD29','Lfr':'\\uD835\\uDD0F','lg':'\\u2276','lgE':'\\u2A91','lHar':'\\u2962','lhard':'\\u21BD','lharu':'\\u21BC','lharul':'\\u296A','lhblk':'\\u2584','ljcy':'\\u0459','LJcy':'\\u0409','ll':'\\u226A','Ll':'\\u22D8','llarr':'\\u21C7','llcorner':'\\u231E','Lleftarrow':'\\u21DA','llhard':'\\u296B','lltri':'\\u25FA','lmidot':'\\u0140','Lmidot':'\\u013F','lmoust':'\\u23B0','lmoustache':'\\u23B0','lnap':'\\u2A89','lnapprox':'\\u2A89','lne':'\\u2A87','lnE':'\\u2268','lneq':'\\u2A87','lneqq':'\\u2268','lnsim':'\\u22E6','loang':'\\u27EC','loarr':'\\u21FD','lobrk':'\\u27E6','longleftarrow':'\\u27F5','Longleftarrow':'\\u27F8','LongLeftArrow':'\\u27F5','longleftrightarrow':'\\u27F7','Longleftrightarrow':'\\u27FA','LongLeftRightArrow':'\\u27F7','longmapsto':'\\u27FC','longrightarrow':'\\u27F6','Longrightarrow':'\\u27F9','LongRightArrow':'\\u27F6','looparrowleft':'\\u21AB','looparrowright':'\\u21AC','lopar':'\\u2985','lopf':'\\uD835\\uDD5D','Lopf':'\\uD835\\uDD43','loplus':'\\u2A2D','lotimes':'\\u2A34','lowast':'\\u2217','lowbar':'_','LowerLeftArrow':'\\u2199','LowerRightArrow':'\\u2198','loz':'\\u25CA','lozenge':'\\u25CA','lozf':'\\u29EB','lpar':'(','lparlt':'\\u2993','lrarr':'\\u21C6','lrcorner':'\\u231F','lrhar':'\\u21CB','lrhard':'\\u296D','lrm':'\\u200E','lrtri':'\\u22BF','lsaquo':'\\u2039','lscr':'\\uD835\\uDCC1','Lscr':'\\u2112','lsh':'\\u21B0','Lsh':'\\u21B0','lsim':'\\u2272','lsime':'\\u2A8D','lsimg':'\\u2A8F','lsqb':'[','lsquo':'\\u2018','lsquor':'\\u201A','lstrok':'\\u0142','Lstrok':'\\u0141','lt':'<','Lt':'\\u226A','LT':'<','ltcc':'\\u2AA6','ltcir':'\\u2A79','ltdot':'\\u22D6','lthree':'\\u22CB','ltimes':'\\u22C9','ltlarr':'\\u2976','ltquest':'\\u2A7B','ltri':'\\u25C3','ltrie':'\\u22B4','ltrif':'\\u25C2','ltrPar':'\\u2996','lurdshar':'\\u294A','luruhar':'\\u2966','lvertneqq':'\\u2268\\uFE00','lvnE':'\\u2268\\uFE00','macr':'\\xAF','male':'\\u2642','malt':'\\u2720','maltese':'\\u2720','map':'\\u21A6','Map':'\\u2905','mapsto':'\\u21A6','mapstodown':'\\u21A7','mapstoleft':'\\u21A4','mapstoup':'\\u21A5','marker':'\\u25AE','mcomma':'\\u2A29','mcy':'\\u043C','Mcy':'\\u041C','mdash':'\\u2014','mDDot':'\\u223A','measuredangle':'\\u2221','MediumSpace':'\\u205F','Mellintrf':'\\u2133','mfr':'\\uD835\\uDD2A','Mfr':'\\uD835\\uDD10','mho':'\\u2127','micro':'\\xB5','mid':'\\u2223','midast':'*','midcir':'\\u2AF0','middot':'\\xB7','minus':'\\u2212','minusb':'\\u229F','minusd':'\\u2238','minusdu':'\\u2A2A','MinusPlus':'\\u2213','mlcp':'\\u2ADB','mldr':'\\u2026','mnplus':'\\u2213','models':'\\u22A7','mopf':'\\uD835\\uDD5E','Mopf':'\\uD835\\uDD44','mp':'\\u2213','mscr':'\\uD835\\uDCC2','Mscr':'\\u2133','mstpos':'\\u223E','mu':'\\u03BC','Mu':'\\u039C','multimap':'\\u22B8','mumap':'\\u22B8','nabla':'\\u2207','nacute':'\\u0144','Nacute':'\\u0143','nang':'\\u2220\\u20D2','nap':'\\u2249','napE':'\\u2A70\\u0338','napid':'\\u224B\\u0338','napos':'\\u0149','napprox':'\\u2249','natur':'\\u266E','natural':'\\u266E','naturals':'\\u2115','nbsp':'\\xA0','nbump':'\\u224E\\u0338','nbumpe':'\\u224F\\u0338','ncap':'\\u2A43','ncaron':'\\u0148','Ncaron':'\\u0147','ncedil':'\\u0146','Ncedil':'\\u0145','ncong':'\\u2247','ncongdot':'\\u2A6D\\u0338','ncup':'\\u2A42','ncy':'\\u043D','Ncy':'\\u041D','ndash':'\\u2013','ne':'\\u2260','nearhk':'\\u2924','nearr':'\\u2197','neArr':'\\u21D7','nearrow':'\\u2197','nedot':'\\u2250\\u0338','NegativeMediumSpace':'\\u200B','NegativeThickSpace':'\\u200B','NegativeThinSpace':'\\u200B','NegativeVeryThinSpace':'\\u200B','nequiv':'\\u2262','nesear':'\\u2928','nesim':'\\u2242\\u0338','NestedGreaterGreater':'\\u226B','NestedLessLess':'\\u226A','NewLine':'\\n','nexist':'\\u2204','nexists':'\\u2204','nfr':'\\uD835\\uDD2B','Nfr':'\\uD835\\uDD11','nge':'\\u2271','ngE':'\\u2267\\u0338','ngeq':'\\u2271','ngeqq':'\\u2267\\u0338','ngeqslant':'\\u2A7E\\u0338','nges':'\\u2A7E\\u0338','nGg':'\\u22D9\\u0338','ngsim':'\\u2275','ngt':'\\u226F','nGt':'\\u226B\\u20D2','ngtr':'\\u226F','nGtv':'\\u226B\\u0338','nharr':'\\u21AE','nhArr':'\\u21CE','nhpar':'\\u2AF2','ni':'\\u220B','nis':'\\u22FC','nisd':'\\u22FA','niv':'\\u220B','njcy':'\\u045A','NJcy':'\\u040A','nlarr':'\\u219A','nlArr':'\\u21CD','nldr':'\\u2025','nle':'\\u2270','nlE':'\\u2266\\u0338','nleftarrow':'\\u219A','nLeftarrow':'\\u21CD','nleftrightarrow':'\\u21AE','nLeftrightarrow':'\\u21CE','nleq':'\\u2270','nleqq':'\\u2266\\u0338','nleqslant':'\\u2A7D\\u0338','nles':'\\u2A7D\\u0338','nless':'\\u226E','nLl':'\\u22D8\\u0338','nlsim':'\\u2274','nlt':'\\u226E','nLt':'\\u226A\\u20D2','nltri':'\\u22EA','nltrie':'\\u22EC','nLtv':'\\u226A\\u0338','nmid':'\\u2224','NoBreak':'\\u2060','NonBreakingSpace':'\\xA0','nopf':'\\uD835\\uDD5F','Nopf':'\\u2115','not':'\\xAC','Not':'\\u2AEC','NotCongruent':'\\u2262','NotCupCap':'\\u226D','NotDoubleVerticalBar':'\\u2226','NotElement':'\\u2209','NotEqual':'\\u2260','NotEqualTilde':'\\u2242\\u0338','NotExists':'\\u2204','NotGreater':'\\u226F','NotGreaterEqual':'\\u2271','NotGreaterFullEqual':'\\u2267\\u0338','NotGreaterGreater':'\\u226B\\u0338','NotGreaterLess':'\\u2279','NotGreaterSlantEqual':'\\u2A7E\\u0338','NotGreaterTilde':'\\u2275','NotHumpDownHump':'\\u224E\\u0338','NotHumpEqual':'\\u224F\\u0338','notin':'\\u2209','notindot':'\\u22F5\\u0338','notinE':'\\u22F9\\u0338','notinva':'\\u2209','notinvb':'\\u22F7','notinvc':'\\u22F6','NotLeftTriangle':'\\u22EA','NotLeftTriangleBar':'\\u29CF\\u0338','NotLeftTriangleEqual':'\\u22EC','NotLess':'\\u226E','NotLessEqual':'\\u2270','NotLessGreater':'\\u2278','NotLessLess':'\\u226A\\u0338','NotLessSlantEqual':'\\u2A7D\\u0338','NotLessTilde':'\\u2274','NotNestedGreaterGreater':'\\u2AA2\\u0338','NotNestedLessLess':'\\u2AA1\\u0338','notni':'\\u220C','notniva':'\\u220C','notnivb':'\\u22FE','notnivc':'\\u22FD','NotPrecedes':'\\u2280','NotPrecedesEqual':'\\u2AAF\\u0338','NotPrecedesSlantEqual':'\\u22E0','NotReverseElement':'\\u220C','NotRightTriangle':'\\u22EB','NotRightTriangleBar':'\\u29D0\\u0338','NotRightTriangleEqual':'\\u22ED','NotSquareSubset':'\\u228F\\u0338','NotSquareSubsetEqual':'\\u22E2','NotSquareSuperset':'\\u2290\\u0338','NotSquareSupersetEqual':'\\u22E3','NotSubset':'\\u2282\\u20D2','NotSubsetEqual':'\\u2288','NotSucceeds':'\\u2281','NotSucceedsEqual':'\\u2AB0\\u0338','NotSucceedsSlantEqual':'\\u22E1','NotSucceedsTilde':'\\u227F\\u0338','NotSuperset':'\\u2283\\u20D2','NotSupersetEqual':'\\u2289','NotTilde':'\\u2241','NotTildeEqual':'\\u2244','NotTildeFullEqual':'\\u2247','NotTildeTilde':'\\u2249','NotVerticalBar':'\\u2224','npar':'\\u2226','nparallel':'\\u2226','nparsl':'\\u2AFD\\u20E5','npart':'\\u2202\\u0338','npolint':'\\u2A14','npr':'\\u2280','nprcue':'\\u22E0','npre':'\\u2AAF\\u0338','nprec':'\\u2280','npreceq':'\\u2AAF\\u0338','nrarr':'\\u219B','nrArr':'\\u21CF','nrarrc':'\\u2933\\u0338','nrarrw':'\\u219D\\u0338','nrightarrow':'\\u219B','nRightarrow':'\\u21CF','nrtri':'\\u22EB','nrtrie':'\\u22ED','nsc':'\\u2281','nsccue':'\\u22E1','nsce':'\\u2AB0\\u0338','nscr':'\\uD835\\uDCC3','Nscr':'\\uD835\\uDCA9','nshortmid':'\\u2224','nshortparallel':'\\u2226','nsim':'\\u2241','nsime':'\\u2244','nsimeq':'\\u2244','nsmid':'\\u2224','nspar':'\\u2226','nsqsube':'\\u22E2','nsqsupe':'\\u22E3','nsub':'\\u2284','nsube':'\\u2288','nsubE':'\\u2AC5\\u0338','nsubset':'\\u2282\\u20D2','nsubseteq':'\\u2288','nsubseteqq':'\\u2AC5\\u0338','nsucc':'\\u2281','nsucceq':'\\u2AB0\\u0338','nsup':'\\u2285','nsupe':'\\u2289','nsupE':'\\u2AC6\\u0338','nsupset':'\\u2283\\u20D2','nsupseteq':'\\u2289','nsupseteqq':'\\u2AC6\\u0338','ntgl':'\\u2279','ntilde':'\\xF1','Ntilde':'\\xD1','ntlg':'\\u2278','ntriangleleft':'\\u22EA','ntrianglelefteq':'\\u22EC','ntriangleright':'\\u22EB','ntrianglerighteq':'\\u22ED','nu':'\\u03BD','Nu':'\\u039D','num':'#','numero':'\\u2116','numsp':'\\u2007','nvap':'\\u224D\\u20D2','nvdash':'\\u22AC','nvDash':'\\u22AD','nVdash':'\\u22AE','nVDash':'\\u22AF','nvge':'\\u2265\\u20D2','nvgt':'>\\u20D2','nvHarr':'\\u2904','nvinfin':'\\u29DE','nvlArr':'\\u2902','nvle':'\\u2264\\u20D2','nvlt':'<\\u20D2','nvltrie':'\\u22B4\\u20D2','nvrArr':'\\u2903','nvrtrie':'\\u22B5\\u20D2','nvsim':'\\u223C\\u20D2','nwarhk':'\\u2923','nwarr':'\\u2196','nwArr':'\\u21D6','nwarrow':'\\u2196','nwnear':'\\u2927','oacute':'\\xF3','Oacute':'\\xD3','oast':'\\u229B','ocir':'\\u229A','ocirc':'\\xF4','Ocirc':'\\xD4','ocy':'\\u043E','Ocy':'\\u041E','odash':'\\u229D','odblac':'\\u0151','Odblac':'\\u0150','odiv':'\\u2A38','odot':'\\u2299','odsold':'\\u29BC','oelig':'\\u0153','OElig':'\\u0152','ofcir':'\\u29BF','ofr':'\\uD835\\uDD2C','Ofr':'\\uD835\\uDD12','ogon':'\\u02DB','ograve':'\\xF2','Ograve':'\\xD2','ogt':'\\u29C1','ohbar':'\\u29B5','ohm':'\\u03A9','oint':'\\u222E','olarr':'\\u21BA','olcir':'\\u29BE','olcross':'\\u29BB','oline':'\\u203E','olt':'\\u29C0','omacr':'\\u014D','Omacr':'\\u014C','omega':'\\u03C9','Omega':'\\u03A9','omicron':'\\u03BF','Omicron':'\\u039F','omid':'\\u29B6','ominus':'\\u2296','oopf':'\\uD835\\uDD60','Oopf':'\\uD835\\uDD46','opar':'\\u29B7','OpenCurlyDoubleQuote':'\\u201C','OpenCurlyQuote':'\\u2018','operp':'\\u29B9','oplus':'\\u2295','or':'\\u2228','Or':'\\u2A54','orarr':'\\u21BB','ord':'\\u2A5D','order':'\\u2134','orderof':'\\u2134','ordf':'\\xAA','ordm':'\\xBA','origof':'\\u22B6','oror':'\\u2A56','orslope':'\\u2A57','orv':'\\u2A5B','oS':'\\u24C8','oscr':'\\u2134','Oscr':'\\uD835\\uDCAA','oslash':'\\xF8','Oslash':'\\xD8','osol':'\\u2298','otilde':'\\xF5','Otilde':'\\xD5','otimes':'\\u2297','Otimes':'\\u2A37','otimesas':'\\u2A36','ouml':'\\xF6','Ouml':'\\xD6','ovbar':'\\u233D','OverBar':'\\u203E','OverBrace':'\\u23DE','OverBracket':'\\u23B4','OverParenthesis':'\\u23DC','par':'\\u2225','para':'\\xB6','parallel':'\\u2225','parsim':'\\u2AF3','parsl':'\\u2AFD','part':'\\u2202','PartialD':'\\u2202','pcy':'\\u043F','Pcy':'\\u041F','percnt':'%','period':'.','permil':'\\u2030','perp':'\\u22A5','pertenk':'\\u2031','pfr':'\\uD835\\uDD2D','Pfr':'\\uD835\\uDD13','phi':'\\u03C6','Phi':'\\u03A6','phiv':'\\u03D5','phmmat':'\\u2133','phone':'\\u260E','pi':'\\u03C0','Pi':'\\u03A0','pitchfork':'\\u22D4','piv':'\\u03D6','planck':'\\u210F','planckh':'\\u210E','plankv':'\\u210F','plus':'+','plusacir':'\\u2A23','plusb':'\\u229E','pluscir':'\\u2A22','plusdo':'\\u2214','plusdu':'\\u2A25','pluse':'\\u2A72','PlusMinus':'\\xB1','plusmn':'\\xB1','plussim':'\\u2A26','plustwo':'\\u2A27','pm':'\\xB1','Poincareplane':'\\u210C','pointint':'\\u2A15','popf':'\\uD835\\uDD61','Popf':'\\u2119','pound':'\\xA3','pr':'\\u227A','Pr':'\\u2ABB','prap':'\\u2AB7','prcue':'\\u227C','pre':'\\u2AAF','prE':'\\u2AB3','prec':'\\u227A','precapprox':'\\u2AB7','preccurlyeq':'\\u227C','Precedes':'\\u227A','PrecedesEqual':'\\u2AAF','PrecedesSlantEqual':'\\u227C','PrecedesTilde':'\\u227E','preceq':'\\u2AAF','precnapprox':'\\u2AB9','precneqq':'\\u2AB5','precnsim':'\\u22E8','precsim':'\\u227E','prime':'\\u2032','Prime':'\\u2033','primes':'\\u2119','prnap':'\\u2AB9','prnE':'\\u2AB5','prnsim':'\\u22E8','prod':'\\u220F','Product':'\\u220F','profalar':'\\u232E','profline':'\\u2312','profsurf':'\\u2313','prop':'\\u221D','Proportion':'\\u2237','Proportional':'\\u221D','propto':'\\u221D','prsim':'\\u227E','prurel':'\\u22B0','pscr':'\\uD835\\uDCC5','Pscr':'\\uD835\\uDCAB','psi':'\\u03C8','Psi':'\\u03A8','puncsp':'\\u2008','qfr':'\\uD835\\uDD2E','Qfr':'\\uD835\\uDD14','qint':'\\u2A0C','qopf':'\\uD835\\uDD62','Qopf':'\\u211A','qprime':'\\u2057','qscr':'\\uD835\\uDCC6','Qscr':'\\uD835\\uDCAC','quaternions':'\\u210D','quatint':'\\u2A16','quest':'?','questeq':'\\u225F','quot':'\"','QUOT':'\"','rAarr':'\\u21DB','race':'\\u223D\\u0331','racute':'\\u0155','Racute':'\\u0154','radic':'\\u221A','raemptyv':'\\u29B3','rang':'\\u27E9','Rang':'\\u27EB','rangd':'\\u2992','range':'\\u29A5','rangle':'\\u27E9','raquo':'\\xBB','rarr':'\\u2192','rArr':'\\u21D2','Rarr':'\\u21A0','rarrap':'\\u2975','rarrb':'\\u21E5','rarrbfs':'\\u2920','rarrc':'\\u2933','rarrfs':'\\u291E','rarrhk':'\\u21AA','rarrlp':'\\u21AC','rarrpl':'\\u2945','rarrsim':'\\u2974','rarrtl':'\\u21A3','Rarrtl':'\\u2916','rarrw':'\\u219D','ratail':'\\u291A','rAtail':'\\u291C','ratio':'\\u2236','rationals':'\\u211A','rbarr':'\\u290D','rBarr':'\\u290F','RBarr':'\\u2910','rbbrk':'\\u2773','rbrace':'}','rbrack':']','rbrke':'\\u298C','rbrksld':'\\u298E','rbrkslu':'\\u2990','rcaron':'\\u0159','Rcaron':'\\u0158','rcedil':'\\u0157','Rcedil':'\\u0156','rceil':'\\u2309','rcub':'}','rcy':'\\u0440','Rcy':'\\u0420','rdca':'\\u2937','rdldhar':'\\u2969','rdquo':'\\u201D','rdquor':'\\u201D','rdsh':'\\u21B3','Re':'\\u211C','real':'\\u211C','realine':'\\u211B','realpart':'\\u211C','reals':'\\u211D','rect':'\\u25AD','reg':'\\xAE','REG':'\\xAE','ReverseElement':'\\u220B','ReverseEquilibrium':'\\u21CB','ReverseUpEquilibrium':'\\u296F','rfisht':'\\u297D','rfloor':'\\u230B','rfr':'\\uD835\\uDD2F','Rfr':'\\u211C','rHar':'\\u2964','rhard':'\\u21C1','rharu':'\\u21C0','rharul':'\\u296C','rho':'\\u03C1','Rho':'\\u03A1','rhov':'\\u03F1','RightAngleBracket':'\\u27E9','rightarrow':'\\u2192','Rightarrow':'\\u21D2','RightArrow':'\\u2192','RightArrowBar':'\\u21E5','RightArrowLeftArrow':'\\u21C4','rightarrowtail':'\\u21A3','RightCeiling':'\\u2309','RightDoubleBracket':'\\u27E7','RightDownTeeVector':'\\u295D','RightDownVector':'\\u21C2','RightDownVectorBar':'\\u2955','RightFloor':'\\u230B','rightharpoondown':'\\u21C1','rightharpoonup':'\\u21C0','rightleftarrows':'\\u21C4','rightleftharpoons':'\\u21CC','rightrightarrows':'\\u21C9','rightsquigarrow':'\\u219D','RightTee':'\\u22A2','RightTeeArrow':'\\u21A6','RightTeeVector':'\\u295B','rightthreetimes':'\\u22CC','RightTriangle':'\\u22B3','RightTriangleBar':'\\u29D0','RightTriangleEqual':'\\u22B5','RightUpDownVector':'\\u294F','RightUpTeeVector':'\\u295C','RightUpVector':'\\u21BE','RightUpVectorBar':'\\u2954','RightVector':'\\u21C0','RightVectorBar':'\\u2953','ring':'\\u02DA','risingdotseq':'\\u2253','rlarr':'\\u21C4','rlhar':'\\u21CC','rlm':'\\u200F','rmoust':'\\u23B1','rmoustache':'\\u23B1','rnmid':'\\u2AEE','roang':'\\u27ED','roarr':'\\u21FE','robrk':'\\u27E7','ropar':'\\u2986','ropf':'\\uD835\\uDD63','Ropf':'\\u211D','roplus':'\\u2A2E','rotimes':'\\u2A35','RoundImplies':'\\u2970','rpar':')','rpargt':'\\u2994','rppolint':'\\u2A12','rrarr':'\\u21C9','Rrightarrow':'\\u21DB','rsaquo':'\\u203A','rscr':'\\uD835\\uDCC7','Rscr':'\\u211B','rsh':'\\u21B1','Rsh':'\\u21B1','rsqb':']','rsquo':'\\u2019','rsquor':'\\u2019','rthree':'\\u22CC','rtimes':'\\u22CA','rtri':'\\u25B9','rtrie':'\\u22B5','rtrif':'\\u25B8','rtriltri':'\\u29CE','RuleDelayed':'\\u29F4','ruluhar':'\\u2968','rx':'\\u211E','sacute':'\\u015B','Sacute':'\\u015A','sbquo':'\\u201A','sc':'\\u227B','Sc':'\\u2ABC','scap':'\\u2AB8','scaron':'\\u0161','Scaron':'\\u0160','sccue':'\\u227D','sce':'\\u2AB0','scE':'\\u2AB4','scedil':'\\u015F','Scedil':'\\u015E','scirc':'\\u015D','Scirc':'\\u015C','scnap':'\\u2ABA','scnE':'\\u2AB6','scnsim':'\\u22E9','scpolint':'\\u2A13','scsim':'\\u227F','scy':'\\u0441','Scy':'\\u0421','sdot':'\\u22C5','sdotb':'\\u22A1','sdote':'\\u2A66','searhk':'\\u2925','searr':'\\u2198','seArr':'\\u21D8','searrow':'\\u2198','sect':'\\xA7','semi':';','seswar':'\\u2929','setminus':'\\u2216','setmn':'\\u2216','sext':'\\u2736','sfr':'\\uD835\\uDD30','Sfr':'\\uD835\\uDD16','sfrown':'\\u2322','sharp':'\\u266F','shchcy':'\\u0449','SHCHcy':'\\u0429','shcy':'\\u0448','SHcy':'\\u0428','ShortDownArrow':'\\u2193','ShortLeftArrow':'\\u2190','shortmid':'\\u2223','shortparallel':'\\u2225','ShortRightArrow':'\\u2192','ShortUpArrow':'\\u2191','shy':'\\xAD','sigma':'\\u03C3','Sigma':'\\u03A3','sigmaf':'\\u03C2','sigmav':'\\u03C2','sim':'\\u223C','simdot':'\\u2A6A','sime':'\\u2243','simeq':'\\u2243','simg':'\\u2A9E','simgE':'\\u2AA0','siml':'\\u2A9D','simlE':'\\u2A9F','simne':'\\u2246','simplus':'\\u2A24','simrarr':'\\u2972','slarr':'\\u2190','SmallCircle':'\\u2218','smallsetminus':'\\u2216','smashp':'\\u2A33','smeparsl':'\\u29E4','smid':'\\u2223','smile':'\\u2323','smt':'\\u2AAA','smte':'\\u2AAC','smtes':'\\u2AAC\\uFE00','softcy':'\\u044C','SOFTcy':'\\u042C','sol':'/','solb':'\\u29C4','solbar':'\\u233F','sopf':'\\uD835\\uDD64','Sopf':'\\uD835\\uDD4A','spades':'\\u2660','spadesuit':'\\u2660','spar':'\\u2225','sqcap':'\\u2293','sqcaps':'\\u2293\\uFE00','sqcup':'\\u2294','sqcups':'\\u2294\\uFE00','Sqrt':'\\u221A','sqsub':'\\u228F','sqsube':'\\u2291','sqsubset':'\\u228F','sqsubseteq':'\\u2291','sqsup':'\\u2290','sqsupe':'\\u2292','sqsupset':'\\u2290','sqsupseteq':'\\u2292','squ':'\\u25A1','square':'\\u25A1','Square':'\\u25A1','SquareIntersection':'\\u2293','SquareSubset':'\\u228F','SquareSubsetEqual':'\\u2291','SquareSuperset':'\\u2290','SquareSupersetEqual':'\\u2292','SquareUnion':'\\u2294','squarf':'\\u25AA','squf':'\\u25AA','srarr':'\\u2192','sscr':'\\uD835\\uDCC8','Sscr':'\\uD835\\uDCAE','ssetmn':'\\u2216','ssmile':'\\u2323','sstarf':'\\u22C6','star':'\\u2606','Star':'\\u22C6','starf':'\\u2605','straightepsilon':'\\u03F5','straightphi':'\\u03D5','strns':'\\xAF','sub':'\\u2282','Sub':'\\u22D0','subdot':'\\u2ABD','sube':'\\u2286','subE':'\\u2AC5','subedot':'\\u2AC3','submult':'\\u2AC1','subne':'\\u228A','subnE':'\\u2ACB','subplus':'\\u2ABF','subrarr':'\\u2979','subset':'\\u2282','Subset':'\\u22D0','subseteq':'\\u2286','subseteqq':'\\u2AC5','SubsetEqual':'\\u2286','subsetneq':'\\u228A','subsetneqq':'\\u2ACB','subsim':'\\u2AC7','subsub':'\\u2AD5','subsup':'\\u2AD3','succ':'\\u227B','succapprox':'\\u2AB8','succcurlyeq':'\\u227D','Succeeds':'\\u227B','SucceedsEqual':'\\u2AB0','SucceedsSlantEqual':'\\u227D','SucceedsTilde':'\\u227F','succeq':'\\u2AB0','succnapprox':'\\u2ABA','succneqq':'\\u2AB6','succnsim':'\\u22E9','succsim':'\\u227F','SuchThat':'\\u220B','sum':'\\u2211','Sum':'\\u2211','sung':'\\u266A','sup':'\\u2283','Sup':'\\u22D1','sup1':'\\xB9','sup2':'\\xB2','sup3':'\\xB3','supdot':'\\u2ABE','supdsub':'\\u2AD8','supe':'\\u2287','supE':'\\u2AC6','supedot':'\\u2AC4','Superset':'\\u2283','SupersetEqual':'\\u2287','suphsol':'\\u27C9','suphsub':'\\u2AD7','suplarr':'\\u297B','supmult':'\\u2AC2','supne':'\\u228B','supnE':'\\u2ACC','supplus':'\\u2AC0','supset':'\\u2283','Supset':'\\u22D1','supseteq':'\\u2287','supseteqq':'\\u2AC6','supsetneq':'\\u228B','supsetneqq':'\\u2ACC','supsim':'\\u2AC8','supsub':'\\u2AD4','supsup':'\\u2AD6','swarhk':'\\u2926','swarr':'\\u2199','swArr':'\\u21D9','swarrow':'\\u2199','swnwar':'\\u292A','szlig':'\\xDF','Tab':'\\t','target':'\\u2316','tau':'\\u03C4','Tau':'\\u03A4','tbrk':'\\u23B4','tcaron':'\\u0165','Tcaron':'\\u0164','tcedil':'\\u0163','Tcedil':'\\u0162','tcy':'\\u0442','Tcy':'\\u0422','tdot':'\\u20DB','telrec':'\\u2315','tfr':'\\uD835\\uDD31','Tfr':'\\uD835\\uDD17','there4':'\\u2234','therefore':'\\u2234','Therefore':'\\u2234','theta':'\\u03B8','Theta':'\\u0398','thetasym':'\\u03D1','thetav':'\\u03D1','thickapprox':'\\u2248','thicksim':'\\u223C','ThickSpace':'\\u205F\\u200A','thinsp':'\\u2009','ThinSpace':'\\u2009','thkap':'\\u2248','thksim':'\\u223C','thorn':'\\xFE','THORN':'\\xDE','tilde':'\\u02DC','Tilde':'\\u223C','TildeEqual':'\\u2243','TildeFullEqual':'\\u2245','TildeTilde':'\\u2248','times':'\\xD7','timesb':'\\u22A0','timesbar':'\\u2A31','timesd':'\\u2A30','tint':'\\u222D','toea':'\\u2928','top':'\\u22A4','topbot':'\\u2336','topcir':'\\u2AF1','topf':'\\uD835\\uDD65','Topf':'\\uD835\\uDD4B','topfork':'\\u2ADA','tosa':'\\u2929','tprime':'\\u2034','trade':'\\u2122','TRADE':'\\u2122','triangle':'\\u25B5','triangledown':'\\u25BF','triangleleft':'\\u25C3','trianglelefteq':'\\u22B4','triangleq':'\\u225C','triangleright':'\\u25B9','trianglerighteq':'\\u22B5','tridot':'\\u25EC','trie':'\\u225C','triminus':'\\u2A3A','TripleDot':'\\u20DB','triplus':'\\u2A39','trisb':'\\u29CD','tritime':'\\u2A3B','trpezium':'\\u23E2','tscr':'\\uD835\\uDCC9','Tscr':'\\uD835\\uDCAF','tscy':'\\u0446','TScy':'\\u0426','tshcy':'\\u045B','TSHcy':'\\u040B','tstrok':'\\u0167','Tstrok':'\\u0166','twixt':'\\u226C','twoheadleftarrow':'\\u219E','twoheadrightarrow':'\\u21A0','uacute':'\\xFA','Uacute':'\\xDA','uarr':'\\u2191','uArr':'\\u21D1','Uarr':'\\u219F','Uarrocir':'\\u2949','ubrcy':'\\u045E','Ubrcy':'\\u040E','ubreve':'\\u016D','Ubreve':'\\u016C','ucirc':'\\xFB','Ucirc':'\\xDB','ucy':'\\u0443','Ucy':'\\u0423','udarr':'\\u21C5','udblac':'\\u0171','Udblac':'\\u0170','udhar':'\\u296E','ufisht':'\\u297E','ufr':'\\uD835\\uDD32','Ufr':'\\uD835\\uDD18','ugrave':'\\xF9','Ugrave':'\\xD9','uHar':'\\u2963','uharl':'\\u21BF','uharr':'\\u21BE','uhblk':'\\u2580','ulcorn':'\\u231C','ulcorner':'\\u231C','ulcrop':'\\u230F','ultri':'\\u25F8','umacr':'\\u016B','Umacr':'\\u016A','uml':'\\xA8','UnderBar':'_','UnderBrace':'\\u23DF','UnderBracket':'\\u23B5','UnderParenthesis':'\\u23DD','Union':'\\u22C3','UnionPlus':'\\u228E','uogon':'\\u0173','Uogon':'\\u0172','uopf':'\\uD835\\uDD66','Uopf':'\\uD835\\uDD4C','uparrow':'\\u2191','Uparrow':'\\u21D1','UpArrow':'\\u2191','UpArrowBar':'\\u2912','UpArrowDownArrow':'\\u21C5','updownarrow':'\\u2195','Updownarrow':'\\u21D5','UpDownArrow':'\\u2195','UpEquilibrium':'\\u296E','upharpoonleft':'\\u21BF','upharpoonright':'\\u21BE','uplus':'\\u228E','UpperLeftArrow':'\\u2196','UpperRightArrow':'\\u2197','upsi':'\\u03C5','Upsi':'\\u03D2','upsih':'\\u03D2','upsilon':'\\u03C5','Upsilon':'\\u03A5','UpTee':'\\u22A5','UpTeeArrow':'\\u21A5','upuparrows':'\\u21C8','urcorn':'\\u231D','urcorner':'\\u231D','urcrop':'\\u230E','uring':'\\u016F','Uring':'\\u016E','urtri':'\\u25F9','uscr':'\\uD835\\uDCCA','Uscr':'\\uD835\\uDCB0','utdot':'\\u22F0','utilde':'\\u0169','Utilde':'\\u0168','utri':'\\u25B5','utrif':'\\u25B4','uuarr':'\\u21C8','uuml':'\\xFC','Uuml':'\\xDC','uwangle':'\\u29A7','vangrt':'\\u299C','varepsilon':'\\u03F5','varkappa':'\\u03F0','varnothing':'\\u2205','varphi':'\\u03D5','varpi':'\\u03D6','varpropto':'\\u221D','varr':'\\u2195','vArr':'\\u21D5','varrho':'\\u03F1','varsigma':'\\u03C2','varsubsetneq':'\\u228A\\uFE00','varsubsetneqq':'\\u2ACB\\uFE00','varsupsetneq':'\\u228B\\uFE00','varsupsetneqq':'\\u2ACC\\uFE00','vartheta':'\\u03D1','vartriangleleft':'\\u22B2','vartriangleright':'\\u22B3','vBar':'\\u2AE8','Vbar':'\\u2AEB','vBarv':'\\u2AE9','vcy':'\\u0432','Vcy':'\\u0412','vdash':'\\u22A2','vDash':'\\u22A8','Vdash':'\\u22A9','VDash':'\\u22AB','Vdashl':'\\u2AE6','vee':'\\u2228','Vee':'\\u22C1','veebar':'\\u22BB','veeeq':'\\u225A','vellip':'\\u22EE','verbar':'|','Verbar':'\\u2016','vert':'|','Vert':'\\u2016','VerticalBar':'\\u2223','VerticalLine':'|','VerticalSeparator':'\\u2758','VerticalTilde':'\\u2240','VeryThinSpace':'\\u200A','vfr':'\\uD835\\uDD33','Vfr':'\\uD835\\uDD19','vltri':'\\u22B2','vnsub':'\\u2282\\u20D2','vnsup':'\\u2283\\u20D2','vopf':'\\uD835\\uDD67','Vopf':'\\uD835\\uDD4D','vprop':'\\u221D','vrtri':'\\u22B3','vscr':'\\uD835\\uDCCB','Vscr':'\\uD835\\uDCB1','vsubne':'\\u228A\\uFE00','vsubnE':'\\u2ACB\\uFE00','vsupne':'\\u228B\\uFE00','vsupnE':'\\u2ACC\\uFE00','Vvdash':'\\u22AA','vzigzag':'\\u299A','wcirc':'\\u0175','Wcirc':'\\u0174','wedbar':'\\u2A5F','wedge':'\\u2227','Wedge':'\\u22C0','wedgeq':'\\u2259','weierp':'\\u2118','wfr':'\\uD835\\uDD34','Wfr':'\\uD835\\uDD1A','wopf':'\\uD835\\uDD68','Wopf':'\\uD835\\uDD4E','wp':'\\u2118','wr':'\\u2240','wreath':'\\u2240','wscr':'\\uD835\\uDCCC','Wscr':'\\uD835\\uDCB2','xcap':'\\u22C2','xcirc':'\\u25EF','xcup':'\\u22C3','xdtri':'\\u25BD','xfr':'\\uD835\\uDD35','Xfr':'\\uD835\\uDD1B','xharr':'\\u27F7','xhArr':'\\u27FA','xi':'\\u03BE','Xi':'\\u039E','xlarr':'\\u27F5','xlArr':'\\u27F8','xmap':'\\u27FC','xnis':'\\u22FB','xodot':'\\u2A00','xopf':'\\uD835\\uDD69','Xopf':'\\uD835\\uDD4F','xoplus':'\\u2A01','xotime':'\\u2A02','xrarr':'\\u27F6','xrArr':'\\u27F9','xscr':'\\uD835\\uDCCD','Xscr':'\\uD835\\uDCB3','xsqcup':'\\u2A06','xuplus':'\\u2A04','xutri':'\\u25B3','xvee':'\\u22C1','xwedge':'\\u22C0','yacute':'\\xFD','Yacute':'\\xDD','yacy':'\\u044F','YAcy':'\\u042F','ycirc':'\\u0177','Ycirc':'\\u0176','ycy':'\\u044B','Ycy':'\\u042B','yen':'\\xA5','yfr':'\\uD835\\uDD36','Yfr':'\\uD835\\uDD1C','yicy':'\\u0457','YIcy':'\\u0407','yopf':'\\uD835\\uDD6A','Yopf':'\\uD835\\uDD50','yscr':'\\uD835\\uDCCE','Yscr':'\\uD835\\uDCB4','yucy':'\\u044E','YUcy':'\\u042E','yuml':'\\xFF','Yuml':'\\u0178','zacute':'\\u017A','Zacute':'\\u0179','zcaron':'\\u017E','Zcaron':'\\u017D','zcy':'\\u0437','Zcy':'\\u0417','zdot':'\\u017C','Zdot':'\\u017B','zeetrf':'\\u2128','ZeroWidthSpace':'\\u200B','zeta':'\\u03B6','Zeta':'\\u0396','zfr':'\\uD835\\uDD37','Zfr':'\\u2128','zhcy':'\\u0436','ZHcy':'\\u0416','zigrarr':'\\u21DD','zopf':'\\uD835\\uDD6B','Zopf':'\\u2124','zscr':'\\uD835\\uDCCF','Zscr':'\\uD835\\uDCB5','zwj':'\\u200D','zwnj':'\\u200C'};\n\tvar decodeMapLegacy = {'aacute':'\\xE1','Aacute':'\\xC1','acirc':'\\xE2','Acirc':'\\xC2','acute':'\\xB4','aelig':'\\xE6','AElig':'\\xC6','agrave':'\\xE0','Agrave':'\\xC0','amp':'&','AMP':'&','aring':'\\xE5','Aring':'\\xC5','atilde':'\\xE3','Atilde':'\\xC3','auml':'\\xE4','Auml':'\\xC4','brvbar':'\\xA6','ccedil':'\\xE7','Ccedil':'\\xC7','cedil':'\\xB8','cent':'\\xA2','copy':'\\xA9','COPY':'\\xA9','curren':'\\xA4','deg':'\\xB0','divide':'\\xF7','eacute':'\\xE9','Eacute':'\\xC9','ecirc':'\\xEA','Ecirc':'\\xCA','egrave':'\\xE8','Egrave':'\\xC8','eth':'\\xF0','ETH':'\\xD0','euml':'\\xEB','Euml':'\\xCB','frac12':'\\xBD','frac14':'\\xBC','frac34':'\\xBE','gt':'>','GT':'>','iacute':'\\xED','Iacute':'\\xCD','icirc':'\\xEE','Icirc':'\\xCE','iexcl':'\\xA1','igrave':'\\xEC','Igrave':'\\xCC','iquest':'\\xBF','iuml':'\\xEF','Iuml':'\\xCF','laquo':'\\xAB','lt':'<','LT':'<','macr':'\\xAF','micro':'\\xB5','middot':'\\xB7','nbsp':'\\xA0','not':'\\xAC','ntilde':'\\xF1','Ntilde':'\\xD1','oacute':'\\xF3','Oacute':'\\xD3','ocirc':'\\xF4','Ocirc':'\\xD4','ograve':'\\xF2','Ograve':'\\xD2','ordf':'\\xAA','ordm':'\\xBA','oslash':'\\xF8','Oslash':'\\xD8','otilde':'\\xF5','Otilde':'\\xD5','ouml':'\\xF6','Ouml':'\\xD6','para':'\\xB6','plusmn':'\\xB1','pound':'\\xA3','quot':'\"','QUOT':'\"','raquo':'\\xBB','reg':'\\xAE','REG':'\\xAE','sect':'\\xA7','shy':'\\xAD','sup1':'\\xB9','sup2':'\\xB2','sup3':'\\xB3','szlig':'\\xDF','thorn':'\\xFE','THORN':'\\xDE','times':'\\xD7','uacute':'\\xFA','Uacute':'\\xDA','ucirc':'\\xFB','Ucirc':'\\xDB','ugrave':'\\xF9','Ugrave':'\\xD9','uml':'\\xA8','uuml':'\\xFC','Uuml':'\\xDC','yacute':'\\xFD','Yacute':'\\xDD','yen':'\\xA5','yuml':'\\xFF'};\n\tvar decodeMapNumeric = {'0':'\\uFFFD','128':'\\u20AC','130':'\\u201A','131':'\\u0192','132':'\\u201E','133':'\\u2026','134':'\\u2020','135':'\\u2021','136':'\\u02C6','137':'\\u2030','138':'\\u0160','139':'\\u2039','140':'\\u0152','142':'\\u017D','145':'\\u2018','146':'\\u2019','147':'\\u201C','148':'\\u201D','149':'\\u2022','150':'\\u2013','151':'\\u2014','152':'\\u02DC','153':'\\u2122','154':'\\u0161','155':'\\u203A','156':'\\u0153','158':'\\u017E','159':'\\u0178'};\n\tvar invalidReferenceCodePoints = [1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65000,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111];\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\tvar object = {};\n\tvar hasOwnProperty = object.hasOwnProperty;\n\tvar has = function(object, propertyName) {\n\t\treturn hasOwnProperty.call(object, propertyName);\n\t};\n\n\tvar contains = function(array, value) {\n\t\tvar index = -1;\n\t\tvar length = array.length;\n\t\twhile (++index < length) {\n\t\t\tif (array[index] == value) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\tvar merge = function(options, defaults) {\n\t\tif (!options) {\n\t\t\treturn defaults;\n\t\t}\n\t\tvar result = {};\n\t\tvar key;\n\t\tfor (key in defaults) {\n\t\t\t// A `hasOwnProperty` check is not needed here, since only recognized\n\t\t\t// option names are used anyway. Any others are ignored.\n\t\t\tresult[key] = has(options, key) ? options[key] : defaults[key];\n\t\t}\n\t\treturn result;\n\t};\n\n\t// Modified version of `ucs2encode`; see https://mths.be/punycode.\n\tvar codePointToSymbol = function(codePoint, strict) {\n\t\tvar output = '';\n\t\tif ((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF) {\n\t\t\t// See issue #4:\n\t\t\t// “Otherwise, if the number is in the range 0xD800 to 0xDFFF or is\n\t\t\t// greater than 0x10FFFF, then this is a parse error. Return a U+FFFD\n\t\t\t// REPLACEMENT CHARACTER.”\n\t\t\tif (strict) {\n\t\t\t\tparseError('character reference outside the permissible Unicode range');\n\t\t\t}\n\t\t\treturn '\\uFFFD';\n\t\t}\n\t\tif (has(decodeMapNumeric, codePoint)) {\n\t\t\tif (strict) {\n\t\t\t\tparseError('disallowed character reference');\n\t\t\t}\n\t\t\treturn decodeMapNumeric[codePoint];\n\t\t}\n\t\tif (strict && contains(invalidReferenceCodePoints, codePoint)) {\n\t\t\tparseError('disallowed character reference');\n\t\t}\n\t\tif (codePoint > 0xFFFF) {\n\t\t\tcodePoint -= 0x10000;\n\t\t\toutput += stringFromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);\n\t\t\tcodePoint = 0xDC00 | codePoint & 0x3FF;\n\t\t}\n\t\toutput += stringFromCharCode(codePoint);\n\t\treturn output;\n\t};\n\n\tvar hexEscape = function(codePoint) {\n\t\treturn '&#x' + codePoint.toString(16).toUpperCase() + ';';\n\t};\n\n\tvar decEscape = function(codePoint) {\n\t\treturn '&#' + codePoint + ';';\n\t};\n\n\tvar parseError = function(message) {\n\t\tthrow Error('Parse error: ' + message);\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar encode = function(string, options) {\n\t\toptions = merge(options, encode.options);\n\t\tvar strict = options.strict;\n\t\tif (strict && regexInvalidRawCodePoint.test(string)) {\n\t\t\tparseError('forbidden code point');\n\t\t}\n\t\tvar encodeEverything = options.encodeEverything;\n\t\tvar useNamedReferences = options.useNamedReferences;\n\t\tvar allowUnsafeSymbols = options.allowUnsafeSymbols;\n\t\tvar escapeCodePoint = options.decimal ? decEscape : hexEscape;\n\n\t\tvar escapeBmpSymbol = function(symbol) {\n\t\t\treturn escapeCodePoint(symbol.charCodeAt(0));\n\t\t};\n\n\t\tif (encodeEverything) {\n\t\t\t// Encode ASCII symbols.\n\t\t\tstring = string.replace(regexAsciiWhitelist, function(symbol) {\n\t\t\t\t// Use named references if requested & possible.\n\t\t\t\tif (useNamedReferences && has(encodeMap, symbol)) {\n\t\t\t\t\treturn '&' + encodeMap[symbol] + ';';\n\t\t\t\t}\n\t\t\t\treturn escapeBmpSymbol(symbol);\n\t\t\t});\n\t\t\t// Shorten a few escapes that represent two symbols, of which at least one\n\t\t\t// is within the ASCII range.\n\t\t\tif (useNamedReferences) {\n\t\t\t\tstring = string\n\t\t\t\t\t.replace(/&gt;\\u20D2/g, '&nvgt;')\n\t\t\t\t\t.replace(/&lt;\\u20D2/g, '&nvlt;')\n\t\t\t\t\t.replace(/&#x66;&#x6A;/g, '&fjlig;');\n\t\t\t}\n\t\t\t// Encode non-ASCII symbols.\n\t\t\tif (useNamedReferences) {\n\t\t\t\t// Encode non-ASCII symbols that can be replaced with a named reference.\n\t\t\t\tstring = string.replace(regexEncodeNonAscii, function(string) {\n\t\t\t\t\t// Note: there is no need to check `has(encodeMap, string)` here.\n\t\t\t\t\treturn '&' + encodeMap[string] + ';';\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Note: any remaining non-ASCII symbols are handled outside of the `if`.\n\t\t} else if (useNamedReferences) {\n\t\t\t// Apply named character references.\n\t\t\t// Encode `<>\"'&` using named character references.\n\t\t\tif (!allowUnsafeSymbols) {\n\t\t\t\tstring = string.replace(regexEscape, function(string) {\n\t\t\t\t\treturn '&' + encodeMap[string] + ';'; // no need to check `has()` here\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Shorten escapes that represent two symbols, of which at least one is\n\t\t\t// `<>\"'&`.\n\t\t\tstring = string\n\t\t\t\t.replace(/&gt;\\u20D2/g, '&nvgt;')\n\t\t\t\t.replace(/&lt;\\u20D2/g, '&nvlt;');\n\t\t\t// Encode non-ASCII symbols that can be replaced with a named reference.\n\t\t\tstring = string.replace(regexEncodeNonAscii, function(string) {\n\t\t\t\t// Note: there is no need to check `has(encodeMap, string)` here.\n\t\t\t\treturn '&' + encodeMap[string] + ';';\n\t\t\t});\n\t\t} else if (!allowUnsafeSymbols) {\n\t\t\t// Encode `<>\"'&` using hexadecimal escapes, now that they’re not handled\n\t\t\t// using named character references.\n\t\t\tstring = string.replace(regexEscape, escapeBmpSymbol);\n\t\t}\n\t\treturn string\n\t\t\t// Encode astral symbols.\n\t\t\t.replace(regexAstralSymbols, function($0) {\n\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\tvar high = $0.charCodeAt(0);\n\t\t\t\tvar low = $0.charCodeAt(1);\n\t\t\t\tvar codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;\n\t\t\t\treturn escapeCodePoint(codePoint);\n\t\t\t})\n\t\t\t// Encode any remaining BMP symbols that are not printable ASCII symbols\n\t\t\t// using a hexadecimal escape.\n\t\t\t.replace(regexBmpWhitelist, escapeBmpSymbol);\n\t};\n\t// Expose default options (so they can be overridden globally).\n\tencode.options = {\n\t\t'allowUnsafeSymbols': false,\n\t\t'encodeEverything': false,\n\t\t'strict': false,\n\t\t'useNamedReferences': false,\n\t\t'decimal' : false\n\t};\n\n\tvar decode = function(html, options) {\n\t\toptions = merge(options, decode.options);\n\t\tvar strict = options.strict;\n\t\tif (strict && regexInvalidEntity.test(html)) {\n\t\t\tparseError('malformed character reference');\n\t\t}\n\t\treturn html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {\n\t\t\tvar codePoint;\n\t\t\tvar semicolon;\n\t\t\tvar decDigits;\n\t\t\tvar hexDigits;\n\t\t\tvar reference;\n\t\t\tvar next;\n\n\t\t\tif ($1) {\n\t\t\t\treference = $1;\n\t\t\t\t// Note: there is no need to check `has(decodeMap, reference)`.\n\t\t\t\treturn decodeMap[reference];\n\t\t\t}\n\n\t\t\tif ($2) {\n\t\t\t\t// Decode named character references without trailing `;`, e.g. `&amp`.\n\t\t\t\t// This is only a parse error if it gets converted to `&`, or if it is\n\t\t\t\t// followed by `=` in an attribute context.\n\t\t\t\treference = $2;\n\t\t\t\tnext = $3;\n\t\t\t\tif (next && options.isAttributeValue) {\n\t\t\t\t\tif (strict && next == '=') {\n\t\t\t\t\t\tparseError('`&` did not start a character reference');\n\t\t\t\t\t}\n\t\t\t\t\treturn $0;\n\t\t\t\t} else {\n\t\t\t\t\tif (strict) {\n\t\t\t\t\t\tparseError(\n\t\t\t\t\t\t\t'named character reference was not terminated by a semicolon'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// Note: there is no need to check `has(decodeMapLegacy, reference)`.\n\t\t\t\t\treturn decodeMapLegacy[reference] + (next || '');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($4) {\n\t\t\t\t// Decode decimal escapes, e.g. `&#119558;`.\n\t\t\t\tdecDigits = $4;\n\t\t\t\tsemicolon = $5;\n\t\t\t\tif (strict && !semicolon) {\n\t\t\t\t\tparseError('character reference was not terminated by a semicolon');\n\t\t\t\t}\n\t\t\t\tcodePoint = parseInt(decDigits, 10);\n\t\t\t\treturn codePointToSymbol(codePoint, strict);\n\t\t\t}\n\n\t\t\tif ($6) {\n\t\t\t\t// Decode hexadecimal escapes, e.g. `&#x1D306;`.\n\t\t\t\thexDigits = $6;\n\t\t\t\tsemicolon = $7;\n\t\t\t\tif (strict && !semicolon) {\n\t\t\t\t\tparseError('character reference was not terminated by a semicolon');\n\t\t\t\t}\n\t\t\t\tcodePoint = parseInt(hexDigits, 16);\n\t\t\t\treturn codePointToSymbol(codePoint, strict);\n\t\t\t}\n\n\t\t\t// If we’re still here, `if ($7)` is implied; it’s an ambiguous\n\t\t\t// ampersand for sure. https://mths.be/notes/ambiguous-ampersands\n\t\t\tif (strict) {\n\t\t\t\tparseError(\n\t\t\t\t\t'named character reference was not terminated by a semicolon'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn $0;\n\t\t});\n\t};\n\t// Expose default options (so they can be overridden globally).\n\tdecode.options = {\n\t\t'isAttributeValue': false,\n\t\t'strict': false\n\t};\n\n\tvar escape = function(string) {\n\t\treturn string.replace(regexEscape, function($0) {\n\t\t\t// Note: there is no need to check `has(escapeMap, $0)` here.\n\t\t\treturn escapeMap[$0];\n\t\t});\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar he = {\n\t\t'version': '1.2.0',\n\t\t'encode': encode,\n\t\t'decode': decode,\n\t\t'escape': escape,\n\t\t'unescape': decode\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\tfalse\n\t) {\n\t\tdefine(function() {\n\t\t\treturn he;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = he;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (var key in he) {\n\t\t\t\thas(he, key) && (freeExports[key] = he[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.he = he;\n\t}\n\n}(this));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],55:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],56:[function(require,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],57:[function(require,module,exports){\n/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n\n},{}],58:[function(require,module,exports){\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n},{}],59:[function(require,module,exports){\n(function (process){\nvar path = require('path');\nvar fs = require('fs');\nvar _0777 = parseInt('0777', 8);\n\nmodule.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;\n\nfunction mkdirP (p, opts, f, made) {\n    if (typeof opts === 'function') {\n        f = opts;\n        opts = {};\n    }\n    else if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n    \n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    \n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n    \n    var cb = f || function () {};\n    p = path.resolve(p);\n    \n    xfs.mkdir(p, mode, function (er) {\n        if (!er) {\n            made = made || p;\n            return cb(null, made);\n        }\n        switch (er.code) {\n            case 'ENOENT':\n                mkdirP(path.dirname(p), opts, function (er, made) {\n                    if (er) cb(er, made);\n                    else mkdirP(p, opts, cb, made);\n                });\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                xfs.stat(p, function (er2, stat) {\n                    // if the stat fails, then that's super weird.\n                    // let the original error be the failure reason.\n                    if (er2 || !stat.isDirectory()) cb(er, made)\n                    else cb(null, made);\n                });\n                break;\n        }\n    });\n}\n\nmkdirP.sync = function sync (p, opts, made) {\n    if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n    \n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    \n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    p = path.resolve(p);\n\n    try {\n        xfs.mkdirSync(p, mode);\n        made = made || p;\n    }\n    catch (err0) {\n        switch (err0.code) {\n            case 'ENOENT' :\n                made = sync(path.dirname(p), opts, made);\n                sync(p, opts, made);\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                var stat;\n                try {\n                    stat = xfs.statSync(p);\n                }\n                catch (err1) {\n                    throw err0;\n                }\n                if (!stat.isDirectory()) throw err0;\n                break;\n        }\n    }\n\n    return made;\n};\n\n}).call(this,require('_process'))\n},{\"_process\":69,\"fs\":42,\"path\":42}],60:[function(require,module,exports){\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\-?\\d?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n},{}],61:[function(require,module,exports){\n'use strict';\n\nvar keysShim;\nif (!Object.keys) {\n\t// modified from https://github.com/es-shims/es5-shim\n\tvar has = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\tvar isArgs = require('./isArguments'); // eslint-disable-line global-require\n\tvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\tvar hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');\n\tvar hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');\n\tvar dontEnums = [\n\t\t'toString',\n\t\t'toLocaleString',\n\t\t'valueOf',\n\t\t'hasOwnProperty',\n\t\t'isPrototypeOf',\n\t\t'propertyIsEnumerable',\n\t\t'constructor'\n\t];\n\tvar equalsConstructorPrototype = function (o) {\n\t\tvar ctor = o.constructor;\n\t\treturn ctor && ctor.prototype === o;\n\t};\n\tvar excludedKeys = {\n\t\t$applicationCache: true,\n\t\t$console: true,\n\t\t$external: true,\n\t\t$frame: true,\n\t\t$frameElement: true,\n\t\t$frames: true,\n\t\t$innerHeight: true,\n\t\t$innerWidth: true,\n\t\t$outerHeight: true,\n\t\t$outerWidth: true,\n\t\t$pageXOffset: true,\n\t\t$pageYOffset: true,\n\t\t$parent: true,\n\t\t$scrollLeft: true,\n\t\t$scrollTop: true,\n\t\t$scrollX: true,\n\t\t$scrollY: true,\n\t\t$self: true,\n\t\t$webkitIndexedDB: true,\n\t\t$webkitStorageInfo: true,\n\t\t$window: true\n\t};\n\tvar hasAutomationEqualityBug = (function () {\n\t\t/* global window */\n\t\tif (typeof window === 'undefined') { return false; }\n\t\tfor (var k in window) {\n\t\t\ttry {\n\t\t\t\tif (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tequalsConstructorPrototype(window[k]);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}());\n\tvar equalsConstructorPrototypeIfNotBuggy = function (o) {\n\t\t/* global window */\n\t\tif (typeof window === 'undefined' || !hasAutomationEqualityBug) {\n\t\t\treturn equalsConstructorPrototype(o);\n\t\t}\n\t\ttry {\n\t\t\treturn equalsConstructorPrototype(o);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tkeysShim = function keys(object) {\n\t\tvar isObject = object !== null && typeof object === 'object';\n\t\tvar isFunction = toStr.call(object) === '[object Function]';\n\t\tvar isArguments = isArgs(object);\n\t\tvar isString = isObject && toStr.call(object) === '[object String]';\n\t\tvar theKeys = [];\n\n\t\tif (!isObject && !isFunction && !isArguments) {\n\t\t\tthrow new TypeError('Object.keys called on a non-object');\n\t\t}\n\n\t\tvar skipProto = hasProtoEnumBug && isFunction;\n\t\tif (isString && object.length > 0 && !has.call(object, 0)) {\n\t\t\tfor (var i = 0; i < object.length; ++i) {\n\t\t\t\ttheKeys.push(String(i));\n\t\t\t}\n\t\t}\n\n\t\tif (isArguments && object.length > 0) {\n\t\t\tfor (var j = 0; j < object.length; ++j) {\n\t\t\t\ttheKeys.push(String(j));\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var name in object) {\n\t\t\t\tif (!(skipProto && name === 'prototype') && has.call(object, name)) {\n\t\t\t\t\ttheKeys.push(String(name));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (hasDontEnumBug) {\n\t\t\tvar skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);\n\n\t\t\tfor (var k = 0; k < dontEnums.length; ++k) {\n\t\t\t\tif (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {\n\t\t\t\t\ttheKeys.push(dontEnums[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn theKeys;\n\t};\n}\nmodule.exports = keysShim;\n\n},{\"./isArguments\":63}],62:[function(require,module,exports){\n'use strict';\n\nvar slice = Array.prototype.slice;\nvar isArgs = require('./isArguments');\n\nvar origKeys = Object.keys;\nvar keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');\n\nvar originalKeys = Object.keys;\n\nkeysShim.shim = function shimObjectKeys() {\n\tif (Object.keys) {\n\t\tvar keysWorksWithArguments = (function () {\n\t\t\t// Safari 5.0 bug\n\t\t\tvar args = Object.keys(arguments);\n\t\t\treturn args && args.length === arguments.length;\n\t\t}(1, 2));\n\t\tif (!keysWorksWithArguments) {\n\t\t\tObject.keys = function keys(object) { // eslint-disable-line func-name-matching\n\t\t\t\tif (isArgs(object)) {\n\t\t\t\t\treturn originalKeys(slice.call(object));\n\t\t\t\t}\n\t\t\t\treturn originalKeys(object);\n\t\t\t};\n\t\t}\n\t} else {\n\t\tObject.keys = keysShim;\n\t}\n\treturn Object.keys || keysShim;\n};\n\nmodule.exports = keysShim;\n\n},{\"./implementation\":61,\"./isArguments\":63}],63:[function(require,module,exports){\n'use strict';\n\nvar toStr = Object.prototype.toString;\n\nmodule.exports = function isArguments(value) {\n\tvar str = toStr.call(value);\n\tvar isArgs = str === '[object Arguments]';\n\tif (!isArgs) {\n\t\tisArgs = str !== '[object Array]' &&\n\t\t\tvalue !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\ttypeof value.length === 'number' &&\n\t\t\tvalue.length >= 0 &&\n\t\t\ttoStr.call(value.callee) === '[object Function]';\n\t}\n\treturn isArgs;\n};\n\n},{}],64:[function(require,module,exports){\n'use strict';\n\n// modified from https://github.com/es-shims/es6-shim\nvar keys = require('object-keys');\nvar bind = require('function-bind');\nvar canBeObject = function (obj) {\n\treturn typeof obj !== 'undefined' && obj !== null;\n};\nvar hasSymbols = require('has-symbols/shams')();\nvar toObject = Object;\nvar push = bind.call(Function.call, Array.prototype.push);\nvar propIsEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);\nvar originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;\n\nmodule.exports = function assign(target, source1) {\n\tif (!canBeObject(target)) { throw new TypeError('target must be an object'); }\n\tvar objTarget = toObject(target);\n\tvar s, source, i, props, syms, value, key;\n\tfor (s = 1; s < arguments.length; ++s) {\n\t\tsource = toObject(arguments[s]);\n\t\tprops = keys(source);\n\t\tvar getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);\n\t\tif (getSymbols) {\n\t\t\tsyms = getSymbols(source);\n\t\t\tfor (i = 0; i < syms.length; ++i) {\n\t\t\t\tkey = syms[i];\n\t\t\t\tif (propIsEnumerable(source, key)) {\n\t\t\t\t\tpush(props, key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < props.length; ++i) {\n\t\t\tkey = props[i];\n\t\t\tvalue = source[key];\n\t\t\tif (propIsEnumerable(source, key)) {\n\t\t\t\tobjTarget[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn objTarget;\n};\n\n},{\"function-bind\":52,\"has-symbols/shams\":53,\"object-keys\":62}],65:[function(require,module,exports){\n'use strict';\n\nvar defineProperties = require('define-properties');\n\nvar implementation = require('./implementation');\nvar getPolyfill = require('./polyfill');\nvar shim = require('./shim');\n\nvar polyfill = getPolyfill();\n\ndefineProperties(polyfill, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = polyfill;\n\n},{\"./implementation\":64,\"./polyfill\":66,\"./shim\":67,\"define-properties\":47}],66:[function(require,module,exports){\n'use strict';\n\nvar implementation = require('./implementation');\n\nvar lacksProperEnumerationOrder = function () {\n\tif (!Object.assign) {\n\t\treturn false;\n\t}\n\t// v8, specifically in node 4.x, has a bug with incorrect property enumeration order\n\t// note: this does not detect the bug unless there's 20 characters\n\tvar str = 'abcdefghijklmnopqrst';\n\tvar letters = str.split('');\n\tvar map = {};\n\tfor (var i = 0; i < letters.length; ++i) {\n\t\tmap[letters[i]] = letters[i];\n\t}\n\tvar obj = Object.assign({}, map);\n\tvar actual = '';\n\tfor (var k in obj) {\n\t\tactual += k;\n\t}\n\treturn str !== actual;\n};\n\nvar assignHasPendingExceptions = function () {\n\tif (!Object.assign || !Object.preventExtensions) {\n\t\treturn false;\n\t}\n\t// Firefox 37 still has \"pending exception\" logic in its Object.assign implementation,\n\t// which is 72% slower than our shim, and Firefox 40's native implementation.\n\tvar thrower = Object.preventExtensions({ 1: 2 });\n\ttry {\n\t\tObject.assign(thrower, 'xy');\n\t} catch (e) {\n\t\treturn thrower[1] === 'y';\n\t}\n\treturn false;\n};\n\nmodule.exports = function getPolyfill() {\n\tif (!Object.assign) {\n\t\treturn implementation;\n\t}\n\tif (lacksProperEnumerationOrder()) {\n\t\treturn implementation;\n\t}\n\tif (assignHasPendingExceptions()) {\n\t\treturn implementation;\n\t}\n\treturn Object.assign;\n};\n\n},{\"./implementation\":64}],67:[function(require,module,exports){\n'use strict';\n\nvar define = require('define-properties');\nvar getPolyfill = require('./polyfill');\n\nmodule.exports = function shimAssign() {\n\tvar polyfill = getPolyfill();\n\tdefine(\n\t\tObject,\n\t\t{ assign: polyfill },\n\t\t{ assign: function () { return Object.assign !== polyfill; } }\n\t);\n\treturn polyfill;\n};\n\n},{\"./polyfill\":66,\"define-properties\":47}],68:[function(require,module,exports){\n(function (process){\n'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n\n}).call(this,require('_process'))\n},{\"_process\":69}],69:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],70:[function(require,module,exports){\nmodule.exports = require('./lib/_stream_duplex.js');\n\n},{\"./lib/_stream_duplex.js\":71}],71:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};\n},{\"./_stream_readable\":73,\"./_stream_writable\":75,\"core-util-is\":44,\"inherits\":56,\"process-nextick-args\":68}],72:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n},{\"./_stream_transform\":74,\"core-util-is\":44,\"inherits\":56}],73:[function(require,module,exports){\n(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./_stream_duplex\":71,\"./internal/streams/BufferList\":76,\"./internal/streams/destroy\":77,\"./internal/streams/stream\":78,\"_process\":69,\"core-util-is\":44,\"events\":50,\"inherits\":56,\"isarray\":58,\"process-nextick-args\":68,\"safe-buffer\":83,\"string_decoder/\":85,\"util\":40}],74:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n},{\"./_stream_duplex\":71,\"core-util-is\":44,\"inherits\":56}],75:[function(require,module,exports){\n(function (process,global,setImmediate){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"timers\").setImmediate)\n},{\"./_stream_duplex\":71,\"./internal/streams/destroy\":77,\"./internal/streams/stream\":78,\"_process\":69,\"core-util-is\":44,\"inherits\":56,\"process-nextick-args\":68,\"safe-buffer\":83,\"timers\":86,\"util-deprecate\":87}],76:[function(require,module,exports){\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require('safe-buffer').Buffer;\nvar util = require('util');\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}\n},{\"safe-buffer\":83,\"util\":40}],77:[function(require,module,exports){\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};\n},{\"process-nextick-args\":68}],78:[function(require,module,exports){\nmodule.exports = require('events').EventEmitter;\n\n},{\"events\":50}],79:[function(require,module,exports){\nmodule.exports = require('./readable').PassThrough\n\n},{\"./readable\":80}],80:[function(require,module,exports){\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\n},{\"./lib/_stream_duplex.js\":71,\"./lib/_stream_passthrough.js\":72,\"./lib/_stream_readable.js\":73,\"./lib/_stream_transform.js\":74,\"./lib/_stream_writable.js\":75}],81:[function(require,module,exports){\nmodule.exports = require('./readable').Transform\n\n},{\"./readable\":80}],82:[function(require,module,exports){\nmodule.exports = require('./lib/_stream_writable.js');\n\n},{\"./lib/_stream_writable.js\":75}],83:[function(require,module,exports){\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n},{\"buffer\":43}],84:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n},{\"events\":50,\"inherits\":56,\"readable-stream/duplex.js\":70,\"readable-stream/passthrough.js\":79,\"readable-stream/readable.js\":80,\"readable-stream/transform.js\":81,\"readable-stream/writable.js\":82}],85:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n},{\"safe-buffer\":83}],86:[function(require,module,exports){\n(function (setImmediate,clearImmediate){\nvar nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n}).call(this,require(\"timers\").setImmediate,require(\"timers\").clearImmediate)\n},{\"process/browser.js\":69,\"timers\":86}],87:[function(require,module,exports){\n(function (global){\n\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],88:[function(require,module,exports){\nmodule.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n},{}],89:[function(require,module,exports){\n(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./support/isBuffer\":88,\"_process\":69,\"inherits\":56}],90:[function(require,module,exports){\nmodule.exports={\n  \"name\": \"mocha\",\n  \"version\": \"6.1.4\",\n  \"homepage\": \"https://mochajs.org/\",\n  \"notifyLogo\": \"https://ibin.co/4QuRuGjXvl36.png\"\n}\n},{}]},{},[1]);\n"

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname, global) {

var path = __webpack_require__(13);
var dir = path.join(__dirname, '..', 'contrib', 'test-suites', 'sandboxr');

global.expect = __webpack_require__(15).expect;

describe('Sandboxr Tests', function () {

	var fs = __webpack_require__(55);
	var files;
	if (fs.readdirSync) files = fs.readdirSync(dir);else files = __webpack_require__(56);

	for (var i = 0; i < files.length; ++i) {
		var file = files[i];
		//if ( !/assignment|binary|logical|function|sequence|update-|unary-/.test(file) ) continue;
		if (/api|async|ast|import|test-runner|with-/.test(file)) continue;
		if (!/js$/.test(file)) continue;
		(function (file) {
			describe(file, function () {
				__webpack_require__(57)("./" + file.replace(/\.js$/, '') + ".js");
			});
		})(files[i]);
	}
});
/* WEBPACK VAR INJECTION */}.call(this, "/", __webpack_require__(12)))

/***/ }),
/* 12 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(14)))

/***/ }),
/* 14 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(16);


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var used = []
  , exports = module.exports = {};

/*!
 * Chai version
 */

exports.version = '3.5.0';

/*!
 * Assertion Error
 */

exports.AssertionError = __webpack_require__(17);

/*!
 * Utils for plugins (not exported)
 */

var util = __webpack_require__(18);

/**
 * # .use(function)
 *
 * Provides a way to extend the internals of Chai
 *
 * @param {Function}
 * @returns {this} for chaining
 * @api public
 */

exports.use = function (fn) {
  if (!~used.indexOf(fn)) {
    fn(this, util);
    used.push(fn);
  }

  return this;
};

/*!
 * Utility Functions
 */

exports.util = util;

/*!
 * Configuration
 */

var config = __webpack_require__(31);
exports.config = config;

/*!
 * Primary `Assertion` prototype
 */

var assertion = __webpack_require__(50);
exports.use(assertion);

/*!
 * Core Assertions
 */

var core = __webpack_require__(51);
exports.use(core);

/*!
 * Expect interface
 */

var expect = __webpack_require__(52);
exports.use(expect);

/*!
 * Should interface
 */

var should = __webpack_require__(53);
exports.use(should);

/*!
 * Assert interface
 */

var assert = __webpack_require__(54);
exports.use(assert);


/***/ }),
/* 17 */
/***/ (function(module, exports) {

/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */

/*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */

function exclude () {
  var excludes = [].slice.call(arguments);

  function excludeProps (res, obj) {
    Object.keys(obj).forEach(function (key) {
      if (!~excludes.indexOf(key)) res[key] = obj[key];
    });
  }

  return function extendExclude () {
    var args = [].slice.call(arguments)
      , i = 0
      , res = {};

    for (; i < args.length; i++) {
      excludeProps(res, args[i]);
    }

    return res;
  };
};

/*!
 * Primary Exports
 */

module.exports = AssertionError;

/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */

function AssertionError (message, _props, ssf) {
  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
    , props = extend(_props || {});

  // default values
  this.message = message || 'Unspecified AssertionError';
  this.showDiff = false;

  // copy from properties
  for (var key in props) {
    this[key] = props[key];
  }

  // capture stack trace
  ssf = ssf || AssertionError;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, ssf);
  } else {
    try {
      throw new Error();
    } catch(e) {
      this.stack = e.stack;
    }
  }
}

/*!
 * Inherit from Error.prototype
 */

AssertionError.prototype = Object.create(Error.prototype);

/*!
 * Statically set name
 */

AssertionError.prototype.name = 'AssertionError';

/*!
 * Ensure correct constructor
 */

AssertionError.prototype.constructor = AssertionError;

/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */

AssertionError.prototype.toJSON = function (stack) {
  var extend = exclude('constructor', 'toJSON', 'stack')
    , props = extend({ name: this.name }, this);

  // include stack if exists and not turned off
  if (false !== stack && this.stack) {
    props.stack = this.stack;
  }

  return props;
};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Main exports
 */

var exports = module.exports = {};

/*!
 * test utility
 */

exports.test = __webpack_require__(19);

/*!
 * type utility
 */

exports.type = __webpack_require__(21);

/*!
 * expectTypes utility
 */
exports.expectTypes = __webpack_require__(23);

/*!
 * message utility
 */

exports.getMessage = __webpack_require__(24);

/*!
 * actual utility
 */

exports.getActual = __webpack_require__(25);

/*!
 * Inspect util
 */

exports.inspect = __webpack_require__(26);

/*!
 * Object Display util
 */

exports.objDisplay = __webpack_require__(30);

/*!
 * Flag utility
 */

exports.flag = __webpack_require__(20);

/*!
 * Flag transferring utility
 */

exports.transferFlags = __webpack_require__(32);

/*!
 * Deep equal utility
 */

exports.eql = __webpack_require__(33);

/*!
 * Deep path value
 */

exports.getPathValue = __webpack_require__(41);

/*!
 * Deep path info
 */

exports.getPathInfo = __webpack_require__(42);

/*!
 * Check if a property exists
 */

exports.hasProperty = __webpack_require__(43);

/*!
 * Function name
 */

exports.getName = __webpack_require__(27);

/*!
 * add Property
 */

exports.addProperty = __webpack_require__(44);

/*!
 * add Method
 */

exports.addMethod = __webpack_require__(45);

/*!
 * overwrite Property
 */

exports.overwriteProperty = __webpack_require__(46);

/*!
 * overwrite Method
 */

exports.overwriteMethod = __webpack_require__(47);

/*!
 * Add a chainable method
 */

exports.addChainableMethod = __webpack_require__(48);

/*!
 * Overwrite chainable method
 */

exports.overwriteChainableMethod = __webpack_require__(49);


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = __webpack_require__(20);

/**
 * # test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name test
 */

module.exports = function (obj, args) {
  var negate = flag(obj, 'negate')
    , expr = args[0];
  return negate ? !expr : expr;
};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### flag(object, key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @namespace Utils
 * @name flag
 * @api private
 */

module.exports = function (obj, key, value) {
  var flags = obj.__flags || (obj.__flags = Object.create(null));
  if (arguments.length === 3) {
    flags[key] = value;
  } else {
    return flags[key];
  }
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(22);


/***/ }),
/* 22 */
/***/ (function(module, exports) {

/*!
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Primary Exports
 */

var exports = module.exports = getType;

/**
 * ### typeOf (obj)
 *
 * Use several different techniques to determine
 * the type of object being tested.
 *
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */
var objectTypeRegexp = /^\[object (.*)\]$/;

function getType(obj) {
  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();
  // Let "new String('')" return 'object'
  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';
  // PhantomJS has type "DOMWindow" for null
  if (obj === null) return 'null';
  // PhantomJS has type "DOMWindow" for undefined
  if (obj === undefined) return 'undefined';
  return type;
}

exports.Library = Library;

/**
 * ### Library
 *
 * Create a repository for custom type detection.
 *
 * ```js
 * var lib = new type.Library;
 * ```
 *
 */

function Library() {
  if (!(this instanceof Library)) return new Library();
  this.tests = {};
}

/**
 * #### .of (obj)
 *
 * Expose replacement `typeof` detection to the library.
 *
 * ```js
 * if ('string' === lib.of('hello world')) {
 *   // ...
 * }
 * ```
 *
 * @param {Mixed} object to test
 * @return {String} type
 */

Library.prototype.of = getType;

/**
 * #### .define (type, test)
 *
 * Add a test to for the `.test()` assertion.
 *
 * Can be defined as a regular expression:
 *
 * ```js
 * lib.define('int', /^[0-9]+$/);
 * ```
 *
 * ... or as a function:
 *
 * ```js
 * lib.define('bln', function (obj) {
 *   if ('boolean' === lib.of(obj)) return true;
 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
 *   return !! ~blns.indexOf(obj);
 * });
 * ```
 *
 * @param {String} type
 * @param {RegExp|Function} test
 * @api public
 */

Library.prototype.define = function(type, test) {
  if (arguments.length === 1) return this.tests[type];
  this.tests[type] = test;
  return this;
};

/**
 * #### .test (obj, test)
 *
 * Assert that an object is of type. Will first
 * check natives, and if that does not pass it will
 * use the user defined custom tests.
 *
 * ```js
 * assert(lib.test('1', 'int'));
 * assert(lib.test('yes', 'bln'));
 * ```
 *
 * @param {Mixed} object
 * @param {String} type
 * @return {Boolean} result
 * @api public
 */

Library.prototype.test = function(obj, type) {
  if (type === getType(obj)) return true;
  var test = this.tests[type];

  if (test && 'regexp' === getType(test)) {
    return test.test(obj);
  } else if (test && 'function' === getType(test)) {
    return test(obj);
  } else {
    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
  }
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - expectTypes utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### expectTypes(obj, types)
 *
 * Ensures that the object being tested against is of a valid type.
 *
 *     utils.expectTypes(this, ['array', 'object', 'string']);
 *
 * @param {Mixed} obj constructed Assertion
 * @param {Array} type A list of allowed types for this assertion
 * @namespace Utils
 * @name expectTypes
 * @api public
 */

var AssertionError = __webpack_require__(17);
var flag = __webpack_require__(20);
var type = __webpack_require__(21);

module.exports = function (obj, types) {
  var obj = flag(obj, 'object');
  types = types.map(function (t) { return t.toLowerCase(); });
  types.sort();

  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'
  var str = types.map(function (t, index) {
    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';
    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
    return or + art + ' ' + t;
  }).join(', ');

  if (!types.some(function (expected) { return type(obj) === expected; })) {
    throw new AssertionError(
      'object tested must be ' + str + ', but ' + type(obj) + ' given'
    );
  }
};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = __webpack_require__(20)
  , getActual = __webpack_require__(25)
  , inspect = __webpack_require__(26)
  , objDisplay = __webpack_require__(30);

/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getMessage
 * @api public
 */

module.exports = function (obj, args) {
  var negate = flag(obj, 'negate')
    , val = flag(obj, 'object')
    , expected = args[3]
    , actual = getActual(obj, args)
    , msg = negate ? args[2] : args[1]
    , flagMsg = flag(obj, 'message');

  if(typeof msg === "function") msg = msg();
  msg = msg || '';
  msg = msg
    .replace(/#\{this\}/g, function () { return objDisplay(val); })
    .replace(/#\{act\}/g, function () { return objDisplay(actual); })
    .replace(/#\{exp\}/g, function () { return objDisplay(expected); });

  return flagMsg ? flagMsg + ': ' + msg : msg;
};


/***/ }),
/* 25 */
/***/ (function(module, exports) {

/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * # getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getActual
 */

module.exports = function (obj, args) {
  return args.length > 4 ? args[4] : obj._obj;
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

// This is (almost) directly from Node.js utils
// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js

var getName = __webpack_require__(27);
var getProperties = __webpack_require__(28);
var getEnumerableProperties = __webpack_require__(29);

module.exports = inspect;

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
 *    properties of objects.
 * @param {Number} depth Depth in which to descend in object. Default is 2.
 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
 *    output. Default is false (no coloring).
 * @namespace Utils
 * @name inspect
 */
function inspect(obj, showHidden, depth, colors) {
  var ctx = {
    showHidden: showHidden,
    seen: [],
    stylize: function (str) { return str; }
  };
  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}

// Returns true if object is a DOM element.
var isDOMElement = function (object) {
  if (typeof HTMLElement === 'object') {
    return object instanceof HTMLElement;
  } else {
    return object &&
      typeof object === 'object' &&
      object.nodeType === 1 &&
      typeof object.nodeName === 'string';
  }
};

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (value && typeof value.inspect === 'function' &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes);
    if (typeof ret !== 'string') {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // If this is a DOM element, try to get the outer HTML.
  if (isDOMElement(value)) {
    if ('outerHTML' in value) {
      return value.outerHTML;
      // This value does not have an outerHTML attribute,
      //   it could still be an XML element
    } else {
      // Attempt to serialize it
      try {
        if (document.xmlVersion) {
          var xmlSerializer = new XMLSerializer();
          return xmlSerializer.serializeToString(value);
        } else {
          // Firefox 11- do not support outerHTML
          //   It does, however, support innerHTML
          //   Use the following to render the element
          var ns = "http://www.w3.org/1999/xhtml";
          var container = document.createElementNS(ns, '_');

          container.appendChild(value.cloneNode(false));
          html = container.innerHTML
            .replace('><', '>' + value.innerHTML + '<');
          container.innerHTML = '';
          return html;
        }
      } catch (err) {
        // This could be a non-native DOM implementation,
        //   continue with the normal flow:
        //   printing the element as if it is an object.
      }
    }
  }

  // Look up the keys of the object.
  var visibleKeys = getEnumerableProperties(value);
  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;

  // Some type of object without properties can be shortcutted.
  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
  // a `stack` plus `description` property; ignore those for consistency.
  if (keys.length === 0 || (isError(value) && (
      (keys.length === 1 && keys[0] === 'stack') ||
      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
     ))) {
    if (typeof value === 'function') {
      var name = getName(value);
      var nameSuffix = name ? ': ' + name : '';
      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (typeof value === 'function') {
    var name = getName(value);
    var nameSuffix = name ? ': ' + name : '';
    base = ' [Function' + nameSuffix + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    return formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  switch (typeof value) {
    case 'undefined':
      return ctx.stylize('undefined', 'undefined');

    case 'string':
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');

    case 'number':
      if (value === 0 && (1/value) === -Infinity) {
        return ctx.stylize('-0', 'number');
      }
      return ctx.stylize('' + value, 'number');

    case 'boolean':
      return ctx.stylize('' + value, 'boolean');
  }
  // For some reason typeof null is "object", so special case here.
  if (value === null) {
    return ctx.stylize('null', 'null');
  }
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str;
  if (value.__lookupGetter__) {
    if (value.__lookupGetter__(key)) {
      if (value.__lookupSetter__(key)) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (value.__lookupSetter__(key)) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
  }
  if (visibleKeys.indexOf(key) < 0) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(value[key]) < 0) {
      if (recurseTimes === null) {
        str = formatValue(ctx, value[key], null);
      } else {
        str = formatValue(ctx, value[key], recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (typeof name === 'undefined') {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function isArray(ar) {
  return Array.isArray(ar) ||
         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}

function isRegExp(re) {
  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}

function isDate(d) {
  return typeof d === 'object' && objectToString(d) === '[object Date]';
}

function isError(e) {
  return typeof e === 'object' && objectToString(e) === '[object Error]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


/***/ }),
/* 27 */
/***/ (function(module, exports) {

/*!
 * Chai - getName utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * # getName(func)
 *
 * Gets the name of a function, in a cross-browser way.
 *
 * @param {Function} a function (usually a constructor)
 * @namespace Utils
 * @name getName
 */

module.exports = function (func) {
  if (func.name) return func.name;

  var match = /^\s?function ([^(]*)\(/.exec(func);
  return match && match[1] ? match[1] : "";
};


/***/ }),
/* 28 */
/***/ (function(module, exports) {

/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getProperties
 * @api public
 */

module.exports = function getProperties(object) {
  var result = Object.getOwnPropertyNames(object);

  function addProperty(property) {
    if (result.indexOf(property) === -1) {
      result.push(property);
    }
  }

  var proto = Object.getPrototypeOf(object);
  while (proto !== null) {
    Object.getOwnPropertyNames(proto).forEach(addProperty);
    proto = Object.getPrototypeOf(proto);
  }

  return result;
};


/***/ }),
/* 29 */
/***/ (function(module, exports) {

/*!
 * Chai - getEnumerableProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getEnumerableProperties(object)
 *
 * This allows the retrieval of enumerable property names of an object,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getEnumerableProperties
 * @api public
 */

module.exports = function getEnumerableProperties(object) {
  var result = [];
  for (var name in object) {
    result.push(name);
  }
  return result;
};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var inspect = __webpack_require__(26);
var config = __webpack_require__(31);

/**
 * ### .objDisplay (object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @namespace Utils
 * @api public
 */

module.exports = function (obj) {
  var str = inspect(obj)
    , type = Object.prototype.toString.call(obj);

  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
    if (type === '[object Function]') {
      return !obj.name || obj.name === ''
        ? '[Function]'
        : '[Function: ' + obj.name + ']';
    } else if (type === '[object Array]') {
      return '[ Array(' + obj.length + ') ]';
    } else if (type === '[object Object]') {
      var keys = Object.keys(obj)
        , kstr = keys.length > 2
          ? keys.splice(0, 2).join(', ') + ', ...'
          : keys.join(', ');
      return '{ Object (' + kstr + ') }';
    } else {
      return str;
    }
  } else {
    return str;
  }
};


/***/ }),
/* 31 */
/***/ (function(module, exports) {

module.exports = {

  /**
   * ### config.includeStack
   *
   * User configurable property, influences whether stack trace
   * is included in Assertion error message. Default of false
   * suppresses stack trace in the error message.
   *
   *     chai.config.includeStack = true;  // enable stack on error
   *
   * @param {Boolean}
   * @api public
   */

   includeStack: false,

  /**
   * ### config.showDiff
   *
   * User configurable property, influences whether or not
   * the `showDiff` flag should be included in the thrown
   * AssertionErrors. `false` will always be `false`; `true`
   * will be true when the assertion has requested a diff
   * be shown.
   *
   * @param {Boolean}
   * @api public
   */

  showDiff: true,

  /**
   * ### config.truncateThreshold
   *
   * User configurable property, sets length threshold for actual and
   * expected values in assertion errors. If this threshold is exceeded, for
   * example for large data structures, the value is replaced with something
   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
   *
   * Set it to zero if you want to disable truncating altogether.
   *
   * This is especially userful when doing assertions on arrays: having this
   * set to a reasonable large value makes the failure messages readily
   * inspectable.
   *
   *     chai.config.truncateThreshold = 0;  // disable truncating
   *
   * @param {Number}
   * @api public
   */

  truncateThreshold: 40

};


/***/ }),
/* 32 */
/***/ (function(module, exports) {

/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, and `message`)
 * will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAsseriton = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags to; usually a new assertion
 * @param {Boolean} includeAll
 * @namespace Utils
 * @name transferFlags
 * @api private
 */

module.exports = function (assertion, object, includeAll) {
  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

  if (!object.__flags) {
    object.__flags = Object.create(null);
  }

  includeAll = arguments.length === 3 ? includeAll : true;

  for (var flag in flags) {
    if (includeAll ||
        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {
      object.__flags[flag] = flags[flag];
    }
  }
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(34);


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var type = __webpack_require__(35);

/*!
 * Buffer.isBuffer browser shim
 */

var Buffer;
try { Buffer = __webpack_require__(37).Buffer; }
catch(ex) {
  Buffer = {};
  Buffer.isBuffer = function() { return false; }
}

/*!
 * Primary Export
 */

module.exports = deepEqual;

/**
 * Assert super-strict (egal) equality between
 * two objects of any type.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @param {Array} memoised (optional)
 * @return {Boolean} equal match
 */

function deepEqual(a, b, m) {
  if (sameValue(a, b)) {
    return true;
  } else if ('date' === type(a)) {
    return dateEqual(a, b);
  } else if ('regexp' === type(a)) {
    return regexpEqual(a, b);
  } else if (Buffer.isBuffer(a)) {
    return bufferEqual(a, b);
  } else if ('arguments' === type(a)) {
    return argumentsEqual(a, b, m);
  } else if (!typeEqual(a, b)) {
    return false;
  } else if (('object' !== type(a) && 'object' !== type(b))
  && ('array' !== type(a) && 'array' !== type(b))) {
    return sameValue(a, b);
  } else {
    return objectEqual(a, b, m);
  }
}

/*!
 * Strict (egal) equality test. Ensures that NaN always
 * equals NaN and `-0` does not equal `+0`.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} equal match
 */

function sameValue(a, b) {
  if (a === b) return a !== 0 || 1 / a === 1 / b;
  return a !== a && b !== b;
}

/*!
 * Compare the types of two given objects and
 * return if they are equal. Note that an Array
 * has a type of `array` (not `object`) and arguments
 * have a type of `arguments` (not `array`/`object`).
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function typeEqual(a, b) {
  return type(a) === type(b);
}

/*!
 * Compare two Date objects by asserting that
 * the time values are equal using `saveValue`.
 *
 * @param {Date} a
 * @param {Date} b
 * @return {Boolean} result
 */

function dateEqual(a, b) {
  if ('date' !== type(b)) return false;
  return sameValue(a.getTime(), b.getTime());
}

/*!
 * Compare two regular expressions by converting them
 * to string and checking for `sameValue`.
 *
 * @param {RegExp} a
 * @param {RegExp} b
 * @return {Boolean} result
 */

function regexpEqual(a, b) {
  if ('regexp' !== type(b)) return false;
  return sameValue(a.toString(), b.toString());
}

/*!
 * Assert deep equality of two `arguments` objects.
 * Unfortunately, these must be sliced to arrays
 * prior to test to ensure no bad behavior.
 *
 * @param {Arguments} a
 * @param {Arguments} b
 * @param {Array} memoize (optional)
 * @return {Boolean} result
 */

function argumentsEqual(a, b, m) {
  if ('arguments' !== type(b)) return false;
  a = [].slice.call(a);
  b = [].slice.call(b);
  return deepEqual(a, b, m);
}

/*!
 * Get enumerable properties of a given object.
 *
 * @param {Object} a
 * @return {Array} property names
 */

function enumerable(a) {
  var res = [];
  for (var key in a) res.push(key);
  return res;
}

/*!
 * Simple equality for flat iterable objects
 * such as Arrays or Node.js buffers.
 *
 * @param {Iterable} a
 * @param {Iterable} b
 * @return {Boolean} result
 */

function iterableEqual(a, b) {
  if (a.length !==  b.length) return false;

  var i = 0;
  var match = true;

  for (; i < a.length; i++) {
    if (a[i] !== b[i]) {
      match = false;
      break;
    }
  }

  return match;
}

/*!
 * Extension to `iterableEqual` specifically
 * for Node.js Buffers.
 *
 * @param {Buffer} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function bufferEqual(a, b) {
  if (!Buffer.isBuffer(b)) return false;
  return iterableEqual(a, b);
}

/*!
 * Block for `objectEqual` ensuring non-existing
 * values don't get in.
 *
 * @param {Mixed} object
 * @return {Boolean} result
 */

function isValue(a) {
  return a !== null && a !== undefined;
}

/*!
 * Recursively check the equality of two objects.
 * Once basic sameness has been established it will
 * defer to `deepEqual` for each enumerable key
 * in the object.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function objectEqual(a, b, m) {
  if (!isValue(a) || !isValue(b)) {
    return false;
  }

  if (a.prototype !== b.prototype) {
    return false;
  }

  var i;
  if (m) {
    for (i = 0; i < m.length; i++) {
      if ((m[i][0] === a && m[i][1] === b)
      ||  (m[i][0] === b && m[i][1] === a)) {
        return true;
      }
    }
  } else {
    m = [];
  }

  try {
    var ka = enumerable(a);
    var kb = enumerable(b);
  } catch (ex) {
    return false;
  }

  ka.sort();
  kb.sort();

  if (!iterableEqual(ka, kb)) {
    return false;
  }

  m.push([ a, b ]);

  var key;
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], m)) {
      return false;
    }
  }

  return true;
}


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(36);


/***/ }),
/* 36 */
/***/ (function(module, exports) {

/*!
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Primary Exports
 */

var exports = module.exports = getType;

/*!
 * Detectable javascript natives
 */

var natives = {
    '[object Array]': 'array'
  , '[object RegExp]': 'regexp'
  , '[object Function]': 'function'
  , '[object Arguments]': 'arguments'
  , '[object Date]': 'date'
};

/**
 * ### typeOf (obj)
 *
 * Use several different techniques to determine
 * the type of object being tested.
 *
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */

function getType (obj) {
  var str = Object.prototype.toString.call(obj);
  if (natives[str]) return natives[str];
  if (obj === null) return 'null';
  if (obj === undefined) return 'undefined';
  if (obj === Object(obj)) return 'object';
  return typeof obj;
}

exports.Library = Library;

/**
 * ### Library
 *
 * Create a repository for custom type detection.
 *
 * ```js
 * var lib = new type.Library;
 * ```
 *
 */

function Library () {
  this.tests = {};
}

/**
 * #### .of (obj)
 *
 * Expose replacement `typeof` detection to the library.
 *
 * ```js
 * if ('string' === lib.of('hello world')) {
 *   // ...
 * }
 * ```
 *
 * @param {Mixed} object to test
 * @return {String} type
 */

Library.prototype.of = getType;

/**
 * #### .define (type, test)
 *
 * Add a test to for the `.test()` assertion.
 *
 * Can be defined as a regular expression:
 *
 * ```js
 * lib.define('int', /^[0-9]+$/);
 * ```
 *
 * ... or as a function:
 *
 * ```js
 * lib.define('bln', function (obj) {
 *   if ('boolean' === lib.of(obj)) return true;
 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
 *   return !! ~blns.indexOf(obj);
 * });
 * ```
 *
 * @param {String} type
 * @param {RegExp|Function} test
 * @api public
 */

Library.prototype.define = function (type, test) {
  if (arguments.length === 1) return this.tests[type];
  this.tests[type] = test;
  return this;
};

/**
 * #### .test (obj, test)
 *
 * Assert that an object is of type. Will first
 * check natives, and if that does not pass it will
 * use the user defined custom tests.
 *
 * ```js
 * assert(lib.test('1', 'int'));
 * assert(lib.test('yes', 'bln'));
 * ```
 *
 * @param {Mixed} object
 * @param {String} type
 * @return {Boolean} result
 * @api public
 */

Library.prototype.test = function (obj, type) {
  if (type === getType(obj)) return true;
  var test = this.tests[type];

  if (test && 'regexp' === getType(test)) {
    return test.test(obj);
  } else if (test && 'function' === getType(test)) {
    return test(obj);
  } else {
    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
  }
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(38)
var ieee754 = __webpack_require__(39)
var isArray = __webpack_require__(40)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(12)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 39 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 40 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - getPathValue utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */

var getPathInfo = __webpack_require__(42);

/**
 * ### .getPathValue(path, object)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue('prop1.str', obj); // Hello
 *     getPathValue('prop1.att[2]', obj); // b
 *     getPathValue('prop2.arr[0].nested', obj); // Universe
 *
 * @param {String} path
 * @param {Object} object
 * @returns {Object} value or `undefined`
 * @namespace Utils
 * @name getPathValue
 * @api public
 */
module.exports = function(path, obj) {
  var info = getPathInfo(path, obj);
  return info.value;
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - getPathInfo utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var hasProperty = __webpack_require__(43);

/**
 * ### .getPathInfo(path, object)
 *
 * This allows the retrieval of property info in an
 * object given a string path.
 *
 * The path info consists of an object with the
 * following properties:
 *
 * * parent - The parent object of the property referenced by `path`
 * * name - The name of the final property, a number if it was an array indexer
 * * value - The value of the property, if it exists, otherwise `undefined`
 * * exists - Whether the property exists or not
 *
 * @param {String} path
 * @param {Object} object
 * @returns {Object} info
 * @namespace Utils
 * @name getPathInfo
 * @api public
 */

module.exports = function getPathInfo(path, obj) {
  var parsed = parsePath(path),
      last = parsed[parsed.length - 1];

  var info = {
    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,
    name: last.p || last.i,
    value: _getPathValue(parsed, obj)
  };
  info.exists = hasProperty(info.name, info.parent);

  return info;
};


/*!
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `_getPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be as near infinitely deep and nested
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */

function parsePath (path) {
  var str = path.replace(/([^\\])\[/g, '$1.[')
    , parts = str.match(/(\\\.|[^.]+?)+/g);
  return parts.map(function (value) {
    var re = /^\[(\d+)\]$/
      , mArr = re.exec(value);
    if (mArr) return { i: parseFloat(mArr[1]) };
    else return { p: value.replace(/\\([.\[\]])/g, '$1') };
  });
}


/*!
 * ## _getPathValue(parsed, obj)
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(parsed, obj);
 *
 * @param {Object} parsed definition from `parsePath`.
 * @param {Object} object to search against
 * @param {Number} object to search against
 * @returns {Object|Undefined} value
 * @api private
 */

function _getPathValue (parsed, obj, index) {
  var tmp = obj
    , res;

  index = (index === undefined ? parsed.length : index);

  for (var i = 0, l = index; i < l; i++) {
    var part = parsed[i];
    if (tmp) {
      if ('undefined' !== typeof part.p)
        tmp = tmp[part.p];
      else if ('undefined' !== typeof part.i)
        tmp = tmp[part.i];
      if (i == (l - 1)) res = tmp;
    } else {
      res = undefined;
    }
  }
  return res;
}


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - hasProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var type = __webpack_require__(21);

/**
 * ### .hasProperty(object, name)
 *
 * This allows checking whether an object has
 * named property or numeric array index.
 *
 * Basically does the same thing as the `in`
 * operator but works properly with natives
 * and null/undefined values.
 *
 *     var obj = {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *
 * The following would be the results.
 *
 *     hasProperty('str', obj);  // true
 *     hasProperty('constructor', obj);  // true
 *     hasProperty('bar', obj);  // false
 *
 *     hasProperty('length', obj.str); // true
 *     hasProperty(1, obj.str);  // true
 *     hasProperty(5, obj.str);  // false
 *
 *     hasProperty('length', obj.arr);  // true
 *     hasProperty(2, obj.arr);  // true
 *     hasProperty(3, obj.arr);  // false
 *
 * @param {Objuect} object
 * @param {String|Number} name
 * @returns {Boolean} whether it exists
 * @namespace Utils
 * @name getPathInfo
 * @api public
 */

var literals = {
    'number': Number
  , 'string': String
};

module.exports = function hasProperty(name, obj) {
  var ot = type(obj);

  // Bad Object, obviously no props at all
  if(ot === 'null' || ot === 'undefined')
    return false;

  // The `in` operator does not work with certain literals
  // box these before the check
  if(literals[ot] && typeof obj !== 'object')
    obj = new literals[ot](obj);

  return name in obj;
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = __webpack_require__(31);
var flag = __webpack_require__(20);

/**
 * ### addProperty (ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @namespace Utils
 * @name addProperty
 * @api public
 */

module.exports = function (ctx, name, getter) {
  Object.defineProperty(ctx, name,
    { get: function addProperty() {
        var old_ssfi = flag(this, 'ssfi');
        if (old_ssfi && config.includeStack === false)
          flag(this, 'ssfi', addProperty);

        var result = getter.call(this);
        return result === undefined ? this : result;
      }
    , configurable: true
  });
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = __webpack_require__(31);

/**
 * ### .addMethod (ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @namespace Utils
 * @name addMethod
 * @api public
 */
var flag = __webpack_require__(20);

module.exports = function (ctx, name, method) {
  ctx[name] = function () {
    var old_ssfi = flag(this, 'ssfi');
    if (old_ssfi && config.includeStack === false)
      flag(this, 'ssfi', ctx[name]);
    var result = method.apply(this, arguments);
    return result === undefined ? this : result;
  };
};


/***/ }),
/* 46 */
/***/ (function(module, exports) {

/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteProperty (ctx, name, fn)
 *
 * Overwites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @namespace Utils
 * @name overwriteProperty
 * @api public
 */

module.exports = function (ctx, name, getter) {
  var _get = Object.getOwnPropertyDescriptor(ctx, name)
    , _super = function () {};

  if (_get && 'function' === typeof _get.get)
    _super = _get.get

  Object.defineProperty(ctx, name,
    { get: function () {
        var result = getter(_super).call(this);
        return result === undefined ? this : result;
      }
    , configurable: true
  });
};


/***/ }),
/* 47 */
/***/ (function(module, exports) {

/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteMethod (ctx, name, fn)
 *
 * Overwites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @namespace Utils
 * @name overwriteMethod
 * @api public
 */

module.exports = function (ctx, name, method) {
  var _method = ctx[name]
    , _super = function () { return this; };

  if (_method && 'function' === typeof _method)
    _super = _method;

  ctx[name] = function () {
    var result = method(_super).apply(this, arguments);
    return result === undefined ? this : result;
  }
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var transferFlags = __webpack_require__(32);
var flag = __webpack_require__(20);
var config = __webpack_require__(31);

/*!
 * Module variables
 */

// Check whether `__proto__` is supported
var hasProtoSupport = '__proto__' in Object;

// Without `__proto__` support, this module will need to add properties to a function.
// However, some Function.prototype methods cannot be overwritten,
// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).
var excludeNames = /^(?:length|name|arguments|caller)$/;

// Cache `Function` properties
var call  = Function.prototype.call,
    apply = Function.prototype.apply;

/**
 * ### addChainableMethod (ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @namespace Utils
 * @name addChainableMethod
 * @api public
 */

module.exports = function (ctx, name, method, chainingBehavior) {
  if (typeof chainingBehavior !== 'function') {
    chainingBehavior = function () { };
  }

  var chainableBehavior = {
      method: method
    , chainingBehavior: chainingBehavior
  };

  // save the methods so we can overwrite them later, if we need to.
  if (!ctx.__methods) {
    ctx.__methods = {};
  }
  ctx.__methods[name] = chainableBehavior;

  Object.defineProperty(ctx, name,
    { get: function () {
        chainableBehavior.chainingBehavior.call(this);

        var assert = function assert() {
          var old_ssfi = flag(this, 'ssfi');
          if (old_ssfi && config.includeStack === false)
            flag(this, 'ssfi', assert);
          var result = chainableBehavior.method.apply(this, arguments);
          return result === undefined ? this : result;
        };

        // Use `__proto__` if available
        if (hasProtoSupport) {
          // Inherit all properties from the object by replacing the `Function` prototype
          var prototype = assert.__proto__ = Object.create(this);
          // Restore the `call` and `apply` methods from `Function`
          prototype.call = call;
          prototype.apply = apply;
        }
        // Otherwise, redefine all properties (slow!)
        else {
          var asserterNames = Object.getOwnPropertyNames(ctx);
          asserterNames.forEach(function (asserterName) {
            if (!excludeNames.test(asserterName)) {
              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
              Object.defineProperty(assert, asserterName, pd);
            }
          });
        }

        transferFlags(this, assert);
        return assert;
      }
    , configurable: true
  });
};


/***/ }),
/* 49 */
/***/ (function(module, exports) {

/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)
 *
 * Overwites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.length(3);
 *     expect(myFoo).to.have.length.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @namespace Utils
 * @name overwriteChainableMethod
 * @api public
 */

module.exports = function (ctx, name, method, chainingBehavior) {
  var chainableBehavior = ctx.__methods[name];

  var _chainingBehavior = chainableBehavior.chainingBehavior;
  chainableBehavior.chainingBehavior = function () {
    var result = chainingBehavior(_chainingBehavior).call(this);
    return result === undefined ? this : result;
  };

  var _method = chainableBehavior.method;
  chainableBehavior.method = function () {
    var result = method(_method).apply(this, arguments);
    return result === undefined ? this : result;
  };
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = __webpack_require__(31);

module.exports = function (_chai, util) {
  /*!
   * Module dependencies.
   */

  var AssertionError = _chai.AssertionError
    , flag = util.flag;

  /*!
   * Module export.
   */

  _chai.Assertion = Assertion;

  /*!
   * Assertion Constructor
   *
   * Creates object for chaining.
   *
   * @api private
   */

  function Assertion (obj, msg, stack) {
    flag(this, 'ssfi', stack || arguments.callee);
    flag(this, 'object', obj);
    flag(this, 'message', msg);
  }

  Object.defineProperty(Assertion, 'includeStack', {
    get: function() {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      return config.includeStack;
    },
    set: function(value) {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      config.includeStack = value;
    }
  });

  Object.defineProperty(Assertion, 'showDiff', {
    get: function() {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      return config.showDiff;
    },
    set: function(value) {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      config.showDiff = value;
    }
  });

  Assertion.addProperty = function (name, fn) {
    util.addProperty(this.prototype, name, fn);
  };

  Assertion.addMethod = function (name, fn) {
    util.addMethod(this.prototype, name, fn);
  };

  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  Assertion.overwriteProperty = function (name, fn) {
    util.overwriteProperty(this.prototype, name, fn);
  };

  Assertion.overwriteMethod = function (name, fn) {
    util.overwriteMethod(this.prototype, name, fn);
  };

  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  /**
   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
   *
   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
   *
   * @name assert
   * @param {Philosophical} expression to be tested
   * @param {String|Function} message or function that returns message to display if expression fails
   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
   * @param {Mixed} expected value (remember to check for negation)
   * @param {Mixed} actual (optional) will default to `this.obj`
   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
   * @api private
   */

  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
    var ok = util.test(this, arguments);
    if (true !== showDiff) showDiff = false;
    if (true !== config.showDiff) showDiff = false;

    if (!ok) {
      var msg = util.getMessage(this, arguments)
        , actual = util.getActual(this, arguments);
      throw new AssertionError(msg, {
          actual: actual
        , expected: expected
        , showDiff: showDiff
      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
    }
  };

  /*!
   * ### ._obj
   *
   * Quick reference to stored `actual` value for plugin developers.
   *
   * @api private
   */

  Object.defineProperty(Assertion.prototype, '_obj',
    { get: function () {
        return flag(this, 'object');
      }
    , set: function (val) {
        flag(this, 'object', val);
      }
  });
};


/***/ }),
/* 51 */
/***/ (function(module, exports) {

/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, _) {
  var Assertion = chai.Assertion
    , toString = Object.prototype.toString
    , flag = _.flag;

  /**
   * ### Language Chains
   *
   * The following are provided as chainable getters to
   * improve the readability of your assertions. They
   * do not provide testing capabilities unless they
   * have been overwritten by a plugin.
   *
   * **Chains**
   *
   * - to
   * - be
   * - been
   * - is
   * - that
   * - which
   * - and
   * - has
   * - have
   * - with
   * - at
   * - of
   * - same
   *
   * @name language chains
   * @namespace BDD
   * @api public
   */

  [ 'to', 'be', 'been'
  , 'is', 'and', 'has', 'have'
  , 'with', 'that', 'which', 'at'
  , 'of', 'same' ].forEach(function (chain) {
    Assertion.addProperty(chain, function () {
      return this;
    });
  });

  /**
   * ### .not
   *
   * Negates any of assertions following in the chain.
   *
   *     expect(foo).to.not.equal('bar');
   *     expect(goodFn).to.not.throw(Error);
   *     expect({ foo: 'baz' }).to.have.property('foo')
   *       .and.not.equal('bar');
   *
   * @name not
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('not', function () {
    flag(this, 'negate', true);
  });

  /**
   * ### .deep
   *
   * Sets the `deep` flag, later used by the `equal` and
   * `property` assertions.
   *
   *     expect(foo).to.deep.equal({ bar: 'baz' });
   *     expect({ foo: { bar: { baz: 'quux' } } })
   *       .to.have.deep.property('foo.bar.baz', 'quux');
   *
   * `.deep.property` special characters can be escaped
   * by adding two slashes before the `.` or `[]`.
   *
   *     var deepCss = { '.link': { '[target]': 42 }};
   *     expect(deepCss).to.have.deep.property('\\.link.\\[target\\]', 42);
   *
   * @name deep
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('deep', function () {
    flag(this, 'deep', true);
  });

  /**
   * ### .any
   *
   * Sets the `any` flag, (opposite of the `all` flag)
   * later used in the `keys` assertion.
   *
   *     expect(foo).to.have.any.keys('bar', 'baz');
   *
   * @name any
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('any', function () {
    flag(this, 'any', true);
    flag(this, 'all', false)
  });


  /**
   * ### .all
   *
   * Sets the `all` flag (opposite of the `any` flag)
   * later used by the `keys` assertion.
   *
   *     expect(foo).to.have.all.keys('bar', 'baz');
   *
   * @name all
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('all', function () {
    flag(this, 'all', true);
    flag(this, 'any', false);
  });

  /**
   * ### .a(type)
   *
   * The `a` and `an` assertions are aliases that can be
   * used either as language chains or to assert a value's
   * type.
   *
   *     // typeof
   *     expect('test').to.be.a('string');
   *     expect({ foo: 'bar' }).to.be.an('object');
   *     expect(null).to.be.a('null');
   *     expect(undefined).to.be.an('undefined');
   *     expect(new Error).to.be.an('error');
   *     expect(new Promise).to.be.a('promise');
   *     expect(new Float32Array()).to.be.a('float32array');
   *     expect(Symbol()).to.be.a('symbol');
   *
   *     // es6 overrides
   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');
   *
   *     // language chain
   *     expect(foo).to.be.an.instanceof(Foo);
   *
   * @name a
   * @alias an
   * @param {String} type
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function an (type, msg) {
    if (msg) flag(this, 'message', msg);
    type = type.toLowerCase();
    var obj = flag(this, 'object')
      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';

    this.assert(
        type === _.type(obj)
      , 'expected #{this} to be ' + article + type
      , 'expected #{this} not to be ' + article + type
    );
  }

  Assertion.addChainableMethod('an', an);
  Assertion.addChainableMethod('a', an);

  /**
   * ### .include(value)
   *
   * The `include` and `contain` assertions can be used as either property
   * based language chains or as methods to assert the inclusion of an object
   * in an array or a substring in a string. When used as language chains,
   * they toggle the `contains` flag for the `keys` assertion.
   *
   *     expect([1,2,3]).to.include(2);
   *     expect('foobar').to.contain('foo');
   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');
   *
   * @name include
   * @alias contain
   * @alias includes
   * @alias contains
   * @param {Object|String|Number} obj
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function includeChainingBehavior () {
    flag(this, 'contains', true);
  }

  function include (val, msg) {
    _.expectTypes(this, ['array', 'object', 'string']);

    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var expected = false;

    if (_.type(obj) === 'array' && _.type(val) === 'object') {
      for (var i in obj) {
        if (_.eql(obj[i], val)) {
          expected = true;
          break;
        }
      }
    } else if (_.type(val) === 'object') {
      if (!flag(this, 'negate')) {
        for (var k in val) new Assertion(obj).property(k, val[k]);
        return;
      }
      var subset = {};
      for (var k in val) subset[k] = obj[k];
      expected = _.eql(subset, val);
    } else {
      expected = (obj != undefined) && ~obj.indexOf(val);
    }
    this.assert(
        expected
      , 'expected #{this} to include ' + _.inspect(val)
      , 'expected #{this} to not include ' + _.inspect(val));
  }

  Assertion.addChainableMethod('include', include, includeChainingBehavior);
  Assertion.addChainableMethod('contain', include, includeChainingBehavior);
  Assertion.addChainableMethod('contains', include, includeChainingBehavior);
  Assertion.addChainableMethod('includes', include, includeChainingBehavior);

  /**
   * ### .ok
   *
   * Asserts that the target is truthy.
   *
   *     expect('everything').to.be.ok;
   *     expect(1).to.be.ok;
   *     expect(false).to.not.be.ok;
   *     expect(undefined).to.not.be.ok;
   *     expect(null).to.not.be.ok;
   *
   * @name ok
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('ok', function () {
    this.assert(
        flag(this, 'object')
      , 'expected #{this} to be truthy'
      , 'expected #{this} to be falsy');
  });

  /**
   * ### .true
   *
   * Asserts that the target is `true`.
   *
   *     expect(true).to.be.true;
   *     expect(1).to.not.be.true;
   *
   * @name true
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('true', function () {
    this.assert(
        true === flag(this, 'object')
      , 'expected #{this} to be true'
      , 'expected #{this} to be false'
      , this.negate ? false : true
    );
  });

  /**
   * ### .false
   *
   * Asserts that the target is `false`.
   *
   *     expect(false).to.be.false;
   *     expect(0).to.not.be.false;
   *
   * @name false
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('false', function () {
    this.assert(
        false === flag(this, 'object')
      , 'expected #{this} to be false'
      , 'expected #{this} to be true'
      , this.negate ? true : false
    );
  });

  /**
   * ### .null
   *
   * Asserts that the target is `null`.
   *
   *     expect(null).to.be.null;
   *     expect(undefined).to.not.be.null;
   *
   * @name null
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('null', function () {
    this.assert(
        null === flag(this, 'object')
      , 'expected #{this} to be null'
      , 'expected #{this} not to be null'
    );
  });

  /**
   * ### .undefined
   *
   * Asserts that the target is `undefined`.
   *
   *     expect(undefined).to.be.undefined;
   *     expect(null).to.not.be.undefined;
   *
   * @name undefined
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('undefined', function () {
    this.assert(
        undefined === flag(this, 'object')
      , 'expected #{this} to be undefined'
      , 'expected #{this} not to be undefined'
    );
  });

  /**
   * ### .NaN
   * Asserts that the target is `NaN`.
   *
   *     expect('foo').to.be.NaN;
   *     expect(4).not.to.be.NaN;
   *
   * @name NaN
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('NaN', function () {
    this.assert(
        isNaN(flag(this, 'object'))
        , 'expected #{this} to be NaN'
        , 'expected #{this} not to be NaN'
    );
  });

  /**
   * ### .exist
   *
   * Asserts that the target is neither `null` nor `undefined`.
   *
   *     var foo = 'hi'
   *       , bar = null
   *       , baz;
   *
   *     expect(foo).to.exist;
   *     expect(bar).to.not.exist;
   *     expect(baz).to.not.exist;
   *
   * @name exist
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('exist', function () {
    this.assert(
        null != flag(this, 'object')
      , 'expected #{this} to exist'
      , 'expected #{this} to not exist'
    );
  });


  /**
   * ### .empty
   *
   * Asserts that the target's length is `0`. For arrays and strings, it checks
   * the `length` property. For objects, it gets the count of
   * enumerable keys.
   *
   *     expect([]).to.be.empty;
   *     expect('').to.be.empty;
   *     expect({}).to.be.empty;
   *
   * @name empty
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('empty', function () {
    var obj = flag(this, 'object')
      , expected = obj;

    if (Array.isArray(obj) || 'string' === typeof object) {
      expected = obj.length;
    } else if (typeof obj === 'object') {
      expected = Object.keys(obj).length;
    }

    this.assert(
        !expected
      , 'expected #{this} to be empty'
      , 'expected #{this} not to be empty'
    );
  });

  /**
   * ### .arguments
   *
   * Asserts that the target is an arguments object.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments;
   *     }
   *
   * @name arguments
   * @alias Arguments
   * @namespace BDD
   * @api public
   */

  function checkArguments () {
    var obj = flag(this, 'object')
      , type = Object.prototype.toString.call(obj);
    this.assert(
        '[object Arguments]' === type
      , 'expected #{this} to be arguments but got ' + type
      , 'expected #{this} to not be arguments'
    );
  }

  Assertion.addProperty('arguments', checkArguments);
  Assertion.addProperty('Arguments', checkArguments);

  /**
   * ### .equal(value)
   *
   * Asserts that the target is strictly equal (`===`) to `value`.
   * Alternately, if the `deep` flag is set, asserts that
   * the target is deeply equal to `value`.
   *
   *     expect('hello').to.equal('hello');
   *     expect(42).to.equal(42);
   *     expect(1).to.not.equal(true);
   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });
   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });
   *
   * @name equal
   * @alias equals
   * @alias eq
   * @alias deep.equal
   * @param {Mixed} value
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertEqual (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'deep')) {
      return this.eql(val);
    } else {
      this.assert(
          val === obj
        , 'expected #{this} to equal #{exp}'
        , 'expected #{this} to not equal #{exp}'
        , val
        , this._obj
        , true
      );
    }
  }

  Assertion.addMethod('equal', assertEqual);
  Assertion.addMethod('equals', assertEqual);
  Assertion.addMethod('eq', assertEqual);

  /**
   * ### .eql(value)
   *
   * Asserts that the target is deeply equal to `value`.
   *
   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });
   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);
   *
   * @name eql
   * @alias eqls
   * @param {Mixed} value
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertEql(obj, msg) {
    if (msg) flag(this, 'message', msg);
    this.assert(
        _.eql(obj, flag(this, 'object'))
      , 'expected #{this} to deeply equal #{exp}'
      , 'expected #{this} to not deeply equal #{exp}'
      , obj
      , this._obj
      , true
    );
  }

  Assertion.addMethod('eql', assertEql);
  Assertion.addMethod('eqls', assertEql);

  /**
   * ### .above(value)
   *
   * Asserts that the target is greater than `value`.
   *
   *     expect(10).to.be.above(5);
   *
   * Can also be used in conjunction with `length` to
   * assert a minimum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.above(2);
   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
   *
   * @name above
   * @alias gt
   * @alias greaterThan
   * @param {Number} value
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertAbove (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len > n
        , 'expected #{this} to have a length above #{exp} but got #{act}'
        , 'expected #{this} to not have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj > n
        , 'expected #{this} to be above ' + n
        , 'expected #{this} to be at most ' + n
      );
    }
  }

  Assertion.addMethod('above', assertAbove);
  Assertion.addMethod('gt', assertAbove);
  Assertion.addMethod('greaterThan', assertAbove);

  /**
   * ### .least(value)
   *
   * Asserts that the target is greater than or equal to `value`.
   *
   *     expect(10).to.be.at.least(10);
   *
   * Can also be used in conjunction with `length` to
   * assert a minimum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.of.at.least(2);
   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);
   *
   * @name least
   * @alias gte
   * @param {Number} value
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertLeast (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len >= n
        , 'expected #{this} to have a length at least #{exp} but got #{act}'
        , 'expected #{this} to have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj >= n
        , 'expected #{this} to be at least ' + n
        , 'expected #{this} to be below ' + n
      );
    }
  }

  Assertion.addMethod('least', assertLeast);
  Assertion.addMethod('gte', assertLeast);

  /**
   * ### .below(value)
   *
   * Asserts that the target is less than `value`.
   *
   *     expect(5).to.be.below(10);
   *
   * Can also be used in conjunction with `length` to
   * assert a maximum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.below(4);
   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
   *
   * @name below
   * @alias lt
   * @alias lessThan
   * @param {Number} value
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertBelow (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len < n
        , 'expected #{this} to have a length below #{exp} but got #{act}'
        , 'expected #{this} to not have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj < n
        , 'expected #{this} to be below ' + n
        , 'expected #{this} to be at least ' + n
      );
    }
  }

  Assertion.addMethod('below', assertBelow);
  Assertion.addMethod('lt', assertBelow);
  Assertion.addMethod('lessThan', assertBelow);

  /**
   * ### .most(value)
   *
   * Asserts that the target is less than or equal to `value`.
   *
   *     expect(5).to.be.at.most(5);
   *
   * Can also be used in conjunction with `length` to
   * assert a maximum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.of.at.most(4);
   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);
   *
   * @name most
   * @alias lte
   * @param {Number} value
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertMost (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len <= n
        , 'expected #{this} to have a length at most #{exp} but got #{act}'
        , 'expected #{this} to have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj <= n
        , 'expected #{this} to be at most ' + n
        , 'expected #{this} to be above ' + n
      );
    }
  }

  Assertion.addMethod('most', assertMost);
  Assertion.addMethod('lte', assertMost);

  /**
   * ### .within(start, finish)
   *
   * Asserts that the target is within a range.
   *
   *     expect(7).to.be.within(5,10);
   *
   * Can also be used in conjunction with `length` to
   * assert a length range. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.within(2,4);
   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
   *
   * @name within
   * @param {Number} start lowerbound inclusive
   * @param {Number} finish upperbound inclusive
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('within', function (start, finish, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , range = start + '..' + finish;
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len >= start && len <= finish
        , 'expected #{this} to have a length within ' + range
        , 'expected #{this} to not have a length within ' + range
      );
    } else {
      this.assert(
          obj >= start && obj <= finish
        , 'expected #{this} to be within ' + range
        , 'expected #{this} to not be within ' + range
      );
    }
  });

  /**
   * ### .instanceof(constructor)
   *
   * Asserts that the target is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , Chai = new Tea('chai');
   *
   *     expect(Chai).to.be.an.instanceof(Tea);
   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);
   *
   * @name instanceof
   * @param {Constructor} constructor
   * @param {String} message _optional_
   * @alias instanceOf
   * @namespace BDD
   * @api public
   */

  function assertInstanceOf (constructor, msg) {
    if (msg) flag(this, 'message', msg);
    var name = _.getName(constructor);
    this.assert(
        flag(this, 'object') instanceof constructor
      , 'expected #{this} to be an instance of ' + name
      , 'expected #{this} to not be an instance of ' + name
    );
  };

  Assertion.addMethod('instanceof', assertInstanceOf);
  Assertion.addMethod('instanceOf', assertInstanceOf);

  /**
   * ### .property(name, [value])
   *
   * Asserts that the target has a property `name`, optionally asserting that
   * the value of that property is strictly equal to  `value`.
   * If the `deep` flag is set, you can use dot- and bracket-notation for deep
   * references into objects and arrays.
   *
   *     // simple referencing
   *     var obj = { foo: 'bar' };
   *     expect(obj).to.have.property('foo');
   *     expect(obj).to.have.property('foo', 'bar');
   *
   *     // deep referencing
   *     var deepObj = {
   *         green: { tea: 'matcha' }
   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]
   *     };
   *
   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');
   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');
   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');
   *
   * You can also use an array as the starting point of a `deep.property`
   * assertion, or traverse nested arrays.
   *
   *     var arr = [
   *         [ 'chai', 'matcha', 'konacha' ]
   *       , [ { tea: 'chai' }
   *         , { tea: 'matcha' }
   *         , { tea: 'konacha' } ]
   *     ];
   *
   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');
   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');
   *
   * Furthermore, `property` changes the subject of the assertion
   * to be the value of that property from the original object. This
   * permits for further chainable assertions on that property.
   *
   *     expect(obj).to.have.property('foo')
   *       .that.is.a('string');
   *     expect(deepObj).to.have.property('green')
   *       .that.is.an('object')
   *       .that.deep.equals({ tea: 'matcha' });
   *     expect(deepObj).to.have.property('teas')
   *       .that.is.an('array')
   *       .with.deep.property('[2]')
   *         .that.deep.equals({ tea: 'konacha' });
   *
   * Note that dots and bracket in `name` must be backslash-escaped when
   * the `deep` flag is set, while they must NOT be escaped when the `deep`
   * flag is not set.
   *
   *     // simple referencing
   *     var css = { '.link[target]': 42 };
   *     expect(css).to.have.property('.link[target]', 42);
   *
   *     // deep referencing
   *     var deepCss = { '.link': { '[target]': 42 }};
   *     expect(deepCss).to.have.deep.property('\\.link.\\[target\\]', 42);
   *
   * @name property
   * @alias deep.property
   * @param {String} name
   * @param {Mixed} value (optional)
   * @param {String} message _optional_
   * @returns value of property for chaining
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('property', function (name, val, msg) {
    if (msg) flag(this, 'message', msg);

    var isDeep = !!flag(this, 'deep')
      , descriptor = isDeep ? 'deep property ' : 'property '
      , negate = flag(this, 'negate')
      , obj = flag(this, 'object')
      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null
      , hasProperty = isDeep
        ? pathInfo.exists
        : _.hasProperty(name, obj)
      , value = isDeep
        ? pathInfo.value
        : obj[name];

    if (negate && arguments.length > 1) {
      if (undefined === value) {
        msg = (msg != null) ? msg + ': ' : '';
        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));
      }
    } else {
      this.assert(
          hasProperty
        , 'expected #{this} to have a ' + descriptor + _.inspect(name)
        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
    }

    if (arguments.length > 1) {
      this.assert(
          val === value
        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'
        , val
        , value
      );
    }

    flag(this, 'object', value);
  });


  /**
   * ### .ownProperty(name)
   *
   * Asserts that the target has an own property `name`.
   *
   *     expect('test').to.have.ownProperty('length');
   *
   * @name ownProperty
   * @alias haveOwnProperty
   * @param {String} name
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertOwnProperty (name, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        obj.hasOwnProperty(name)
      , 'expected #{this} to have own property ' + _.inspect(name)
      , 'expected #{this} to not have own property ' + _.inspect(name)
    );
  }

  Assertion.addMethod('ownProperty', assertOwnProperty);
  Assertion.addMethod('haveOwnProperty', assertOwnProperty);

  /**
   * ### .ownPropertyDescriptor(name[, descriptor[, message]])
   *
   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.
   *
   *     expect('test').to.have.ownPropertyDescriptor('length');
   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });
   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });
   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);
   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');
   *
   * @name ownPropertyDescriptor
   * @alias haveOwnPropertyDescriptor
   * @param {String} name
   * @param {Object} descriptor _optional_
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertOwnPropertyDescriptor (name, descriptor, msg) {
    if (typeof descriptor === 'string') {
      msg = descriptor;
      descriptor = null;
    }
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
    if (actualDescriptor && descriptor) {
      this.assert(
          _.eql(descriptor, actualDescriptor)
        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)
        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)
        , descriptor
        , actualDescriptor
        , true
      );
    } else {
      this.assert(
          actualDescriptor
        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)
        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)
      );
    }
    flag(this, 'object', actualDescriptor);
  }

  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);

  /**
   * ### .length
   *
   * Sets the `doLength` flag later used as a chain precursor to a value
   * comparison for the `length` property.
   *
   *     expect('foo').to.have.length.above(2);
   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
   *     expect('foo').to.have.length.below(4);
   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
   *     expect('foo').to.have.length.within(2,4);
   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
   *
   * *Deprecation notice:* Using `length` as an assertion will be deprecated
   * in version 2.4.0 and removed in 3.0.0. Code using the old style of
   * asserting for `length` property value using `length(value)` should be
   * switched to use `lengthOf(value)` instead.
   *
   * @name length
   * @namespace BDD
   * @api public
   */

  /**
   * ### .lengthOf(value[, message])
   *
   * Asserts that the target's `length` property has
   * the expected value.
   *
   *     expect([ 1, 2, 3]).to.have.lengthOf(3);
   *     expect('foobar').to.have.lengthOf(6);
   *
   * @name lengthOf
   * @param {Number} length
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertLengthChain () {
    flag(this, 'doLength', true);
  }

  function assertLength (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).to.have.property('length');
    var len = obj.length;

    this.assert(
        len == n
      , 'expected #{this} to have a length of #{exp} but got #{act}'
      , 'expected #{this} to not have a length of #{act}'
      , n
      , len
    );
  }

  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
  Assertion.addMethod('lengthOf', assertLength);

  /**
   * ### .match(regexp)
   *
   * Asserts that the target matches a regular expression.
   *
   *     expect('foobar').to.match(/^foo/);
   *
   * @name match
   * @alias matches
   * @param {RegExp} RegularExpression
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */
  function assertMatch(re, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        re.exec(obj)
      , 'expected #{this} to match ' + re
      , 'expected #{this} not to match ' + re
    );
  }

  Assertion.addMethod('match', assertMatch);
  Assertion.addMethod('matches', assertMatch);

  /**
   * ### .string(string)
   *
   * Asserts that the string target contains another string.
   *
   *     expect('foobar').to.have.string('bar');
   *
   * @name string
   * @param {String} string
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('string', function (str, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).is.a('string');

    this.assert(
        ~obj.indexOf(str)
      , 'expected #{this} to contain ' + _.inspect(str)
      , 'expected #{this} to not contain ' + _.inspect(str)
    );
  });


  /**
   * ### .keys(key1, [key2], [...])
   *
   * Asserts that the target contains any or all of the passed-in keys.
   * Use in combination with `any`, `all`, `contains`, or `have` will affect
   * what will pass.
   *
   * When used in conjunction with `any`, at least one key that is passed
   * in must exist in the target object. This is regardless whether or not
   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`
   * should be used in the assertion. If neither are used, the assertion is
   * defaulted to `all`.
   *
   * When both `all` and `contain` are used, the target object must have at
   * least all of the passed-in keys but may have more keys not listed.
   *
   * When both `all` and `have` are used, the target object must both contain
   * all of the passed-in keys AND the number of keys in the target object must
   * match the number of keys passed in (in other words, a target object must
   * have all and only all of the passed-in keys).
   *
   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');
   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');
   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');
   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);
   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});
   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);
   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});
   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);
   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});
   *
   *
   * @name keys
   * @alias key
   * @param {...String|Array|Object} keys
   * @namespace BDD
   * @api public
   */

  function assertKeys (keys) {
    var obj = flag(this, 'object')
      , str
      , ok = true
      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';

    switch (_.type(keys)) {
      case "array":
        if (arguments.length > 1) throw (new Error(mixedArgsMsg));
        break;
      case "object":
        if (arguments.length > 1) throw (new Error(mixedArgsMsg));
        keys = Object.keys(keys);
        break;
      default:
        keys = Array.prototype.slice.call(arguments);
    }

    if (!keys.length) throw new Error('keys required');

    var actual = Object.keys(obj)
      , expected = keys
      , len = keys.length
      , any = flag(this, 'any')
      , all = flag(this, 'all');

    if (!any && !all) {
      all = true;
    }

    // Has any
    if (any) {
      var intersection = expected.filter(function(key) {
        return ~actual.indexOf(key);
      });
      ok = intersection.length > 0;
    }

    // Has all
    if (all) {
      ok = keys.every(function(key){
        return ~actual.indexOf(key);
      });
      if (!flag(this, 'negate') && !flag(this, 'contains')) {
        ok = ok && keys.length == actual.length;
      }
    }

    // Key string
    if (len > 1) {
      keys = keys.map(function(key){
        return _.inspect(key);
      });
      var last = keys.pop();
      if (all) {
        str = keys.join(', ') + ', and ' + last;
      }
      if (any) {
        str = keys.join(', ') + ', or ' + last;
      }
    } else {
      str = _.inspect(keys[0]);
    }

    // Form
    str = (len > 1 ? 'keys ' : 'key ') + str;

    // Have / include
    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;

    // Assertion
    this.assert(
        ok
      , 'expected #{this} to ' + str
      , 'expected #{this} to not ' + str
      , expected.slice(0).sort()
      , actual.sort()
      , true
    );
  }

  Assertion.addMethod('keys', assertKeys);
  Assertion.addMethod('key', assertKeys);

  /**
   * ### .throw(constructor)
   *
   * Asserts that the function target will throw a specific error, or specific type of error
   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test
   * for the error's message.
   *
   *     var err = new ReferenceError('This is a bad function.');
   *     var fn = function () { throw err; }
   *     expect(fn).to.throw(ReferenceError);
   *     expect(fn).to.throw(Error);
   *     expect(fn).to.throw(/bad function/);
   *     expect(fn).to.not.throw('good function');
   *     expect(fn).to.throw(ReferenceError, /bad function/);
   *     expect(fn).to.throw(err);
   *
   * Please note that when a throw expectation is negated, it will check each
   * parameter independently, starting with error constructor type. The appropriate way
   * to check for the existence of a type of error but for a message that does not match
   * is to use `and`.
   *
   *     expect(fn).to.throw(ReferenceError)
   *        .and.not.throw(/good function/);
   *
   * @name throw
   * @alias throws
   * @alias Throw
   * @param {ErrorConstructor} constructor
   * @param {String|RegExp} expected error message
   * @param {String} message _optional_
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @returns error for chaining (null if no error)
   * @namespace BDD
   * @api public
   */

  function assertThrows (constructor, errMsg, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).is.a('function');

    var thrown = false
      , desiredError = null
      , name = null
      , thrownError = null;

    if (arguments.length === 0) {
      errMsg = null;
      constructor = null;
    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {
      errMsg = constructor;
      constructor = null;
    } else if (constructor && constructor instanceof Error) {
      desiredError = constructor;
      constructor = null;
      errMsg = null;
    } else if (typeof constructor === 'function') {
      name = constructor.prototype.name;
      if (!name || (name === 'Error' && constructor !== Error)) {
        name = constructor.name || (new constructor()).name;
      }
    } else {
      constructor = null;
    }

    try {
      obj();
    } catch (err) {
      // first, check desired error
      if (desiredError) {
        this.assert(
            err === desiredError
          , 'expected #{this} to throw #{exp} but #{act} was thrown'
          , 'expected #{this} to not throw #{exp}'
          , (desiredError instanceof Error ? desiredError.toString() : desiredError)
          , (err instanceof Error ? err.toString() : err)
        );

        flag(this, 'object', err);
        return this;
      }

      // next, check constructor
      if (constructor) {
        this.assert(
            err instanceof constructor
          , 'expected #{this} to throw #{exp} but #{act} was thrown'
          , 'expected #{this} to not throw #{exp} but #{act} was thrown'
          , name
          , (err instanceof Error ? err.toString() : err)
        );

        if (!errMsg) {
          flag(this, 'object', err);
          return this;
        }
      }

      // next, check message
      var message = 'error' === _.type(err) && "message" in err
        ? err.message
        : '' + err;

      if ((message != null) && errMsg && errMsg instanceof RegExp) {
        this.assert(
            errMsg.exec(message)
          , 'expected #{this} to throw error matching #{exp} but got #{act}'
          , 'expected #{this} to throw error not matching #{exp}'
          , errMsg
          , message
        );

        flag(this, 'object', err);
        return this;
      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {
        this.assert(
            ~message.indexOf(errMsg)
          , 'expected #{this} to throw error including #{exp} but got #{act}'
          , 'expected #{this} to throw error not including #{act}'
          , errMsg
          , message
        );

        flag(this, 'object', err);
        return this;
      } else {
        thrown = true;
        thrownError = err;
      }
    }

    var actuallyGot = ''
      , expectedThrown = name !== null
        ? name
        : desiredError
          ? '#{exp}' //_.inspect(desiredError)
          : 'an error';

    if (thrown) {
      actuallyGot = ' but #{act} was thrown'
    }

    this.assert(
        thrown === true
      , 'expected #{this} to throw ' + expectedThrown + actuallyGot
      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot
      , (desiredError instanceof Error ? desiredError.toString() : desiredError)
      , (thrownError instanceof Error ? thrownError.toString() : thrownError)
    );

    flag(this, 'object', thrownError);
  };

  Assertion.addMethod('throw', assertThrows);
  Assertion.addMethod('throws', assertThrows);
  Assertion.addMethod('Throw', assertThrows);

  /**
   * ### .respondTo(method)
   *
   * Asserts that the object or class target will respond to a method.
   *
   *     Klass.prototype.bar = function(){};
   *     expect(Klass).to.respondTo('bar');
   *     expect(obj).to.respondTo('bar');
   *
   * To check if a constructor will respond to a static function,
   * set the `itself` flag.
   *
   *     Klass.baz = function(){};
   *     expect(Klass).itself.to.respondTo('baz');
   *
   * @name respondTo
   * @alias respondsTo
   * @param {String} method
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function respondTo (method, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , itself = flag(this, 'itself')
      , context = ('function' === _.type(obj) && !itself)
        ? obj.prototype[method]
        : obj[method];

    this.assert(
        'function' === typeof context
      , 'expected #{this} to respond to ' + _.inspect(method)
      , 'expected #{this} to not respond to ' + _.inspect(method)
    );
  }

  Assertion.addMethod('respondTo', respondTo);
  Assertion.addMethod('respondsTo', respondTo);

  /**
   * ### .itself
   *
   * Sets the `itself` flag, later used by the `respondTo` assertion.
   *
   *     function Foo() {}
   *     Foo.bar = function() {}
   *     Foo.prototype.baz = function() {}
   *
   *     expect(Foo).itself.to.respondTo('bar');
   *     expect(Foo).itself.not.to.respondTo('baz');
   *
   * @name itself
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('itself', function () {
    flag(this, 'itself', true);
  });

  /**
   * ### .satisfy(method)
   *
   * Asserts that the target passes a given truth test.
   *
   *     expect(1).to.satisfy(function(num) { return num > 0; });
   *
   * @name satisfy
   * @alias satisfies
   * @param {Function} matcher
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function satisfy (matcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var result = matcher(obj);
    this.assert(
        result
      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
      , this.negate ? false : true
      , result
    );
  }

  Assertion.addMethod('satisfy', satisfy);
  Assertion.addMethod('satisfies', satisfy);

  /**
   * ### .closeTo(expected, delta)
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     expect(1.5).to.be.closeTo(1, 0.5);
   *
   * @name closeTo
   * @alias approximately
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function closeTo(expected, delta, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    new Assertion(obj, msg).is.a('number');
    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {
      throw new Error('the arguments to closeTo or approximately must be numbers');
    }

    this.assert(
        Math.abs(obj - expected) <= delta
      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
    );
  }

  Assertion.addMethod('closeTo', closeTo);
  Assertion.addMethod('approximately', closeTo);

  function isSubsetOf(subset, superset, cmp) {
    return subset.every(function(elem) {
      if (!cmp) return superset.indexOf(elem) !== -1;

      return superset.some(function(elem2) {
        return cmp(elem, elem2);
      });
    })
  }

  /**
   * ### .members(set)
   *
   * Asserts that the target is a superset of `set`,
   * or that the target and `set` have the same strictly-equal (===) members.
   * Alternately, if the `deep` flag is set, set members are compared for deep
   * equality.
   *
   *     expect([1, 2, 3]).to.include.members([3, 2]);
   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);
   *
   *     expect([4, 2]).to.have.members([2, 4]);
   *     expect([5, 2]).to.not.have.members([5, 2, 1]);
   *
   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);
   *
   * @name members
   * @param {Array} set
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('members', function (subset, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    new Assertion(obj).to.be.an('array');
    new Assertion(subset).to.be.an('array');

    var cmp = flag(this, 'deep') ? _.eql : undefined;

    if (flag(this, 'contains')) {
      return this.assert(
          isSubsetOf(subset, obj, cmp)
        , 'expected #{this} to be a superset of #{act}'
        , 'expected #{this} to not be a superset of #{act}'
        , obj
        , subset
      );
    }

    this.assert(
        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)
        , 'expected #{this} to have the same members as #{act}'
        , 'expected #{this} to not have the same members as #{act}'
        , obj
        , subset
    );
  });

  /**
   * ### .oneOf(list)
   *
   * Assert that a value appears somewhere in the top level of array `list`.
   *
   *     expect('a').to.be.oneOf(['a', 'b', 'c']);
   *     expect(9).to.not.be.oneOf(['z']);
   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);
   *
   *     var three = [3];
   *     // for object-types, contents are not compared
   *     expect(three).to.not.be.oneOf([1, 2, [3]]);
   *     // comparing references works
   *     expect(three).to.be.oneOf([1, 2, three]);
   *
   * @name oneOf
   * @param {Array<*>} list
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function oneOf (list, msg) {
    if (msg) flag(this, 'message', msg);
    var expected = flag(this, 'object');
    new Assertion(list).to.be.an('array');

    this.assert(
        list.indexOf(expected) > -1
      , 'expected #{this} to be one of #{exp}'
      , 'expected #{this} to not be one of #{exp}'
      , list
      , expected
    );
  }

  Assertion.addMethod('oneOf', oneOf);


  /**
   * ### .change(function)
   *
   * Asserts that a function changes an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 3 };
   *     var noChangeFn = function() { return 'foo' + 'bar'; }
   *     expect(fn).to.change(obj, 'val');
   *     expect(noChangeFn).to.not.change(obj, 'val')
   *
   * @name change
   * @alias changes
   * @alias Change
   * @param {String} object
   * @param {String} property name
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertChanges (object, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object');
    new Assertion(object, msg).to.have.property(prop);
    new Assertion(fn).is.a('function');

    var initial = object[prop];
    fn();

    this.assert(
      initial !== object[prop]
      , 'expected .' + prop + ' to change'
      , 'expected .' + prop + ' to not change'
    );
  }

  Assertion.addChainableMethod('change', assertChanges);
  Assertion.addChainableMethod('changes', assertChanges);

  /**
   * ### .increase(function)
   *
   * Asserts that a function increases an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     expect(fn).to.increase(obj, 'val');
   *
   * @name increase
   * @alias increases
   * @alias Increase
   * @param {String} object
   * @param {String} property name
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertIncreases (object, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object');
    new Assertion(object, msg).to.have.property(prop);
    new Assertion(fn).is.a('function');

    var initial = object[prop];
    fn();

    this.assert(
      object[prop] - initial > 0
      , 'expected .' + prop + ' to increase'
      , 'expected .' + prop + ' to not increase'
    );
  }

  Assertion.addChainableMethod('increase', assertIncreases);
  Assertion.addChainableMethod('increases', assertIncreases);

  /**
   * ### .decrease(function)
   *
   * Asserts that a function decreases an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     expect(fn).to.decrease(obj, 'val');
   *
   * @name decrease
   * @alias decreases
   * @alias Decrease
   * @param {String} object
   * @param {String} property name
   * @param {String} message _optional_
   * @namespace BDD
   * @api public
   */

  function assertDecreases (object, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object');
    new Assertion(object, msg).to.have.property(prop);
    new Assertion(fn).is.a('function');

    var initial = object[prop];
    fn();

    this.assert(
      object[prop] - initial < 0
      , 'expected .' + prop + ' to decrease'
      , 'expected .' + prop + ' to not decrease'
    );
  }

  Assertion.addChainableMethod('decrease', assertDecreases);
  Assertion.addChainableMethod('decreases', assertDecreases);

  /**
   * ### .extensible
   *
   * Asserts that the target is extensible (can have new properties added to
   * it).
   *
   *     var nonExtensibleObject = Object.preventExtensions({});
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     expect({}).to.be.extensible;
   *     expect(nonExtensibleObject).to.not.be.extensible;
   *     expect(sealedObject).to.not.be.extensible;
   *     expect(frozenObject).to.not.be.extensible;
   *
   * @name extensible
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('extensible', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
    // The following provides ES6 behavior when a TypeError is thrown under ES5.

    var isExtensible;

    try {
      isExtensible = Object.isExtensible(obj);
    } catch (err) {
      if (err instanceof TypeError) isExtensible = false;
      else throw err;
    }

    this.assert(
      isExtensible
      , 'expected #{this} to be extensible'
      , 'expected #{this} to not be extensible'
    );
  });

  /**
   * ### .sealed
   *
   * Asserts that the target is sealed (cannot have new properties added to it
   * and its existing properties cannot be removed).
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     expect(sealedObject).to.be.sealed;
   *     expect(frozenObject).to.be.sealed;
   *     expect({}).to.not.be.sealed;
   *
   * @name sealed
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('sealed', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
    // The following provides ES6 behavior when a TypeError is thrown under ES5.

    var isSealed;

    try {
      isSealed = Object.isSealed(obj);
    } catch (err) {
      if (err instanceof TypeError) isSealed = true;
      else throw err;
    }

    this.assert(
      isSealed
      , 'expected #{this} to be sealed'
      , 'expected #{this} to not be sealed'
    );
  });

  /**
   * ### .frozen
   *
   * Asserts that the target is frozen (cannot have new properties added to it
   * and its existing properties cannot be modified).
   *
   *     var frozenObject = Object.freeze({});
   *
   *     expect(frozenObject).to.be.frozen;
   *     expect({}).to.not.be.frozen;
   *
   * @name frozen
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('frozen', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
    // The following provides ES6 behavior when a TypeError is thrown under ES5.

    var isFrozen;

    try {
      isFrozen = Object.isFrozen(obj);
    } catch (err) {
      if (err instanceof TypeError) isFrozen = true;
      else throw err;
    }

    this.assert(
      isFrozen
      , 'expected #{this} to be frozen'
      , 'expected #{this} to not be frozen'
    );
  });
};


/***/ }),
/* 52 */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  chai.expect = function (val, message) {
    return new chai.Assertion(val, message);
  };

  /**
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure.
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace Expect
   * @api public
   */

  chai.expect.fail = function (actual, expected, message, operator) {
    message = message || 'expect.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, chai.expect.fail);
  };
};


/***/ }),
/* 53 */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  var Assertion = chai.Assertion;

  function loadShould () {
    // explicitly define this method as function as to have it's name to include as `ssfi`
    function shouldGetter() {
      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {
        return new Assertion(this.valueOf(), null, shouldGetter);
      }
      return new Assertion(this, null, shouldGetter);
    }
    function shouldSetter(value) {
      // See https://github.com/chaijs/chai/issues/86: this makes
      // `whatever.should = someValue` actually set `someValue`, which is
      // especially useful for `global.should = require('chai').should()`.
      //
      // Note that we have to use [[DefineProperty]] instead of [[Put]]
      // since otherwise we would trigger this very setter!
      Object.defineProperty(this, 'should', {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    }
    // modify Object.prototype to have `should`
    Object.defineProperty(Object.prototype, 'should', {
      set: shouldSetter
      , get: shouldGetter
      , configurable: true
    });

    var should = {};

    /**
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure.
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @namespace Should
     * @api public
     */

    should.fail = function (actual, expected, message, operator) {
      message = message || 'should.fail()';
      throw new chai.AssertionError(message, {
          actual: actual
        , expected: expected
        , operator: operator
      }, should.fail);
    };

    /**
     * ### .equal(actual, expected, [message])
     *
     * Asserts non-strict equality (`==`) of `actual` and `expected`.
     *
     *     should.equal(3, '3', '== coerces values to strings');
     *
     * @name equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */

    should.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.equal(val2);
    };

    /**
     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])
     *
     * Asserts that `function` will throw an error that is an instance of
     * `constructor`, or alternately that it will throw an error with message
     * matching `regexp`.
     *
     *     should.throw(fn, 'function throws a reference error');
     *     should.throw(fn, /function throws a reference error/);
     *     should.throw(fn, ReferenceError);
     *     should.throw(fn, ReferenceError, 'function throws a reference error');
     *     should.throw(fn, ReferenceError, /function throws a reference error/);
     *
     * @name throw
     * @alias Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */

    should.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.Throw(errt, errs);
    };

    /**
     * ### .exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var foo = 'hi';
     *
     *     should.exist(foo, 'foo exists');
     *
     * @name exist
     * @namespace Should
     * @api public
     */

    should.exist = function (val, msg) {
      new Assertion(val, msg).to.exist;
    }

    // negation
    should.not = {}

    /**
     * ### .not.equal(actual, expected, [message])
     *
     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
     *
     *     should.not.equal(3, 4, 'these numbers are not equal');
     *
     * @name not.equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */

    should.not.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.not.equal(val2);
    };

    /**
     * ### .throw(function, [constructor/regexp], [message])
     *
     * Asserts that `function` will _not_ throw an error that is an instance of
     * `constructor`, or alternately that it will not throw an error with message
     * matching `regexp`.
     *
     *     should.not.throw(fn, Error, 'function does not throw');
     *
     * @name not.throw
     * @alias not.Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */

    should.not.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.not.Throw(errt, errs);
    };

    /**
     * ### .not.exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var bar = null;
     *
     *     should.not.exist(bar, 'bar does not exist');
     *
     * @name not.exist
     * @namespace Should
     * @api public
     */

    should.not.exist = function (val, msg) {
      new Assertion(val, msg).to.not.exist;
    }

    should['throw'] = should['Throw'];
    should.not['throw'] = should.not['Throw'];

    return should;
  };

  chai.should = loadShould;
  chai.Should = loadShould;
};


/***/ }),
/* 54 */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */


module.exports = function (chai, util) {

  /*!
   * Chai dependencies.
   */

  var Assertion = chai.Assertion
    , flag = util.flag;

  /*!
   * Module export.
   */

  /**
   * ### assert(expression, message)
   *
   * Write your own test expressions.
   *
   *     assert('foo' !== 'bar', 'foo is not bar');
   *     assert(Array.isArray([]), 'empty arrays are arrays');
   *
   * @param {Mixed} expression to test for truthiness
   * @param {String} message to display on error
   * @name assert
   * @namespace Assert
   * @api public
   */

  var assert = chai.assert = function (express, errmsg) {
    var test = new Assertion(null, null, chai.assert);
    test.assert(
        express
      , errmsg
      , '[ negation message unavailable ]'
    );
  };

  /**
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure. Node.js `assert` module-compatible.
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace Assert
   * @api public
   */

  assert.fail = function (actual, expected, message, operator) {
    message = message || 'assert.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, assert.fail);
  };

  /**
   * ### .isOk(object, [message])
   *
   * Asserts that `object` is truthy.
   *
   *     assert.isOk('everything', 'everything is ok');
   *     assert.isOk(false, 'this will fail');
   *
   * @name isOk
   * @alias ok
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isOk = function (val, msg) {
    new Assertion(val, msg).is.ok;
  };

  /**
   * ### .isNotOk(object, [message])
   *
   * Asserts that `object` is falsy.
   *
   *     assert.isNotOk('everything', 'this will fail');
   *     assert.isNotOk(false, 'this will pass');
   *
   * @name isNotOk
   * @alias notOk
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotOk = function (val, msg) {
    new Assertion(val, msg).is.not.ok;
  };

  /**
   * ### .equal(actual, expected, [message])
   *
   * Asserts non-strict equality (`==`) of `actual` and `expected`.
   *
   *     assert.equal(3, '3', '== coerces values to strings');
   *
   * @name equal
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.equal = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.equal);

    test.assert(
        exp == flag(test, 'object')
      , 'expected #{this} to equal #{exp}'
      , 'expected #{this} to not equal #{act}'
      , exp
      , act
    );
  };

  /**
   * ### .notEqual(actual, expected, [message])
   *
   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
   *
   *     assert.notEqual(3, 4, 'these numbers are not equal');
   *
   * @name notEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notEqual = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.notEqual);

    test.assert(
        exp != flag(test, 'object')
      , 'expected #{this} to not equal #{exp}'
      , 'expected #{this} to equal #{act}'
      , exp
      , act
    );
  };

  /**
   * ### .strictEqual(actual, expected, [message])
   *
   * Asserts strict equality (`===`) of `actual` and `expected`.
   *
   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
   *
   * @name strictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.strictEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.equal(exp);
  };

  /**
   * ### .notStrictEqual(actual, expected, [message])
   *
   * Asserts strict inequality (`!==`) of `actual` and `expected`.
   *
   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
   *
   * @name notStrictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.not.equal(exp);
  };

  /**
   * ### .deepEqual(actual, expected, [message])
   *
   * Asserts that `actual` is deeply equal to `expected`.
   *
   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
   *
   * @name deepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.eql(exp);
  };

  /**
   * ### .notDeepEqual(actual, expected, [message])
   *
   * Assert that `actual` is not deeply equal to `expected`.
   *
   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
   *
   * @name notDeepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.not.eql(exp);
  };

   /**
   * ### .isAbove(valueToCheck, valueToBeAbove, [message])
   *
   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`
   *
   *     assert.isAbove(5, 2, '5 is strictly greater than 2');
   *
   * @name isAbove
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAbove
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAbove = function (val, abv, msg) {
    new Assertion(val, msg).to.be.above(abv);
  };

   /**
   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])
   *
   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`
   *
   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');
   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');
   *
   * @name isAtLeast
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAtLeast
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAtLeast = function (val, atlst, msg) {
    new Assertion(val, msg).to.be.least(atlst);
  };

   /**
   * ### .isBelow(valueToCheck, valueToBeBelow, [message])
   *
   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`
   *
   *     assert.isBelow(3, 6, '3 is strictly less than 6');
   *
   * @name isBelow
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeBelow
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isBelow = function (val, blw, msg) {
    new Assertion(val, msg).to.be.below(blw);
  };

   /**
   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])
   *
   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`
   *
   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');
   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');
   *
   * @name isAtMost
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAtMost
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAtMost = function (val, atmst, msg) {
    new Assertion(val, msg).to.be.most(atmst);
  };

  /**
   * ### .isTrue(value, [message])
   *
   * Asserts that `value` is true.
   *
   *     var teaServed = true;
   *     assert.isTrue(teaServed, 'the tea has been served');
   *
   * @name isTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isTrue = function (val, msg) {
    new Assertion(val, msg).is['true'];
  };

  /**
   * ### .isNotTrue(value, [message])
   *
   * Asserts that `value` is not true.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotTrue(tea, 'great, time for tea!');
   *
   * @name isNotTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotTrue = function (val, msg) {
    new Assertion(val, msg).to.not.equal(true);
  };

  /**
   * ### .isFalse(value, [message])
   *
   * Asserts that `value` is false.
   *
   *     var teaServed = false;
   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
   *
   * @name isFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isFalse = function (val, msg) {
    new Assertion(val, msg).is['false'];
  };

  /**
   * ### .isNotFalse(value, [message])
   *
   * Asserts that `value` is not false.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotFalse(tea, 'great, time for tea!');
   *
   * @name isNotFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotFalse = function (val, msg) {
    new Assertion(val, msg).to.not.equal(false);
  };

  /**
   * ### .isNull(value, [message])
   *
   * Asserts that `value` is null.
   *
   *     assert.isNull(err, 'there was no error');
   *
   * @name isNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNull = function (val, msg) {
    new Assertion(val, msg).to.equal(null);
  };

  /**
   * ### .isNotNull(value, [message])
   *
   * Asserts that `value` is not null.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotNull(tea, 'great, time for tea!');
   *
   * @name isNotNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotNull = function (val, msg) {
    new Assertion(val, msg).to.not.equal(null);
  };

  /**
   * ### .isNaN
   * Asserts that value is NaN
   *
   *    assert.isNaN('foo', 'foo is NaN');
   *
   * @name isNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNaN = function (val, msg) {
    new Assertion(val, msg).to.be.NaN;
  };

  /**
   * ### .isNotNaN
   * Asserts that value is not NaN
   *
   *    assert.isNotNaN(4, '4 is not NaN');
   *
   * @name isNotNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */
  assert.isNotNaN = function (val, msg) {
    new Assertion(val, msg).not.to.be.NaN;
  };

  /**
   * ### .isUndefined(value, [message])
   *
   * Asserts that `value` is `undefined`.
   *
   *     var tea;
   *     assert.isUndefined(tea, 'no tea defined');
   *
   * @name isUndefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isUndefined = function (val, msg) {
    new Assertion(val, msg).to.equal(undefined);
  };

  /**
   * ### .isDefined(value, [message])
   *
   * Asserts that `value` is not `undefined`.
   *
   *     var tea = 'cup of chai';
   *     assert.isDefined(tea, 'tea has been defined');
   *
   * @name isDefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isDefined = function (val, msg) {
    new Assertion(val, msg).to.not.equal(undefined);
  };

  /**
   * ### .isFunction(value, [message])
   *
   * Asserts that `value` is a function.
   *
   *     function serveTea() { return 'cup of tea'; };
   *     assert.isFunction(serveTea, 'great, we can have tea now');
   *
   * @name isFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isFunction = function (val, msg) {
    new Assertion(val, msg).to.be.a('function');
  };

  /**
   * ### .isNotFunction(value, [message])
   *
   * Asserts that `value` is _not_ a function.
   *
   *     var serveTea = [ 'heat', 'pour', 'sip' ];
   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
   *
   * @name isNotFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotFunction = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('function');
  };

  /**
   * ### .isObject(value, [message])
   *
   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).
   * _The assertion does not match subclassed objects._
   *
   *     var selection = { name: 'Chai', serve: 'with spices' };
   *     assert.isObject(selection, 'tea selection is an object');
   *
   * @name isObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isObject = function (val, msg) {
    new Assertion(val, msg).to.be.a('object');
  };

  /**
   * ### .isNotObject(value, [message])
   *
   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).
   *
   *     var selection = 'chai'
   *     assert.isNotObject(selection, 'tea selection is not an object');
   *     assert.isNotObject(null, 'null is not an object');
   *
   * @name isNotObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotObject = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('object');
  };

  /**
   * ### .isArray(value, [message])
   *
   * Asserts that `value` is an array.
   *
   *     var menu = [ 'green', 'chai', 'oolong' ];
   *     assert.isArray(menu, 'what kind of tea do we want?');
   *
   * @name isArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isArray = function (val, msg) {
    new Assertion(val, msg).to.be.an('array');
  };

  /**
   * ### .isNotArray(value, [message])
   *
   * Asserts that `value` is _not_ an array.
   *
   *     var menu = 'green|chai|oolong';
   *     assert.isNotArray(menu, 'what kind of tea do we want?');
   *
   * @name isNotArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotArray = function (val, msg) {
    new Assertion(val, msg).to.not.be.an('array');
  };

  /**
   * ### .isString(value, [message])
   *
   * Asserts that `value` is a string.
   *
   *     var teaOrder = 'chai';
   *     assert.isString(teaOrder, 'order placed');
   *
   * @name isString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isString = function (val, msg) {
    new Assertion(val, msg).to.be.a('string');
  };

  /**
   * ### .isNotString(value, [message])
   *
   * Asserts that `value` is _not_ a string.
   *
   *     var teaOrder = 4;
   *     assert.isNotString(teaOrder, 'order placed');
   *
   * @name isNotString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotString = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('string');
  };

  /**
   * ### .isNumber(value, [message])
   *
   * Asserts that `value` is a number.
   *
   *     var cups = 2;
   *     assert.isNumber(cups, 'how many cups');
   *
   * @name isNumber
   * @param {Number} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNumber = function (val, msg) {
    new Assertion(val, msg).to.be.a('number');
  };

  /**
   * ### .isNotNumber(value, [message])
   *
   * Asserts that `value` is _not_ a number.
   *
   *     var cups = '2 cups please';
   *     assert.isNotNumber(cups, 'how many cups');
   *
   * @name isNotNumber
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotNumber = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('number');
  };

  /**
   * ### .isBoolean(value, [message])
   *
   * Asserts that `value` is a boolean.
   *
   *     var teaReady = true
   *       , teaServed = false;
   *
   *     assert.isBoolean(teaReady, 'is the tea ready');
   *     assert.isBoolean(teaServed, 'has tea been served');
   *
   * @name isBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isBoolean = function (val, msg) {
    new Assertion(val, msg).to.be.a('boolean');
  };

  /**
   * ### .isNotBoolean(value, [message])
   *
   * Asserts that `value` is _not_ a boolean.
   *
   *     var teaReady = 'yep'
   *       , teaServed = 'nope';
   *
   *     assert.isNotBoolean(teaReady, 'is the tea ready');
   *     assert.isNotBoolean(teaServed, 'has tea been served');
   *
   * @name isNotBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotBoolean = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('boolean');
  };

  /**
   * ### .typeOf(value, name, [message])
   *
   * Asserts that `value`'s type is `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
   *     assert.typeOf('tea', 'string', 'we have a string');
   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
   *     assert.typeOf(null, 'null', 'we have a null');
   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
   *
   * @name typeOf
   * @param {Mixed} value
   * @param {String} name
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.typeOf = function (val, type, msg) {
    new Assertion(val, msg).to.be.a(type);
  };

  /**
   * ### .notTypeOf(value, name, [message])
   *
   * Asserts that `value`'s type is _not_ `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
   *
   * @name notTypeOf
   * @param {Mixed} value
   * @param {String} typeof name
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notTypeOf = function (val, type, msg) {
    new Assertion(val, msg).to.not.be.a(type);
  };

  /**
   * ### .instanceOf(object, constructor, [message])
   *
   * Asserts that `value` is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new Tea('chai');
   *
   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
   *
   * @name instanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.instanceOf = function (val, type, msg) {
    new Assertion(val, msg).to.be.instanceOf(type);
  };

  /**
   * ### .notInstanceOf(object, constructor, [message])
   *
   * Asserts `value` is not an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new String('chai');
   *
   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
   *
   * @name notInstanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notInstanceOf = function (val, type, msg) {
    new Assertion(val, msg).to.not.be.instanceOf(type);
  };

  /**
   * ### .include(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Works
   * for strings and arrays.
   *
   *     assert.include('foobar', 'bar', 'foobar contains string "bar"');
   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');
   *
   * @name include
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.include = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.include).include(inc);
  };

  /**
   * ### .notInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Works
   * for strings and arrays.
   *
   *     assert.notInclude('foobar', 'baz', 'string not include substring');
   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');
   *
   * @name notInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notInclude).not.include(inc);
  };

  /**
   * ### .match(value, regexp, [message])
   *
   * Asserts that `value` matches the regular expression `regexp`.
   *
   *     assert.match('foobar', /^foo/, 'regexp matches');
   *
   * @name match
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.match = function (exp, re, msg) {
    new Assertion(exp, msg).to.match(re);
  };

  /**
   * ### .notMatch(value, regexp, [message])
   *
   * Asserts that `value` does not match the regular expression `regexp`.
   *
   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
   *
   * @name notMatch
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notMatch = function (exp, re, msg) {
    new Assertion(exp, msg).to.not.match(re);
  };

  /**
   * ### .property(object, property, [message])
   *
   * Asserts that `object` has a property named by `property`.
   *
   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
   *
   * @name property
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.property = function (obj, prop, msg) {
    new Assertion(obj, msg).to.have.property(prop);
  };

  /**
   * ### .notProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`.
   *
   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
   *
   * @name notProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.not.have.property(prop);
  };

  /**
   * ### .deepProperty(object, property, [message])
   *
   * Asserts that `object` has a property named by `property`, which can be a
   * string using dot- and bracket-notation for deep reference.
   *
   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');
   *
   * @name deepProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.have.deep.property(prop);
  };

  /**
   * ### .notDeepProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`, which
   * can be a string using dot- and bracket-notation for deep reference.
   *
   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
   *
   * @name notDeepProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.not.have.deep.property(prop);
  };

  /**
   * ### .propertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`.
   *
   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
   *
   * @name propertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.propertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.have.property(prop, val);
  };

  /**
   * ### .propertyNotVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property`, but with a value
   * different from that given by `value`.
   *
   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');
   *
   * @name propertyNotVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.propertyNotVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.not.have.property(prop, val);
  };

  /**
   * ### .deepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`. `property` can use dot- and bracket-notation for deep
   * reference.
   *
   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
   *
   * @name deepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.have.deep.property(prop, val);
  };

  /**
   * ### .deepPropertyNotVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property`, but with a value
   * different from that given by `value`. `property` can use dot- and
   * bracket-notation for deep reference.
   *
   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
   *
   * @name deepPropertyNotVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepPropertyNotVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.not.have.deep.property(prop, val);
  };

  /**
   * ### .lengthOf(object, length, [message])
   *
   * Asserts that `object` has a `length` property with the expected value.
   *
   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
   *     assert.lengthOf('foobar', 6, 'string has length of 6');
   *
   * @name lengthOf
   * @param {Mixed} object
   * @param {Number} length
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.lengthOf = function (exp, len, msg) {
    new Assertion(exp, msg).to.have.length(len);
  };

  /**
   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])
   *
   * Asserts that `function` will throw an error that is an instance of
   * `constructor`, or alternately that it will throw an error with message
   * matching `regexp`.
   *
   *     assert.throws(fn, 'function throws a reference error');
   *     assert.throws(fn, /function throws a reference error/);
   *     assert.throws(fn, ReferenceError);
   *     assert.throws(fn, ReferenceError, 'function throws a reference error');
   *     assert.throws(fn, ReferenceError, /function throws a reference error/);
   *
   * @name throws
   * @alias throw
   * @alias Throw
   * @param {Function} function
   * @param {ErrorConstructor} constructor
   * @param {RegExp} regexp
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */

  assert.throws = function (fn, errt, errs, msg) {
    if ('string' === typeof errt || errt instanceof RegExp) {
      errs = errt;
      errt = null;
    }

    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);
    return flag(assertErr, 'object');
  };

  /**
   * ### .doesNotThrow(function, [constructor/regexp], [message])
   *
   * Asserts that `function` will _not_ throw an error that is an instance of
   * `constructor`, or alternately that it will not throw an error with message
   * matching `regexp`.
   *
   *     assert.doesNotThrow(fn, Error, 'function does not throw');
   *
   * @name doesNotThrow
   * @param {Function} function
   * @param {ErrorConstructor} constructor
   * @param {RegExp} regexp
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */

  assert.doesNotThrow = function (fn, type, msg) {
    if ('string' === typeof type) {
      msg = type;
      type = null;
    }

    new Assertion(fn, msg).to.not.Throw(type);
  };

  /**
   * ### .operator(val1, operator, val2, [message])
   *
   * Compares two values using `operator`.
   *
   *     assert.operator(1, '<', 2, 'everything is ok');
   *     assert.operator(1, '>', 2, 'this will fail');
   *
   * @name operator
   * @param {Mixed} val1
   * @param {String} operator
   * @param {Mixed} val2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.operator = function (val, operator, val2, msg) {
    var ok;
    switch(operator) {
      case '==':
        ok = val == val2;
        break;
      case '===':
        ok = val === val2;
        break;
      case '>':
        ok = val > val2;
        break;
      case '>=':
        ok = val >= val2;
        break;
      case '<':
        ok = val < val2;
        break;
      case '<=':
        ok = val <= val2;
        break;
      case '!=':
        ok = val != val2;
        break;
      case '!==':
        ok = val !== val2;
        break;
      default:
        throw new Error('Invalid operator "' + operator + '"');
    }
    var test = new Assertion(ok, msg);
    test.assert(
        true === flag(test, 'object')
      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
  };

  /**
   * ### .closeTo(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
   *
   * @name closeTo
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.closeTo = function (act, exp, delta, msg) {
    new Assertion(act, msg).to.be.closeTo(exp, delta);
  };

  /**
   * ### .approximately(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');
   *
   * @name approximately
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.approximately = function (act, exp, delta, msg) {
    new Assertion(act, msg).to.be.approximately(exp, delta);
  };

  /**
   * ### .sameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members.
   * Order is not taken into account.
   *
   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
   *
   * @name sameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg).to.have.same.members(set2);
  }

  /**
   * ### .sameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.
   * Order is not taken into account.
   *
   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');
   *
   * @name sameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg).to.have.same.deep.members(set2);
  }

  /**
   * ### .includeMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset`.
   * Order is not taken into account.
   *
   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');
   *
   * @name includeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg).to.include.members(subset);
  }

  /**
   * ### .includeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` - using deep equality checking.
   * Order is not taken into account.
   * Duplicates are ignored.
   *
   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');
   *
   * @name includeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeDeepMembers = function (superset, subset, msg) {
    new Assertion(superset, msg).to.include.deep.members(subset);
  }

  /**
   * ### .oneOf(inList, list, [message])
   *
   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.
   *
   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');
   *
   * @name oneOf
   * @param {*} inList
   * @param {Array<*>} list
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.oneOf = function (inList, list, msg) {
    new Assertion(inList, msg).to.be.oneOf(list);
  }

   /**
   * ### .changes(function, object, property)
   *
   * Asserts that a function changes the value of a property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 22 };
   *     assert.changes(fn, obj, 'val');
   *
   * @name changes
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.changes = function (fn, obj, prop) {
    new Assertion(fn).to.change(obj, prop);
  }

   /**
   * ### .doesNotChange(function, object, property)
   *
   * Asserts that a function does not changes the value of a property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { console.log('foo'); };
   *     assert.doesNotChange(fn, obj, 'val');
   *
   * @name doesNotChange
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotChange = function (fn, obj, prop) {
    new Assertion(fn).to.not.change(obj, prop);
  }

   /**
   * ### .increases(function, object, property)
   *
   * Asserts that a function increases an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 13 };
   *     assert.increases(fn, obj, 'val');
   *
   * @name increases
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.increases = function (fn, obj, prop) {
    new Assertion(fn).to.increase(obj, prop);
  }

   /**
   * ### .doesNotIncrease(function, object, property)
   *
   * Asserts that a function does not increase object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 8 };
   *     assert.doesNotIncrease(fn, obj, 'val');
   *
   * @name doesNotIncrease
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotIncrease = function (fn, obj, prop) {
    new Assertion(fn).to.not.increase(obj, prop);
  }

   /**
   * ### .decreases(function, object, property)
   *
   * Asserts that a function decreases an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreases(fn, obj, 'val');
   *
   * @name decreases
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.decreases = function (fn, obj, prop) {
    new Assertion(fn).to.decrease(obj, prop);
  }

   /**
   * ### .doesNotDecrease(function, object, property)
   *
   * Asserts that a function does not decreases an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.doesNotDecrease(fn, obj, 'val');
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotDecrease = function (fn, obj, prop) {
    new Assertion(fn).to.not.decrease(obj, prop);
  }

  /*!
   * ### .ifError(object)
   *
   * Asserts if value is not a false value, and throws if it is a true value.
   * This is added to allow for chai to be a drop-in replacement for Node's
   * assert class.
   *
   *     var err = new Error('I am a custom error');
   *     assert.ifError(err); // Rethrows err!
   *
   * @name ifError
   * @param {Object} object
   * @namespace Assert
   * @api public
   */

  assert.ifError = function (val) {
    if (val) {
      throw(val);
    }
  };

  /**
   * ### .isExtensible(object)
   *
   * Asserts that `object` is extensible (can have new properties added to it).
   *
   *     assert.isExtensible({});
   *
   * @name isExtensible
   * @alias extensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isExtensible = function (obj, msg) {
    new Assertion(obj, msg).to.be.extensible;
  };

  /**
   * ### .isNotExtensible(object)
   *
   * Asserts that `object` is _not_ extensible.
   *
   *     var nonExtensibleObject = Object.preventExtensions({});
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freese({});
   *
   *     assert.isNotExtensible(nonExtensibleObject);
   *     assert.isNotExtensible(sealedObject);
   *     assert.isNotExtensible(frozenObject);
   *
   * @name isNotExtensible
   * @alias notExtensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotExtensible = function (obj, msg) {
    new Assertion(obj, msg).to.not.be.extensible;
  };

  /**
   * ### .isSealed(object)
   *
   * Asserts that `object` is sealed (cannot have new properties added to it
   * and its existing properties cannot be removed).
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.seal({});
   *
   *     assert.isSealed(sealedObject);
   *     assert.isSealed(frozenObject);
   *
   * @name isSealed
   * @alias sealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isSealed = function (obj, msg) {
    new Assertion(obj, msg).to.be.sealed;
  };

  /**
   * ### .isNotSealed(object)
   *
   * Asserts that `object` is _not_ sealed.
   *
   *     assert.isNotSealed({});
   *
   * @name isNotSealed
   * @alias notSealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotSealed = function (obj, msg) {
    new Assertion(obj, msg).to.not.be.sealed;
  };

  /**
   * ### .isFrozen(object)
   *
   * Asserts that `object` is frozen (cannot have new properties added to it
   * and its existing properties cannot be modified).
   *
   *     var frozenObject = Object.freeze({});
   *     assert.frozen(frozenObject);
   *
   * @name isFrozen
   * @alias frozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isFrozen = function (obj, msg) {
    new Assertion(obj, msg).to.be.frozen;
  };

  /**
   * ### .isNotFrozen(object)
   *
   * Asserts that `object` is _not_ frozen.
   *
   *     assert.isNotFrozen({});
   *
   * @name isNotFrozen
   * @alias notFrozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotFrozen = function (obj, msg) {
    new Assertion(obj, msg).to.not.be.frozen;
  };

  /*!
   * Aliases.
   */

  (function alias(name, as){
    assert[as] = assert[name];
    return alias;
  })
  ('isOk', 'ok')
  ('isNotOk', 'notOk')
  ('throws', 'throw')
  ('throws', 'Throw')
  ('isExtensible', 'extensible')
  ('isNotExtensible', 'notExtensible')
  ('isSealed', 'sealed')
  ('isNotSealed', 'notSealed')
  ('isFrozen', 'frozen')
  ('isNotFrozen', 'notFrozen');
};


/***/ }),
/* 55 */
/***/ (function(module, exports) {



/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = ["LICENSE","api.tests.js","assignment-expressions.tests.js","ast-parser.js","async.tests.js","auto.list","binary-expression.tests.js","eval.tests.js","function.tests.js","if.tests.js","import.tests.js","json.tests.js","label-statement.tests.js","logical-expressions.tests.js","loop-expressions.tests.js","proto.tests.js","scope.tests.js","sequence-expression.tests.js","switch.tests.js","test-runner.js","try-statement.tests.js","type-array.tests.js","type-number.tests.js","type-object.tests.js","type-regex.tests.js","type-string.tests.js","unary-expressions.tests.js","update-expression.tests.js","var.tests.js","with-statement.tests.js"]

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./api.tests.js": 58,
	"./assignment-expressions.tests.js": 61,
	"./ast-parser.js": 59,
	"./async.tests.js": 297,
	"./binary-expression.tests.js": 298,
	"./eval.tests.js": 299,
	"./function.tests.js": 300,
	"./if.tests.js": 301,
	"./import.tests.js": 302,
	"./json.tests.js": 303,
	"./label-statement.tests.js": 304,
	"./logical-expressions.tests.js": 305,
	"./loop-expressions.tests.js": 306,
	"./proto.tests.js": 307,
	"./scope.tests.js": 308,
	"./sequence-expression.tests.js": 309,
	"./switch.tests.js": 310,
	"./test-runner.js": 62,
	"./try-statement.tests.js": 311,
	"./type-array.tests.js": 312,
	"./type-number.tests.js": 313,
	"./type-object.tests.js": 314,
	"./type-regex.tests.js": 315,
	"./type-string.tests.js": 316,
	"./unary-expressions.tests.js": 317,
	"./update-expression.tests.js": 318,
	"./var.tests.js": 319,
	"./with-statement.tests.js": 320
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 57;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _chai = __webpack_require__(15);

var _astParser = __webpack_require__(59);

var parser = _interopRequireWildcard(_astParser);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe("API", function () {
	it("should allow a variable to be defined", function () {
		var env = SandBoxr.createEnvironment();
		env.init();

		var a = env.createVariable("a");
		a.setValue(env.objectFactory.createPrimitive(99));

		var ast = parser.parse("a === 99;");
		var sandbox = SandBoxr.create(ast);
		var result = sandbox.execute(env);

		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should allow an object to be defined", function () {
		var env = SandBoxr.createEnvironment();
		env.init();

		var obj = env.objectFactory.createObject();
		obj.defineProperty("foo", { value: env.objectFactory.createPrimitive(99) });

		var a = env.createVariable("a");
		a.setValue(obj);

		var ast = parser.parse("a.foo === 99;");
		var sandbox = SandBoxr.create(ast);
		var result = sandbox.execute(env);

		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should allow function to be removed", function () {
		var env = SandBoxr.createEnvironment();
		env.init();

		env.getValue("String").getValue("prototype").remove("trim");

		var ast = parser.parse("typeof String.prototype.trim === 'undefined';");
		var sandbox = SandBoxr.create(ast);
		var result = sandbox.execute(env);

		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should allow functions to be added", function () {
		var env = SandBoxr.createEnvironment();
		env.init();

		env.getValue("String").define("concat", env.objectFactory.createFunction(function () {
			var stringValue = "";
			for (var i = 0, ln = arguments.length; i < ln; i++) {
				stringValue += arguments[i].value;
			}

			return env.objectFactory.createPrimitive(stringValue);
		}, null));

		var ast = parser.parse("String.concat('foo','bar')==='foobar';");
		var sandbox = SandBoxr.create(ast);
		var result = sandbox.execute(env);

		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should keep variables and values if environment is reused", function () {
		var env = SandBoxr.createEnvironment();
		env.init();

		var a = env.createVariable("a");
		a.setValue(env.objectFactory.createPrimitive(99));

		var ast = parser.parse("a++;");
		var sandbox = SandBoxr.create(ast);

		sandbox.execute(env);

		ast = parser.parse("a===100;");
		sandbox = SandBoxr.create(ast);
		var result = sandbox.execute(env);

		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should lose variables and values if environment is reinitialized", function () {
		var env = SandBoxr.createEnvironment();
		env.init();

		var a = env.createVariable("a");
		a.setValue(env.objectFactory.createPrimitive(99));

		var ast = parser.parse("a++;");
		var sandbox = SandBoxr.create(ast);
		sandbox.execute(env);

		env.init();
		ast = parser.parse("typeof a === 'undefined';");
		sandbox = SandBoxr.create(ast);
		var result = sandbox.execute(env);

		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should allow an object to be converted to a native object", function () {
		var ast = parser.parse("({foo:true});");
		var sandbox = SandBoxr.create(ast);
		var result = sandbox.execute();

		(0, _chai.expect)(result.toNative().foo).to.be.true;
	});

	it("should allow a primitive to be toNativeped", function () {
		var ast = parser.parse("(1);");
		var sandbox = SandBoxr.create(ast);
		var result = sandbox.execute();

		(0, _chai.expect)(result.toNative()).to.equal(1);
	});

	it("should allow an array to be toNativeped", function () {
		var ast = parser.parse("([1,2,3]);");
		var sandbox = SandBoxr.create(ast);
		var result = sandbox.execute();

		(0, _chai.expect)(result.toNative()[2]).to.equal(3);
	});

	describe("Exclusions", function () {
		it("should be able to exclude api's", function () {
			var ast = parser.parse("typeof JSON === 'undefined'");
			var sandbox = SandBoxr.create(ast, { exclude: ["JSON"] });
			var result = sandbox.execute();

			(0, _chai.expect)(result.value).to.be.true;
		});

		it("should be able to exclude methods from prototype", function () {
			var ast = parser.parse("typeof String.prototype.trim === 'undefined'");
			var sandbox = SandBoxr.create(ast, { exclude: ["String.prototype.trim"] });
			var result = sandbox.execute();

			(0, _chai.expect)(result.value).to.be.true;
		});

		it("should not throw if api does not exist", function () {
			var ast = parser.parse("(1)");
			SandBoxr.create(ast, { exclude: "String.foo.bar" });
		});
	});

	describe("Operators", function () {
		it("should be able to replace an operators", function () {
			var env = SandBoxr.createEnvironment();
			env.init({
				operators: {
					coerciveEquals: function coerciveEquals(a, b) {
						if (a.isPrimitive && b.isPrimitive) {
							return a.value === b.value;
						}

						if (a.isPrimitive || b.isPrimitive) {
							return false;
						}

						return a === b;
					}
				}
			});

			var ast = parser.parse("0 == '0'");
			var sandbox = SandBoxr.create(ast);

			var result = sandbox.execute(env);
			(0, _chai.expect)(result.value).to.be.false;

			ast = parser.parse("0 != '0'");
			sandbox = SandBoxr.create(ast);

			result = sandbox.execute(env);
			(0, _chai.expect)(result.value).to.be.true;
		});
	});

	describe("Imports", function () {
		it("should allow an ast to be imported", function () {
			var importAst = parser.parse("var a = 2");

			var ast = parser.parse("a==2;");
			var sandbox = SandBoxr.create(ast, { imports: [{ ast: importAst }] });

			var result = sandbox.execute();
			(0, _chai.expect)(result.value).to.be.true;
		});

		it("should allow text code to be passed if a parser is defined", function () {
			var ast = parser.parse("a==2;");
			var sandbox = SandBoxr.create(ast, { parser: parser.parse, imports: [{ code: "var a = 2;" }] });

			var result = sandbox.execute();
			(0, _chai.expect)(result.value).to.be.true;
		});
	});
});

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(60);

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
/* istanbul ignore next */
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/* istanbul ignore if */
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/*
	  Copyright JS Foundation and other contributors, https://js.foundation/

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	"use strict";
	var comment_handler_1 = __webpack_require__(1);
	var parser_1 = __webpack_require__(3);
	var jsx_parser_1 = __webpack_require__(11);
	var tokenizer_1 = __webpack_require__(15);
	function parse(code, options, delegate) {
	    var commentHandler = null;
	    var proxyDelegate = function (node, metadata) {
	        if (delegate) {
	            delegate(node, metadata);
	        }
	        if (commentHandler) {
	            commentHandler.visit(node, metadata);
	        }
	    };
	    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;
	    var collectComment = false;
	    if (options) {
	        collectComment = (typeof options.comment === 'boolean' && options.comment);
	        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);
	        if (collectComment || attachComment) {
	            commentHandler = new comment_handler_1.CommentHandler();
	            commentHandler.attach = attachComment;
	            options.comment = true;
	            parserDelegate = proxyDelegate;
	        }
	    }
	    var parser;
	    if (options && typeof options.jsx === 'boolean' && options.jsx) {
	        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
	    }
	    else {
	        parser = new parser_1.Parser(code, options, parserDelegate);
	    }
	    var ast = (parser.parseProgram());
	    if (collectComment) {
	        ast.comments = commentHandler.comments;
	    }
	    if (parser.config.tokens) {
	        ast.tokens = parser.tokens;
	    }
	    if (parser.config.tolerant) {
	        ast.errors = parser.errorHandler.errors;
	    }
	    return ast;
	}
	exports.parse = parse;
	function tokenize(code, options, delegate) {
	    var tokenizer = new tokenizer_1.Tokenizer(code, options);
	    var tokens;
	    tokens = [];
	    try {
	        while (true) {
	            var token = tokenizer.getNextToken();
	            if (!token) {
	                break;
	            }
	            if (delegate) {
	                token = delegate(token);
	            }
	            tokens.push(token);
	        }
	    }
	    catch (e) {
	        tokenizer.errorHandler.tolerate(e);
	    }
	    if (tokenizer.errorHandler.tolerant) {
	        tokens.errors = tokenizer.errors();
	    }
	    return tokens;
	}
	exports.tokenize = tokenize;
	var syntax_1 = __webpack_require__(2);
	exports.Syntax = syntax_1.Syntax;
	// Sync with *.json manifests.
	exports.version = '3.1.3';


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var syntax_1 = __webpack_require__(2);
	var CommentHandler = (function () {
	    function CommentHandler() {
	        this.attach = false;
	        this.comments = [];
	        this.stack = [];
	        this.leading = [];
	        this.trailing = [];
	    }
	    CommentHandler.prototype.insertInnerComments = function (node, metadata) {
	        //  innnerComments for properties empty block
	        //  `function a() {/** comments **\/}`
	        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
	            var innerComments = [];
	            for (var i = this.leading.length - 1; i >= 0; --i) {
	                var entry = this.leading[i];
	                if (metadata.end.offset >= entry.start) {
	                    innerComments.unshift(entry.comment);
	                    this.leading.splice(i, 1);
	                    this.trailing.splice(i, 1);
	                }
	            }
	            if (innerComments.length) {
	                node.innerComments = innerComments;
	            }
	        }
	    };
	    CommentHandler.prototype.findTrailingComments = function (node, metadata) {
	        var trailingComments = [];
	        if (this.trailing.length > 0) {
	            for (var i = this.trailing.length - 1; i >= 0; --i) {
	                var entry_1 = this.trailing[i];
	                if (entry_1.start >= metadata.end.offset) {
	                    trailingComments.unshift(entry_1.comment);
	                }
	            }
	            this.trailing.length = 0;
	            return trailingComments;
	        }
	        var entry = this.stack[this.stack.length - 1];
	        if (entry && entry.node.trailingComments) {
	            var firstComment = entry.node.trailingComments[0];
	            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
	                trailingComments = entry.node.trailingComments;
	                delete entry.node.trailingComments;
	            }
	        }
	        return trailingComments;
	    };
	    CommentHandler.prototype.findLeadingComments = function (node, metadata) {
	        var leadingComments = [];
	        var target;
	        while (this.stack.length > 0) {
	            var entry = this.stack[this.stack.length - 1];
	            if (entry && entry.start >= metadata.start.offset) {
	                target = this.stack.pop().node;
	            }
	            else {
	                break;
	            }
	        }
	        if (target) {
	            var count = target.leadingComments ? target.leadingComments.length : 0;
	            for (var i = count - 1; i >= 0; --i) {
	                var comment = target.leadingComments[i];
	                if (comment.range[1] <= metadata.start.offset) {
	                    leadingComments.unshift(comment);
	                    target.leadingComments.splice(i, 1);
	                }
	            }
	            if (target.leadingComments && target.leadingComments.length === 0) {
	                delete target.leadingComments;
	            }
	            return leadingComments;
	        }
	        for (var i = this.leading.length - 1; i >= 0; --i) {
	            var entry = this.leading[i];
	            if (entry.start <= metadata.start.offset) {
	                leadingComments.unshift(entry.comment);
	                this.leading.splice(i, 1);
	            }
	        }
	        return leadingComments;
	    };
	    CommentHandler.prototype.visitNode = function (node, metadata) {
	        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
	            return;
	        }
	        this.insertInnerComments(node, metadata);
	        var trailingComments = this.findTrailingComments(node, metadata);
	        var leadingComments = this.findLeadingComments(node, metadata);
	        if (leadingComments.length > 0) {
	            node.leadingComments = leadingComments;
	        }
	        if (trailingComments.length > 0) {
	            node.trailingComments = trailingComments;
	        }
	        this.stack.push({
	            node: node,
	            start: metadata.start.offset
	        });
	    };
	    CommentHandler.prototype.visitComment = function (node, metadata) {
	        var type = (node.type[0] === 'L') ? 'Line' : 'Block';
	        var comment = {
	            type: type,
	            value: node.value
	        };
	        if (node.range) {
	            comment.range = node.range;
	        }
	        if (node.loc) {
	            comment.loc = node.loc;
	        }
	        this.comments.push(comment);
	        if (this.attach) {
	            var entry = {
	                comment: {
	                    type: type,
	                    value: node.value,
	                    range: [metadata.start.offset, metadata.end.offset]
	                },
	                start: metadata.start.offset
	            };
	            if (node.loc) {
	                entry.comment.loc = node.loc;
	            }
	            node.type = type;
	            this.leading.push(entry);
	            this.trailing.push(entry);
	        }
	    };
	    CommentHandler.prototype.visit = function (node, metadata) {
	        if (node.type === 'LineComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (node.type === 'BlockComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (this.attach) {
	            this.visitNode(node, metadata);
	        }
	    };
	    return CommentHandler;
	}());
	exports.CommentHandler = CommentHandler;


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	exports.Syntax = {
	    AssignmentExpression: 'AssignmentExpression',
	    AssignmentPattern: 'AssignmentPattern',
	    ArrayExpression: 'ArrayExpression',
	    ArrayPattern: 'ArrayPattern',
	    ArrowFunctionExpression: 'ArrowFunctionExpression',
	    BlockStatement: 'BlockStatement',
	    BinaryExpression: 'BinaryExpression',
	    BreakStatement: 'BreakStatement',
	    CallExpression: 'CallExpression',
	    CatchClause: 'CatchClause',
	    ClassBody: 'ClassBody',
	    ClassDeclaration: 'ClassDeclaration',
	    ClassExpression: 'ClassExpression',
	    ConditionalExpression: 'ConditionalExpression',
	    ContinueStatement: 'ContinueStatement',
	    DoWhileStatement: 'DoWhileStatement',
	    DebuggerStatement: 'DebuggerStatement',
	    EmptyStatement: 'EmptyStatement',
	    ExportAllDeclaration: 'ExportAllDeclaration',
	    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
	    ExportNamedDeclaration: 'ExportNamedDeclaration',
	    ExportSpecifier: 'ExportSpecifier',
	    ExpressionStatement: 'ExpressionStatement',
	    ForStatement: 'ForStatement',
	    ForOfStatement: 'ForOfStatement',
	    ForInStatement: 'ForInStatement',
	    FunctionDeclaration: 'FunctionDeclaration',
	    FunctionExpression: 'FunctionExpression',
	    Identifier: 'Identifier',
	    IfStatement: 'IfStatement',
	    ImportDeclaration: 'ImportDeclaration',
	    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	    ImportSpecifier: 'ImportSpecifier',
	    Literal: 'Literal',
	    LabeledStatement: 'LabeledStatement',
	    LogicalExpression: 'LogicalExpression',
	    MemberExpression: 'MemberExpression',
	    MetaProperty: 'MetaProperty',
	    MethodDefinition: 'MethodDefinition',
	    NewExpression: 'NewExpression',
	    ObjectExpression: 'ObjectExpression',
	    ObjectPattern: 'ObjectPattern',
	    Program: 'Program',
	    Property: 'Property',
	    RestElement: 'RestElement',
	    ReturnStatement: 'ReturnStatement',
	    SequenceExpression: 'SequenceExpression',
	    SpreadElement: 'SpreadElement',
	    Super: 'Super',
	    SwitchCase: 'SwitchCase',
	    SwitchStatement: 'SwitchStatement',
	    TaggedTemplateExpression: 'TaggedTemplateExpression',
	    TemplateElement: 'TemplateElement',
	    TemplateLiteral: 'TemplateLiteral',
	    ThisExpression: 'ThisExpression',
	    ThrowStatement: 'ThrowStatement',
	    TryStatement: 'TryStatement',
	    UnaryExpression: 'UnaryExpression',
	    UpdateExpression: 'UpdateExpression',
	    VariableDeclaration: 'VariableDeclaration',
	    VariableDeclarator: 'VariableDeclarator',
	    WhileStatement: 'WhileStatement',
	    WithStatement: 'WithStatement',
	    YieldExpression: 'YieldExpression'
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var assert_1 = __webpack_require__(4);
	var messages_1 = __webpack_require__(5);
	var error_handler_1 = __webpack_require__(6);
	var token_1 = __webpack_require__(7);
	var scanner_1 = __webpack_require__(8);
	var syntax_1 = __webpack_require__(2);
	var Node = __webpack_require__(10);
	var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
	var Parser = (function () {
	    function Parser(code, options, delegate) {
	        if (options === void 0) { options = {}; }
	        this.config = {
	            range: (typeof options.range === 'boolean') && options.range,
	            loc: (typeof options.loc === 'boolean') && options.loc,
	            source: null,
	            tokens: (typeof options.tokens === 'boolean') && options.tokens,
	            comment: (typeof options.comment === 'boolean') && options.comment,
	            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant
	        };
	        if (this.config.loc && options.source && options.source !== null) {
	            this.config.source = String(options.source);
	        }
	        this.delegate = delegate;
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = this.config.tolerant;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = this.config.comment;
	        this.operatorPrecedence = {
	            ')': 0,
	            ';': 0,
	            ',': 0,
	            '=': 0,
	            ']': 0,
	            '||': 1,
	            '&&': 2,
	            '|': 3,
	            '^': 4,
	            '&': 5,
	            '==': 6,
	            '!=': 6,
	            '===': 6,
	            '!==': 6,
	            '<': 7,
	            '>': 7,
	            '<=': 7,
	            '>=': 7,
	            '<<': 8,
	            '>>': 8,
	            '>>>': 8,
	            '+': 9,
	            '-': 9,
	            '*': 11,
	            '/': 11,
	            '%': 11
	        };
	        this.sourceType = (options && options.sourceType === 'module') ? 'module' : 'script';
	        this.lookahead = null;
	        this.hasLineTerminator = false;
	        this.context = {
	            allowIn: true,
	            allowYield: true,
	            firstCoverInitializedNameError: null,
	            isAssignmentTarget: false,
	            isBindingElement: false,
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            labelSet: {},
	            strict: (this.sourceType === 'module')
	        };
	        this.tokens = [];
	        this.startMarker = {
	            index: 0,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: 0
	        };
	        this.lastMarker = {
	            index: 0,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: 0
	        };
	        this.nextToken();
	        this.lastMarker = {
	            index: this.scanner.index,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: this.scanner.lineStart
	        };
	    }
	    Parser.prototype.throwError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.lastMarker.lineNumber;
	        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;
	        throw this.errorHandler.createError(index, line, column, msg);
	    };
	    Parser.prototype.tolerateError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.scanner.lineNumber;
	        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;
	        this.errorHandler.tolerateError(index, line, column, msg);
	    };
	    // Throw an exception because of the token.
	    Parser.prototype.unexpectedTokenError = function (token, message) {
	        var msg = message || messages_1.Messages.UnexpectedToken;
	        var value;
	        if (token) {
	            if (!message) {
	                msg = (token.type === token_1.Token.EOF) ? messages_1.Messages.UnexpectedEOS :
	                    (token.type === token_1.Token.Identifier) ? messages_1.Messages.UnexpectedIdentifier :
	                        (token.type === token_1.Token.NumericLiteral) ? messages_1.Messages.UnexpectedNumber :
	                            (token.type === token_1.Token.StringLiteral) ? messages_1.Messages.UnexpectedString :
	                                (token.type === token_1.Token.Template) ? messages_1.Messages.UnexpectedTemplate :
	                                    messages_1.Messages.UnexpectedToken;
	                if (token.type === token_1.Token.Keyword) {
	                    if (this.scanner.isFutureReservedWord(token.value)) {
	                        msg = messages_1.Messages.UnexpectedReserved;
	                    }
	                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
	                        msg = messages_1.Messages.StrictReservedWord;
	                    }
	                }
	            }
	            value = (token.type === token_1.Token.Template) ? token.value.raw : token.value;
	        }
	        else {
	            value = 'ILLEGAL';
	        }
	        msg = msg.replace('%0', value);
	        if (token && typeof token.lineNumber === 'number') {
	            var index = token.start;
	            var line = token.lineNumber;
	            var column = token.start - this.lastMarker.lineStart + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	        else {
	            var index = this.lastMarker.index;
	            var line = this.lastMarker.lineNumber;
	            var column = index - this.lastMarker.lineStart + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	    };
	    Parser.prototype.throwUnexpectedToken = function (token, message) {
	        throw this.unexpectedTokenError(token, message);
	    };
	    Parser.prototype.tolerateUnexpectedToken = function (token, message) {
	        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
	    };
	    Parser.prototype.collectComments = function () {
	        if (!this.config.comment) {
	            this.scanner.scanComments();
	        }
	        else {
	            var comments = this.scanner.scanComments();
	            if (comments.length > 0 && this.delegate) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var node = void 0;
	                    node = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: this.scanner.source.slice(e.slice[0], e.slice[1])
	                    };
	                    if (this.config.range) {
	                        node.range = e.range;
	                    }
	                    if (this.config.loc) {
	                        node.loc = e.loc;
	                    }
	                    var metadata = {
	                        start: {
	                            line: e.loc.start.line,
	                            column: e.loc.start.column,
	                            offset: e.range[0]
	                        },
	                        end: {
	                            line: e.loc.end.line,
	                            column: e.loc.end.column,
	                            offset: e.range[1]
	                        }
	                    };
	                    this.delegate(node, metadata);
	                }
	            }
	        }
	    };
	    // From internal representation to an external structure
	    Parser.prototype.getTokenRaw = function (token) {
	        return this.scanner.source.slice(token.start, token.end);
	    };
	    Parser.prototype.convertToken = function (token) {
	        var t;
	        t = {
	            type: token_1.TokenName[token.type],
	            value: this.getTokenRaw(token)
	        };
	        if (this.config.range) {
	            t.range = [token.start, token.end];
	        }
	        if (this.config.loc) {
	            t.loc = {
	                start: {
	                    line: this.startMarker.lineNumber,
	                    column: this.startMarker.index - this.startMarker.lineStart
	                },
	                end: {
	                    line: this.scanner.lineNumber,
	                    column: this.scanner.index - this.scanner.lineStart
	                }
	            };
	        }
	        if (token.regex) {
	            t.regex = token.regex;
	        }
	        return t;
	    };
	    Parser.prototype.nextToken = function () {
	        var token = this.lookahead;
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.lineNumber = this.scanner.lineNumber;
	        this.lastMarker.lineStart = this.scanner.lineStart;
	        this.collectComments();
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.lineNumber = this.scanner.lineNumber;
	        this.startMarker.lineStart = this.scanner.lineStart;
	        var next;
	        next = this.scanner.lex();
	        this.hasLineTerminator = (token && next) ? (token.lineNumber !== next.lineNumber) : false;
	        if (next && this.context.strict && next.type === token_1.Token.Identifier) {
	            if (this.scanner.isStrictModeReservedWord(next.value)) {
	                next.type = token_1.Token.Keyword;
	            }
	        }
	        this.lookahead = next;
	        if (this.config.tokens && next.type !== token_1.Token.EOF) {
	            this.tokens.push(this.convertToken(next));
	        }
	        return token;
	    };
	    Parser.prototype.nextRegexToken = function () {
	        this.collectComments();
	        var token = this.scanner.scanRegExp();
	        if (this.config.tokens) {
	            // Pop the previous token, '/' or '/='
	            // This is added from the lookahead token.
	            this.tokens.pop();
	            this.tokens.push(this.convertToken(token));
	        }
	        // Prime the next lookahead.
	        this.lookahead = token;
	        this.nextToken();
	        return token;
	    };
	    Parser.prototype.createNode = function () {
	        return {
	            index: this.startMarker.index,
	            line: this.startMarker.lineNumber,
	            column: this.startMarker.index - this.startMarker.lineStart
	        };
	    };
	    Parser.prototype.startNode = function (token) {
	        return {
	            index: token.start,
	            line: token.lineNumber,
	            column: token.start - token.lineStart
	        };
	    };
	    Parser.prototype.finalize = function (meta, node) {
	        if (this.config.range) {
	            node.range = [meta.index, this.lastMarker.index];
	        }
	        if (this.config.loc) {
	            node.loc = {
	                start: {
	                    line: meta.line,
	                    column: meta.column
	                },
	                end: {
	                    line: this.lastMarker.lineNumber,
	                    column: this.lastMarker.index - this.lastMarker.lineStart
	                }
	            };
	            if (this.config.source) {
	                node.loc.source = this.config.source;
	            }
	        }
	        if (this.delegate) {
	            var metadata = {
	                start: {
	                    line: meta.line,
	                    column: meta.column,
	                    offset: meta.index
	                },
	                end: {
	                    line: this.lastMarker.lineNumber,
	                    column: this.lastMarker.index - this.lastMarker.lineStart,
	                    offset: this.lastMarker.index
	                }
	            };
	            this.delegate(node, metadata);
	        }
	        return node;
	    };
	    // Expect the next token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    Parser.prototype.expect = function (value) {
	        var token = this.nextToken();
	        if (token.type !== token_1.Token.Punctuator || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
	    Parser.prototype.expectCommaSeparator = function () {
	        if (this.config.tolerant) {
	            var token = this.lookahead;
	            if (token.type === token_1.Token.Punctuator && token.value === ',') {
	                this.nextToken();
	            }
	            else if (token.type === token_1.Token.Punctuator && token.value === ';') {
	                this.nextToken();
	                this.tolerateUnexpectedToken(token);
	            }
	            else {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
	            }
	        }
	        else {
	            this.expect(',');
	        }
	    };
	    // Expect the next token to match the specified keyword.
	    // If not, an exception will be thrown.
	    Parser.prototype.expectKeyword = function (keyword) {
	        var token = this.nextToken();
	        if (token.type !== token_1.Token.Keyword || token.value !== keyword) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next token matches the specified punctuator.
	    Parser.prototype.match = function (value) {
	        return this.lookahead.type === token_1.Token.Punctuator && this.lookahead.value === value;
	    };
	    // Return true if the next token matches the specified keyword
	    Parser.prototype.matchKeyword = function (keyword) {
	        return this.lookahead.type === token_1.Token.Keyword && this.lookahead.value === keyword;
	    };
	    // Return true if the next token matches the specified contextual keyword
	    // (where an identifier is sometimes a keyword depending on the context)
	    Parser.prototype.matchContextualKeyword = function (keyword) {
	        return this.lookahead.type === token_1.Token.Identifier && this.lookahead.value === keyword;
	    };
	    // Return true if the next token is an assignment operator
	    Parser.prototype.matchAssign = function () {
	        if (this.lookahead.type !== token_1.Token.Punctuator) {
	            return false;
	        }
	        var op = this.lookahead.value;
	        return op === '=' ||
	            op === '*=' ||
	            op === '**=' ||
	            op === '/=' ||
	            op === '%=' ||
	            op === '+=' ||
	            op === '-=' ||
	            op === '<<=' ||
	            op === '>>=' ||
	            op === '>>>=' ||
	            op === '&=' ||
	            op === '^=' ||
	            op === '|=';
	    };
	    // Cover grammar support.
	    //
	    // When an assignment expression position starts with an left parenthesis, the determination of the type
	    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
	    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
	    //
	    // There are three productions that can be parsed in a parentheses pair that needs to be determined
	    // after the outermost pair is closed. They are:
	    //
	    //   1. AssignmentExpression
	    //   2. BindingElements
	    //   3. AssignmentTargets
	    //
	    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
	    // binding element or assignment target.
	    //
	    // The three productions have the relationship:
	    //
	    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
	    //
	    // with a single exception that CoverInitializedName when used directly in an Expression, generates
	    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
	    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
	    //
	    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
	    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
	    // the CoverInitializedName check is conducted.
	    //
	    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
	    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
	    // pattern. The CoverInitializedName check is deferred.
	    Parser.prototype.isolateCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        if (this.context.firstCoverInitializedNameError !== null) {
	            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
	        }
	        this.context.isBindingElement = previousIsBindingElement;
	        this.context.isAssignmentTarget = previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.inheritCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
	        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.consumeSemicolon = function () {
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else if (!this.hasLineTerminator) {
	            if (this.lookahead.type !== token_1.Token.EOF && !this.match('}')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.lastMarker.index = this.startMarker.index;
	            this.lastMarker.lineNumber = this.startMarker.lineNumber;
	            this.lastMarker.lineStart = this.startMarker.lineStart;
	        }
	    };
	    // ECMA-262 12.2 Primary Expressions
	    Parser.prototype.parsePrimaryExpression = function () {
	        var node = this.createNode();
	        var expr;
	        var value, token, raw;
	        switch (this.lookahead.type) {
	            case token_1.Token.Identifier:
	                if (this.sourceType === 'module' && this.lookahead.value === 'await') {
	                    this.tolerateUnexpectedToken(this.lookahead);
	                }
	                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
	                break;
	            case token_1.Token.NumericLiteral:
	            case token_1.Token.StringLiteral:
	                if (this.context.strict && this.lookahead.octal) {
	                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
	                }
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case token_1.Token.BooleanLiteral:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                token.value = (token.value === 'true');
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case token_1.Token.NullLiteral:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                token.value = null;
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case token_1.Token.Template:
	                expr = this.parseTemplateLiteral();
	                break;
	            case token_1.Token.Punctuator:
	                value = this.lookahead.value;
	                switch (value) {
	                    case '(':
	                        this.context.isBindingElement = false;
	                        expr = this.inheritCoverGrammar(this.parseGroupExpression);
	                        break;
	                    case '[':
	                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);
	                        break;
	                    case '{':
	                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);
	                        break;
	                    case '/':
	                    case '/=':
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                        this.scanner.index = this.startMarker.index;
	                        token = this.nextRegexToken();
	                        raw = this.getTokenRaw(token);
	                        expr = this.finalize(node, new Node.RegexLiteral(token.value, raw, token.regex));
	                        break;
	                    default:
	                        this.throwUnexpectedToken(this.nextToken());
	                }
	                break;
	            case token_1.Token.Keyword:
	                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
	                    expr = this.parseIdentifierName();
	                }
	                else if (!this.context.strict && this.matchKeyword('let')) {
	                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
	                }
	                else {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    if (this.matchKeyword('function')) {
	                        expr = this.parseFunctionExpression();
	                    }
	                    else if (this.matchKeyword('this')) {
	                        this.nextToken();
	                        expr = this.finalize(node, new Node.ThisExpression());
	                    }
	                    else if (this.matchKeyword('class')) {
	                        expr = this.parseClassExpression();
	                    }
	                    else {
	                        this.throwUnexpectedToken(this.nextToken());
	                    }
	                }
	                break;
	            default:
	                this.throwUnexpectedToken(this.nextToken());
	        }
	        return expr;
	    };
	    // ECMA-262 12.2.5 Array Initializer
	    Parser.prototype.parseSpreadElement = function () {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
	        return this.finalize(node, new Node.SpreadElement(arg));
	    };
	    Parser.prototype.parseArrayInitializer = function () {
	        var node = this.createNode();
	        var elements = [];
	        this.expect('[');
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else if (this.match('...')) {
	                var element = this.parseSpreadElement();
	                if (!this.match(']')) {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    this.expect(',');
	                }
	                elements.push(element);
	            }
	            else {
	                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayExpression(elements));
	    };
	    // ECMA-262 12.2.6 Object Initializer
	    Parser.prototype.parsePropertyMethod = function (params) {
	        this.context.isAssignmentTarget = false;
	        this.context.isBindingElement = false;
	        var previousStrict = this.context.strict;
	        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
	        if (this.context.strict && params.firstRestricted) {
	            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
	        }
	        if (this.context.strict && params.stricted) {
	            this.tolerateUnexpectedToken(params.stricted, params.message);
	        }
	        this.context.strict = previousStrict;
	        return body;
	    };
	    Parser.prototype.parsePropertyMethodFunction = function () {
	        var isGenerator = false;
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = false;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    Parser.prototype.parseObjectPropertyKey = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        var key = null;
	        switch (token.type) {
	            case token_1.Token.StringLiteral:
	            case token_1.Token.NumericLiteral:
	                if (this.context.strict && token.octal) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
	                }
	                var raw = this.getTokenRaw(token);
	                key = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case token_1.Token.Identifier:
	            case token_1.Token.BooleanLiteral:
	            case token_1.Token.NullLiteral:
	            case token_1.Token.Keyword:
	                key = this.finalize(node, new Node.Identifier(token.value));
	                break;
	            case token_1.Token.Punctuator:
	                if (token.value === '[') {
	                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    this.expect(']');
	                }
	                else {
	                    this.throwUnexpectedToken(token);
	                }
	                break;
	            default:
	                this.throwUnexpectedToken(token);
	        }
	        return key;
	    };
	    Parser.prototype.isPropertyKey = function (key, value) {
	        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||
	            (key.type === syntax_1.Syntax.Literal && key.value === value);
	    };
	    Parser.prototype.parseObjectProperty = function (hasProto) {
	        var node = this.createNode();
	        var token = this.lookahead;
	        var kind;
	        var key;
	        var value;
	        var computed = false;
	        var method = false;
	        var shorthand = false;
	        if (token.type === token_1.Token.Identifier) {
	            this.nextToken();
	            key = this.finalize(node, new Node.Identifier(token.value));
	        }
	        else if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === token_1.Token.Identifier && token.value === 'get' && lookaheadPropertyKey) {
	            kind = 'get';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.context.allowYield = false;
	            value = this.parseGetterMethod();
	        }
	        else if (token.type === token_1.Token.Identifier && token.value === 'set' && lookaheadPropertyKey) {
	            kind = 'set';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseSetterMethod();
	        }
	        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        else {
	            if (!key) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            kind = 'init';
	            if (this.match(':')) {
	                if (!computed && this.isPropertyKey(key, '__proto__')) {
	                    if (hasProto.value) {
	                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
	                    }
	                    hasProto.value = true;
	                }
	                this.nextToken();
	                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
	            }
	            else if (this.match('(')) {
	                value = this.parsePropertyMethodFunction();
	                method = true;
	            }
	            else if (token.type === token_1.Token.Identifier) {
	                var id = this.finalize(node, new Node.Identifier(token.value));
	                if (this.match('=')) {
	                    this.context.firstCoverInitializedNameError = this.lookahead;
	                    this.nextToken();
	                    shorthand = true;
	                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    value = this.finalize(node, new Node.AssignmentPattern(id, init));
	                }
	                else {
	                    shorthand = true;
	                    value = id;
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectInitializer = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var properties = [];
	        var hasProto = { value: false };
	        while (!this.match('}')) {
	            properties.push(this.parseObjectProperty(hasProto));
	            if (!this.match('}')) {
	                this.expectCommaSeparator();
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectExpression(properties));
	    };
	    // ECMA-262 12.2.9 Template Literals
	    Parser.prototype.parseTemplateHead = function () {
	        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
	        var node = this.createNode();
	        var token = this.nextToken();
	        var value = {
	            raw: token.value.raw,
	            cooked: token.value.cooked
	        };
	        return this.finalize(node, new Node.TemplateElement(value, token.tail));
	    };
	    Parser.prototype.parseTemplateElement = function () {
	        if (this.lookahead.type !== token_1.Token.Template) {
	            this.throwUnexpectedToken();
	        }
	        var node = this.createNode();
	        var token = this.nextToken();
	        var value = {
	            raw: token.value.raw,
	            cooked: token.value.cooked
	        };
	        return this.finalize(node, new Node.TemplateElement(value, token.tail));
	    };
	    Parser.prototype.parseTemplateLiteral = function () {
	        var node = this.createNode();
	        var expressions = [];
	        var quasis = [];
	        var quasi = this.parseTemplateHead();
	        quasis.push(quasi);
	        while (!quasi.tail) {
	            expressions.push(this.parseExpression());
	            quasi = this.parseTemplateElement();
	            quasis.push(quasi);
	        }
	        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
	    };
	    // ECMA-262 12.2.10 The Grouping Operator
	    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	            case syntax_1.Syntax.MemberExpression:
	            case syntax_1.Syntax.RestElement:
	            case syntax_1.Syntax.AssignmentPattern:
	                break;
	            case syntax_1.Syntax.SpreadElement:
	                expr.type = syntax_1.Syntax.RestElement;
	                this.reinterpretExpressionAsPattern(expr.argument);
	                break;
	            case syntax_1.Syntax.ArrayExpression:
	                expr.type = syntax_1.Syntax.ArrayPattern;
	                for (var i = 0; i < expr.elements.length; i++) {
	                    if (expr.elements[i] !== null) {
	                        this.reinterpretExpressionAsPattern(expr.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectExpression:
	                expr.type = syntax_1.Syntax.ObjectPattern;
	                for (var i = 0; i < expr.properties.length; i++) {
	                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
	                }
	                break;
	            case syntax_1.Syntax.AssignmentExpression:
	                expr.type = syntax_1.Syntax.AssignmentPattern;
	                delete expr.operator;
	                this.reinterpretExpressionAsPattern(expr.left);
	                break;
	            default:
	                // Allow other node type for tolerant parsing.
	                break;
	        }
	    };
	    Parser.prototype.parseGroupExpression = function () {
	        var expr;
	        this.expect('(');
	        if (this.match(')')) {
	            this.nextToken();
	            if (!this.match('=>')) {
	                this.expect('=>');
	            }
	            expr = {
	                type: ArrowParameterPlaceHolder,
	                params: []
	            };
	        }
	        else {
	            var startToken = this.lookahead;
	            var params = [];
	            if (this.match('...')) {
	                expr = this.parseRestElement(params);
	                this.expect(')');
	                if (!this.match('=>')) {
	                    this.expect('=>');
	                }
	                expr = {
	                    type: ArrowParameterPlaceHolder,
	                    params: [expr]
	                };
	            }
	            else {
	                var arrow = false;
	                this.context.isBindingElement = true;
	                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                if (this.match(',')) {
	                    var expressions = [];
	                    this.context.isAssignmentTarget = false;
	                    expressions.push(expr);
	                    while (this.startMarker.index < this.scanner.length) {
	                        if (!this.match(',')) {
	                            break;
	                        }
	                        this.nextToken();
	                        if (this.match('...')) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            expressions.push(this.parseRestElement(params));
	                            this.expect(')');
	                            if (!this.match('=>')) {
	                                this.expect('=>');
	                            }
	                            this.context.isBindingElement = false;
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions
	                            };
	                        }
	                        else {
	                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        if (arrow) {
	                            break;
	                        }
	                    }
	                    if (!arrow) {
	                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	                    }
	                }
	                if (!arrow) {
	                    this.expect(')');
	                    if (this.match('=>')) {
	                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: [expr]
	                            };
	                        }
	                        if (!arrow) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
	                                for (var i = 0; i < expr.expressions.length; i++) {
	                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);
	                                }
	                            }
	                            else {
	                                this.reinterpretExpressionAsPattern(expr);
	                            }
	                            var params_1 = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: params_1
	                            };
	                        }
	                    }
	                    this.context.isBindingElement = false;
	                }
	            }
	        }
	        return expr;
	    };
	    // ECMA-262 12.3 Left-Hand-Side Expressions
	    Parser.prototype.parseArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAssignmentExpression);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.isIdentifierName = function (token) {
	        return token.type === token_1.Token.Identifier ||
	            token.type === token_1.Token.Keyword ||
	            token.type === token_1.Token.BooleanLiteral ||
	            token.type === token_1.Token.NullLiteral;
	    };
	    Parser.prototype.parseIdentifierName = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (!this.isIdentifierName(token)) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseNewExpression = function () {
	        var node = this.createNode();
	        var id = this.parseIdentifierName();
	        assert_1.assert(id.name === 'new', 'New expression must start with `new`');
	        var expr;
	        if (this.match('.')) {
	            this.nextToken();
	            if (this.lookahead.type === token_1.Token.Identifier && this.context.inFunctionBody && this.lookahead.value === 'target') {
	                var property = this.parseIdentifierName();
	                expr = new Node.MetaProperty(id, property);
	            }
	            else {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
	            var args = this.match('(') ? this.parseArguments() : [];
	            expr = new Node.NewExpression(callee, args);
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return this.finalize(node, expr);
	    };
	    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
	        var startToken = this.lookahead;
	        var previousAllowIn = this.context.allowIn;
	        this.context.allowIn = true;
	        var expr;
	        if (this.matchKeyword('super') && this.context.inFunctionBody) {
	            expr = this.createNode();
	            this.nextToken();
	            expr = this.finalize(expr, new Node.Super());
	            if (!this.match('(') && !this.match('.') && !this.match('[')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        }
	        while (true) {
	            if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.match('(')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = false;
	                var args = this.parseArguments();
	                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
	            }
	            else if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        this.context.allowIn = previousAllowIn;
	        return expr;
	    };
	    Parser.prototype.parseSuper = function () {
	        var node = this.createNode();
	        this.expectKeyword('super');
	        if (!this.match('[') && !this.match('.')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        return this.finalize(node, new Node.Super());
	    };
	    Parser.prototype.parseLeftHandSideExpression = function () {
	        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
	        var node = this.startNode(this.lookahead);
	        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :
	            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        while (true) {
	            if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        return expr;
	    };
	    // ECMA-262 12.4 Update Expressions
	    Parser.prototype.parseUpdateExpression = function () {
	        var expr;
	        var startToken = this.lookahead;
	        if (this.match('++') || this.match('--')) {
	            var node = this.startNode(startToken);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
	            }
	            if (!this.context.isAssignmentTarget) {
	                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	            }
	            var prefix = true;
	            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	            if (!this.hasLineTerminator && this.lookahead.type === token_1.Token.Punctuator) {
	                if (this.match('++') || this.match('--')) {
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
	                    }
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    var operator = this.nextToken().value;
	                    var prefix = false;
	                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
	                }
	            }
	        }
	        return expr;
	    };
	    // ECMA-262 12.5 Unary Operators
	    Parser.prototype.parseUnaryExpression = function () {
	        var expr;
	        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||
	            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
	            var node = this.startNode(this.lookahead);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
	            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
	                this.tolerateError(messages_1.Messages.StrictDelete);
	            }
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else {
	            expr = this.parseUpdateExpression();
	        }
	        return expr;
	    };
	    Parser.prototype.parseExponentiationExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
	        }
	        return expr;
	    };
	    // ECMA-262 12.6 Exponentiation Operators
	    // ECMA-262 12.7 Multiplicative Operators
	    // ECMA-262 12.8 Additive Operators
	    // ECMA-262 12.9 Bitwise Shift Operators
	    // ECMA-262 12.10 Relational Operators
	    // ECMA-262 12.11 Equality Operators
	    // ECMA-262 12.12 Binary Bitwise Operators
	    // ECMA-262 12.13 Binary Logical Operators
	    Parser.prototype.binaryPrecedence = function (token) {
	        var op = token.value;
	        var precedence;
	        if (token.type === token_1.Token.Punctuator) {
	            precedence = this.operatorPrecedence[op] || 0;
	        }
	        else if (token.type === token_1.Token.Keyword) {
	            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;
	        }
	        else {
	            precedence = 0;
	        }
	        return precedence;
	    };
	    Parser.prototype.parseBinaryExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
	        var token = this.lookahead;
	        var prec = this.binaryPrecedence(token);
	        if (prec > 0) {
	            this.nextToken();
	            token.prec = prec;
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var markers = [startToken, this.lookahead];
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            var stack = [left, token, right];
	            while (true) {
	                prec = this.binaryPrecedence(this.lookahead);
	                if (prec <= 0) {
	                    break;
	                }
	                // Reduce: make a binary expression from the three topmost entries.
	                while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
	                    right = stack.pop();
	                    var operator = stack.pop().value;
	                    left = stack.pop();
	                    markers.pop();
	                    var node = this.startNode(markers[markers.length - 1]);
	                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
	                }
	                // Shift.
	                token = this.nextToken();
	                token.prec = prec;
	                stack.push(token);
	                markers.push(this.lookahead);
	                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
	            }
	            // Final reduce to clean-up the stack.
	            var i = stack.length - 1;
	            expr = stack[i];
	            markers.pop();
	            while (i > 1) {
	                var node = this.startNode(markers.pop());
	                expr = this.finalize(node, new Node.BinaryExpression(stack[i - 1].value, stack[i - 2], expr));
	                i -= 2;
	            }
	        }
	        return expr;
	    };
	    // ECMA-262 12.14 Conditional Operator
	    Parser.prototype.parseConditionalExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
	        if (this.match('?')) {
	            this.nextToken();
	            var previousAllowIn = this.context.allowIn;
	            this.context.allowIn = true;
	            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowIn = previousAllowIn;
	            this.expect(':');
	            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return expr;
	    };
	    // ECMA-262 12.15 Assignment Operators
	    Parser.prototype.checkPatternParam = function (options, param) {
	        switch (param.type) {
	            case syntax_1.Syntax.Identifier:
	                this.validateParam(options, param, param.name);
	                break;
	            case syntax_1.Syntax.RestElement:
	                this.checkPatternParam(options, param.argument);
	                break;
	            case syntax_1.Syntax.AssignmentPattern:
	                this.checkPatternParam(options, param.left);
	                break;
	            case syntax_1.Syntax.ArrayPattern:
	                for (var i = 0; i < param.elements.length; i++) {
	                    if (param.elements[i] !== null) {
	                        this.checkPatternParam(options, param.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.YieldExpression:
	                break;
	            default:
	                assert_1.assert(param.type === syntax_1.Syntax.ObjectPattern, 'Invalid type');
	                for (var i = 0; i < param.properties.length; i++) {
	                    this.checkPatternParam(options, param.properties[i].value);
	                }
	                break;
	        }
	    };
	    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
	        var params = [expr];
	        var options;
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	                break;
	            case ArrowParameterPlaceHolder:
	                params = expr.params;
	                break;
	            default:
	                return null;
	        }
	        options = {
	            paramSet: {}
	        };
	        for (var i = 0; i < params.length; ++i) {
	            var param = params[i];
	            if (param.type === syntax_1.Syntax.AssignmentPattern) {
	                if (param.right.type === syntax_1.Syntax.YieldExpression) {
	                    if (param.right.argument) {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                    param.right.type = syntax_1.Syntax.Identifier;
	                    param.right.name = 'yield';
	                    delete param.right.argument;
	                    delete param.right.delegate;
	                }
	            }
	            this.checkPatternParam(options, param);
	            params[i] = param;
	        }
	        if (this.context.strict || !this.context.allowYield) {
	            for (var i = 0; i < params.length; ++i) {
	                var param = params[i];
	                if (param.type === syntax_1.Syntax.YieldExpression) {
	                    this.throwUnexpectedToken(this.lookahead);
	                }
	            }
	        }
	        if (options.message === messages_1.Messages.StrictParamDupe) {
	            var token = this.context.strict ? options.stricted : options.firstRestricted;
	            this.throwUnexpectedToken(token, options.message);
	        }
	        return {
	            params: params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.parseAssignmentExpression = function () {
	        var expr;
	        if (!this.context.allowYield && this.matchKeyword('yield')) {
	            expr = this.parseYieldExpression();
	        }
	        else {
	            var startToken = this.lookahead;
	            var token = startToken;
	            expr = this.parseConditionalExpression();
	            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
	                // ECMA-262 14.2 Arrow Function Definitions
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                var list = this.reinterpretAsCoverFormalsList(expr);
	                if (list) {
	                    if (this.hasLineTerminator) {
	                        this.tolerateUnexpectedToken(this.lookahead);
	                    }
	                    this.context.firstCoverInitializedNameError = null;
	                    var previousStrict = this.context.strict;
	                    var previousAllowYield = this.context.allowYield;
	                    this.context.allowYield = true;
	                    var node = this.startNode(startToken);
	                    this.expect('=>');
	                    var body = this.match('{') ? this.parseFunctionSourceElements() :
	                        this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    var expression = body.type !== syntax_1.Syntax.BlockStatement;
	                    if (this.context.strict && list.firstRestricted) {
	                        this.throwUnexpectedToken(list.firstRestricted, list.message);
	                    }
	                    if (this.context.strict && list.stricted) {
	                        this.tolerateUnexpectedToken(list.stricted, list.message);
	                    }
	                    expr = this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
	                    this.context.strict = previousStrict;
	                    this.context.allowYield = previousAllowYield;
	                }
	            }
	            else {
	                if (this.matchAssign()) {
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
	                        var id = (expr);
	                        if (this.scanner.isRestrictedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
	                        }
	                        if (this.scanner.isStrictModeReservedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	                        }
	                    }
	                    if (!this.match('=')) {
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                    }
	                    else {
	                        this.reinterpretExpressionAsPattern(expr);
	                    }
	                    token = this.nextToken();
	                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(token.value, expr, right));
	                    this.context.firstCoverInitializedNameError = null;
	                }
	            }
	        }
	        return expr;
	    };
	    // ECMA-262 12.16 Comma Operator
	    Parser.prototype.parseExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        if (this.match(',')) {
	            var expressions = [];
	            expressions.push(expr);
	            while (this.startMarker.index < this.scanner.length) {
	                if (!this.match(',')) {
	                    break;
	                }
	                this.nextToken();
	                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	            }
	            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	        }
	        return expr;
	    };
	    // ECMA-262 13.2 Block
	    Parser.prototype.parseStatementListItem = function () {
	        var statement = null;
	        this.context.isAssignmentTarget = true;
	        this.context.isBindingElement = true;
	        if (this.lookahead.type === token_1.Token.Keyword) {
	            switch (this.lookahead.value) {
	                case 'export':
	                    if (this.sourceType !== 'module') {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
	                    }
	                    statement = this.parseExportDeclaration();
	                    break;
	                case 'import':
	                    if (this.sourceType !== 'module') {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
	                    }
	                    statement = this.parseImportDeclaration();
	                    break;
	                case 'const':
	                    statement = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'function':
	                    statement = this.parseFunctionDeclaration();
	                    break;
	                case 'class':
	                    statement = this.parseClassDeclaration();
	                    break;
	                case 'let':
	                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
	                    break;
	                default:
	                    statement = this.parseStatement();
	                    break;
	            }
	        }
	        else {
	            statement = this.parseStatement();
	        }
	        return statement;
	    };
	    Parser.prototype.parseBlock = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var block = [];
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            block.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.BlockStatement(block));
	    };
	    // ECMA-262 13.3.1 Let and Const Declarations
	    Parser.prototype.parseLexicalBinding = function (kind, options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, kind);
	        // ECMA-262 12.2.1
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord((id).name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (kind === 'const') {
	            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
	                this.expect('=');
	                init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            }
	        }
	        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {
	            this.expect('=');
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseBindingList = function (kind, options) {
	        var list = [this.parseLexicalBinding(kind, options)];
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseLexicalBinding(kind, options));
	        }
	        return list;
	    };
	    Parser.prototype.isLexicalDeclaration = function () {
	        var previousIndex = this.scanner.index;
	        var previousLineNumber = this.scanner.lineNumber;
	        var previousLineStart = this.scanner.lineStart;
	        this.collectComments();
	        var next = this.scanner.lex();
	        this.scanner.index = previousIndex;
	        this.scanner.lineNumber = previousLineNumber;
	        this.scanner.lineStart = previousLineStart;
	        return (next.type === token_1.Token.Identifier) ||
	            (next.type === token_1.Token.Punctuator && next.value === '[') ||
	            (next.type === token_1.Token.Punctuator && next.value === '{') ||
	            (next.type === token_1.Token.Keyword && next.value === 'let') ||
	            (next.type === token_1.Token.Keyword && next.value === 'yield');
	    };
	    Parser.prototype.parseLexicalDeclaration = function (options) {
	        var node = this.createNode();
	        var kind = this.nextToken().value;
	        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
	        var declarations = this.parseBindingList(kind, options);
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
	    };
	    // ECMA-262 13.3.3 Destructuring Binding Patterns
	    Parser.prototype.parseBindingRestElement = function (params, kind) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params, kind);
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseArrayPattern = function (params, kind) {
	        var node = this.createNode();
	        this.expect('[');
	        var elements = [];
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else {
	                if (this.match('...')) {
	                    elements.push(this.parseBindingRestElement(params, kind));
	                    break;
	                }
	                else {
	                    elements.push(this.parsePatternWithDefault(params, kind));
	                }
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayPattern(elements));
	    };
	    Parser.prototype.parsePropertyPattern = function (params, kind) {
	        var node = this.createNode();
	        var computed = false;
	        var shorthand = false;
	        var method = false;
	        var key;
	        var value;
	        if (this.lookahead.type === token_1.Token.Identifier) {
	            var keyToken = this.lookahead;
	            key = this.parseVariableIdentifier();
	            var init = this.finalize(node, new Node.Identifier(keyToken.value));
	            if (this.match('=')) {
	                params.push(keyToken);
	                shorthand = true;
	                this.nextToken();
	                var expr = this.parseAssignmentExpression();
	                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
	            }
	            else if (!this.match(':')) {
	                params.push(keyToken);
	                shorthand = true;
	                value = init;
	            }
	            else {
	                this.expect(':');
	                value = this.parsePatternWithDefault(params, kind);
	            }
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.expect(':');
	            value = this.parsePatternWithDefault(params, kind);
	        }
	        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectPattern = function (params, kind) {
	        var node = this.createNode();
	        var properties = [];
	        this.expect('{');
	        while (!this.match('}')) {
	            properties.push(this.parsePropertyPattern(params, kind));
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectPattern(properties));
	    };
	    Parser.prototype.parsePattern = function (params, kind) {
	        var pattern;
	        if (this.match('[')) {
	            pattern = this.parseArrayPattern(params, kind);
	        }
	        else if (this.match('{')) {
	            pattern = this.parseObjectPattern(params, kind);
	        }
	        else {
	            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
	                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.UnexpectedToken);
	            }
	            params.push(this.lookahead);
	            pattern = this.parseVariableIdentifier(kind);
	        }
	        return pattern;
	    };
	    Parser.prototype.parsePatternWithDefault = function (params, kind) {
	        var startToken = this.lookahead;
	        var pattern = this.parsePattern(params, kind);
	        if (this.match('=')) {
	            this.nextToken();
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = true;
	            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowYield = previousAllowYield;
	            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
	        }
	        return pattern;
	    };
	    // ECMA-262 13.3.2 Variable Statement
	    Parser.prototype.parseVariableIdentifier = function (kind) {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (token.type === token_1.Token.Keyword && token.value === 'yield') {
	            if (this.context.strict) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            if (!this.context.allowYield) {
	                this.throwUnexpectedToken(token);
	            }
	        }
	        else if (token.type !== token_1.Token.Identifier) {
	            if (this.context.strict && token.type === token_1.Token.Keyword && this.scanner.isStrictModeReservedWord(token.value)) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else {
	                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
	                    this.throwUnexpectedToken(token);
	                }
	            }
	        }
	        else if (this.sourceType === 'module' && token.type === token_1.Token.Identifier && token.value === 'await') {
	            this.tolerateUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseVariableDeclaration = function (options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, 'var');
	        // ECMA-262 12.2.1
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord((id).name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (this.match('=')) {
	            this.nextToken();
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
	            this.expect('=');
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseVariableDeclarationList = function (options) {
	        var opt = { inFor: options.inFor };
	        var list = [];
	        list.push(this.parseVariableDeclaration(opt));
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseVariableDeclaration(opt));
	        }
	        return list;
	    };
	    Parser.prototype.parseVariableStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('var');
	        var declarations = this.parseVariableDeclarationList({ inFor: false });
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
	    };
	    // ECMA-262 13.4 Empty Statement
	    Parser.prototype.parseEmptyStatement = function () {
	        var node = this.createNode();
	        this.expect(';');
	        return this.finalize(node, new Node.EmptyStatement());
	    };
	    // ECMA-262 13.5 Expression Statement
	    Parser.prototype.parseExpressionStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ExpressionStatement(expr));
	    };
	    // ECMA-262 13.6 If statement
	    Parser.prototype.parseIfStatement = function () {
	        var node = this.createNode();
	        var consequent;
	        var alternate = null;
	        this.expectKeyword('if');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            consequent = this.parseStatement();
	            if (this.matchKeyword('else')) {
	                this.nextToken();
	                alternate = this.parseStatement();
	            }
	        }
	        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
	    };
	    // ECMA-262 13.7.2 The do-while Statement
	    Parser.prototype.parseDoWhileStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('do');
	        var previousInIteration = this.context.inIteration;
	        this.context.inIteration = true;
	        var body = this.parseStatement();
	        this.context.inIteration = previousInIteration;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        this.expect(')');
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        return this.finalize(node, new Node.DoWhileStatement(body, test));
	    };
	    // ECMA-262 13.7.3 The while Statement
	    Parser.prototype.parseWhileStatement = function () {
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.parseStatement();
	            this.context.inIteration = previousInIteration;
	        }
	        return this.finalize(node, new Node.WhileStatement(test, body));
	    };
	    // ECMA-262 13.7.4 The for Statement
	    // ECMA-262 13.7.5 The for-in and for-of Statements
	    Parser.prototype.parseForStatement = function () {
	        var init = null;
	        var test = null;
	        var update = null;
	        var forIn = true;
	        var left, right;
	        var node = this.createNode();
	        this.expectKeyword('for');
	        this.expect('(');
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else {
	            if (this.matchKeyword('var')) {
	                init = this.createNode();
	                this.nextToken();
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                var declarations = this.parseVariableDeclarationList({ inFor: true });
	                this.context.allowIn = previousAllowIn;
	                if (declarations.length === 1 && this.matchKeyword('in')) {
	                    var decl = declarations[0];
	                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
	                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
	                    }
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.expect(';');
	                }
	            }
	            else if (this.matchKeyword('const') || this.matchKeyword('let')) {
	                init = this.createNode();
	                var kind = this.nextToken().value;
	                if (!this.context.strict && this.lookahead.value === 'in') {
	                    init = this.finalize(init, new Node.Identifier(kind));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else {
	                    var previousAllowIn = this.context.allowIn;
	                    this.context.allowIn = false;
	                    var declarations = this.parseBindingList(kind, { inFor: true });
	                    this.context.allowIn = previousAllowIn;
	                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseExpression();
	                        init = null;
	                    }
	                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseAssignmentExpression();
	                        init = null;
	                        forIn = false;
	                    }
	                    else {
	                        this.consumeSemicolon();
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                    }
	                }
	            }
	            else {
	                var initStartToken = this.lookahead;
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                this.context.allowIn = previousAllowIn;
	                if (this.matchKeyword('in')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (this.matchContextualKeyword('of')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    if (this.match(',')) {
	                        var initSeq = [init];
	                        while (this.match(',')) {
	                            this.nextToken();
	                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
	                    }
	                    this.expect(';');
	                }
	            }
	        }
	        if (typeof left === 'undefined') {
	            if (!this.match(';')) {
	                test = this.parseExpression();
	            }
	            this.expect(';');
	            if (!this.match(')')) {
	                update = this.parseExpression();
	            }
	        }
	        var body;
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.isolateCoverGrammar(this.parseStatement);
	            this.context.inIteration = previousInIteration;
	        }
	        return (typeof left === 'undefined') ?
	            this.finalize(node, new Node.ForStatement(init, test, update, body)) :
	            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :
	                this.finalize(node, new Node.ForOfStatement(left, right, body));
	    };
	    // ECMA-262 13.8 The continue statement
	    Parser.prototype.parseContinueStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('continue');
	        var label = null;
	        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {
	            label = this.parseVariableIdentifier();
	            var key = '$' + label.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, label.name);
	            }
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration) {
	            this.throwError(messages_1.Messages.IllegalContinue);
	        }
	        return this.finalize(node, new Node.ContinueStatement(label));
	    };
	    // ECMA-262 13.9 The break statement
	    Parser.prototype.parseBreakStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('break');
	        var label = null;
	        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {
	            label = this.parseVariableIdentifier();
	            var key = '$' + label.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, label.name);
	            }
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration && !this.context.inSwitch) {
	            this.throwError(messages_1.Messages.IllegalBreak);
	        }
	        return this.finalize(node, new Node.BreakStatement(label));
	    };
	    // ECMA-262 13.10 The return statement
	    Parser.prototype.parseReturnStatement = function () {
	        if (!this.context.inFunctionBody) {
	            this.tolerateError(messages_1.Messages.IllegalReturn);
	        }
	        var node = this.createNode();
	        this.expectKeyword('return');
	        var hasArgument = !this.match(';') && !this.match('}') &&
	            !this.hasLineTerminator && this.lookahead.type !== token_1.Token.EOF;
	        var argument = hasArgument ? this.parseExpression() : null;
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ReturnStatement(argument));
	    };
	    // ECMA-262 13.11 The with statement
	    Parser.prototype.parseWithStatement = function () {
	        if (this.context.strict) {
	            this.tolerateError(messages_1.Messages.StrictModeWith);
	        }
	        var node = this.createNode();
	        this.expectKeyword('with');
	        this.expect('(');
	        var object = this.parseExpression();
	        this.expect(')');
	        var body = this.parseStatement();
	        return this.finalize(node, new Node.WithStatement(object, body));
	    };
	    // ECMA-262 13.12 The switch statement
	    Parser.prototype.parseSwitchCase = function () {
	        var node = this.createNode();
	        var test;
	        if (this.matchKeyword('default')) {
	            this.nextToken();
	            test = null;
	        }
	        else {
	            this.expectKeyword('case');
	            test = this.parseExpression();
	        }
	        this.expect(':');
	        var consequent = [];
	        while (true) {
	            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
	                break;
	            }
	            consequent.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.SwitchCase(test, consequent));
	    };
	    Parser.prototype.parseSwitchStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('switch');
	        this.expect('(');
	        var discriminant = this.parseExpression();
	        this.expect(')');
	        var previousInSwitch = this.context.inSwitch;
	        this.context.inSwitch = true;
	        var cases = [];
	        var defaultFound = false;
	        this.expect('{');
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            var clause = this.parseSwitchCase();
	            if (clause.test === null) {
	                if (defaultFound) {
	                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
	                }
	                defaultFound = true;
	            }
	            cases.push(clause);
	        }
	        this.expect('}');
	        this.context.inSwitch = previousInSwitch;
	        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
	    };
	    // ECMA-262 13.13 Labelled Statements
	    Parser.prototype.parseLabelledStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var statement;
	        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {
	            this.nextToken();
	            var id = (expr);
	            var key = '$' + id.name;
	            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
	            }
	            this.context.labelSet[key] = true;
	            var labeledBody = this.parseStatement();
	            delete this.context.labelSet[key];
	            statement = new Node.LabeledStatement(id, labeledBody);
	        }
	        else {
	            this.consumeSemicolon();
	            statement = new Node.ExpressionStatement(expr);
	        }
	        return this.finalize(node, statement);
	    };
	    // ECMA-262 13.14 The throw statement
	    Parser.prototype.parseThrowStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('throw');
	        if (this.hasLineTerminator) {
	            this.throwError(messages_1.Messages.NewlineAfterThrow);
	        }
	        var argument = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ThrowStatement(argument));
	    };
	    // ECMA-262 13.15 The try statement
	    Parser.prototype.parseCatchClause = function () {
	        var node = this.createNode();
	        this.expectKeyword('catch');
	        this.expect('(');
	        if (this.match(')')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        var params = [];
	        var param = this.parsePattern(params);
	        var paramMap = {};
	        for (var i = 0; i < params.length; i++) {
	            var key = '$' + params[i].value;
	            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
	                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
	            }
	            paramMap[key] = true;
	        }
	        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord((param).name)) {
	                this.tolerateError(messages_1.Messages.StrictCatchVariable);
	            }
	        }
	        this.expect(')');
	        var body = this.parseBlock();
	        return this.finalize(node, new Node.CatchClause(param, body));
	    };
	    Parser.prototype.parseFinallyClause = function () {
	        this.expectKeyword('finally');
	        return this.parseBlock();
	    };
	    Parser.prototype.parseTryStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('try');
	        var block = this.parseBlock();
	        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
	        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
	        if (!handler && !finalizer) {
	            this.throwError(messages_1.Messages.NoCatchOrFinally);
	        }
	        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
	    };
	    // ECMA-262 13.16 The debugger statement
	    Parser.prototype.parseDebuggerStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('debugger');
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.DebuggerStatement());
	    };
	    // ECMA-262 13 Statements
	    Parser.prototype.parseStatement = function () {
	        var statement = null;
	        switch (this.lookahead.type) {
	            case token_1.Token.BooleanLiteral:
	            case token_1.Token.NullLiteral:
	            case token_1.Token.NumericLiteral:
	            case token_1.Token.StringLiteral:
	            case token_1.Token.Template:
	            case token_1.Token.RegularExpression:
	                statement = this.parseExpressionStatement();
	                break;
	            case token_1.Token.Punctuator:
	                var value = this.lookahead.value;
	                if (value === '{') {
	                    statement = this.parseBlock();
	                }
	                else if (value === '(') {
	                    statement = this.parseExpressionStatement();
	                }
	                else if (value === ';') {
	                    statement = this.parseEmptyStatement();
	                }
	                else {
	                    statement = this.parseExpressionStatement();
	                }
	                break;
	            case token_1.Token.Identifier:
	                statement = this.parseLabelledStatement();
	                break;
	            case token_1.Token.Keyword:
	                switch (this.lookahead.value) {
	                    case 'break':
	                        statement = this.parseBreakStatement();
	                        break;
	                    case 'continue':
	                        statement = this.parseContinueStatement();
	                        break;
	                    case 'debugger':
	                        statement = this.parseDebuggerStatement();
	                        break;
	                    case 'do':
	                        statement = this.parseDoWhileStatement();
	                        break;
	                    case 'for':
	                        statement = this.parseForStatement();
	                        break;
	                    case 'function':
	                        statement = this.parseFunctionDeclaration();
	                        break;
	                    case 'if':
	                        statement = this.parseIfStatement();
	                        break;
	                    case 'return':
	                        statement = this.parseReturnStatement();
	                        break;
	                    case 'switch':
	                        statement = this.parseSwitchStatement();
	                        break;
	                    case 'throw':
	                        statement = this.parseThrowStatement();
	                        break;
	                    case 'try':
	                        statement = this.parseTryStatement();
	                        break;
	                    case 'var':
	                        statement = this.parseVariableStatement();
	                        break;
	                    case 'while':
	                        statement = this.parseWhileStatement();
	                        break;
	                    case 'with':
	                        statement = this.parseWithStatement();
	                        break;
	                    default:
	                        statement = this.parseExpressionStatement();
	                        break;
	                }
	                break;
	            default:
	                this.throwUnexpectedToken(this.lookahead);
	        }
	        return statement;
	    };
	    // ECMA-262 14.1 Function Definition
	    Parser.prototype.parseFunctionSourceElements = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var body = this.parseDirectivePrologues();
	        var previousLabelSet = this.context.labelSet;
	        var previousInIteration = this.context.inIteration;
	        var previousInSwitch = this.context.inSwitch;
	        var previousInFunctionBody = this.context.inFunctionBody;
	        this.context.labelSet = {};
	        this.context.inIteration = false;
	        this.context.inSwitch = false;
	        this.context.inFunctionBody = true;
	        while (this.startMarker.index < this.scanner.length) {
	            if (this.match('}')) {
	                break;
	            }
	            body.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        this.context.labelSet = previousLabelSet;
	        this.context.inIteration = previousInIteration;
	        this.context.inSwitch = previousInSwitch;
	        this.context.inFunctionBody = previousInFunctionBody;
	        return this.finalize(node, new Node.BlockStatement(body));
	    };
	    Parser.prototype.validateParam = function (options, param, name) {
	        var key = '$' + name;
	        if (this.context.strict) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        else if (!options.firstRestricted) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            else if (this.scanner.isStrictModeReservedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictReservedWord;
	            }
	            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        /* istanbul ignore next */
	        if (typeof Object.defineProperty === 'function') {
	            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
	        }
	        else {
	            options.paramSet[key] = true;
	        }
	    };
	    Parser.prototype.parseRestElement = function (params) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params);
	        if (this.match('=')) {
	            this.throwError(messages_1.Messages.DefaultRestParameter);
	        }
	        if (!this.match(')')) {
	            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
	        }
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseFormalParameter = function (options) {
	        var params = [];
	        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
	        for (var i = 0; i < params.length; i++) {
	            this.validateParam(options, params[i], params[i].value);
	        }
	        options.params.push(param);
	        return !this.match(')');
	    };
	    Parser.prototype.parseFormalParameters = function (firstRestricted) {
	        var options;
	        options = {
	            params: [],
	            firstRestricted: firstRestricted
	        };
	        this.expect('(');
	        if (!this.match(')')) {
	            options.paramSet = {};
	            while (this.startMarker.index < this.scanner.length) {
	                if (!this.parseFormalParameter(options)) {
	                    break;
	                }
	                this.expect(',');
	            }
	        }
	        this.expect(')');
	        return {
	            params: options.params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        this.expectKeyword('function');
	        var isGenerator = this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted = null;
	        if (!identifierIsOptional || !this.match('(')) {
	            var token = this.lookahead;
	            id = this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
	    };
	    Parser.prototype.parseFunctionExpression = function () {
	        var node = this.createNode();
	        this.expectKeyword('function');
	        var isGenerator = this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        if (!this.match('(')) {
	            var token = this.lookahead;
	            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
	    };
	    // ECMA-262 14.1.1 Directive Prologues
	    Parser.prototype.parseDirective = function () {
	        var token = this.lookahead;
	        var directive = null;
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        if (expr.type === syntax_1.Syntax.Literal) {
	            directive = this.getTokenRaw(token).slice(1, -1);
	        }
	        this.consumeSemicolon();
	        return this.finalize(node, directive ? new Node.Directive(expr, directive) :
	            new Node.ExpressionStatement(expr));
	    };
	    Parser.prototype.parseDirectivePrologues = function () {
	        var firstRestricted = null;
	        var body = [];
	        while (true) {
	            var token = this.lookahead;
	            if (token.type !== token_1.Token.StringLiteral) {
	                break;
	            }
	            var statement = this.parseDirective();
	            body.push(statement);
	            var directive = statement.directive;
	            if (typeof directive !== 'string') {
	                break;
	            }
	            if (directive === 'use strict') {
	                this.context.strict = true;
	                if (firstRestricted) {
	                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
	                }
	            }
	            else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }
	        return body;
	    };
	    // ECMA-262 14.3 Method Definitions
	    Parser.prototype.qualifiedPropertyName = function (token) {
	        switch (token.type) {
	            case token_1.Token.Identifier:
	            case token_1.Token.StringLiteral:
	            case token_1.Token.BooleanLiteral:
	            case token_1.Token.NullLiteral:
	            case token_1.Token.NumericLiteral:
	            case token_1.Token.Keyword:
	                return true;
	            case token_1.Token.Punctuator:
	                return token.value === '[';
	        }
	        return false;
	    };
	    Parser.prototype.parseGetterMethod = function () {
	        var node = this.createNode();
	        this.expect('(');
	        this.expect(')');
	        var isGenerator = false;
	        var params = {
	            params: [],
	            stricted: null,
	            firstRestricted: null,
	            message: null
	        };
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = false;
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    Parser.prototype.parseSetterMethod = function () {
	        var node = this.createNode();
	        var options = {
	            params: [],
	            firstRestricted: null,
	            paramSet: {}
	        };
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = false;
	        this.expect('(');
	        if (this.match(')')) {
	            this.tolerateUnexpectedToken(this.lookahead);
	        }
	        else {
	            this.parseFormalParameter(options);
	        }
	        this.expect(')');
	        var method = this.parsePropertyMethod(options);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, options.params, method, isGenerator));
	    };
	    Parser.prototype.parseGeneratorMethod = function () {
	        var node = this.createNode();
	        var isGenerator = true;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        this.context.allowYield = false;
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    // ECMA-262 14.4 Generator Function Definitions
	    Parser.prototype.isStartOfExpression = function () {
	        var start = true;
	        var value = this.lookahead.value;
	        switch (this.lookahead.type) {
	            case token_1.Token.Punctuator:
	                start = (value === '[') || (value === '(') || (value === '{') ||
	                    (value === '+') || (value === '-') ||
	                    (value === '!') || (value === '~') ||
	                    (value === '++') || (value === '--') ||
	                    (value === '/') || (value === '/='); // regular expression literal
	                break;
	            case token_1.Token.Keyword:
	                start = (value === 'class') || (value === 'delete') ||
	                    (value === 'function') || (value === 'let') || (value === 'new') ||
	                    (value === 'super') || (value === 'this') || (value === 'typeof') ||
	                    (value === 'void') || (value === 'yield');
	                break;
	            default:
	                break;
	        }
	        return start;
	    };
	    Parser.prototype.parseYieldExpression = function () {
	        var node = this.createNode();
	        this.expectKeyword('yield');
	        var argument = null;
	        var delegate = false;
	        if (!this.hasLineTerminator) {
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = false;
	            delegate = this.match('*');
	            if (delegate) {
	                this.nextToken();
	                argument = this.parseAssignmentExpression();
	            }
	            else if (this.isStartOfExpression()) {
	                argument = this.parseAssignmentExpression();
	            }
	            this.context.allowYield = previousAllowYield;
	        }
	        return this.finalize(node, new Node.YieldExpression(argument, delegate));
	    };
	    // ECMA-262 14.5 Class Definitions
	    Parser.prototype.parseClassElement = function (hasConstructor) {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var kind;
	        var key;
	        var value;
	        var computed = false;
	        var method = false;
	        var isStatic = false;
	        if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            var id = key;
	            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
	                token = this.lookahead;
	                isStatic = true;
	                computed = this.match('[');
	                if (this.match('*')) {
	                    this.nextToken();
	                }
	                else {
	                    key = this.parseObjectPropertyKey();
	                }
	            }
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === token_1.Token.Identifier) {
	            if (token.value === 'get' && lookaheadPropertyKey) {
	                kind = 'get';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                this.context.allowYield = false;
	                value = this.parseGetterMethod();
	            }
	            else if (token.value === 'set' && lookaheadPropertyKey) {
	                kind = 'set';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                value = this.parseSetterMethod();
	            }
	        }
	        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        if (!kind && key && this.match('(')) {
	            kind = 'init';
	            value = this.parsePropertyMethodFunction();
	            method = true;
	        }
	        if (!kind) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        if (kind === 'init') {
	            kind = 'method';
	        }
	        if (!computed) {
	            if (isStatic && this.isPropertyKey(key, 'prototype')) {
	                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
	            }
	            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
	                if (kind !== 'method' || !method || value.generator) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
	                }
	                if (hasConstructor.value) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
	                }
	                else {
	                    hasConstructor.value = true;
	                }
	                kind = 'constructor';
	            }
	        }
	        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
	    };
	    Parser.prototype.parseClassElementList = function () {
	        var body = [];
	        var hasConstructor = { value: false };
	        this.expect('{');
	        while (!this.match('}')) {
	            if (this.match(';')) {
	                this.nextToken();
	            }
	            else {
	                body.push(this.parseClassElement(hasConstructor));
	            }
	        }
	        this.expect('}');
	        return body;
	    };
	    Parser.prototype.parseClassBody = function () {
	        var node = this.createNode();
	        var elementList = this.parseClassElementList();
	        return this.finalize(node, new Node.ClassBody(elementList));
	    };
	    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (identifierIsOptional && (this.lookahead.type !== token_1.Token.Identifier)) ? null : this.parseVariableIdentifier();
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
	    };
	    Parser.prototype.parseClassExpression = function () {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (this.lookahead.type === token_1.Token.Identifier) ? this.parseVariableIdentifier() : null;
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
	    };
	    // ECMA-262 15.1 Scripts
	    // ECMA-262 15.2 Modules
	    Parser.prototype.parseProgram = function () {
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.startMarker.index < this.scanner.length) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Program(body, this.sourceType));
	    };
	    // ECMA-262 15.2.2 Imports
	    Parser.prototype.parseModuleSpecifier = function () {
	        var node = this.createNode();
	        if (this.lookahead.type !== token_1.Token.StringLiteral) {
	            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
	        }
	        var token = this.nextToken();
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    // import {<foo as bar>} ...;
	    Parser.prototype.parseImportSpecifier = function () {
	        var node = this.createNode();
	        var imported;
	        var local;
	        if (this.lookahead.type === token_1.Token.Identifier) {
	            imported = this.parseVariableIdentifier();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	        }
	        else {
	            imported = this.parseIdentifierName();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.ImportSpecifier(local, imported));
	    };
	    // {foo, bar as bas}
	    Parser.prototype.parseNamedImports = function () {
	        this.expect('{');
	        var specifiers = [];
	        while (!this.match('}')) {
	            specifiers.push(this.parseImportSpecifier());
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return specifiers;
	    };
	    // import <foo> ...;
	    Parser.prototype.parseImportDefaultSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportDefaultSpecifier(local));
	    };
	    // import <* as foo> ...;
	    Parser.prototype.parseImportNamespaceSpecifier = function () {
	        var node = this.createNode();
	        this.expect('*');
	        if (!this.matchContextualKeyword('as')) {
	            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
	        }
	        this.nextToken();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
	    };
	    Parser.prototype.parseImportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalImportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('import');
	        var src;
	        var specifiers = [];
	        if (this.lookahead.type === token_1.Token.StringLiteral) {
	            // import 'foo';
	            src = this.parseModuleSpecifier();
	        }
	        else {
	            if (this.match('{')) {
	                // import {bar}
	                specifiers = specifiers.concat(this.parseNamedImports());
	            }
	            else if (this.match('*')) {
	                // import * as foo
	                specifiers.push(this.parseImportNamespaceSpecifier());
	            }
	            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
	                // import foo
	                specifiers.push(this.parseImportDefaultSpecifier());
	                if (this.match(',')) {
	                    this.nextToken();
	                    if (this.match('*')) {
	                        // import foo, * as foo
	                        specifiers.push(this.parseImportNamespaceSpecifier());
	                    }
	                    else if (this.match('{')) {
	                        // import foo, {bar}
	                        specifiers = specifiers.concat(this.parseNamedImports());
	                    }
	                    else {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            src = this.parseModuleSpecifier();
	        }
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
	    };
	    // ECMA-262 15.2.3 Exports
	    Parser.prototype.parseExportSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        var exported = local;
	        if (this.matchContextualKeyword('as')) {
	            this.nextToken();
	            exported = this.parseIdentifierName();
	        }
	        return this.finalize(node, new Node.ExportSpecifier(local, exported));
	    };
	    Parser.prototype.parseExportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalExportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('export');
	        var exportDeclaration;
	        if (this.matchKeyword('default')) {
	            // export default ...
	            this.nextToken();
	            if (this.matchKeyword('function')) {
	                // export default function foo () {}
	                // export default function () {}
	                var declaration = this.parseFunctionDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchKeyword('class')) {
	                // export default class foo {}
	                var declaration = this.parseClassDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else {
	                if (this.matchContextualKeyword('from')) {
	                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
	                }
	                // export default {};
	                // export default [];
	                // export default (1 + 2);
	                var declaration = this.match('{') ? this.parseObjectInitializer() :
	                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
	                this.consumeSemicolon();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	        }
	        else if (this.match('*')) {
	            // export * from 'foo';
	            this.nextToken();
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            var src = this.parseModuleSpecifier();
	            this.consumeSemicolon();
	            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
	        }
	        else if (this.lookahead.type === token_1.Token.Keyword) {
	            // export var f = 1;
	            var declaration = void 0;
	            switch (this.lookahead.value) {
	                case 'let':
	                case 'const':
	                    declaration = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'var':
	                case 'class':
	                case 'function':
	                    declaration = this.parseStatementListItem();
	                    break;
	                default:
	                    this.throwUnexpectedToken(this.lookahead);
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else {
	            var specifiers = [];
	            var source = null;
	            var isExportFromIdentifier = false;
	            this.expect('{');
	            while (!this.match('}')) {
	                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
	                specifiers.push(this.parseExportSpecifier());
	                if (!this.match('}')) {
	                    this.expect(',');
	                }
	            }
	            this.expect('}');
	            if (this.matchContextualKeyword('from')) {
	                // export {default} from 'foo';
	                // export {foo} from 'foo';
	                this.nextToken();
	                source = this.parseModuleSpecifier();
	                this.consumeSemicolon();
	            }
	            else if (isExportFromIdentifier) {
	                // export {default}; // missing fromClause
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            else {
	                // export {foo};
	                this.consumeSemicolon();
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
	        }
	        return exportDeclaration;
	    };
	    return Parser;
	}());
	exports.Parser = Parser;


/***/ },
/* 4 */
/***/ function(module, exports) {

	// Ensure the condition is true, otherwise throw an error.
	// This is only to have a better contract semantic, i.e. another safety net
	// to catch a logic error. The condition shall be fulfilled in normal case.
	// Do NOT use this to enforce a certain condition on any user input.
	"use strict";
	function assert(condition, message) {
	    /* istanbul ignore if */
	    if (!condition) {
	        throw new Error('ASSERT: ' + message);
	    }
	}
	exports.assert = assert;


/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	// Error messages should be identical to V8.
	exports.Messages = {
	    UnexpectedToken: 'Unexpected token %0',
	    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
	    UnexpectedNumber: 'Unexpected number',
	    UnexpectedString: 'Unexpected string',
	    UnexpectedIdentifier: 'Unexpected identifier',
	    UnexpectedReserved: 'Unexpected reserved word',
	    UnexpectedTemplate: 'Unexpected quasi %0',
	    UnexpectedEOS: 'Unexpected end of input',
	    NewlineAfterThrow: 'Illegal newline after throw',
	    InvalidRegExp: 'Invalid regular expression',
	    UnterminatedRegExp: 'Invalid regular expression: missing /',
	    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
	    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
	    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
	    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
	    NoCatchOrFinally: 'Missing catch or finally after try',
	    UnknownLabel: 'Undefined label \'%0\'',
	    Redeclaration: '%0 \'%1\' has already been declared',
	    IllegalContinue: 'Illegal continue statement',
	    IllegalBreak: 'Illegal break statement',
	    IllegalReturn: 'Illegal return statement',
	    StrictModeWith: 'Strict mode code may not include a with statement',
	    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
	    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
	    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
	    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
	    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
	    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
	    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
	    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
	    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictReservedWord: 'Use of future reserved word in strict mode',
	    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
	    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
	    DefaultRestParameter: 'Unexpected token =',
	    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
	    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
	    DuplicateConstructor: 'A class may only have one constructor',
	    StaticPrototype: 'Classes may not have static property named prototype',
	    MissingFromClause: 'Unexpected token',
	    NoAsAfterImportNamespace: 'Unexpected token',
	    InvalidModuleSpecifier: 'Unexpected token',
	    IllegalImportDeclaration: 'Unexpected token',
	    IllegalExportDeclaration: 'Unexpected token',
	    DuplicateBinding: 'Duplicate binding %0',
	    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer'
	};


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	var ErrorHandler = (function () {
	    function ErrorHandler() {
	        this.errors = [];
	        this.tolerant = false;
	    }
	    ;
	    ErrorHandler.prototype.recordError = function (error) {
	        this.errors.push(error);
	    };
	    ;
	    ErrorHandler.prototype.tolerate = function (error) {
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    ;
	    ErrorHandler.prototype.constructError = function (msg, column) {
	        var error = new Error(msg);
	        try {
	            throw error;
	        }
	        catch (base) {
	            /* istanbul ignore else */
	            if (Object.create && Object.defineProperty) {
	                error = Object.create(base);
	                Object.defineProperty(error, 'column', { value: column });
	            }
	        }
	        finally {
	            return error;
	        }
	    };
	    ;
	    ErrorHandler.prototype.createError = function (index, line, col, description) {
	        var msg = 'Line ' + line + ': ' + description;
	        var error = this.constructError(msg, col);
	        error.index = index;
	        error.lineNumber = line;
	        error.description = description;
	        return error;
	    };
	    ;
	    ErrorHandler.prototype.throwError = function (index, line, col, description) {
	        throw this.createError(index, line, col, description);
	    };
	    ;
	    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
	        var error = this.createError(index, line, col, description);
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    ;
	    return ErrorHandler;
	}());
	exports.ErrorHandler = ErrorHandler;


/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";
	(function (Token) {
	    Token[Token["BooleanLiteral"] = 1] = "BooleanLiteral";
	    Token[Token["EOF"] = 2] = "EOF";
	    Token[Token["Identifier"] = 3] = "Identifier";
	    Token[Token["Keyword"] = 4] = "Keyword";
	    Token[Token["NullLiteral"] = 5] = "NullLiteral";
	    Token[Token["NumericLiteral"] = 6] = "NumericLiteral";
	    Token[Token["Punctuator"] = 7] = "Punctuator";
	    Token[Token["StringLiteral"] = 8] = "StringLiteral";
	    Token[Token["RegularExpression"] = 9] = "RegularExpression";
	    Token[Token["Template"] = 10] = "Template";
	})(exports.Token || (exports.Token = {}));
	var Token = exports.Token;
	;
	exports.TokenName = {};
	exports.TokenName[Token.BooleanLiteral] = 'Boolean';
	exports.TokenName[Token.EOF] = '<end>';
	exports.TokenName[Token.Identifier] = 'Identifier';
	exports.TokenName[Token.Keyword] = 'Keyword';
	exports.TokenName[Token.NullLiteral] = 'Null';
	exports.TokenName[Token.NumericLiteral] = 'Numeric';
	exports.TokenName[Token.Punctuator] = 'Punctuator';
	exports.TokenName[Token.StringLiteral] = 'String';
	exports.TokenName[Token.RegularExpression] = 'RegularExpression';
	exports.TokenName[Token.Template] = 'Template';


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var assert_1 = __webpack_require__(4);
	var messages_1 = __webpack_require__(5);
	var character_1 = __webpack_require__(9);
	var token_1 = __webpack_require__(7);
	function hexValue(ch) {
	    return '0123456789abcdef'.indexOf(ch.toLowerCase());
	}
	function octalValue(ch) {
	    return '01234567'.indexOf(ch);
	}
	var Scanner = (function () {
	    function Scanner(code, handler) {
	        this.source = code;
	        this.errorHandler = handler;
	        this.trackComment = false;
	        this.length = code.length;
	        this.index = 0;
	        this.lineNumber = (code.length > 0) ? 1 : 0;
	        this.lineStart = 0;
	        this.curlyStack = [];
	    }
	    ;
	    Scanner.prototype.eof = function () {
	        return this.index >= this.length;
	    };
	    ;
	    Scanner.prototype.throwUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    ;
	    Scanner.prototype.tolerateUnexpectedToken = function () {
	        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, messages_1.Messages.UnexpectedTokenIllegal);
	    };
	    ;
	    // ECMA-262 11.4 Comments
	    Scanner.prototype.skipSingleLineComment = function (offset) {
	        var comments;
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - offset;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - offset
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            ++this.index;
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (this.trackComment) {
	                    loc.end = {
	                        line: this.lineNumber,
	                        column: this.index - this.lineStart - 1
	                    };
	                    var entry = {
	                        multiLine: false,
	                        slice: [start + offset, this.index - 1],
	                        range: [start, this.index - 1],
	                        loc: loc
	                    };
	                    comments.push(entry);
	                }
	                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                return comments;
	            }
	        }
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: false,
	                slice: [start + offset, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        return comments;
	    };
	    ;
	    Scanner.prototype.skipMultiLineComment = function () {
	        var comments;
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - 2;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - 2
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                ++this.index;
	                this.lineStart = this.index;
	            }
	            else if (ch === 0x2A) {
	                // Block comment ends with '*/'.
	                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
	                    this.index += 2;
	                    if (this.trackComment) {
	                        loc.end = {
	                            line: this.lineNumber,
	                            column: this.index - this.lineStart
	                        };
	                        var entry = {
	                            multiLine: true,
	                            slice: [start + 2, this.index - 2],
	                            range: [start, this.index],
	                            loc: loc
	                        };
	                        comments.push(entry);
	                    }
	                    return comments;
	                }
	                ++this.index;
	            }
	            else {
	                ++this.index;
	            }
	        }
	        // Ran off the end of the file - the whole thing is a comment
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: true,
	                slice: [start + 2, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        this.tolerateUnexpectedToken();
	        return comments;
	    };
	    ;
	    Scanner.prototype.scanComments = function () {
	        var comments;
	        if (this.trackComment) {
	            comments = [];
	        }
	        var start = (this.index === 0);
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isWhiteSpace(ch)) {
	                ++this.index;
	            }
	            else if (character_1.Character.isLineTerminator(ch)) {
	                ++this.index;
	                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                start = true;
	            }
	            else if (ch === 0x2F) {
	                ch = this.source.charCodeAt(this.index + 1);
	                if (ch === 0x2F) {
	                    this.index += 2;
	                    var comment = this.skipSingleLineComment(2);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                    start = true;
	                }
	                else if (ch === 0x2A) {
	                    this.index += 2;
	                    var comment = this.skipMultiLineComment();
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (start && ch === 0x2D) {
	                // U+003E is '>'
	                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {
	                    // '-->' is a single-line comment
	                    this.index += 3;
	                    var comment = this.skipSingleLineComment(3);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (ch === 0x3C) {
	                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
	                    this.index += 4; // `<!--`
	                    var comment = this.skipSingleLineComment(4);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else {
	                break;
	            }
	        }
	        return comments;
	    };
	    ;
	    // ECMA-262 11.6.2.2 Future Reserved Words
	    Scanner.prototype.isFutureReservedWord = function (id) {
	        switch (id) {
	            case 'enum':
	            case 'export':
	            case 'import':
	            case 'super':
	                return true;
	            default:
	                return false;
	        }
	    };
	    ;
	    Scanner.prototype.isStrictModeReservedWord = function (id) {
	        switch (id) {
	            case 'implements':
	            case 'interface':
	            case 'package':
	            case 'private':
	            case 'protected':
	            case 'public':
	            case 'static':
	            case 'yield':
	            case 'let':
	                return true;
	            default:
	                return false;
	        }
	    };
	    ;
	    Scanner.prototype.isRestrictedWord = function (id) {
	        return id === 'eval' || id === 'arguments';
	    };
	    ;
	    // ECMA-262 11.6.2.1 Keywords
	    Scanner.prototype.isKeyword = function (id) {
	        switch (id.length) {
	            case 2:
	                return (id === 'if') || (id === 'in') || (id === 'do');
	            case 3:
	                return (id === 'var') || (id === 'for') || (id === 'new') ||
	                    (id === 'try') || (id === 'let');
	            case 4:
	                return (id === 'this') || (id === 'else') || (id === 'case') ||
	                    (id === 'void') || (id === 'with') || (id === 'enum');
	            case 5:
	                return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                    (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                    (id === 'class') || (id === 'super');
	            case 6:
	                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                    (id === 'switch') || (id === 'export') || (id === 'import');
	            case 7:
	                return (id === 'default') || (id === 'finally') || (id === 'extends');
	            case 8:
	                return (id === 'function') || (id === 'continue') || (id === 'debugger');
	            case 10:
	                return (id === 'instanceof');
	            default:
	                return false;
	        }
	    };
	    ;
	    Scanner.prototype.codePointAt = function (i) {
	        var cp = this.source.charCodeAt(i);
	        if (cp >= 0xD800 && cp <= 0xDBFF) {
	            var second = this.source.charCodeAt(i + 1);
	            if (second >= 0xDC00 && second <= 0xDFFF) {
	                var first = cp;
	                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            }
	        }
	        return cp;
	    };
	    ;
	    Scanner.prototype.scanHexEscape = function (prefix) {
	        var len = (prefix === 'u') ? 4 : 2;
	        var code = 0;
	        for (var i = 0; i < len; ++i) {
	            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                code = code * 16 + hexValue(this.source[this.index++]);
	            }
	            else {
	                return '';
	            }
	        }
	        return String.fromCharCode(code);
	    };
	    ;
	    Scanner.prototype.scanUnicodeCodePointEscape = function () {
	        var ch = this.source[this.index];
	        var code = 0;
	        // At least, one hex digit is required.
	        if (ch === '}') {
	            this.throwUnexpectedToken();
	        }
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
	                break;
	            }
	            code = code * 16 + hexValue(ch);
	        }
	        if (code > 0x10FFFF || ch !== '}') {
	            this.throwUnexpectedToken();
	        }
	        return character_1.Character.fromCodePoint(code);
	    };
	    ;
	    Scanner.prototype.getIdentifier = function () {
	        var start = this.index++;
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (ch === 0x5C) {
	                // Blackslash (U+005C) marks Unicode escape sequence.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            else if (ch >= 0xD800 && ch < 0xDFFF) {
	                // Need to handle surrogate pairs.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            if (character_1.Character.isIdentifierPart(ch)) {
	                ++this.index;
	            }
	            else {
	                break;
	            }
	        }
	        return this.source.slice(start, this.index);
	    };
	    ;
	    Scanner.prototype.getComplexIdentifier = function () {
	        var cp = this.codePointAt(this.index);
	        var id = character_1.Character.fromCodePoint(cp);
	        this.index += id.length;
	        // '\u' (U+005C, U+0075) denotes an escaped character.
	        var ch;
	        if (cp === 0x5C) {
	            if (this.source.charCodeAt(this.index) !== 0x75) {
	                this.throwUnexpectedToken();
	            }
	            ++this.index;
	            if (this.source[this.index] === '{') {
	                ++this.index;
	                ch = this.scanUnicodeCodePointEscape();
	            }
	            else {
	                ch = this.scanHexEscape('u');
	                cp = ch.charCodeAt(0);
	                if (!ch || ch === '\\' || !character_1.Character.isIdentifierStart(cp)) {
	                    this.throwUnexpectedToken();
	                }
	            }
	            id = ch;
	        }
	        while (!this.eof()) {
	            cp = this.codePointAt(this.index);
	            if (!character_1.Character.isIdentifierPart(cp)) {
	                break;
	            }
	            ch = character_1.Character.fromCodePoint(cp);
	            id += ch;
	            this.index += ch.length;
	            // '\u' (U+005C, U+0075) denotes an escaped character.
	            if (cp === 0x5C) {
	                id = id.substr(0, id.length - 1);
	                if (this.source.charCodeAt(this.index) !== 0x75) {
	                    this.throwUnexpectedToken();
	                }
	                ++this.index;
	                if (this.source[this.index] === '{') {
	                    ++this.index;
	                    ch = this.scanUnicodeCodePointEscape();
	                }
	                else {
	                    ch = this.scanHexEscape('u');
	                    cp = ch.charCodeAt(0);
	                    if (!ch || ch === '\\' || !character_1.Character.isIdentifierPart(cp)) {
	                        this.throwUnexpectedToken();
	                    }
	                }
	                id += ch;
	            }
	        }
	        return id;
	    };
	    ;
	    Scanner.prototype.octalToDecimal = function (ch) {
	        // \0 is not octal escape sequence
	        var octal = (ch !== '0');
	        var code = octalValue(ch);
	        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	            octal = true;
	            code = code * 8 + octalValue(this.source[this.index++]);
	            // 3 digits are only allowed when string starts
	            // with 0, 1, 2, 3
	            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                code = code * 8 + octalValue(this.source[this.index++]);
	            }
	        }
	        return {
	            code: code,
	            octal: octal
	        };
	    };
	    ;
	    // ECMA-262 11.6 Names and Keywords
	    Scanner.prototype.scanIdentifier = function () {
	        var type;
	        var start = this.index;
	        // Backslash (U+005C) starts an escaped character.
	        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();
	        // There is no keyword or literal with only one character.
	        // Thus, it must be an identifier.
	        if (id.length === 1) {
	            type = token_1.Token.Identifier;
	        }
	        else if (this.isKeyword(id)) {
	            type = token_1.Token.Keyword;
	        }
	        else if (id === 'null') {
	            type = token_1.Token.NullLiteral;
	        }
	        else if (id === 'true' || id === 'false') {
	            type = token_1.Token.BooleanLiteral;
	        }
	        else {
	            type = token_1.Token.Identifier;
	        }
	        return {
	            type: type,
	            value: id,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    // ECMA-262 11.7 Punctuators
	    Scanner.prototype.scanPunctuator = function () {
	        var token = {
	            type: token_1.Token.Punctuator,
	            value: '',
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: this.index,
	            end: this.index
	        };
	        // Check for most common single-character punctuators.
	        var str = this.source[this.index];
	        switch (str) {
	            case '(':
	            case '{':
	                if (str === '{') {
	                    this.curlyStack.push('{');
	                }
	                ++this.index;
	                break;
	            case '.':
	                ++this.index;
	                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
	                    // Spread operator: ...
	                    this.index += 2;
	                    str = '...';
	                }
	                break;
	            case '}':
	                ++this.index;
	                this.curlyStack.pop();
	                break;
	            case ')':
	            case ';':
	            case ',':
	            case '[':
	            case ']':
	            case ':':
	            case '?':
	            case '~':
	                ++this.index;
	                break;
	            default:
	                // 4-character punctuator.
	                str = this.source.substr(this.index, 4);
	                if (str === '>>>=') {
	                    this.index += 4;
	                }
	                else {
	                    // 3-character punctuators.
	                    str = str.substr(0, 3);
	                    if (str === '===' || str === '!==' || str === '>>>' ||
	                        str === '<<=' || str === '>>=' || str === '**=') {
	                        this.index += 3;
	                    }
	                    else {
	                        // 2-character punctuators.
	                        str = str.substr(0, 2);
	                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
	                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
	                            str === '++' || str === '--' || str === '<<' || str === '>>' ||
	                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
	                            str === '<=' || str === '>=' || str === '=>' || str === '**') {
	                            this.index += 2;
	                        }
	                        else {
	                            // 1-character punctuators.
	                            str = this.source[this.index];
	                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
	                                ++this.index;
	                            }
	                        }
	                    }
	                }
	        }
	        if (this.index === token.start) {
	            this.throwUnexpectedToken();
	        }
	        token.end = this.index;
	        token.value = str;
	        return token;
	    };
	    ;
	    // ECMA-262 11.8.3 Numeric Literals
	    Scanner.prototype.scanHexLiteral = function (start) {
	        var number = '';
	        while (!this.eof()) {
	            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            number += this.source[this.index++];
	        }
	        if (number.length === 0) {
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: token_1.Token.NumericLiteral,
	            value: parseInt('0x' + number, 16),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    Scanner.prototype.scanBinaryLiteral = function (start) {
	        var number = '';
	        var ch;
	        while (!this.eof()) {
	            ch = this.source[this.index];
	            if (ch !== '0' && ch !== '1') {
	                break;
	            }
	            number += this.source[this.index++];
	        }
	        if (number.length === 0) {
	            // only 0b or 0B
	            this.throwUnexpectedToken();
	        }
	        if (!this.eof()) {
	            ch = this.source.charCodeAt(this.index);
	            /* istanbul ignore else */
	            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
	                this.throwUnexpectedToken();
	            }
	        }
	        return {
	            type: token_1.Token.NumericLiteral,
	            value: parseInt(number, 2),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    Scanner.prototype.scanOctalLiteral = function (prefix, start) {
	        var number = '';
	        var octal = false;
	        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
	            octal = true;
	            number = '0' + this.source[this.index++];
	        }
	        else {
	            ++this.index;
	        }
	        while (!this.eof()) {
	            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            number += this.source[this.index++];
	        }
	        if (!octal && number.length === 0) {
	            // only 0o or 0O
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: token_1.Token.NumericLiteral,
	            value: parseInt(number, 8),
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    Scanner.prototype.isImplicitOctalLiteral = function () {
	        // Implicit octal, unless there is a non-octal digit.
	        // (Annex B.1.1 on Numeric Literals)
	        for (var i = this.index + 1; i < this.length; ++i) {
	            var ch = this.source[i];
	            if (ch === '8' || ch === '9') {
	                return false;
	            }
	            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                return true;
	            }
	        }
	        return true;
	    };
	    ;
	    Scanner.prototype.scanNumericLiteral = function () {
	        var start = this.index;
	        var ch = this.source[start];
	        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
	        var number = '';
	        if (ch !== '.') {
	            number = this.source[this.index++];
	            ch = this.source[this.index];
	            // Hex number starts with '0x'.
	            // Octal number starts with '0'.
	            // Octal number in ES6 starts with '0o'.
	            // Binary number in ES6 starts with '0b'.
	            if (number === '0') {
	                if (ch === 'x' || ch === 'X') {
	                    ++this.index;
	                    return this.scanHexLiteral(start);
	                }
	                if (ch === 'b' || ch === 'B') {
	                    ++this.index;
	                    return this.scanBinaryLiteral(start);
	                }
	                if (ch === 'o' || ch === 'O') {
	                    return this.scanOctalLiteral(ch, start);
	                }
	                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                    if (this.isImplicitOctalLiteral()) {
	                        return this.scanOctalLiteral(ch, start);
	                    }
	                }
	            }
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                number += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === '.') {
	            number += this.source[this.index++];
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                number += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === 'e' || ch === 'E') {
	            number += this.source[this.index++];
	            ch = this.source[this.index];
	            if (ch === '+' || ch === '-') {
	                number += this.source[this.index++];
	            }
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                    number += this.source[this.index++];
	                }
	            }
	            else {
	                this.throwUnexpectedToken();
	            }
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: token_1.Token.NumericLiteral,
	            value: parseFloat(number),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    // ECMA-262 11.8.4 String Literals
	    Scanner.prototype.scanStringLiteral = function () {
	        var start = this.index;
	        var quote = this.source[start];
	        assert_1.assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
	        ++this.index;
	        var octal = false;
	        var str = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === quote) {
	                quote = '';
	                break;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'u':
	                        case 'x':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                str += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var unescaped = this.scanHexEscape(ch);
	                                if (!unescaped) {
	                                    this.throwUnexpectedToken();
	                                }
	                                str += unescaped;
	                            }
	                            break;
	                        case 'n':
	                            str += '\n';
	                            break;
	                        case 'r':
	                            str += '\r';
	                            break;
	                        case 't':
	                            str += '\t';
	                            break;
	                        case 'b':
	                            str += '\b';
	                            break;
	                        case 'f':
	                            str += '\f';
	                            break;
	                        case 'v':
	                            str += '\x0B';
	                            break;
	                        case '8':
	                        case '9':
	                            str += ch;
	                            this.tolerateUnexpectedToken();
	                            break;
	                        default:
	                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                var octToDec = this.octalToDecimal(ch);
	                                octal = octToDec.octal || octal;
	                                str += String.fromCharCode(octToDec.code);
	                            }
	                            else {
	                                str += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                break;
	            }
	            else {
	                str += ch;
	            }
	        }
	        if (quote !== '') {
	            this.index = start;
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: token_1.Token.StringLiteral,
	            value: str,
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    // ECMA-262 11.8.6 Template Literal Lexical Components
	    Scanner.prototype.scanTemplate = function () {
	        var cooked = '';
	        var terminated = false;
	        var start = this.index;
	        var head = (this.source[start] === '`');
	        var tail = false;
	        var rawOffset = 2;
	        ++this.index;
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === '`') {
	                rawOffset = 1;
	                tail = true;
	                terminated = true;
	                break;
	            }
	            else if (ch === '$') {
	                if (this.source[this.index] === '{') {
	                    this.curlyStack.push('${');
	                    ++this.index;
	                    terminated = true;
	                    break;
	                }
	                cooked += ch;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'n':
	                            cooked += '\n';
	                            break;
	                        case 'r':
	                            cooked += '\r';
	                            break;
	                        case 't':
	                            cooked += '\t';
	                            break;
	                        case 'u':
	                        case 'x':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                cooked += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var restore = this.index;
	                                var unescaped = this.scanHexEscape(ch);
	                                if (unescaped) {
	                                    cooked += unescaped;
	                                }
	                                else {
	                                    this.index = restore;
	                                    cooked += ch;
	                                }
	                            }
	                            break;
	                        case 'b':
	                            cooked += '\b';
	                            break;
	                        case 'f':
	                            cooked += '\f';
	                            break;
	                        case 'v':
	                            cooked += '\v';
	                            break;
	                        default:
	                            if (ch === '0') {
	                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                                    // Illegal: \01 \02 and so on
	                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                                }
	                                cooked += '\0';
	                            }
	                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                // Illegal: \1 \2
	                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                            }
	                            else {
	                                cooked += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.lineNumber;
	                if (ch === '\r' && this.source[this.index] === '\n') {
	                    ++this.index;
	                }
	                this.lineStart = this.index;
	                cooked += '\n';
	            }
	            else {
	                cooked += ch;
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken();
	        }
	        if (!head) {
	            this.curlyStack.pop();
	        }
	        return {
	            type: token_1.Token.Template,
	            value: {
	                cooked: cooked,
	                raw: this.source.slice(start + 1, this.index - rawOffset)
	            },
	            head: head,
	            tail: tail,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    // ECMA-262 11.8.5 Regular Expression Literals
	    Scanner.prototype.testRegExp = function (pattern, flags) {
	        // The BMP character to use as a replacement for astral symbols when
	        // translating an ES6 "u"-flagged pattern to an ES5-compatible
	        // approximation.
	        // Note: replacing with '\uFFFF' enables false positives in unlikely
	        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
	        // pattern that would not be detected by this substitution.
	        var astralSubstitute = '\uFFFF';
	        var tmp = pattern;
	        var self = this;
	        if (flags.indexOf('u') >= 0) {
	            tmp = tmp
	                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
	                var codePoint = parseInt($1 || $2, 16);
	                if (codePoint > 0x10FFFF) {
	                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	                }
	                if (codePoint <= 0xFFFF) {
	                    return String.fromCharCode(codePoint);
	                }
	                return astralSubstitute;
	            })
	                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
	        }
	        // First, detect invalid regular expressions.
	        try {
	            RegExp(tmp);
	        }
	        catch (e) {
	            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	        }
	        // Return a regular expression object for this pattern-flag pair, or
	        // `null` in case the current environment doesn't support the flags it
	        // uses.
	        try {
	            return new RegExp(pattern, flags);
	        }
	        catch (exception) {
	            /* istanbul ignore next */
	            return null;
	        }
	    };
	    ;
	    Scanner.prototype.scanRegExpBody = function () {
	        var ch = this.source[this.index];
	        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
	        var str = this.source[this.index++];
	        var classMarker = false;
	        var terminated = false;
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            str += ch;
	            if (ch === '\\') {
	                ch = this.source[this.index++];
	                // ECMA-262 7.8.5
	                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	                }
	                str += ch;
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	            }
	            else if (classMarker) {
	                if (ch === ']') {
	                    classMarker = false;
	                }
	            }
	            else {
	                if (ch === '/') {
	                    terminated = true;
	                    break;
	                }
	                else if (ch === '[') {
	                    classMarker = true;
	                }
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	        }
	        // Exclude leading and trailing slash.
	        var body = str.substr(1, str.length - 2);
	        return {
	            value: body,
	            literal: str
	        };
	    };
	    ;
	    Scanner.prototype.scanRegExpFlags = function () {
	        var str = '';
	        var flags = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index];
	            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                break;
	            }
	            ++this.index;
	            if (ch === '\\' && !this.eof()) {
	                ch = this.source[this.index];
	                if (ch === 'u') {
	                    ++this.index;
	                    var restore = this.index;
	                    ch = this.scanHexEscape('u');
	                    if (ch) {
	                        flags += ch;
	                        for (str += '\\u'; restore < this.index; ++restore) {
	                            str += this.source[restore];
	                        }
	                    }
	                    else {
	                        this.index = restore;
	                        flags += 'u';
	                        str += '\\u';
	                    }
	                    this.tolerateUnexpectedToken();
	                }
	                else {
	                    str += '\\';
	                    this.tolerateUnexpectedToken();
	                }
	            }
	            else {
	                flags += ch;
	                str += ch;
	            }
	        }
	        return {
	            value: flags,
	            literal: str
	        };
	    };
	    ;
	    Scanner.prototype.scanRegExp = function () {
	        var start = this.index;
	        var body = this.scanRegExpBody();
	        var flags = this.scanRegExpFlags();
	        var value = this.testRegExp(body.value, flags.value);
	        return {
	            type: token_1.Token.RegularExpression,
	            value: value,
	            literal: body.literal + flags.literal,
	            regex: {
	                pattern: body.value,
	                flags: flags.value
	            },
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    Scanner.prototype.lex = function () {
	        if (this.eof()) {
	            return {
	                type: token_1.Token.EOF,
	                lineNumber: this.lineNumber,
	                lineStart: this.lineStart,
	                start: this.index,
	                end: this.index
	            };
	        }
	        var cp = this.source.charCodeAt(this.index);
	        if (character_1.Character.isIdentifierStart(cp)) {
	            return this.scanIdentifier();
	        }
	        // Very common: ( and ) and ;
	        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
	            return this.scanPunctuator();
	        }
	        // String literal starts with single quote (U+0027) or double quote (U+0022).
	        if (cp === 0x27 || cp === 0x22) {
	            return this.scanStringLiteral();
	        }
	        // Dot (.) U+002E can also start a floating-point number, hence the need
	        // to check the next character.
	        if (cp === 0x2E) {
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
	                return this.scanNumericLiteral();
	            }
	            return this.scanPunctuator();
	        }
	        if (character_1.Character.isDecimalDigit(cp)) {
	            return this.scanNumericLiteral();
	        }
	        // Template literals start with ` (U+0060) for template head
	        // or } (U+007D) for template middle or template tail.
	        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {
	            return this.scanTemplate();
	        }
	        // Possible identifier start in a surrogate pair.
	        if (cp >= 0xD800 && cp < 0xDFFF) {
	            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
	                return this.scanIdentifier();
	            }
	        }
	        return this.scanPunctuator();
	    };
	    ;
	    return Scanner;
	}());
	exports.Scanner = Scanner;


/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";
	// See also tools/generate-unicode-regex.js.
	var Regex = {
	    // Unicode v8.0.0 NonAsciiIdentifierStart:
	    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
	    // Unicode v8.0.0 NonAsciiIdentifierPart:
	    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	};
	exports.Character = {
	    fromCodePoint: function (cp) {
	        return (cp < 0x10000) ? String.fromCharCode(cp) :
	            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
	                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
	    },
	    // ECMA-262 11.2 White Space
	    isWhiteSpace: function (cp) {
	        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||
	            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);
	    },
	    // ECMA-262 11.3 Line Terminators
	    isLineTerminator: function (cp) {
	        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);
	    },
	    // ECMA-262 11.6 Identifier Names and Identifiers
	    isIdentifierStart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));
	    },
	    isIdentifierPart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp >= 0x30 && cp <= 0x39) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));
	    },
	    // ECMA-262 11.8.3 Numeric Literals
	    isDecimalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39); // 0..9
	    },
	    isHexDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39) ||
	            (cp >= 0x41 && cp <= 0x46) ||
	            (cp >= 0x61 && cp <= 0x66); // a..f
	    },
	    isOctalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x37); // 0..7
	    }
	};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var syntax_1 = __webpack_require__(2);
	var ArrayExpression = (function () {
	    function ArrayExpression(elements) {
	        this.type = syntax_1.Syntax.ArrayExpression;
	        this.elements = elements;
	    }
	    return ArrayExpression;
	}());
	exports.ArrayExpression = ArrayExpression;
	var ArrayPattern = (function () {
	    function ArrayPattern(elements) {
	        this.type = syntax_1.Syntax.ArrayPattern;
	        this.elements = elements;
	    }
	    return ArrayPattern;
	}());
	exports.ArrayPattern = ArrayPattern;
	var ArrowFunctionExpression = (function () {
	    function ArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	    }
	    return ArrowFunctionExpression;
	}());
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	var AssignmentExpression = (function () {
	    function AssignmentExpression(operator, left, right) {
	        this.type = syntax_1.Syntax.AssignmentExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentExpression;
	}());
	exports.AssignmentExpression = AssignmentExpression;
	var AssignmentPattern = (function () {
	    function AssignmentPattern(left, right) {
	        this.type = syntax_1.Syntax.AssignmentPattern;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentPattern;
	}());
	exports.AssignmentPattern = AssignmentPattern;
	var BinaryExpression = (function () {
	    function BinaryExpression(operator, left, right) {
	        var logical = (operator === '||' || operator === '&&');
	        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return BinaryExpression;
	}());
	exports.BinaryExpression = BinaryExpression;
	var BlockStatement = (function () {
	    function BlockStatement(body) {
	        this.type = syntax_1.Syntax.BlockStatement;
	        this.body = body;
	    }
	    return BlockStatement;
	}());
	exports.BlockStatement = BlockStatement;
	var BreakStatement = (function () {
	    function BreakStatement(label) {
	        this.type = syntax_1.Syntax.BreakStatement;
	        this.label = label;
	    }
	    return BreakStatement;
	}());
	exports.BreakStatement = BreakStatement;
	var CallExpression = (function () {
	    function CallExpression(callee, args) {
	        this.type = syntax_1.Syntax.CallExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return CallExpression;
	}());
	exports.CallExpression = CallExpression;
	var CatchClause = (function () {
	    function CatchClause(param, body) {
	        this.type = syntax_1.Syntax.CatchClause;
	        this.param = param;
	        this.body = body;
	    }
	    return CatchClause;
	}());
	exports.CatchClause = CatchClause;
	var ClassBody = (function () {
	    function ClassBody(body) {
	        this.type = syntax_1.Syntax.ClassBody;
	        this.body = body;
	    }
	    return ClassBody;
	}());
	exports.ClassBody = ClassBody;
	var ClassDeclaration = (function () {
	    function ClassDeclaration(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassDeclaration;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassDeclaration;
	}());
	exports.ClassDeclaration = ClassDeclaration;
	var ClassExpression = (function () {
	    function ClassExpression(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassExpression;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassExpression;
	}());
	exports.ClassExpression = ClassExpression;
	var ComputedMemberExpression = (function () {
	    function ComputedMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = true;
	        this.object = object;
	        this.property = property;
	    }
	    return ComputedMemberExpression;
	}());
	exports.ComputedMemberExpression = ComputedMemberExpression;
	var ConditionalExpression = (function () {
	    function ConditionalExpression(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.ConditionalExpression;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return ConditionalExpression;
	}());
	exports.ConditionalExpression = ConditionalExpression;
	var ContinueStatement = (function () {
	    function ContinueStatement(label) {
	        this.type = syntax_1.Syntax.ContinueStatement;
	        this.label = label;
	    }
	    return ContinueStatement;
	}());
	exports.ContinueStatement = ContinueStatement;
	var DebuggerStatement = (function () {
	    function DebuggerStatement() {
	        this.type = syntax_1.Syntax.DebuggerStatement;
	    }
	    return DebuggerStatement;
	}());
	exports.DebuggerStatement = DebuggerStatement;
	var Directive = (function () {
	    function Directive(expression, directive) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	        this.directive = directive;
	    }
	    return Directive;
	}());
	exports.Directive = Directive;
	var DoWhileStatement = (function () {
	    function DoWhileStatement(body, test) {
	        this.type = syntax_1.Syntax.DoWhileStatement;
	        this.body = body;
	        this.test = test;
	    }
	    return DoWhileStatement;
	}());
	exports.DoWhileStatement = DoWhileStatement;
	var EmptyStatement = (function () {
	    function EmptyStatement() {
	        this.type = syntax_1.Syntax.EmptyStatement;
	    }
	    return EmptyStatement;
	}());
	exports.EmptyStatement = EmptyStatement;
	var ExportAllDeclaration = (function () {
	    function ExportAllDeclaration(source) {
	        this.type = syntax_1.Syntax.ExportAllDeclaration;
	        this.source = source;
	    }
	    return ExportAllDeclaration;
	}());
	exports.ExportAllDeclaration = ExportAllDeclaration;
	var ExportDefaultDeclaration = (function () {
	    function ExportDefaultDeclaration(declaration) {
	        this.type = syntax_1.Syntax.ExportDefaultDeclaration;
	        this.declaration = declaration;
	    }
	    return ExportDefaultDeclaration;
	}());
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	var ExportNamedDeclaration = (function () {
	    function ExportNamedDeclaration(declaration, specifiers, source) {
	        this.type = syntax_1.Syntax.ExportNamedDeclaration;
	        this.declaration = declaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ExportNamedDeclaration;
	}());
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	var ExportSpecifier = (function () {
	    function ExportSpecifier(local, exported) {
	        this.type = syntax_1.Syntax.ExportSpecifier;
	        this.exported = exported;
	        this.local = local;
	    }
	    return ExportSpecifier;
	}());
	exports.ExportSpecifier = ExportSpecifier;
	var ExpressionStatement = (function () {
	    function ExpressionStatement(expression) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	    }
	    return ExpressionStatement;
	}());
	exports.ExpressionStatement = ExpressionStatement;
	var ForInStatement = (function () {
	    function ForInStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForInStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	        this.each = false;
	    }
	    return ForInStatement;
	}());
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = (function () {
	    function ForOfStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForOfStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	    }
	    return ForOfStatement;
	}());
	exports.ForOfStatement = ForOfStatement;
	var ForStatement = (function () {
	    function ForStatement(init, test, update, body) {
	        this.type = syntax_1.Syntax.ForStatement;
	        this.init = init;
	        this.test = test;
	        this.update = update;
	        this.body = body;
	    }
	    return ForStatement;
	}());
	exports.ForStatement = ForStatement;
	var FunctionDeclaration = (function () {
	    function FunctionDeclaration(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	    }
	    return FunctionDeclaration;
	}());
	exports.FunctionDeclaration = FunctionDeclaration;
	var FunctionExpression = (function () {
	    function FunctionExpression(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	    }
	    return FunctionExpression;
	}());
	exports.FunctionExpression = FunctionExpression;
	var Identifier = (function () {
	    function Identifier(name) {
	        this.type = syntax_1.Syntax.Identifier;
	        this.name = name;
	    }
	    return Identifier;
	}());
	exports.Identifier = Identifier;
	var IfStatement = (function () {
	    function IfStatement(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.IfStatement;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return IfStatement;
	}());
	exports.IfStatement = IfStatement;
	var ImportDeclaration = (function () {
	    function ImportDeclaration(specifiers, source) {
	        this.type = syntax_1.Syntax.ImportDeclaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ImportDeclaration;
	}());
	exports.ImportDeclaration = ImportDeclaration;
	var ImportDefaultSpecifier = (function () {
	    function ImportDefaultSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportDefaultSpecifier;
	        this.local = local;
	    }
	    return ImportDefaultSpecifier;
	}());
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	var ImportNamespaceSpecifier = (function () {
	    function ImportNamespaceSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
	        this.local = local;
	    }
	    return ImportNamespaceSpecifier;
	}());
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
	var ImportSpecifier = (function () {
	    function ImportSpecifier(local, imported) {
	        this.type = syntax_1.Syntax.ImportSpecifier;
	        this.local = local;
	        this.imported = imported;
	    }
	    return ImportSpecifier;
	}());
	exports.ImportSpecifier = ImportSpecifier;
	var LabeledStatement = (function () {
	    function LabeledStatement(label, body) {
	        this.type = syntax_1.Syntax.LabeledStatement;
	        this.label = label;
	        this.body = body;
	    }
	    return LabeledStatement;
	}());
	exports.LabeledStatement = LabeledStatement;
	var Literal = (function () {
	    function Literal(value, raw) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	    }
	    return Literal;
	}());
	exports.Literal = Literal;
	var MetaProperty = (function () {
	    function MetaProperty(meta, property) {
	        this.type = syntax_1.Syntax.MetaProperty;
	        this.meta = meta;
	        this.property = property;
	    }
	    return MetaProperty;
	}());
	exports.MetaProperty = MetaProperty;
	var MethodDefinition = (function () {
	    function MethodDefinition(key, computed, value, kind, isStatic) {
	        this.type = syntax_1.Syntax.MethodDefinition;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.static = isStatic;
	    }
	    return MethodDefinition;
	}());
	exports.MethodDefinition = MethodDefinition;
	var NewExpression = (function () {
	    function NewExpression(callee, args) {
	        this.type = syntax_1.Syntax.NewExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return NewExpression;
	}());
	exports.NewExpression = NewExpression;
	var ObjectExpression = (function () {
	    function ObjectExpression(properties) {
	        this.type = syntax_1.Syntax.ObjectExpression;
	        this.properties = properties;
	    }
	    return ObjectExpression;
	}());
	exports.ObjectExpression = ObjectExpression;
	var ObjectPattern = (function () {
	    function ObjectPattern(properties) {
	        this.type = syntax_1.Syntax.ObjectPattern;
	        this.properties = properties;
	    }
	    return ObjectPattern;
	}());
	exports.ObjectPattern = ObjectPattern;
	var Program = (function () {
	    function Program(body, sourceType) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = sourceType;
	    }
	    return Program;
	}());
	exports.Program = Program;
	var Property = (function () {
	    function Property(kind, key, computed, value, method, shorthand) {
	        this.type = syntax_1.Syntax.Property;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.method = method;
	        this.shorthand = shorthand;
	    }
	    return Property;
	}());
	exports.Property = Property;
	var RegexLiteral = (function () {
	    function RegexLiteral(value, raw, regex) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	        this.regex = regex;
	    }
	    return RegexLiteral;
	}());
	exports.RegexLiteral = RegexLiteral;
	var RestElement = (function () {
	    function RestElement(argument) {
	        this.type = syntax_1.Syntax.RestElement;
	        this.argument = argument;
	    }
	    return RestElement;
	}());
	exports.RestElement = RestElement;
	var ReturnStatement = (function () {
	    function ReturnStatement(argument) {
	        this.type = syntax_1.Syntax.ReturnStatement;
	        this.argument = argument;
	    }
	    return ReturnStatement;
	}());
	exports.ReturnStatement = ReturnStatement;
	var SequenceExpression = (function () {
	    function SequenceExpression(expressions) {
	        this.type = syntax_1.Syntax.SequenceExpression;
	        this.expressions = expressions;
	    }
	    return SequenceExpression;
	}());
	exports.SequenceExpression = SequenceExpression;
	var SpreadElement = (function () {
	    function SpreadElement(argument) {
	        this.type = syntax_1.Syntax.SpreadElement;
	        this.argument = argument;
	    }
	    return SpreadElement;
	}());
	exports.SpreadElement = SpreadElement;
	var StaticMemberExpression = (function () {
	    function StaticMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = false;
	        this.object = object;
	        this.property = property;
	    }
	    return StaticMemberExpression;
	}());
	exports.StaticMemberExpression = StaticMemberExpression;
	var Super = (function () {
	    function Super() {
	        this.type = syntax_1.Syntax.Super;
	    }
	    return Super;
	}());
	exports.Super = Super;
	var SwitchCase = (function () {
	    function SwitchCase(test, consequent) {
	        this.type = syntax_1.Syntax.SwitchCase;
	        this.test = test;
	        this.consequent = consequent;
	    }
	    return SwitchCase;
	}());
	exports.SwitchCase = SwitchCase;
	var SwitchStatement = (function () {
	    function SwitchStatement(discriminant, cases) {
	        this.type = syntax_1.Syntax.SwitchStatement;
	        this.discriminant = discriminant;
	        this.cases = cases;
	    }
	    return SwitchStatement;
	}());
	exports.SwitchStatement = SwitchStatement;
	var TaggedTemplateExpression = (function () {
	    function TaggedTemplateExpression(tag, quasi) {
	        this.type = syntax_1.Syntax.TaggedTemplateExpression;
	        this.tag = tag;
	        this.quasi = quasi;
	    }
	    return TaggedTemplateExpression;
	}());
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	var TemplateElement = (function () {
	    function TemplateElement(value, tail) {
	        this.type = syntax_1.Syntax.TemplateElement;
	        this.value = value;
	        this.tail = tail;
	    }
	    return TemplateElement;
	}());
	exports.TemplateElement = TemplateElement;
	var TemplateLiteral = (function () {
	    function TemplateLiteral(quasis, expressions) {
	        this.type = syntax_1.Syntax.TemplateLiteral;
	        this.quasis = quasis;
	        this.expressions = expressions;
	    }
	    return TemplateLiteral;
	}());
	exports.TemplateLiteral = TemplateLiteral;
	var ThisExpression = (function () {
	    function ThisExpression() {
	        this.type = syntax_1.Syntax.ThisExpression;
	    }
	    return ThisExpression;
	}());
	exports.ThisExpression = ThisExpression;
	var ThrowStatement = (function () {
	    function ThrowStatement(argument) {
	        this.type = syntax_1.Syntax.ThrowStatement;
	        this.argument = argument;
	    }
	    return ThrowStatement;
	}());
	exports.ThrowStatement = ThrowStatement;
	var TryStatement = (function () {
	    function TryStatement(block, handler, finalizer) {
	        this.type = syntax_1.Syntax.TryStatement;
	        this.block = block;
	        this.handler = handler;
	        this.finalizer = finalizer;
	    }
	    return TryStatement;
	}());
	exports.TryStatement = TryStatement;
	var UnaryExpression = (function () {
	    function UnaryExpression(operator, argument) {
	        this.type = syntax_1.Syntax.UnaryExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = true;
	    }
	    return UnaryExpression;
	}());
	exports.UnaryExpression = UnaryExpression;
	var UpdateExpression = (function () {
	    function UpdateExpression(operator, argument, prefix) {
	        this.type = syntax_1.Syntax.UpdateExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = prefix;
	    }
	    return UpdateExpression;
	}());
	exports.UpdateExpression = UpdateExpression;
	var VariableDeclaration = (function () {
	    function VariableDeclaration(declarations, kind) {
	        this.type = syntax_1.Syntax.VariableDeclaration;
	        this.declarations = declarations;
	        this.kind = kind;
	    }
	    return VariableDeclaration;
	}());
	exports.VariableDeclaration = VariableDeclaration;
	var VariableDeclarator = (function () {
	    function VariableDeclarator(id, init) {
	        this.type = syntax_1.Syntax.VariableDeclarator;
	        this.id = id;
	        this.init = init;
	    }
	    return VariableDeclarator;
	}());
	exports.VariableDeclarator = VariableDeclarator;
	var WhileStatement = (function () {
	    function WhileStatement(test, body) {
	        this.type = syntax_1.Syntax.WhileStatement;
	        this.test = test;
	        this.body = body;
	    }
	    return WhileStatement;
	}());
	exports.WhileStatement = WhileStatement;
	var WithStatement = (function () {
	    function WithStatement(object, body) {
	        this.type = syntax_1.Syntax.WithStatement;
	        this.object = object;
	        this.body = body;
	    }
	    return WithStatement;
	}());
	exports.WithStatement = WithStatement;
	var YieldExpression = (function () {
	    function YieldExpression(argument, delegate) {
	        this.type = syntax_1.Syntax.YieldExpression;
	        this.argument = argument;
	        this.delegate = delegate;
	    }
	    return YieldExpression;
	}());
	exports.YieldExpression = YieldExpression;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
/* istanbul ignore next */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var character_1 = __webpack_require__(9);
	var token_1 = __webpack_require__(7);
	var parser_1 = __webpack_require__(3);
	var xhtml_entities_1 = __webpack_require__(12);
	var jsx_syntax_1 = __webpack_require__(13);
	var Node = __webpack_require__(10);
	var JSXNode = __webpack_require__(14);
	var JSXToken;
	(function (JSXToken) {
	    JSXToken[JSXToken["Identifier"] = 100] = "Identifier";
	    JSXToken[JSXToken["Text"] = 101] = "Text";
	})(JSXToken || (JSXToken = {}));
	token_1.TokenName[JSXToken.Identifier] = 'JSXIdentifier';
	token_1.TokenName[JSXToken.Text] = 'JSXText';
	// Fully qualified element name, e.g. <svg:path> returns "svg:path"
	function getQualifiedElementName(elementName) {
	    var qualifiedName;
	    switch (elementName.type) {
	        case jsx_syntax_1.JSXSyntax.JSXIdentifier:
	            var id = (elementName);
	            qualifiedName = id.name;
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
	            var ns = (elementName);
	            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +
	                getQualifiedElementName(ns.name);
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
	            var expr = (elementName);
	            qualifiedName = getQualifiedElementName(expr.object) + '.' +
	                getQualifiedElementName(expr.property);
	            break;
	    }
	    return qualifiedName;
	}
	var JSXParser = (function (_super) {
	    __extends(JSXParser, _super);
	    function JSXParser(code, options, delegate) {
	        _super.call(this, code, options, delegate);
	    }
	    JSXParser.prototype.parsePrimaryExpression = function () {
	        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
	    };
	    JSXParser.prototype.startJSX = function () {
	        // Unwind the scanner before the lookahead token.
	        this.scanner.index = this.startMarker.index;
	        this.scanner.lineNumber = this.startMarker.lineNumber;
	        this.scanner.lineStart = this.startMarker.lineStart;
	    };
	    JSXParser.prototype.finishJSX = function () {
	        // Prime the next lookahead.
	        this.nextToken();
	    };
	    JSXParser.prototype.reenterJSX = function () {
	        this.startJSX();
	        this.expectJSX('}');
	        // Pop the closing '}' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	    };
	    JSXParser.prototype.createJSXNode = function () {
	        this.collectComments();
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.createJSXChildNode = function () {
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.scanXHTMLEntity = function (quote) {
	        var result = '&';
	        var valid = true;
	        var terminated = false;
	        var numeric = false;
	        var hex = false;
	        while (!this.scanner.eof() && valid && !terminated) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === quote) {
	                break;
	            }
	            terminated = (ch === ';');
	            result += ch;
	            ++this.scanner.index;
	            if (!terminated) {
	                switch (result.length) {
	                    case 2:
	                        // e.g. '&#123;'
	                        numeric = (ch === '#');
	                        break;
	                    case 3:
	                        if (numeric) {
	                            // e.g. '&#x41;'
	                            hex = (ch === 'x');
	                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
	                            numeric = numeric && !hex;
	                        }
	                        break;
	                    default:
	                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
	                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
	                        break;
	                }
	            }
	        }
	        if (valid && terminated && result.length > 2) {
	            // e.g. '&#x41;' becomes just '#x41'
	            var str = result.substr(1, result.length - 2);
	            if (numeric && str.length > 1) {
	                result = String.fromCharCode(parseInt(str.substr(1), 10));
	            }
	            else if (hex && str.length > 2) {
	                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
	            }
	            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
	                result = xhtml_entities_1.XHTMLEntities[str];
	            }
	        }
	        return result;
	    };
	    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
	    JSXParser.prototype.lexJSX = function () {
	        var cp = this.scanner.source.charCodeAt(this.scanner.index);
	        // < > / : = { }
	        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
	            var value = this.scanner.source[this.scanner.index++];
	            return {
	                type: token_1.Token.Punctuator,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index - 1,
	                end: this.scanner.index
	            };
	        }
	        // " '
	        if (cp === 34 || cp === 39) {
	            var start = this.scanner.index;
	            var quote = this.scanner.source[this.scanner.index++];
	            var str = '';
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source[this.scanner.index++];
	                if (ch === quote) {
	                    break;
	                }
	                else if (ch === '&') {
	                    str += this.scanXHTMLEntity(quote);
	                }
	                else {
	                    str += ch;
	                }
	            }
	            return {
	                type: token_1.Token.StringLiteral,
	                value: str,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // ... or .
	        if (cp === 46) {
	            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
	            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
	            var value = (n1 === 46 && n2 === 46) ? '...' : '.';
	            var start = this.scanner.index;
	            this.scanner.index += value.length;
	            return {
	                type: token_1.Token.Punctuator,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // `
	        if (cp === 96) {
	            // Only placeholder, since it will be rescanned as a real assignment expression.
	            return {
	                type: token_1.Token.Template,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index,
	                end: this.scanner.index
	            };
	        }
	        // Identifer can not contain backslash (char code 92).
	        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {
	            var start = this.scanner.index;
	            ++this.scanner.index;
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source.charCodeAt(this.scanner.index);
	                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {
	                    ++this.scanner.index;
	                }
	                else if (ch === 45) {
	                    // Hyphen (char code 45) can be part of an identifier.
	                    ++this.scanner.index;
	                }
	                else {
	                    break;
	                }
	            }
	            var id = this.scanner.source.slice(start, this.scanner.index);
	            return {
	                type: JSXToken.Identifier,
	                value: id,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        this.scanner.throwUnexpectedToken();
	    };
	    JSXParser.prototype.nextJSXToken = function () {
	        this.collectComments();
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.lineNumber = this.scanner.lineNumber;
	        this.startMarker.lineStart = this.scanner.lineStart;
	        var token = this.lexJSX();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.lineNumber = this.scanner.lineNumber;
	        this.lastMarker.lineStart = this.scanner.lineStart;
	        if (this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.nextJSXText = function () {
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.lineNumber = this.scanner.lineNumber;
	        this.startMarker.lineStart = this.scanner.lineStart;
	        var start = this.scanner.index;
	        var text = '';
	        while (!this.scanner.eof()) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === '{' || ch === '<') {
	                break;
	            }
	            ++this.scanner.index;
	            text += ch;
	            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.scanner.lineNumber;
	                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
	                    ++this.scanner.index;
	                }
	                this.scanner.lineStart = this.scanner.index;
	            }
	        }
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.lineNumber = this.scanner.lineNumber;
	        this.lastMarker.lineStart = this.scanner.lineStart;
	        var token = {
	            type: JSXToken.Text,
	            value: text,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: this.scanner.lineStart,
	            start: start,
	            end: this.scanner.index
	        };
	        if ((text.length > 0) && this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.peekJSXToken = function () {
	        var previousIndex = this.scanner.index;
	        var previousLineNumber = this.scanner.lineNumber;
	        var previousLineStart = this.scanner.lineStart;
	        this.scanner.scanComments();
	        var next = this.lexJSX();
	        this.scanner.index = previousIndex;
	        this.scanner.lineNumber = previousLineNumber;
	        this.scanner.lineStart = previousLineStart;
	        return next;
	    };
	    // Expect the next JSX token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    JSXParser.prototype.expectJSX = function (value) {
	        var token = this.nextJSXToken();
	        if (token.type !== token_1.Token.Punctuator || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next JSX token matches the specified punctuator.
	    JSXParser.prototype.matchJSX = function (value) {
	        var next = this.peekJSXToken();
	        return next.type === token_1.Token.Punctuator && next.value === value;
	    };
	    JSXParser.prototype.parseJSXIdentifier = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== JSXToken.Identifier) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
	    };
	    JSXParser.prototype.parseJSXElementName = function () {
	        var node = this.createJSXNode();
	        var elementName = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = elementName;
	            this.expectJSX(':');
	            var name_1 = this.parseJSXIdentifier();
	            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
	        }
	        else if (this.matchJSX('.')) {
	            while (this.matchJSX('.')) {
	                var object = elementName;
	                this.expectJSX('.');
	                var property = this.parseJSXIdentifier();
	                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
	            }
	        }
	        return elementName;
	    };
	    JSXParser.prototype.parseJSXAttributeName = function () {
	        var node = this.createJSXNode();
	        var attributeName;
	        var identifier = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = identifier;
	            this.expectJSX(':');
	            var name_2 = this.parseJSXIdentifier();
	            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
	        }
	        else {
	            attributeName = identifier;
	        }
	        return attributeName;
	    };
	    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== token_1.Token.StringLiteral) {
	            this.throwUnexpectedToken(token);
	        }
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    JSXParser.prototype.parseJSXExpressionAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.finishJSX();
	        if (this.match('}')) {
	            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
	        }
	        var expression = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXAttributeValue = function () {
	        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :
	            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
	    };
	    JSXParser.prototype.parseJSXNameValueAttribute = function () {
	        var node = this.createJSXNode();
	        var name = this.parseJSXAttributeName();
	        var value = null;
	        if (this.matchJSX('=')) {
	            this.expectJSX('=');
	            value = this.parseJSXAttributeValue();
	        }
	        return this.finalize(node, new JSXNode.JSXAttribute(name, value));
	    };
	    JSXParser.prototype.parseJSXSpreadAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.expectJSX('...');
	        this.finishJSX();
	        var argument = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
	    };
	    JSXParser.prototype.parseJSXAttributes = function () {
	        var attributes = [];
	        while (!this.matchJSX('/') && !this.matchJSX('>')) {
	            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :
	                this.parseJSXNameValueAttribute();
	            attributes.push(attribute);
	        }
	        return attributes;
	    };
	    JSXParser.prototype.parseJSXOpeningElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXBoundaryElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        if (this.matchJSX('/')) {
	            this.expectJSX('/');
	            var name_3 = this.parseJSXElementName();
	            this.expectJSX('>');
	            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
	        }
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXEmptyExpression = function () {
	        var node = this.createJSXChildNode();
	        this.collectComments();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.lineNumber = this.scanner.lineNumber;
	        this.lastMarker.lineStart = this.scanner.lineStart;
	        return this.finalize(node, new JSXNode.JSXEmptyExpression());
	    };
	    JSXParser.prototype.parseJSXExpressionContainer = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        var expression;
	        if (this.matchJSX('}')) {
	            expression = this.parseJSXEmptyExpression();
	            this.expectJSX('}');
	        }
	        else {
	            this.finishJSX();
	            expression = this.parseAssignmentExpression();
	            this.reenterJSX();
	        }
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXChildren = function () {
	        var children = [];
	        while (!this.scanner.eof()) {
	            var node = this.createJSXChildNode();
	            var token = this.nextJSXText();
	            if (token.start < token.end) {
	                var raw = this.getTokenRaw(token);
	                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
	                children.push(child);
	            }
	            if (this.scanner.source[this.scanner.index] === '{') {
	                var container = this.parseJSXExpressionContainer();
	                children.push(container);
	            }
	            else {
	                break;
	            }
	        }
	        return children;
	    };
	    JSXParser.prototype.parseComplexJSXElement = function (el) {
	        var stack = [];
	        while (!this.scanner.eof()) {
	            el.children = el.children.concat(this.parseJSXChildren());
	            var node = this.createJSXChildNode();
	            var element = this.parseJSXBoundaryElement();
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
	                var opening = (element);
	                if (opening.selfClosing) {
	                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
	                    el.children.push(child);
	                }
	                else {
	                    stack.push(el);
	                    el = { node: node, opening: opening, closing: null, children: [] };
	                }
	            }
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
	                el.closing = (element);
	                var open_1 = getQualifiedElementName(el.opening.name);
	                var close_1 = getQualifiedElementName(el.closing.name);
	                if (open_1 !== close_1) {
	                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
	                }
	                if (stack.length > 0) {
	                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
	                    el = stack.pop();
	                    el.children.push(child);
	                }
	                else {
	                    break;
	                }
	            }
	        }
	        return el;
	    };
	    JSXParser.prototype.parseJSXElement = function () {
	        var node = this.createJSXNode();
	        var opening = this.parseJSXOpeningElement();
	        var children = [];
	        var closing = null;
	        if (!opening.selfClosing) {
	            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });
	            children = el.children;
	            closing = el.closing;
	        }
	        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
	    };
	    JSXParser.prototype.parseJSXRoot = function () {
	        // Pop the opening '<' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	        this.startJSX();
	        var element = this.parseJSXElement();
	        this.finishJSX();
	        return element;
	    };
	    return JSXParser;
	}(parser_1.Parser));
	exports.JSXParser = JSXParser;


/***/ },
/* 12 */
/***/ function(module, exports) {

	// Generated by generate-xhtml-entities.js. DO NOT MODIFY!
	"use strict";
	exports.XHTMLEntities = {
	    quot: '\u0022',
	    amp: '\u0026',
	    apos: '\u0027',
	    gt: '\u003E',
	    nbsp: '\u00A0',
	    iexcl: '\u00A1',
	    cent: '\u00A2',
	    pound: '\u00A3',
	    curren: '\u00A4',
	    yen: '\u00A5',
	    brvbar: '\u00A6',
	    sect: '\u00A7',
	    uml: '\u00A8',
	    copy: '\u00A9',
	    ordf: '\u00AA',
	    laquo: '\u00AB',
	    not: '\u00AC',
	    shy: '\u00AD',
	    reg: '\u00AE',
	    macr: '\u00AF',
	    deg: '\u00B0',
	    plusmn: '\u00B1',
	    sup2: '\u00B2',
	    sup3: '\u00B3',
	    acute: '\u00B4',
	    micro: '\u00B5',
	    para: '\u00B6',
	    middot: '\u00B7',
	    cedil: '\u00B8',
	    sup1: '\u00B9',
	    ordm: '\u00BA',
	    raquo: '\u00BB',
	    frac14: '\u00BC',
	    frac12: '\u00BD',
	    frac34: '\u00BE',
	    iquest: '\u00BF',
	    Agrave: '\u00C0',
	    Aacute: '\u00C1',
	    Acirc: '\u00C2',
	    Atilde: '\u00C3',
	    Auml: '\u00C4',
	    Aring: '\u00C5',
	    AElig: '\u00C6',
	    Ccedil: '\u00C7',
	    Egrave: '\u00C8',
	    Eacute: '\u00C9',
	    Ecirc: '\u00CA',
	    Euml: '\u00CB',
	    Igrave: '\u00CC',
	    Iacute: '\u00CD',
	    Icirc: '\u00CE',
	    Iuml: '\u00CF',
	    ETH: '\u00D0',
	    Ntilde: '\u00D1',
	    Ograve: '\u00D2',
	    Oacute: '\u00D3',
	    Ocirc: '\u00D4',
	    Otilde: '\u00D5',
	    Ouml: '\u00D6',
	    times: '\u00D7',
	    Oslash: '\u00D8',
	    Ugrave: '\u00D9',
	    Uacute: '\u00DA',
	    Ucirc: '\u00DB',
	    Uuml: '\u00DC',
	    Yacute: '\u00DD',
	    THORN: '\u00DE',
	    szlig: '\u00DF',
	    agrave: '\u00E0',
	    aacute: '\u00E1',
	    acirc: '\u00E2',
	    atilde: '\u00E3',
	    auml: '\u00E4',
	    aring: '\u00E5',
	    aelig: '\u00E6',
	    ccedil: '\u00E7',
	    egrave: '\u00E8',
	    eacute: '\u00E9',
	    ecirc: '\u00EA',
	    euml: '\u00EB',
	    igrave: '\u00EC',
	    iacute: '\u00ED',
	    icirc: '\u00EE',
	    iuml: '\u00EF',
	    eth: '\u00F0',
	    ntilde: '\u00F1',
	    ograve: '\u00F2',
	    oacute: '\u00F3',
	    ocirc: '\u00F4',
	    otilde: '\u00F5',
	    ouml: '\u00F6',
	    divide: '\u00F7',
	    oslash: '\u00F8',
	    ugrave: '\u00F9',
	    uacute: '\u00FA',
	    ucirc: '\u00FB',
	    uuml: '\u00FC',
	    yacute: '\u00FD',
	    thorn: '\u00FE',
	    yuml: '\u00FF',
	    OElig: '\u0152',
	    oelig: '\u0153',
	    Scaron: '\u0160',
	    scaron: '\u0161',
	    Yuml: '\u0178',
	    fnof: '\u0192',
	    circ: '\u02C6',
	    tilde: '\u02DC',
	    Alpha: '\u0391',
	    Beta: '\u0392',
	    Gamma: '\u0393',
	    Delta: '\u0394',
	    Epsilon: '\u0395',
	    Zeta: '\u0396',
	    Eta: '\u0397',
	    Theta: '\u0398',
	    Iota: '\u0399',
	    Kappa: '\u039A',
	    Lambda: '\u039B',
	    Mu: '\u039C',
	    Nu: '\u039D',
	    Xi: '\u039E',
	    Omicron: '\u039F',
	    Pi: '\u03A0',
	    Rho: '\u03A1',
	    Sigma: '\u03A3',
	    Tau: '\u03A4',
	    Upsilon: '\u03A5',
	    Phi: '\u03A6',
	    Chi: '\u03A7',
	    Psi: '\u03A8',
	    Omega: '\u03A9',
	    alpha: '\u03B1',
	    beta: '\u03B2',
	    gamma: '\u03B3',
	    delta: '\u03B4',
	    epsilon: '\u03B5',
	    zeta: '\u03B6',
	    eta: '\u03B7',
	    theta: '\u03B8',
	    iota: '\u03B9',
	    kappa: '\u03BA',
	    lambda: '\u03BB',
	    mu: '\u03BC',
	    nu: '\u03BD',
	    xi: '\u03BE',
	    omicron: '\u03BF',
	    pi: '\u03C0',
	    rho: '\u03C1',
	    sigmaf: '\u03C2',
	    sigma: '\u03C3',
	    tau: '\u03C4',
	    upsilon: '\u03C5',
	    phi: '\u03C6',
	    chi: '\u03C7',
	    psi: '\u03C8',
	    omega: '\u03C9',
	    thetasym: '\u03D1',
	    upsih: '\u03D2',
	    piv: '\u03D6',
	    ensp: '\u2002',
	    emsp: '\u2003',
	    thinsp: '\u2009',
	    zwnj: '\u200C',
	    zwj: '\u200D',
	    lrm: '\u200E',
	    rlm: '\u200F',
	    ndash: '\u2013',
	    mdash: '\u2014',
	    lsquo: '\u2018',
	    rsquo: '\u2019',
	    sbquo: '\u201A',
	    ldquo: '\u201C',
	    rdquo: '\u201D',
	    bdquo: '\u201E',
	    dagger: '\u2020',
	    Dagger: '\u2021',
	    bull: '\u2022',
	    hellip: '\u2026',
	    permil: '\u2030',
	    prime: '\u2032',
	    Prime: '\u2033',
	    lsaquo: '\u2039',
	    rsaquo: '\u203A',
	    oline: '\u203E',
	    frasl: '\u2044',
	    euro: '\u20AC',
	    image: '\u2111',
	    weierp: '\u2118',
	    real: '\u211C',
	    trade: '\u2122',
	    alefsym: '\u2135',
	    larr: '\u2190',
	    uarr: '\u2191',
	    rarr: '\u2192',
	    darr: '\u2193',
	    harr: '\u2194',
	    crarr: '\u21B5',
	    lArr: '\u21D0',
	    uArr: '\u21D1',
	    rArr: '\u21D2',
	    dArr: '\u21D3',
	    hArr: '\u21D4',
	    forall: '\u2200',
	    part: '\u2202',
	    exist: '\u2203',
	    empty: '\u2205',
	    nabla: '\u2207',
	    isin: '\u2208',
	    notin: '\u2209',
	    ni: '\u220B',
	    prod: '\u220F',
	    sum: '\u2211',
	    minus: '\u2212',
	    lowast: '\u2217',
	    radic: '\u221A',
	    prop: '\u221D',
	    infin: '\u221E',
	    ang: '\u2220',
	    and: '\u2227',
	    or: '\u2228',
	    cap: '\u2229',
	    cup: '\u222A',
	    int: '\u222B',
	    there4: '\u2234',
	    sim: '\u223C',
	    cong: '\u2245',
	    asymp: '\u2248',
	    ne: '\u2260',
	    equiv: '\u2261',
	    le: '\u2264',
	    ge: '\u2265',
	    sub: '\u2282',
	    sup: '\u2283',
	    nsub: '\u2284',
	    sube: '\u2286',
	    supe: '\u2287',
	    oplus: '\u2295',
	    otimes: '\u2297',
	    perp: '\u22A5',
	    sdot: '\u22C5',
	    lceil: '\u2308',
	    rceil: '\u2309',
	    lfloor: '\u230A',
	    rfloor: '\u230B',
	    loz: '\u25CA',
	    spades: '\u2660',
	    clubs: '\u2663',
	    hearts: '\u2665',
	    diams: '\u2666',
	    lang: '\u27E8',
	    rang: '\u27E9'
	};


/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	exports.JSXSyntax = {
	    JSXAttribute: 'JSXAttribute',
	    JSXClosingElement: 'JSXClosingElement',
	    JSXElement: 'JSXElement',
	    JSXEmptyExpression: 'JSXEmptyExpression',
	    JSXExpressionContainer: 'JSXExpressionContainer',
	    JSXIdentifier: 'JSXIdentifier',
	    JSXMemberExpression: 'JSXMemberExpression',
	    JSXNamespacedName: 'JSXNamespacedName',
	    JSXOpeningElement: 'JSXOpeningElement',
	    JSXSpreadAttribute: 'JSXSpreadAttribute',
	    JSXText: 'JSXText'
	};


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var jsx_syntax_1 = __webpack_require__(13);
	var JSXClosingElement = (function () {
	    function JSXClosingElement(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
	        this.name = name;
	    }
	    return JSXClosingElement;
	}());
	exports.JSXClosingElement = JSXClosingElement;
	var JSXElement = (function () {
	    function JSXElement(openingElement, children, closingElement) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXElement;
	        this.openingElement = openingElement;
	        this.children = children;
	        this.closingElement = closingElement;
	    }
	    return JSXElement;
	}());
	exports.JSXElement = JSXElement;
	var JSXEmptyExpression = (function () {
	    function JSXEmptyExpression() {
	        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
	    }
	    return JSXEmptyExpression;
	}());
	exports.JSXEmptyExpression = JSXEmptyExpression;
	var JSXExpressionContainer = (function () {
	    function JSXExpressionContainer(expression) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
	        this.expression = expression;
	    }
	    return JSXExpressionContainer;
	}());
	exports.JSXExpressionContainer = JSXExpressionContainer;
	var JSXIdentifier = (function () {
	    function JSXIdentifier(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
	        this.name = name;
	    }
	    return JSXIdentifier;
	}());
	exports.JSXIdentifier = JSXIdentifier;
	var JSXMemberExpression = (function () {
	    function JSXMemberExpression(object, property) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
	        this.object = object;
	        this.property = property;
	    }
	    return JSXMemberExpression;
	}());
	exports.JSXMemberExpression = JSXMemberExpression;
	var JSXAttribute = (function () {
	    function JSXAttribute(name, value) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
	        this.name = name;
	        this.value = value;
	    }
	    return JSXAttribute;
	}());
	exports.JSXAttribute = JSXAttribute;
	var JSXNamespacedName = (function () {
	    function JSXNamespacedName(namespace, name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
	        this.namespace = namespace;
	        this.name = name;
	    }
	    return JSXNamespacedName;
	}());
	exports.JSXNamespacedName = JSXNamespacedName;
	var JSXOpeningElement = (function () {
	    function JSXOpeningElement(name, selfClosing, attributes) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
	        this.name = name;
	        this.selfClosing = selfClosing;
	        this.attributes = attributes;
	    }
	    return JSXOpeningElement;
	}());
	exports.JSXOpeningElement = JSXOpeningElement;
	var JSXSpreadAttribute = (function () {
	    function JSXSpreadAttribute(argument) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
	        this.argument = argument;
	    }
	    return JSXSpreadAttribute;
	}());
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	var JSXText = (function () {
	    function JSXText(value, raw) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXText;
	        this.value = value;
	        this.raw = raw;
	    }
	    return JSXText;
	}());
	exports.JSXText = JSXText;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var scanner_1 = __webpack_require__(8);
	var error_handler_1 = __webpack_require__(6);
	var token_1 = __webpack_require__(7);
	var Reader = (function () {
	    function Reader() {
	        this.values = [];
	        this.curly = this.paren = -1;
	    }
	    ;
	    // A function following one of those tokens is an expression.
	    Reader.prototype.beforeFunctionExpression = function (t) {
	        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
	            'return', 'case', 'delete', 'throw', 'void',
	            // assignment operators
	            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',
	            '&=', '|=', '^=', ',',
	            // binary/unary operators
	            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
	            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
	            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
	    };
	    ;
	    // Determine if forward slash (/) is an operator or part of a regular expression
	    // https://github.com/mozilla/sweet.js/wiki/design
	    Reader.prototype.isRegexStart = function () {
	        var previous = this.values[this.values.length - 1];
	        var regex = (previous !== null);
	        switch (previous) {
	            case 'this':
	            case ']':
	                regex = false;
	                break;
	            case ')':
	                var check = this.values[this.paren - 1];
	                regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');
	                break;
	            case '}':
	                // Dividing a function by anything makes little sense,
	                // but we have to check for that.
	                regex = false;
	                if (this.values[this.curly - 3] === 'function') {
	                    // Anonymous function, e.g. function(){} /42
	                    var check_1 = this.values[this.curly - 4];
	                    regex = check_1 ? !this.beforeFunctionExpression(check_1) : false;
	                }
	                else if (this.values[this.curly - 4] === 'function') {
	                    // Named function, e.g. function f(){} /42/
	                    var check_2 = this.values[this.curly - 5];
	                    regex = check_2 ? !this.beforeFunctionExpression(check_2) : true;
	                }
	        }
	        return regex;
	    };
	    ;
	    Reader.prototype.push = function (token) {
	        if (token.type === token_1.Token.Punctuator || token.type === token_1.Token.Keyword) {
	            if (token.value === '{') {
	                this.curly = this.values.length;
	            }
	            else if (token.value === '(') {
	                this.paren = this.values.length;
	            }
	            this.values.push(token.value);
	        }
	        else {
	            this.values.push(null);
	        }
	    };
	    ;
	    return Reader;
	}());
	var Tokenizer = (function () {
	    function Tokenizer(code, config) {
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;
	        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;
	        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;
	        this.buffer = [];
	        this.reader = new Reader();
	    }
	    ;
	    Tokenizer.prototype.errors = function () {
	        return this.errorHandler.errors;
	    };
	    ;
	    Tokenizer.prototype.getNextToken = function () {
	        if (this.buffer.length === 0) {
	            var comments = this.scanner.scanComments();
	            if (this.scanner.trackComment) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var comment = void 0;
	                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
	                    comment = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: value
	                    };
	                    if (this.trackRange) {
	                        comment.range = e.range;
	                    }
	                    if (this.trackLoc) {
	                        comment.loc = e.loc;
	                    }
	                    this.buffer.push(comment);
	                }
	            }
	            if (!this.scanner.eof()) {
	                var loc = void 0;
	                if (this.trackLoc) {
	                    loc = {
	                        start: {
	                            line: this.scanner.lineNumber,
	                            column: this.scanner.index - this.scanner.lineStart
	                        },
	                        end: {}
	                    };
	                }
	                var token = void 0;
	                if (this.scanner.source[this.scanner.index] === '/') {
	                    token = this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.scanPunctuator();
	                }
	                else {
	                    token = this.scanner.lex();
	                }
	                this.reader.push(token);
	                var entry = void 0;
	                entry = {
	                    type: token_1.TokenName[token.type],
	                    value: this.scanner.source.slice(token.start, token.end)
	                };
	                if (this.trackRange) {
	                    entry.range = [token.start, token.end];
	                }
	                if (this.trackLoc) {
	                    loc.end = {
	                        line: this.scanner.lineNumber,
	                        column: this.scanner.index - this.scanner.lineStart
	                    };
	                    entry.loc = loc;
	                }
	                if (token.regex) {
	                    entry.regex = token.regex;
	                }
	                this.buffer.push(entry);
	            }
	        }
	        return this.buffer.shift();
	    };
	    ;
	    return Tokenizer;
	}());
	exports.Tokenizer = Tokenizer;


/***/ }
/******/ ])
});
;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Expressions", function () {
	describe("Assignment Expressions", function () {
		var left = 1;
		var right = 2;

		[{ op: "=", name: "Assignment", expected: right }, { op: "+=", name: "Addtion assignment", expected: left + right }, { op: "-=", name: "Subtraction assignment", expected: left - right }, { op: "*=", name: "Multiplication assignment", expected: left * right }, { op: "/=", name: "Division assignment", expected: left / right }, { op: "%=", name: "Remainder assignment", expected: left % right }, { op: "<<=", name: "Left shift assignment", expected: left << right }, { op: ">>=", name: "Right shift assignment", expected: left >> right }, { op: ">>>=", name: "Unsigned right shift assignment", expected: left >>> right }, { op: "|=", name: "Bitwise AND assignment", expected: left | right }, { op: "^=", name: "Bitwise XOR assignment", expected: left ^ right }, { op: "&=", name: "Bitwise OR assignment", expected: left & right }].forEach(function (current) {
			it("should apply " + current.op, function () {
				var code = "var a = " + left + "; a " + current.op + " " + right + ";a == " + current.expected + ";";
				runner.confirmBlock(code);
			});
		});
	});

	it("should error if the left side is null", function () {
		runner.confirmError("var x = (y *= 1);", ReferenceError);
	});

	it("should increment value", function () {
		var code = "var a = 0; a++;a==1;";
		runner.confirmBlock(code);
	});

	it("should decrement value", function () {
		var code = "var a = 0; a--;a==-1;";
		runner.confirmBlock(code);
	});

	it("should decrement value after returning", function () {
		var code = "var a = 0; var b = a--;b==0;";
		runner.confirmBlock(code);
	});
});

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var parser = __webpack_require__(59);
var Engine = __webpack_require__(63);

function getRunner(code, options) {
	var ast = parser.parse(code, options);
	return new Engine({ executionLimit: 100000 }).evalASTSync(ast);
}

function wrapArgs(args) {
	return args.map(function (arg) {
		return typeof arg === "string" ? '\'' + arg + '\'' : String(arg);
	}).join(",");
}

var es6 = {
	runBlock: function runBlock(code) {
		return getRunner(code);
	},
	confirmBlock: function confirmBlock(code, done) {
		var value = this.runBlock(code);
		expect(value.toNative()).to.be.true;
		done && done();
	},
	confirmError: function confirmError(code, errType) {
		try {
			getRunner(code, { ecmaVersion: 6 });
			expect(false).to.be.true;
		} catch (err) {
			expect(err).to.be.instanceOf(errType);
		}
	},
	parse: function parse(code) {
		return parser.parse(code, { ecmaVersion: 6, sourceType: "module" });
	}
};

var es5 = {
	runBlock: function runBlock(code) {
		return getRunner(code);
	},
	confirmBlock: function confirmBlock(code, done) {
		var value = this.runBlock(code);
		expect(value.toNative()).to.be.true;
		done && done();
	},
	confirmError: function confirmError(code, errType, done) {
		try {
			this.runBlock(code);

			expect(false).toBe(true);
			done && done();
		} catch (err) {
			// if (typeof err === "object" && err.toNative) {
			// 	err = err.toNative();
			// }

			expect(err).to.be.instanceOf(errType);
			done && done();
		}
	},
	getScope: function getScope(code) {
		var env = SandBoxr.createEnvironment();
		env.init();

		var runner = getRunner(code);
		runner.execute(env);
		return env;
	}
};

module.exports = {
	es5: es5,
	es6: es6,
	wrapArgs: wrapArgs
};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var Engine = void 0;

function esper(opts) {
	return new Engine(opts);
}
module.exports = esper;

Engine = __webpack_require__(64);
esper.plugins = { 'lang-javascript': __webpack_require__(269) };
esper.Engine = Engine;
esper.Evaluator = __webpack_require__(147);
esper.Value = __webpack_require__(152);
esper.PrimitiveValue = __webpack_require__(211);
esper.ASTPreprocessor = __webpack_require__(240);
esper.FutureValue = __webpack_require__(227);
esper.SmartLinkValue = __webpack_require__(234);
esper.ObjectValue = __webpack_require__(197);
esper.StringValue = __webpack_require__(214);
esper.EasyNativeFunction = __webpack_require__(241);
esper.EasyObjectValue = __webpack_require__(243);
esper.CompletionRecord = __webpack_require__(192);
esper.Realm = __webpack_require__(231);
esper.EvaluatorHandlers = __webpack_require__(230);
esper.eval = function (source) {
	return new Engine().evalSync(source).toNative();
};

esper.version = __webpack_require__(270).version;

esper.languages = {
	javascript: esper.plugins['lang-javascript']
};

esper.hooks = {
	setupEngine: []
};

esper.plugin = function (name) {
	var pl = void 0;
	if (!esper.plugins[name]) {
		//console.log("Loading ", name, '../plugins/' + name + '/index.js');
		var _pl = __webpack_require__(271)("./" + name + "/index.js");
		if (name != _pl.name) throw new Error('Loaded plugin as "' + name + '" but it had name "' + _pl.name + '"');
		if (!esper.plugins[name]) esper._registerPlugin(_pl);
	}
	return esper.plugins[name];
};

esper._registerPlugin = function (pl) {
	if (typeof pl.init !== 'function') throw new Error('Tried to add a plugin without an init method.');
	if (typeof pl.name !== 'string') throw new Error('Tried to add a plugin without a name.');
	esper.plugins[pl.name] = pl;
	pl.init(esper);
};

var list = __webpack_require__(296);
esper.pluginList = list;
for (var pl in list) {
	if (list[pl] == 'bundle') esper.plugin(pl);
}

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = __webpack_require__(68);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _promise = __webpack_require__(121);

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var esper = __webpack_require__(63);
var Evaluator = __webpack_require__(147);
var Realm = __webpack_require__(231);
var Scope = __webpack_require__(232);
var Value = __webpack_require__(152);
var BridgeValue = __webpack_require__(222);
var ASTPreprocessor = __webpack_require__(240);
var FutureValue = __webpack_require__(227);
var EasyNativeFunction = __webpack_require__(241);
var ClosureValue = __webpack_require__(224);
var SmartLinkValue = __webpack_require__(234);
var DefaultRuntime = __webpack_require__(268);

var defaultOptions = {
	strict: false,
	foreignObjectMode: 'link',
	addInternalStack: false,
	executionLimit: Infinity,
	exposeEsperGlobal: true,
	extraErrorInfo: false,
	addExtraErrorInfoToStacks: false,
	bookmarkInvocationMode: 'error',
	yieldPower: 5,
	debug: false,
	compile: 'pre',
	language: 'javascript',
	runtime: false,
	rotateThreads: false
};

/**
 * Container class for all of esper.
 */

var Engine = function () {
	function Engine(options) {
		var _this = this;

		var realm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		(0, _classCallCheck3.default)(this, Engine);

		options = options || {};
		this.options = {};
		for (var k in defaultOptions) {
			if (k in options) this.options[k] = options[k];else this.options[k] = defaultOptions[k];
		}

		if (realm) {
			this.realm = realm;
		} else {
			this.realm = new Realm(this.options, this);
		}

		this.evaluator = new Evaluator(this.realm, null, this.globalScope);
		if (this.options.debug) {
			this.evaluator.debug = true;
		}

		this.evaluator.defaultYieldPower = this.options.yieldPower;
		this.evaluator.yieldPower = this.options.yieldPower;

		if (this.language.startupCode && !realm) {
			this.loadLangaugeStartupCode();
		}

		//options.runtime = true;
		if (options.runtime) {
			if ("boolean" == typeof options.runtime) {
				this.runtime = new DefaultRuntime();
			} else {
				this.runtime = options.runtime;
			}
		}

		this.threads = [];
		var that = this;
		if (options.runtime) {
			this.evloop = { next: function next() {
					var promises = [];
					for (var i = 0; i < that.threads.length; ++i) {
						if (that.threads[i]) {
							var val = that.threads[i].next();
							if (val.done) {
								that.threads.splice(i, 1);return { done: false, value: val.value };
							}
							if (!val.value || !val.value.then) {
								if (options.rotateThreads) that.threads.push(that.threads.splice(i, 1)[0]);
								return { done: false, value: val.value };
							} else promises.push(val.value);
						}
					}
					if (promises.length > 0) return { done: false, value: _promise2.default.race(promises) };else return { done: true };
				} };
		} else {
			Object.defineProperty(this, "evloop", {
				get: function get() {
					return _this.threads[0];
				},
				set: function set(v) {
					return _this.threads[0] = v;
				} // Supports CrazyJoshMode
			});
		}

		if (this.language.setupEngine) {
			this.language.setupEngine(esper, this);
		}

		for (var _iterator = esper.hooks.setupEngine, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
			var _ref;

			if (_isArray) {
				if (_i >= _iterator.length) break;
				_ref = _iterator[_i++];
			} else {
				_i = _iterator.next();
				if (_i.done) break;
				_ref = _i.value;
			}

			var hook = _ref;

			hook(esper, this);
		}
	}

	//get evloop() { return this.generator; }


	(0, _createClass3.default)(Engine, [{
		key: 'loadLangaugeStartupCode',
		// Supports CrazyJoshMode

		value: function loadLangaugeStartupCode() {
			var past = this.preprocessAST(this.language.startupCode(), { markNonUser: true });
			var stdlib_eval = new Evaluator(this.realm, null, this.globalScope);
			stdlib_eval.frames = [];
			stdlib_eval.pushAST(past, this.globalScope);
			stdlib_eval.ast = past;

			var gen = stdlib_eval.generator();
			var val = gen.next();
			while (!val.done) {
				val = gen.next();
			}
		}
	}, {
		key: 'eval',


		/**
   * Evalute `code` and return a promise for the result.
   *
   * @access public
   * @param {string} code - String of code to evaluate
   * @return {Promise<Value>} - The result of execution, as a promise.
   */
		value: function _eval(code) {
			var ast = this.realm.parser(code);
			return this.evalAST(ast, { source: code });
		}

		/**
   * Evalute `code` and return a the result.
   *
   * @access public
   * @param {string} code - String of code to evaluate
   * @return {Value} - The result of execution
   */

	}, {
		key: 'evalSync',
		value: function evalSync(code) {
			var ast = this.realm.parser(code);
			return this.evalASTSync(ast, { source: code });
		}
	}, {
		key: 'evalDetatched',
		value: function evalDetatched(code) {
			var _this2 = this;

			var ast = this.realm.parser(code);
			this.loadAST(ast, { source: code });
			var p = new _promise2.default(function (res, rej) {
				_this2.evaluator.onCompletion = res;
				_this2.evaluator.onError = rej;
			});
			setTimeout(function () {
				return _this2.run().catch(function (e) {});
			}, 0);
			return p;
		}

		/**
   * Evalute `ast` and return a promise for the result.
   *
   * @access public
   * @param {Node} ast - ESTree AST representing the code to run.
   * @param {string} codeRef - The code that was used to generate the AST.
   * @return {Value} - The result of execution, as a promise.
   */

	}, {
		key: 'evalAST',
		value: function evalAST(ast, opts) {
			var _this3 = this;

			//console.log(escodegen.generate(ast));
			this.loadAST(ast, opts);
			var p = this.run();
			p.then(function () {
				return _this3.threads = [];
			}, function () {
				return _this3.threads = [];
			});
			return p;
		}
	}, {
		key: 'evalASTSync',
		value: function evalASTSync(ast, opts) {
			this.loadAST(ast, opts);
			var value = this.runSync();
			this.threads[0] = [];
			return value;
		}
	}, {
		key: 'preprocessAST',
		value: function preprocessAST(ast, opts) {
			opts = opts || {};
			opts.compile = this.options.compile;
			var past = ASTPreprocessor.process(ast, opts);
			return past;
		}
	}, {
		key: 'loadAST',
		value: function loadAST(ast, opts) {
			var past = this.preprocessAST(ast, opts);
			this.evaluator.frames = [];
			this.evaluator.pushAST(past, this.globalScope);
			this.evaluator.ast = past;
			this.threads[0] = this.evaluator.generator();
		}
	}, {
		key: 'load',
		value: function load(code) {
			var ast = this.realm.parser(code);
			this.loadAST(ast, { source: code });
		}
	}, {
		key: 'step',
		value: function step() {
			if (this.threads.length < 1) throw new Error('No code loaded to step');
			var value = this.evloop.next();
			return value.done;
		}
	}, {
		key: 'run',
		value: function run() {
			var that = this;
			var steps = 0;
			function handler(value) {
				while (!value.done) {
					value = that.evloop.next();
					if (value.value && value.value.then) {
						return value.value.then(function (v) {
							return handler({ done: false, value: v });
						});
					}
					if (++steps > that.options.executionLimit) throw new Error('Execution Limit Reached');
				}
				if (!that.options.runtime) that.threads = [];
				return value;
			}
			return new _promise2.default(function (resolve, reject) {
				try {
					var value = that.evloop.next();
					resolve(value);
				} catch (e) {
					reject(e);
				}
			}).then(handler).then(function (v) {
				return v.value;
			});
		}
	}, {
		key: 'runSync',
		value: function runSync() {
			var steps = 0;
			var value = this.evloop.next();
			while (!value.done) {
				value = this.evloop.next();
				if (value.value && value.value.then) throw new Error('Can\'t deal with futures when running in sync mode');
				if (++steps > this.options.executionLimit) throw new Error('Execution Limit Reached');
			}
			return value.value;
		}

		/**
   * Refrence to the global scope.
   * @return {Scope}
   */

	}, {
		key: 'addGlobal',
		value: function addGlobal(name, what, opts) {
			opts = opts || {};
			if (!(what instanceof Value)) what = this.realm.makeForForeignObject(what);
			if (!opts.const) this.globalScope.add(name, what);else this.globalScope.addConst(name, what);
		}
	}, {
		key: 'addGlobalFx',
		value: function addGlobalFx(name, what, opts) {
			var x = EasyNativeFunction.makeForNative(this.realm, what);
			x.makeThisForNew = /*#__PURE__*/_regenerator2.default.mark(function _callee(realm) {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								return _context.abrupt('return', Value.null);

							case 1:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			});
			this.addGlobal(name, x, opts);
		}
	}, {
		key: 'addGlobalValue',
		value: function addGlobalValue(name, what, opts) {
			this.addGlobal(name, Value.fromNative(what, this.realm), opts);
		}
	}, {
		key: 'addGlobalBridge',
		value: function addGlobalBridge(name, what, opts) {
			this.addGlobal(name, new BridgeValue(what, this.realm), opts);
		}
	}, {
		key: 'fetchFunctionSync',
		value: function fetchFunctionSync(name, shouldYield) {
			var genfx = this.fetchFunction(name, shouldYield);
			return function () {
				var gen = genfx.apply(this, arguments);
				var val = gen.next();
				//TODO: Make sure we dont await as it will loop FOREVER.
				while (!val.done) {
					val = gen.next();
				}return val.value;
			};
		}
	}, {
		key: 'fetchFunction',
		value: function fetchFunction(name, shouldYield) {
			var val = this.globalScope.get(name);
			return this.makeFunctionFromClosure(val, shouldYield);
		}
	}, {
		key: 'functionFromSource',
		value: function functionFromSource(source, shouldYield) {
			var code = source;
			var ast = this.realm.parser(code, { inFunctionBody: true });
			return this.functionFromAST(ast, shouldYield, source);
		}
	}, {
		key: 'functionFromAST',
		value: function functionFromAST(ast, shouldYield, source) {
			if (ast.type === 'Program') ast = ast.body;
			if (Array.isArray(ast)) ast = { type: 'BlockStatement', body: ast };
			if (ast.type !== 'BlockStatement') ast = { type: 'BlockStatement', body: [ast] };

			var past = {
				type: 'FunctionExpression',
				body: ast,
				params: []
			};
			past = ASTPreprocessor.process(past, { source: source });
			var fx = new ClosureValue(past, this.globalScope);
			return this.makeFunctionFromClosure(fx, shouldYield, this.evaluator);
		}
	}, {
		key: 'functionFromSourceSync',
		value: function functionFromSourceSync(source, shouldYield) {
			var genfx = this.functionFromSource(source, shouldYield);
			return function () {
				var gen = genfx.apply(this, arguments);
				var val = gen.next();
				//TODO: Make sure we dont await as it will loop FOREVER.
				while (!val.done) {
					val = gen.next();
				}return val.value;
			};
		}
	}, {
		key: 'functionFromASTSync',
		value: function functionFromASTSync(ast, shouldYield, source) {
			var genfx = this.functionFromAST(ast, shouldYield, source);
			return function () {
				var gen = genfx.apply(this, arguments);
				var val = gen.next();
				//TODO: Make sure we dont await as it will loop FOREVER.
				while (!val.done) {
					val = gen.next();
				}return val.value;
			};
		}
	}, {
		key: 'makeFunctionFromClosure',
		value: function makeFunctionFromClosure(val, shouldYield, evalu) {

			var realm = this.realm;
			var scope = this.globalScope;
			var that = this;
			var evaluator = evalu || this.evaluator;
			if (!evaluator) throw new Error('Evaluator is falsey');
			if (!val) return;

			return (/*#__PURE__*/_regenerator2.default.mark(function _callee2() {
					var realThis,
					    realArgs,
					    i,
					    c,
					    gen,
					    last,
					    _args2 = arguments;
					return _regenerator2.default.wrap(function _callee2$(_context2) {
						while (1) {
							switch (_context2.prev = _context2.next) {
								case 0:
									realThis = realm.makeForForeignObject(this);
									realArgs = new Array(_args2.length);

									for (i = 0; i < _args2.length; ++i) {
										realArgs[i] = realm.makeForForeignObject(_args2[i]);
									}

									if (val.isCallable) {
										_context2.next = 5;
										break;
									}

									throw new TypeError(val.debugStr + ' is not a function.');

								case 5:
									c = val.call(realThis, realArgs, scope);

									evaluator.pushFrame({ type: 'program', generator: c, scope: scope });
									gen = evaluator.generator();
									return _context2.delegateYield(that.filterGenerator(gen, shouldYield, evaluator), 't0', 9);

								case 9:
									last = _context2.t0;

									if (!last) {
										_context2.next = 12;
										break;
									}

									return _context2.abrupt('return', last.toNative());

								case 12:
								case 'end':
									return _context2.stop();
							}
						}
					}, _callee2, this);
				})
			);
		}

		/**
   * Returns a new engine that executes in the same Realm.  Useful
   * for creating threads / coroutines
   * @return {Engine}
   */

	}, {
		key: 'fork',
		value: function fork() {
			var engine = new Engine(this.options, this.realm);
			var scope = this.globalScope;
			engine.evaluator = this.makeEvaluatorClone();
			return engine;
		}
	}, {
		key: 'makeEvaluatorClone',
		value: function makeEvaluatorClone() {
			var evaluator = new Evaluator(this.realm, this.evaluator.ast, this.globalScope);
			evaluator.frames = [];
			if (this.evaluator.insturment) {
				evaluator.insturment = this.evaluator.insturment;
			}
			if (this.evaluator.debug) {
				evaluator.debug = true;
			}

			if (SmartLinkValue.isThreadPrivileged(this.evaluator)) {
				SmartLinkValue.makeThreadPrivileged(evaluator);
			}

			return evaluator;
		}
	}, {
		key: 'filterGenerator',
		value: /*#__PURE__*/_regenerator2.default.mark(function filterGenerator(gen, shouldYield, evaluator) {
			var value, steps, yieldValue;
			return _regenerator2.default.wrap(function filterGenerator$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							value = gen.next();
							steps = 0;

							if (evaluator) {
								_context3.next = 4;
								break;
							}

							throw new Error('Evaluator is falsey');

						case 4:
							if (value.done) {
								_context3.next = 25;
								break;
							}

							if (shouldYield) {
								_context3.next = 10;
								break;
							}

							_context3.next = 8;
							return;

						case 8:
							_context3.next = 20;
							break;

						case 10:
							if (!(evaluator.topFrame.type == 'await')) {
								_context3.next = 16;
								break;
							}

							if (value.value.resolved) {
								_context3.next = 14;
								break;
							}

							_context3.next = 14;
							return;

						case 14:
							_context3.next = 20;
							break;

						case 16:
							yieldValue = shouldYield(this, evaluator, value.value);

							if (!(yieldValue !== false)) {
								_context3.next = 20;
								break;
							}

							_context3.next = 20;
							return yieldValue;

						case 20:
							value = gen.next(value.value);

							if (!(++steps > this.options.executionLimit)) {
								_context3.next = 23;
								break;
							}

							throw new Error('Execution Limit Reached');

						case 23:
							_context3.next = 4;
							break;

						case 25:
							return _context3.abrupt('return', value.value);

						case 26:
						case 'end':
							return _context3.stop();
					}
				}
			}, filterGenerator, this);
		})
	}, {
		key: 'generator',
		get: function get() {
			return this.evloop;
		},
		set: function set(v) {
			return this.evloop = v;
		}
	}, {
		key: 'language',
		get: function get() {
			if (!(this.options.language in esper.languages)) {
				throw new Error('Unknown language ' + this.options.language + '. Load the lang-' + this.options.language + ' plugin?');
			}
			return esper.languages[this.options.language];
		}
	}, {
		key: 'globalScope',
		get: function get() {
			return this.realm.globalScope;
		}
	}]);
	return Engine;
}();

module.exports = Engine;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(66);


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(67);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 67 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(69), __esModule: true };

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(70);
__webpack_require__(116);
module.exports = __webpack_require__(118);


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(71);
var global = __webpack_require__(82);
var hide = __webpack_require__(86);
var Iterators = __webpack_require__(74);
var TO_STRING_TAG = __webpack_require__(113)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(72);
var step = __webpack_require__(73);
var Iterators = __webpack_require__(74);
var toIObject = __webpack_require__(75);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(79)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 72 */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),
/* 73 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 74 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(76);
var defined = __webpack_require__(78);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(77);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 77 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 78 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(80);
var $export = __webpack_require__(81);
var redefine = __webpack_require__(97);
var hide = __webpack_require__(86);
var Iterators = __webpack_require__(74);
var $iterCreate = __webpack_require__(98);
var setToStringTag = __webpack_require__(112);
var getPrototypeOf = __webpack_require__(114);
var ITERATOR = __webpack_require__(113)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 80 */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(82);
var core = __webpack_require__(83);
var ctx = __webpack_require__(84);
var hide = __webpack_require__(86);
var has = __webpack_require__(96);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 82 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 83 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.5' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(85);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 85 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(87);
var createDesc = __webpack_require__(95);
module.exports = __webpack_require__(91) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(88);
var IE8_DOM_DEFINE = __webpack_require__(90);
var toPrimitive = __webpack_require__(94);
var dP = Object.defineProperty;

exports.f = __webpack_require__(91) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(89);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 89 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(91) && !__webpack_require__(92)(function () {
  return Object.defineProperty(__webpack_require__(93)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(92)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 92 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(89);
var document = __webpack_require__(82).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(89);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 95 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 96 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(86);


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(99);
var descriptor = __webpack_require__(95);
var setToStringTag = __webpack_require__(112);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(86)(IteratorPrototype, __webpack_require__(113)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(88);
var dPs = __webpack_require__(100);
var enumBugKeys = __webpack_require__(110);
var IE_PROTO = __webpack_require__(107)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(93)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(111).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(87);
var anObject = __webpack_require__(88);
var getKeys = __webpack_require__(101);

module.exports = __webpack_require__(91) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(102);
var enumBugKeys = __webpack_require__(110);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(96);
var toIObject = __webpack_require__(75);
var arrayIndexOf = __webpack_require__(103)(false);
var IE_PROTO = __webpack_require__(107)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(75);
var toLength = __webpack_require__(104);
var toAbsoluteIndex = __webpack_require__(106);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(105);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 105 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(105);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(108)('keys');
var uid = __webpack_require__(109);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(83);
var global = __webpack_require__(82);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(80) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 109 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 110 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(82).document;
module.exports = document && document.documentElement;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(87).f;
var has = __webpack_require__(96);
var TAG = __webpack_require__(113)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(108)('wks');
var uid = __webpack_require__(109);
var Symbol = __webpack_require__(82).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(96);
var toObject = __webpack_require__(115);
var IE_PROTO = __webpack_require__(107)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(78);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(117)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(79)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(105);
var defined = __webpack_require__(78);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(88);
var get = __webpack_require__(119);
module.exports = __webpack_require__(83).getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(120);
var ITERATOR = __webpack_require__(113)('iterator');
var Iterators = __webpack_require__(74);
module.exports = __webpack_require__(83).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(77);
var TAG = __webpack_require__(113)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(122), __esModule: true };

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(123);
__webpack_require__(116);
__webpack_require__(70);
__webpack_require__(124);
__webpack_require__(140);
__webpack_require__(141);
module.exports = __webpack_require__(83).Promise;


/***/ }),
/* 123 */
/***/ (function(module, exports) {



/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(80);
var global = __webpack_require__(82);
var ctx = __webpack_require__(84);
var classof = __webpack_require__(120);
var $export = __webpack_require__(81);
var isObject = __webpack_require__(89);
var aFunction = __webpack_require__(85);
var anInstance = __webpack_require__(125);
var forOf = __webpack_require__(126);
var speciesConstructor = __webpack_require__(129);
var task = __webpack_require__(130).set;
var microtask = __webpack_require__(132)();
var newPromiseCapabilityModule = __webpack_require__(133);
var perform = __webpack_require__(134);
var userAgent = __webpack_require__(135);
var promiseResolve = __webpack_require__(136);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(113)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(137)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(112)($Promise, PROMISE);
__webpack_require__(138)(PROMISE);
Wrapper = __webpack_require__(83)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(139)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 125 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(84);
var call = __webpack_require__(127);
var isArrayIter = __webpack_require__(128);
var anObject = __webpack_require__(88);
var toLength = __webpack_require__(104);
var getIterFn = __webpack_require__(119);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(88);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(74);
var ITERATOR = __webpack_require__(113)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(88);
var aFunction = __webpack_require__(85);
var SPECIES = __webpack_require__(113)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(84);
var invoke = __webpack_require__(131);
var html = __webpack_require__(111);
var cel = __webpack_require__(93);
var global = __webpack_require__(82);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(77)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 131 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(82);
var macrotask = __webpack_require__(130).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(77)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(85);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 134 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(82);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(88);
var isObject = __webpack_require__(89);
var newPromiseCapability = __webpack_require__(133);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(86);
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(82);
var core = __webpack_require__(83);
var dP = __webpack_require__(87);
var DESCRIPTORS = __webpack_require__(91);
var SPECIES = __webpack_require__(113)('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(113)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(81);
var core = __webpack_require__(83);
var global = __webpack_require__(82);
var speciesConstructor = __webpack_require__(129);
var promiseResolve = __webpack_require__(136);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(81);
var newPromiseCapability = __webpack_require__(133);
var perform = __webpack_require__(134);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(144);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(145), __esModule: true };

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(146);
var $Object = __webpack_require__(83).Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(81);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(91), 'Object', { defineProperty: __webpack_require__(87).f });


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(148);

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = __webpack_require__(68);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var CompletionRecord = __webpack_require__(192);
var ClosureValue = __webpack_require__(224);
var ObjectValue = __webpack_require__(197);
var FutureValue = __webpack_require__(227);
var RegExpValue = __webpack_require__(228);
var PropertyDescriptor = __webpack_require__(210);
var ErrorValue = __webpack_require__(229);
var ArrayValue = __webpack_require__(225);
var EvaluatorInstruction = __webpack_require__(226);

var Frame = function Frame(type, o) {
	(0, _classCallCheck3.default)(this, Frame);

	this.type = type;
	for (var k in o) {
		this[k] = o[k];
	}
};

var Evaluator = function () {
	function Evaluator(realm, n, s) {
		(0, _classCallCheck3.default)(this, Evaluator);

		this.realm = realm;
		var that = this;
		this.lastValue = null;
		this.ast = n;
		this.defaultYieldPower = 5;
		this.yieldPower = this.defaultYieldPower;
		this.debug = false;
		this.profile = false;
		this.lastASTNodeProcessed = null;
		/**
   * @type {Object[]}
   * @property {Generator} generator
   * @property {string} type
   * @property {ast} ast
   */
		this.frames = [];
		if (n) this.pushAST(n, s);
	}

	(0, _createClass3.default)(Evaluator, [{
		key: 'pushAST',
		value: function pushAST(n, s) {
			var that = this;
			var gen = n ? this.branch(n, s) : /*#__PURE__*/_regenerator2.default.mark(function _callee() {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								_context.next = 2;
								return EvaluatorInstruction.stepMinor;

							case 2:
								return _context.abrupt('return', _context.sent);

							case 3:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			})();
			this.pushFrame({ generator: gen, type: 'program', scope: s, ast: n });
		}
	}, {
		key: 'processLostFrames',
		value: function processLostFrames(frames) {
			for (var _iterator = frames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var f = _ref;

				if (f.profileName) {
					this.incrCtr('fxTime', f.profileName, Date.now() - f.entered);
				}
			}
		}
	}, {
		key: 'unwindStack',
		value: function unwindStack(target, canCrossFxBounds, label) {
			var finallyFrames = [];
			for (var i = 0; i < this.frames.length; ++i) {
				var t = this.frames[i].type;
				var match = t == target || target == 'return' && t == 'function';
				if (match && label) {
					match = label == this.frames[i].label;
				}

				if (match) {
					var j = i + 1;
					for (; j < this.frames.length; ++j) {
						if (this.frames[j].type != 'finally') break;
					}var fr = this.frames[j];
					this.processLostFrames(this.frames.splice(0, i + 1));
					this.saveFrameShortcuts();
					Array.prototype.unshift.apply(this.frames, finallyFrames);
					return fr;
				} else if (target == 'return' && this.frames[i].retValue) {
					var _fr = this.frames[i];
					this.processLostFrames(this.frames.splice(0, i));
					this.saveFrameShortcuts();
					Array.prototype.unshift.apply(this.frames, finallyFrames);
					return _fr;
				} else if (!canCrossFxBounds && this.frames[i].type == 'function') {
					break;
				} else if (t == 'finally') {
					finallyFrames.push(this.frames[i]);
				}
			}
			return false;
		}
	}, {
		key: 'next',
		value: function next(lastValueOveride) {
			var frames = this.frames;

			//Implement proper tailcalls by hand.
			do {
				var top = frames[0];
				var result = void 0;
				//console.log(top.type, top.ast && top.ast.type);

				if (top.exception) {
					this.lastValue = top.exception;
					delete top.exception;
				} else if (top.retValue) {
					this.lastValue = top.retValue;
					delete top.retValue;
				}

				result = top.generator.next(lastValueOveride || this.lastValue);
				lastValueOveride = undefined;
				var val = result.value;

				if (val instanceof EvaluatorInstruction) {
					switch (val.type) {
						case 'branch':
							this.branchFrame(val.kind, val.ast, val.scope, val.extra);
							continue;
						case 'getEvaluator':
							//lastValueOveride = this;
							//continue;
							return this.next(this);
						case 'waitForFramePop':
							continue;
						case 'framePushed':
							continue;
						case 'event':
						case 'step':
							if (this.instrument) this.instrument(this, val);
							return { done: false, value: val };
					}
				}

				if (val instanceof CompletionRecord) {
					this.processCompletionValueMeaning(val);
					this.lastValue = val.value;
					continue;
				}
				//if ( !val ) console.log("Bad val somewhere around", this.topFrame.type);
				if (this.instrument) this.instrument(this, val);

				if (val && val.then) {
					if (top && top.type !== 'await') {
						this.pushAwaitFrame(val);
					}
					return { done: false, value: val };
				}

				this.lastValue = val;
				if (result.done) {
					var lastFrame = this.popFrame();

					if (lastFrame.profileName) {
						this.processLostFrames([lastFrame]);
					}

					// Latient values can't cross function calls.
					// Dont do this, and you get coffeescript mode.
					if (lastFrame.type === 'function' && !lastFrame.returnLastValue) {
						this.lastValue = Value.undef;
					}

					if (frames.length === 0) {
						if (this.debug) {
							this.dumpProfilingInformation();
						}
						if (this.onCompletion) this.onCompletion(result.value);
						return { done: true, value: result.value };
					} else continue;
				}
			} while (false);

			return { done: false, value: this.lastValue };
		}
	}, {
		key: 'processCompletionValueMeaning',
		value: function processCompletionValueMeaning(val) {
			if (!(val.value instanceof Value)) {
				if (val.value instanceof Error) {
					throw new Error('Value was an error: ' + val.value.stack);
				} else if (val.value.type) {
					switch (val.value.type) {
						case "TypeError":
							val.value = CompletionRecord.makeTypeError(this.realm, val.value.message).value;
					}
				} else {
					throw new Error('Value isnt of type Value, its: ' + val.value.toString());
				}
			}

			switch (val.type) {
				case CompletionRecord.CONTINUE:
					if (this.unwindStack('continue', false, val.target)) return true;
					throw new Error('Cant find matching loop frame for continue');
				case CompletionRecord.BREAK:
					if (this.unwindStack('loop', false, val.target)) return true;
					throw new Error('Cant find matching loop frame for break');
				case CompletionRecord.RETURN:
					var rfr = this.unwindStack('return', false);
					if (!rfr) throw new Error('Cant find function bounds.');
					rfr.retValue = val.value;
					return true;
				case CompletionRecord.THROW:
					//TODO: Fix this nonsense:
					var e = val.value.toNative();
					//val.value.native = e;

					var smallStack = void 0;
					if (e && e.stack) smallStack = e.stack.split(/\n/).slice(0, 4).join('\n');
					var stk = this.buildStacktrace(e).join('\n    ');
					var bestFrame = void 0;
					for (var i = 0; i < this.frames.length; ++i) {
						if (this.frames[i].ast) {
							bestFrame = this.frames[i];
							break;
						}
					}

					if (val.value instanceof ErrorValue) {
						if (this.realm.options.addExtraErrorInfoToStacks && val.value.extra) {
							stk += '\n-------------';
							for (var key in val.value.extra) {
								var vv = val.value.extra[key];
								if (vv instanceof Value) stk += '\n' + key + ' => ' + vv.debugString;else stk += '\n' + key + ' => ' + vv;
							}
						}
					}

					if (e instanceof Error) {
						e.stack = stk;
						if (smallStack && this.realm.options.addInternalStack) e.stack += '\n-------------\n' + smallStack;
						if (bestFrame) {
							e.range = bestFrame.ast.range;
							e.loc = bestFrame.ast.loc;
						}
					}

					if (val.value instanceof ErrorValue) {
						if (!val.value.has('stack')) {
							val.value.setImmediate('stack', Value.fromNative(stk));
							val.value.properties['stack'].enumerable = false;
						}
					}

					var tfr = this.unwindStack('catch', true);
					if (tfr) {
						tfr.exception = val;
						this.lastValue = val;
						return true;
					}
					var line = -1;
					if (this.topFrame.ast && this.topFrame.ast.attr) {
						line = this.topFrame.ast.attr.pos.start_line;
					}
					//console.log(this.buildStacktrace(val.value.toNative()));
					var v = val.value.toNative();
					if (this.onError) this.onError(v);
					throw v;
				case CompletionRecord.NORMAL:
					return false;
			}
		}
	}, {
		key: 'buildStacktrace',
		value: function buildStacktrace(e) {
			var lines = e ? [e.toString()] : [];
			for (var _iterator2 = this.frames, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
				var _ref2;

				if (_isArray2) {
					if (_i2 >= _iterator2.length) break;
					_ref2 = _iterator2[_i2++];
				} else {
					_i2 = _iterator2.next();
					if (_i2.done) break;
					_ref2 = _i2.value;
				}

				var f = _ref2;

				//if ( f.type !== 'function' ) continue;
				if (f.ast) {
					var line = 'at ' + (f.ast.srcName || f.ast.type) + ' ';
					if (f.ast.loc) line += '(<src>:' + f.ast.loc.start.line + ':' + f.ast.loc.start.column + ')';
					lines.push(line);
				}
			}
			return lines;
		}
	}, {
		key: 'pushFrame',
		value: function pushFrame(frame) {
			frame.srcAst = frame.ast;
			if (frame.yieldPower === undefined) frame.yieldPower = this.defaultYieldPower;
			this.frames.unshift(new Frame(frame.type, frame));
			this.saveFrameShortcuts();
		}
	}, {
		key: 'pushAwaitFrame',
		value: function pushAwaitFrame(val) {
			this.pushFrame({
				generator: /*#__PURE__*/_regenerator2.default.mark(function _callee2(f) {
					return _regenerator2.default.wrap(function _callee2$(_context2) {
						while (1) {
							switch (_context2.prev = _context2.next) {
								case 0:
									if (f.resolved) {
										_context2.next = 5;
										break;
									}

									_context2.next = 3;
									return f;

								case 3:
									_context2.next = 0;
									break;

								case 5:
									if (!f.successful) {
										_context2.next = 9;
										break;
									}

									return _context2.abrupt('return', f.value);

								case 9:
									return _context2.abrupt('return', new CompletionRecord(CompletionRecord.THROW, f.value));

								case 10:
								case 'end':
									return _context2.stop();
							}
						}
					}, _callee2, this);
				})(val),
				type: 'await'
			});
		}
	}, {
		key: 'popFrame',
		value: function popFrame() {
			var frame = this.frames.shift();
			this.saveFrameShortcuts();
			return frame;
		}
	}, {
		key: 'saveFrameShortcuts',
		value: function saveFrameShortcuts() {
			var prev = this.yieldPower;
			if (this.frames.length == 0) {
				this.topFrame = undefined;
				this.yieldPower = this.defaultYieldPower;
			} else {
				this.topFrame = this.frames[0];
				this.yieldPower = this.topFrame.yieldPower;
			}
		}
	}, {
		key: 'fromNative',
		value: function fromNative(native, x) {
			return this.realm.fromNative(native, x);
		}
	}, {
		key: 'generator',
		value: function generator() {
			return {
				next: this.next.bind(this),
				throw: function _throw(e) {
					throw e;
				},
				evaluator: this
			};
		}
	}, {
		key: 'breakFrames',
		value: function breakFrames() {}
	}, {
		key: 'resolveRef',
		value: /*#__PURE__*/_regenerator2.default.mark(function resolveRef(n, s, create) {
			var oldAST, iref, idx, ref;
			return _regenerator2.default.wrap(function resolveRef$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							oldAST = this.topFrame.ast;

							this.topFrame.ast = n;
							_context6.t0 = n.type;
							_context6.next = _context6.t0 === 'Identifier' ? 5 : _context6.t0 === 'MemberExpression' ? 9 : 28;
							break;

						case 5:
							iref = s.ref(n.name, s.realm);

							if (!iref) {
								iref = {
									getValue: /*#__PURE__*/_regenerator2.default.mark(function getValue() {
										var err;
										return _regenerator2.default.wrap(function getValue$(_context3) {
											while (1) {
												switch (_context3.prev = _context3.next) {
													case 0:
														err = CompletionRecord.makeReferenceError(s.realm, n.name + ' is not defined');
														return _context3.delegateYield(err.addExtra({ code: 'UndefinedVariable', when: 'read', ident: n.name, strict: s.strict }), 't0', 2);

													case 2:
														_context3.next = 4;
														return err;

													case 4:
														return _context3.abrupt('return', _context3.sent);

													case 5:
													case 'end':
														return _context3.stop();
												}
											}
										}, getValue, this);
									}),
									del: function del() {
										return true;
									}
								};
								if (!create || s.strict) {
									iref.setValue = /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
										var err;
										return _regenerator2.default.wrap(function _callee3$(_context4) {
											while (1) {
												switch (_context4.prev = _context4.next) {
													case 0:
														err = CompletionRecord.makeReferenceError(s.realm, n.name + ' is not defined');
														return _context4.delegateYield(err.addExtra({ code: 'UndefinedVariable', when: 'write', ident: n.name, strict: s.strict }), 't0', 2);

													case 2:
														_context4.next = 4;
														return err;

													case 4:
														return _context4.abrupt('return', _context4.sent);

													case 5:
													case 'end':
														return _context4.stop();
												}
											}
										}, _callee3, this);
									});
								} else {
									iref.setValue = /*#__PURE__*/_regenerator2.default.mark(function _callee4(value) {
										var aref;
										return _regenerator2.default.wrap(function _callee4$(_context5) {
											while (1) {
												switch (_context5.prev = _context5.next) {
													case 0:
														s.global.set(n.name, value, s);
														aref = s.global.ref(n.name, s);

														this.setValue = aref.setValue;
														this.getValue = aref.getValue;
														this.del = aref.delete;

													case 5:
													case 'end':
														return _context5.stop();
												}
											}
										}, _callee4, this);
									});
								}
							}
							this.topFrame.ast = oldAST;
							return _context6.abrupt('return', iref);

						case 9:
							idx = void 0;
							return _context6.delegateYield(this.branch(n.object, s), 't1', 11);

						case 11:
							ref = _context6.t1;

							if (!n.computed) {
								_context6.next = 17;
								break;
							}

							return _context6.delegateYield(this.branch(n.property, s), 't2', 14);

						case 14:
							idx = _context6.t2.toNative();
							_context6.next = 18;
							break;

						case 17:
							idx = n.property.name;

						case 18:
							if (ref) {
								_context6.next = 22;
								break;
							}

							_context6.next = 21;
							return CompletionRecord.makeTypeError(s.realm, 'Can\'t write property of undefined: ' + idx);

						case 21:
							return _context6.abrupt('return', _context6.sent);

						case 22:
							if (ref.ref) {
								_context6.next = 26;
								break;
							}

							_context6.next = 25;
							return CompletionRecord.makeTypeError(s.realm, 'Can\'t write property of non-object type: ' + idx);

						case 25:
							return _context6.abrupt('return', _context6.sent);

						case 26:

							this.topFrame.ast = oldAST;
							return _context6.abrupt('return', ref.ref(idx, s));

						case 28:
							_context6.next = 30;
							return CompletionRecord.makeTypeError(s.realm, 'Couldnt resolve ref component: ' + n.type);

						case 30:
							return _context6.abrupt('return', _context6.sent);

						case 31:
						case 'end':
							return _context6.stop();
					}
				}
			}, resolveRef, this);
		})
	}, {
		key: 'partialMemberExpression',
		value: /*#__PURE__*/_regenerator2.default.mark(function partialMemberExpression(left, n, s) {
			var right;
			return _regenerator2.default.wrap(function partialMemberExpression$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							if (!n.computed) {
								_context7.next = 7;
								break;
							}

							return _context7.delegateYield(this.branch(n.property, s), 't0', 2);

						case 2:
							right = _context7.t0;
							return _context7.delegateYield(left.get(right.toNative(), s.realm), 't1', 4);

						case 4:
							return _context7.abrupt('return', _context7.t1);

						case 7:
							if (!(n.property.type == 'Identifier')) {
								_context7.next = 14;
								break;
							}

							if (left) {
								_context7.next = 10;
								break;
							}

							throw 'Cant index ' + n.property.name + ' of undefined';

						case 10:
							return _context7.delegateYield(left.get(n.property.name, s.realm), 't2', 11);

						case 11:
							return _context7.abrupt('return', _context7.t2);

						case 14:
							if (left) {
								_context7.next = 16;
								break;
							}

							throw 'Cant index ' + n.property.value.toString() + ' of undefined';

						case 16:
							return _context7.delegateYield(left.get(n.property.value.toString(), s.realm), 't3', 17);

						case 17:
							return _context7.abrupt('return', _context7.t3);

						case 18:
						case 'end':
							return _context7.stop();
					}
				}
			}, partialMemberExpression, this);
		})

		//NOTE: Returns generator, fast return yield *;

	}, {
		key: 'doBinaryEvaluation',
		value: function doBinaryEvaluation(operator, left, right, realm) {
			switch (operator) {
				case '==':
					return left.doubleEquals(right, realm);
				case '!=':
					return left.notEquals(right, realm);
				case '===':
					return left.tripleEquals(right, realm);
				case '!==':
					return left.doubleNotEquals(right, realm);
				case '+':
					return left.add(right, realm);
				case '-':
					return left.subtract(right, realm);
				case '*':
					return left.multiply(right, realm);
				case '/':
					return left.divide(right, realm);
				case '%':
					return left.mod(right, realm);
				case '|':
					return left.bitOr(right, realm);
				case '^':
					return left.bitXor(right, realm);
				case '&':
					return left.bitAnd(right, realm);
				case 'in':
					return right.inOperator(left, realm);
				case 'instanceof':
					return left.instanceOf(right, realm);
				case '>':
					return left.gt(right, realm);
				case '<':
					return left.lt(right, realm);
				case '>=':
					return left.gte(right, realm);
				case '<=':
					return left.lte(right, realm);
				case '<<':
					return left.shiftLeft(right, realm);
				case '>>':
					return left.shiftRight(right, realm);
				case '>>>':
					return left.shiftRightZF(right, realm);
				case '**':
					return left.pow(right, realm);
				default:
					throw new Error('Unknown binary operator: ' + operator);
			}
		}
	}, {
		key: 'branchFrame',
		value: function branchFrame(type, n, s, extra) {
			var frame = { generator: this.branch(n, s), type: type, scope: s, ast: n };

			if (extra) {
				for (var k in extra) {
					frame[k] = extra[k];
				}
				if (extra.profileName) {
					frame.entered = Date.now();
				}
			}
			this.pushFrame(frame);
			return EvaluatorInstruction.framePushed;
		}
	}, {
		key: 'beforeNode',
		value: function beforeNode(n) {
			var tf = this.topFrame;
			var state = { top: tf, ast: tf.ast, node: n };
			this.lastASTNodeProcessed = n;
			if (this.debug) this.incrCtr('astInvocationCount', n.type);
			tf.ast = n;
			return state;
		}
	}, {
		key: 'afterNode',
		value: function afterNode(state, r) {
			var tf = this.topFrame;
			tf.value = r;
			tf.ast = state.ast;
		}

		/**
   * @private
   * @param {object} n - AST Node to dispatch
   * @param {Scope} s - Current evaluation scope
   */

	}, {
		key: 'branch',
		value: function branch(n, s) {
			if (!n.dispatch) {
				var nextStep = this.findNextStep(n.type);

				n.dispatch = /*#__PURE__*/_regenerator2.default.mark(function _callee5(that, n, s) {
					var state, result;
					return _regenerator2.default.wrap(function _callee5$(_context8) {
						while (1) {
							switch (_context8.prev = _context8.next) {
								case 0:
									state = that.beforeNode(n);
									return _context8.delegateYield(nextStep(that, n, s), 't0', 2);

								case 2:
									result = _context8.t0;

									if (!(result instanceof CompletionRecord)) {
										_context8.next = 7;
										break;
									}

									_context8.next = 6;
									return result;

								case 6:
									result = _context8.sent;

								case 7:
									if (!(result && result.then)) {
										_context8.next = 11;
										break;
									}

									_context8.next = 10;
									return result;

								case 10:
									result = _context8.sent;

								case 11:

									that.afterNode(state, result);

									return _context8.abrupt('return', result);

								case 13:
								case 'end':
									return _context8.stop();
							}
						}
					}, _callee5, this);
				});
			}
			return n.dispatch(this, n, s);
		}
	}, {
		key: 'incrCtr',
		value: function incrCtr(n, c, v) {
			if (v === undefined) v = 1;
			if (!this.profile) this.profile = {};
			var o = this.profile[n];
			if (!o) {
				o = {};
				this.profile[n] = o;
			}
			c = c || '???';
			if (c in o) o[c] += v;else o[c] = v;
		}
	}, {
		key: 'dumpProfilingInformation',
		value: function dumpProfilingInformation() {
			var _this = this;

			function lpad(s, l) {
				return s + new Array(Math.max(l - s.length, 1)).join(' ');
			}

			if (!this.profile) {
				console.log('===== Profile: None collected =====');
				return;
			}

			console.log('===== Profile =====');

			var _loop = function _loop(sec) {
				console.log(sec + ' Stats:');
				var o = _this.profile[sec];
				var okeys = (0, _keys2.default)(o).sort(function (a, b) {
					return o[b] - o[a];
				});
				for (var _iterator3 = okeys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
					var _ref3;

					if (_isArray3) {
						if (_i3 >= _iterator3.length) break;
						_ref3 = _iterator3[_i3++];
					} else {
						_i3 = _iterator3.next();
						if (_i3.done) break;
						_ref3 = _i3.value;
					}

					var name = _ref3;

					console.log('  ' + lpad(name, 20) + ': ' + o[name]);
				}
			};

			for (var sec in this.profile) {
				_loop(sec);
			}
			console.log('=================');
		}
	}, {
		key: 'insterment',
		get: function get() {
			return this.instrument;
		},
		set: function set(v) {
			this.instrument = v;
		}
	}]);
	return Evaluator;
}();

Evaluator.prototype.findNextStep = __webpack_require__(230).findNextStep;

module.exports = Evaluator;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(149), __esModule: true };

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(150);
module.exports = __webpack_require__(83).Object.keys;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(115);
var $keys = __webpack_require__(101);

__webpack_require__(151)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(81);
var core = __webpack_require__(83);
var fails = __webpack_require__(92);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _defineProperties = __webpack_require__(153);

var _defineProperties2 = _interopRequireDefault(_defineProperties);

var _from = __webpack_require__(156);

var _from2 = _interopRequireDefault(_from);

var _typeof2 = __webpack_require__(160);

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = __webpack_require__(178);

var _weakMap2 = _interopRequireDefault(_weakMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CompletionRecord = __webpack_require__(192);
var GenDash = __webpack_require__(193);

var undef = void 0,
    nil = void 0,
    tru = void 0,
    fals = void 0,
    nan = void 0,
    emptyString = void 0,
    zero = void 0,
    one = void 0,
    negone = void 0,
    negzero = void 0,
    smallIntValues = void 0;
var cache = new _weakMap2.default();
var bookmarks = new _weakMap2.default();
var ObjectValue = void 0,
    PrimitiveValue = void 0,
    StringValue = void 0,
    NumberValue = void 0,
    BridgeValue = void 0,
    Evaluator = void 0;

var serial = 0;
/**
 * Represents a value a variable could take.
 */

var Value = function () {
	(0, _createClass3.default)(Value, null, [{
		key: 'fromPrimativeNative',

		/**
   * Convert a native javascript primative value to a Value
   * @param {any} value - The value to convert
   */
		value: function fromPrimativeNative(value) {
			if (!value) {
				if (value === undefined) return undef;
				if (value === null) return nil;
				if (value === false) return fals;
				if (value === '') return emptyString;
			}

			if (value === true) return tru;

			if (typeof value === 'number') {
				if (value === 0) {
					return 1 / value > 0 ? zero : negzero;
				}
				if (value | 0 === value) {
					var snv = smallIntValues[value + 1];
					if (snv) return snv;
				}
				return new NumberValue(value);
			}
			if (typeof value === 'string') return new StringValue(value);
			if (typeof value === 'boolean') return new PrimitiveValue(value);
		}
	}, {
		key: 'hasBookmark',
		value: function hasBookmark(native) {
			return bookmarks.has(native);
		}
	}, {
		key: 'getBookmark',
		value: function getBookmark(native) {
			return bookmarks.get(native);
		}

		/**
   * Convert a native javascript value to a Value
   *
   * @param {any} value - The value to convert
   * @param {Realm} realm - The realm of the new value.
   */

	}, {
		key: 'fromNative',
		value: function fromNative(value, realm) {
			if (value instanceof Value) return value;
			var prim = Value.fromPrimativeNative(value);
			if (prim) return prim;

			if (value instanceof Error) {
				if (!realm) throw new Error('We needed a realm, but we didnt have one.  We were sad :(');
				if (value instanceof TypeError) return realm.TypeError.makeFrom(value);
				if (value instanceof ReferenceError) return realm.ReferenceError.makeFrom(value);
				if (value instanceof SyntaxError) return realm.SyntaxError.makeFrom(value);else return realm.Error.makeFrom(value);
			}

			if (Value.hasBookmark(value)) {
				return Value.getBookmark(value);
			}

			throw new TypeError('Tried to load an unsafe native value into the interperter:' + (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) + ' / ' + value);
			//TODO: Is this cache dangerous?
			if (!cache.has(value)) {
				var nue = new BridgeValue(realm, value);
				cache.set(value, nue);
				return nue;
			}
			return cache.get(value);
		}

		/**
   * Holds a value representing `undefined`
   *
   * @returns {UndefinedValue}
   */

	}, {
		key: 'createNativeBookmark',
		value: function createNativeBookmark(v, realm) {
			var out;
			var thiz = this;
			if (typeof v.call === 'function') {
				switch (realm.options.bookmarkInvocationMode) {
					case 'loop':

						out = function Bookmark() {
							var Evaluator = __webpack_require__(147);
							var cthis = realm.makeForForeignObject(this);
							var c = v.call(cthis, (0, _from2.default)(arguments).map(function (v) {
								return realm.makeForForeignObject(v);
							}), realm.globalScope);
							var evalu = new Evaluator(realm, null, realm.globalScope);
							evalu.pushFrame({ type: 'program', generator: c, scope: realm.globalScope });
							var gen = evalu.generator();
							var result = void 0;
							do {
								result = gen.next();
							} while (!result.done);
							return result.value.toNative();
						};
						break;
					default:
						out = function Bookmark() {
							throw new Error('Atempted to invoke bookmark for ' + v.debugString);
						};
				}
			} else {
				out = {};
			}
			(0, _defineProperties2.default)(out, {
				toString: { value: function value() {
						return v.debugString;
					}, writable: true },
				inspect: { value: function value() {
						return v.debugString;
					}, writable: true },
				esperValue: { get: function get() {
						return v;
					} }
			});
			bookmarks.set(out, v);
			return out;
		}
	}, {
		key: 'undef',
		get: function get() {
			return undef;
		}

		/**
   * Holds a value representing `null`
   *
   * @returns {NullValue}
   */

	}, {
		key: 'null',
		get: function get() {
			return nil;
		}

		/**
   * Holds a value representing `true`
   *
   * @returns {BooleanValue} true
   */

	}, {
		key: 'true',
		get: function get() {
			return tru;
		}

		/**
   * Holds a value representing `fasle`
   *
   * @returns {BooleanValue} false
   */

	}, {
		key: 'false',
		get: function get() {
			return fals;
		}

		/**
   * Holds a value representing `NaN`
   *
   * @returns {NumberValue} NaN
   */

	}, {
		key: 'nan',
		get: function get() {
			return nan;
		}

		/**
   * Holds a value representing `''`
   *
   * @returns {StringValue} ''
   */

	}, {
		key: 'emptyString',
		get: function get() {
			return emptyString;
		}

		/**
   * Holds a value representing `0`
   *
   * @returns {NumberValue} 0
   */

	}, {
		key: 'zero',
		get: function get() {
			return zero;
		}
	}]);

	function Value() {
		(0, _classCallCheck3.default)(this, Value);

		this.serial = serial++;
	}

	/**
  * Converts this value to a native javascript value.
  *
  * @abstract
  * @returns {*}
  */


	(0, _createClass3.default)(Value, [{
		key: 'toNative',
		value: function toNative() {
			throw new Error('Unimplemented: Value#toNative');
		}

		/**
   * Deep copy this value to a native javascript value.
   *
   * @returns {*}
   */

	}, {
		key: 'toJS',
		value: function toJS() {
			return this.toNative();
		}

		/**
   * A string representation of this Value suitable for display when
   * debugging.
   * @abstract
   * @returns {string}
   */

	}, {
		key: 'inspect',
		value: function inspect() {
			return this.debugString;
		}

		//TODO: Kill this

	}, {
		key: 'fromNative',
		value: function fromNative(other, realm) {
			realm = realm || this.realm;
			if (realm) return realm.fromNative(other);
			return Value.fromNative(other);
		}

		/**
   * Indexes the value to get the value of a property.
   * i.e. `value[name]`
   * @param {String} name
   * @param {Realm} realm
   * @abstract
   * @returns {Value}
   */

	}, {
		key: 'get',
		value: /*#__PURE__*/_regenerator2.default.mark(function get(name, realm) {
			var err;
			return _regenerator2.default.wrap(function get$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							err = "Can't access get " + name + ' of that type: ' + __webpack_require__(194).inspect(this);
							return _context.abrupt('return', CompletionRecord.makeTypeError(realm, err));

						case 2:
						case 'end':
							return _context.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'getImmediate',
		value: function getImmediate(name) {
			return GenDash.syncGenHelper(this.get(name));
		}

		/**
   * Computes the javascript expression `!value`
   * @returns {Value}
   */

	}, {
		key: 'not',
		value: /*#__PURE__*/_regenerator2.default.mark(function not() {
			return _regenerator2.default.wrap(function not$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.abrupt('return', !this.truthy ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context2.stop();
					}
				}
			}, not, this);
		})

		/**
   * Computes the javascript expression `+value`
   * @returns {Value}
   */

	}, {
		key: 'unaryPlus',
		value: /*#__PURE__*/_regenerator2.default.mark(function unaryPlus() {
			return _regenerator2.default.wrap(function unaryPlus$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							_context3.t0 = Value;
							return _context3.delegateYield(this.toNumberValue(), 't1', 2);

						case 2:
							_context3.t2 = +_context3.t1;
							return _context3.abrupt('return', _context3.t0.fromNative.call(_context3.t0, _context3.t2));

						case 4:
						case 'end':
							return _context3.stop();
					}
				}
			}, unaryPlus, this);
		})

		/**
   * Computes the javascript expression `-value`
   * @returns {Value}
   */

	}, {
		key: 'unaryMinus',
		value: /*#__PURE__*/_regenerator2.default.mark(function unaryMinus() {
			return _regenerator2.default.wrap(function unaryMinus$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							_context4.t0 = Value;
							return _context4.delegateYield(this.toNumberValue(), 't1', 2);

						case 2:
							_context4.t2 = -_context4.t1;
							return _context4.abrupt('return', _context4.t0.fromNative.call(_context4.t0, _context4.t2));

						case 4:
						case 'end':
							return _context4.stop();
					}
				}
			}, unaryMinus, this);
		})

		/**
   * Computes the javascript expression `typeof value`
   * @returns {Value}
   */

	}, {
		key: 'typeOf',
		value: /*#__PURE__*/_regenerator2.default.mark(function typeOf() {
			return _regenerator2.default.wrap(function typeOf$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', Value.fromNative(this.jsTypeName));

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, typeOf, this);
		})

		/**
   * Computes the javascript expression `!(value == other)`
   * @param {Value} other - The other value
   * @param {Realm} realm - The realm to use when creating resuls.
   * @returns {Value}
   */

	}, {
		key: 'notEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function notEquals(other, realm) {
			var result;
			return _regenerator2.default.wrap(function notEquals$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(this.doubleEquals(other, realm), 't0', 1);

						case 1:
							result = _context6.t0;
							return _context6.delegateYield(result.not(), 't1', 3);

						case 3:
							return _context6.abrupt('return', _context6.t1);

						case 4:
						case 'end':
							return _context6.stop();
					}
				}
			}, notEquals, this);
		})

		/**
   * Computes the javascript expression `!(value === other)`
   * @param {Value} other - The other value
   * @param {Realm} realm - The realm to use when creating resuls.
   * @returns {Value}
   */

	}, {
		key: 'doubleNotEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function doubleNotEquals(other, realm) {
			var result;
			return _regenerator2.default.wrap(function doubleNotEquals$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.delegateYield(this.tripleEquals(other, realm), 't0', 1);

						case 1:
							result = _context7.t0;
							return _context7.delegateYield(result.not(), 't1', 3);

						case 3:
							return _context7.abrupt('return', _context7.t1);

						case 4:
						case 'end':
							return _context7.stop();
					}
				}
			}, doubleNotEquals, this);
		})

		/**
   * Computes the javascript expression `value === other`
   * @param {Value} other - The other value
   * @param {Realm} realm - The realm to use when creating resuls.
   * @returns {Value}
   */

	}, {
		key: 'tripleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function tripleEquals(other, realm) {
			return _regenerator2.default.wrap(function tripleEquals$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							return _context8.abrupt('return', other === this ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context8.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'getPrototypeProperty',
		value: function getPrototypeProperty() {
			var p = this.properties['prototype'];
			if (!p) return;
			return p.value;
		}
	}, {
		key: 'makeThisForNew',
		value: /*#__PURE__*/_regenerator2.default.mark(function makeThisForNew(realm) {
			var nue, p;
			return _regenerator2.default.wrap(function makeThisForNew$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							nue = new ObjectValue(realm);
							p = this.getPrototypeProperty();

							if (p) nue.setPrototype(p);
							return _context9.abrupt('return', nue);

						case 4:
						case 'end':
							return _context9.stop();
					}
				}
			}, makeThisForNew, this);
		})

		/**
   * Computes the javascript expression `value > other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'gt',
		value: /*#__PURE__*/_regenerator2.default.mark(function gt(other) {
			return _regenerator2.default.wrap(function gt$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							_context10.t0 = this;
							return _context10.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context10.t2 = _context10.t1;
							return _context10.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context10.t4 = _context10.t3;
							_context10.t5 = _context10.t2 > _context10.t4;
							return _context10.abrupt('return', _context10.t0.fromNative.call(_context10.t0, _context10.t5));

						case 7:
						case 'end':
							return _context10.stop();
					}
				}
			}, gt, this);
		})

		/**
   * Computes the javascript expression `value < other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'lt',
		value: /*#__PURE__*/_regenerator2.default.mark(function lt(other) {
			return _regenerator2.default.wrap(function lt$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							_context11.t0 = this;
							return _context11.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context11.t2 = _context11.t1;
							return _context11.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context11.t4 = _context11.t3;
							_context11.t5 = _context11.t2 < _context11.t4;
							return _context11.abrupt('return', _context11.t0.fromNative.call(_context11.t0, _context11.t5));

						case 7:
						case 'end':
							return _context11.stop();
					}
				}
			}, lt, this);
		})

		/**
   * Computes the javascript expression `value >= other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'gte',
		value: /*#__PURE__*/_regenerator2.default.mark(function gte(other) {
			return _regenerator2.default.wrap(function gte$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							_context12.t0 = this;
							return _context12.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context12.t2 = _context12.t1;
							return _context12.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context12.t4 = _context12.t3;
							_context12.t5 = _context12.t2 >= _context12.t4;
							return _context12.abrupt('return', _context12.t0.fromNative.call(_context12.t0, _context12.t5));

						case 7:
						case 'end':
							return _context12.stop();
					}
				}
			}, gte, this);
		})

		/**
   * Computes the javascript expression `value <= other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'lte',
		value: /*#__PURE__*/_regenerator2.default.mark(function lte(other) {
			return _regenerator2.default.wrap(function lte$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							_context13.t0 = this;
							return _context13.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context13.t2 = _context13.t1;
							return _context13.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context13.t4 = _context13.t3;
							_context13.t5 = _context13.t2 <= _context13.t4;
							return _context13.abrupt('return', _context13.t0.fromNative.call(_context13.t0, _context13.t5));

						case 7:
						case 'end':
							return _context13.stop();
					}
				}
			}, lte, this);
		})

		/**
   * Computes the javascript expression `value - other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'subtract',
		value: /*#__PURE__*/_regenerator2.default.mark(function subtract(other) {
			return _regenerator2.default.wrap(function subtract$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							_context14.t0 = this;
							return _context14.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context14.t2 = _context14.t1;
							return _context14.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context14.t4 = _context14.t3;
							_context14.t5 = _context14.t2 - _context14.t4;
							return _context14.abrupt('return', _context14.t0.fromNative.call(_context14.t0, _context14.t5));

						case 7:
						case 'end':
							return _context14.stop();
					}
				}
			}, subtract, this);
		})

		/**
   * Computes the javascript expression `value / other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'divide',
		value: /*#__PURE__*/_regenerator2.default.mark(function divide(other) {
			return _regenerator2.default.wrap(function divide$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							_context15.t0 = this;
							return _context15.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context15.t2 = _context15.t1;
							return _context15.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context15.t4 = _context15.t3;
							_context15.t5 = _context15.t2 / _context15.t4;
							return _context15.abrupt('return', _context15.t0.fromNative.call(_context15.t0, _context15.t5));

						case 7:
						case 'end':
							return _context15.stop();
					}
				}
			}, divide, this);
		})

		/**
   * Computes the javascript expression `value * other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'multiply',
		value: /*#__PURE__*/_regenerator2.default.mark(function multiply(other) {
			return _regenerator2.default.wrap(function multiply$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							_context16.t0 = this;
							return _context16.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context16.t2 = _context16.t1;
							return _context16.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context16.t4 = _context16.t3;
							_context16.t5 = _context16.t2 * _context16.t4;
							return _context16.abrupt('return', _context16.t0.fromNative.call(_context16.t0, _context16.t5));

						case 7:
						case 'end':
							return _context16.stop();
					}
				}
			}, multiply, this);
		})

		/**
   * Computes the javascript expression `value % other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'mod',
		value: /*#__PURE__*/_regenerator2.default.mark(function mod(other) {
			return _regenerator2.default.wrap(function mod$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							_context17.t0 = this;
							return _context17.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context17.t2 = _context17.t1;
							return _context17.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context17.t4 = _context17.t3;
							_context17.t5 = _context17.t2 % _context17.t4;
							return _context17.abrupt('return', _context17.t0.fromNative.call(_context17.t0, _context17.t5));

						case 7:
						case 'end':
							return _context17.stop();
					}
				}
			}, mod, this);
		})
	}, {
		key: 'bitNot',
		value: /*#__PURE__*/_regenerator2.default.mark(function bitNot() {
			return _regenerator2.default.wrap(function bitNot$(_context18) {
				while (1) {
					switch (_context18.prev = _context18.next) {
						case 0:
							_context18.t0 = this;
							return _context18.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context18.t2 = ~_context18.t1;
							return _context18.abrupt('return', _context18.t0.fromNative.call(_context18.t0, _context18.t2));

						case 4:
						case 'end':
							return _context18.stop();
					}
				}
			}, bitNot, this);
		})
	}, {
		key: 'shiftLeft',
		value: /*#__PURE__*/_regenerator2.default.mark(function shiftLeft(other) {
			return _regenerator2.default.wrap(function shiftLeft$(_context19) {
				while (1) {
					switch (_context19.prev = _context19.next) {
						case 0:
							_context19.t0 = this;
							return _context19.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context19.t2 = _context19.t1;
							return _context19.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context19.t4 = _context19.t3;
							_context19.t5 = _context19.t2 << _context19.t4;
							return _context19.abrupt('return', _context19.t0.fromNative.call(_context19.t0, _context19.t5));

						case 7:
						case 'end':
							return _context19.stop();
					}
				}
			}, shiftLeft, this);
		})
	}, {
		key: 'shiftRight',
		value: /*#__PURE__*/_regenerator2.default.mark(function shiftRight(other) {
			return _regenerator2.default.wrap(function shiftRight$(_context20) {
				while (1) {
					switch (_context20.prev = _context20.next) {
						case 0:
							_context20.t0 = this;
							return _context20.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context20.t2 = _context20.t1;
							return _context20.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context20.t4 = _context20.t3;
							_context20.t5 = _context20.t2 >> _context20.t4;
							return _context20.abrupt('return', _context20.t0.fromNative.call(_context20.t0, _context20.t5));

						case 7:
						case 'end':
							return _context20.stop();
					}
				}
			}, shiftRight, this);
		})
	}, {
		key: 'shiftRightZF',
		value: /*#__PURE__*/_regenerator2.default.mark(function shiftRightZF(other) {
			return _regenerator2.default.wrap(function shiftRightZF$(_context21) {
				while (1) {
					switch (_context21.prev = _context21.next) {
						case 0:
							_context21.t0 = this;
							return _context21.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context21.t2 = _context21.t1;
							return _context21.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context21.t4 = _context21.t3;
							_context21.t5 = _context21.t2 >>> _context21.t4;
							return _context21.abrupt('return', _context21.t0.fromNative.call(_context21.t0, _context21.t5));

						case 7:
						case 'end':
							return _context21.stop();
					}
				}
			}, shiftRightZF, this);
		})
	}, {
		key: 'bitAnd',
		value: /*#__PURE__*/_regenerator2.default.mark(function bitAnd(other) {
			return _regenerator2.default.wrap(function bitAnd$(_context22) {
				while (1) {
					switch (_context22.prev = _context22.next) {
						case 0:
							_context22.t0 = this;
							return _context22.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context22.t2 = _context22.t1;
							return _context22.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context22.t4 = _context22.t3;
							_context22.t5 = _context22.t2 & _context22.t4;
							return _context22.abrupt('return', _context22.t0.fromNative.call(_context22.t0, _context22.t5));

						case 7:
						case 'end':
							return _context22.stop();
					}
				}
			}, bitAnd, this);
		})
	}, {
		key: 'bitOr',
		value: /*#__PURE__*/_regenerator2.default.mark(function bitOr(other) {
			return _regenerator2.default.wrap(function bitOr$(_context23) {
				while (1) {
					switch (_context23.prev = _context23.next) {
						case 0:
							_context23.t0 = this;
							return _context23.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context23.t2 = _context23.t1;
							return _context23.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context23.t4 = _context23.t3;
							_context23.t5 = _context23.t2 | _context23.t4;
							return _context23.abrupt('return', _context23.t0.fromNative.call(_context23.t0, _context23.t5));

						case 7:
						case 'end':
							return _context23.stop();
					}
				}
			}, bitOr, this);
		})
	}, {
		key: 'bitXor',
		value: /*#__PURE__*/_regenerator2.default.mark(function bitXor(other) {
			return _regenerator2.default.wrap(function bitXor$(_context24) {
				while (1) {
					switch (_context24.prev = _context24.next) {
						case 0:
							_context24.t0 = this;
							return _context24.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context24.t2 = _context24.t1;
							return _context24.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context24.t4 = _context24.t3;
							_context24.t5 = _context24.t2 ^ _context24.t4;
							return _context24.abrupt('return', _context24.t0.fromNative.call(_context24.t0, _context24.t5));

						case 7:
						case 'end':
							return _context24.stop();
					}
				}
			}, bitXor, this);
		})

		/**
   * Computes the `value` raised to the `other` power (`value ** other`)
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'pow',
		value: /*#__PURE__*/_regenerator2.default.mark(function pow(other) {
			return _regenerator2.default.wrap(function pow$(_context25) {
				while (1) {
					switch (_context25.prev = _context25.next) {
						case 0:
							_context25.t0 = this;
							_context25.t1 = Math;
							return _context25.delegateYield(this.toNumberNative(), 't2', 3);

						case 3:
							_context25.t3 = _context25.t2;
							return _context25.delegateYield(other.toNumberNative(), 't4', 5);

						case 5:
							_context25.t5 = _context25.t4;
							_context25.t6 = _context25.t1.pow.call(_context25.t1, _context25.t3, _context25.t5);
							return _context25.abrupt('return', _context25.t0.fromNative.call(_context25.t0, _context25.t6));

						case 8:
						case 'end':
							return _context25.stop();
					}
				}
			}, pow, this);
		})
	}, {
		key: 'inOperator',
		value: /*#__PURE__*/_regenerator2.default.mark(function inOperator(other) {
			var err;
			return _regenerator2.default.wrap(function inOperator$(_context26) {
				while (1) {
					switch (_context26.prev = _context26.next) {
						case 0:
							err = "Cannot use 'in' operator to search for 'thing' in 'thing'";
							return _context26.abrupt('return', new CompletionRecord(CompletionRecord.THROW, {
								type: "TypeError",
								message: err
							}));

						case 2:
						case 'end':
							return _context26.stop();
					}
				}
			}, inOperator, this);
		})

		/**
   * Is the value is truthy, i.e. `!!value`
   *
   * @abstract
   * @type {boolean}
   */

	}, {
		key: 'toNumberValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toNumberValue() {
			return _regenerator2.default.wrap(function toNumberValue$(_context27) {
				while (1) {
					switch (_context27.prev = _context27.next) {
						case 0:
							throw new Error('Unimplemented: Value#toNumberValue');

						case 1:
						case 'end':
							return _context27.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'toStringValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toStringValue() {
			return _regenerator2.default.wrap(function toStringValue$(_context28) {
				while (1) {
					switch (_context28.prev = _context28.next) {
						case 0:
							throw new Error('Unimplemented: Value#StringValue');

						case 1:
						case 'end':
							return _context28.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'toStringNative',
		value: /*#__PURE__*/_regenerator2.default.mark(function toStringNative() {
			return _regenerator2.default.wrap(function toStringNative$(_context29) {
				while (1) {
					switch (_context29.prev = _context29.next) {
						case 0:
							return _context29.delegateYield(this.toStringValue(), 't0', 1);

						case 1:
							return _context29.abrupt('return', _context29.t0.native);

						case 2:
						case 'end':
							return _context29.stop();
					}
				}
			}, toStringNative, this);
		})
	}, {
		key: 'toBooleanValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toBooleanValue() {
			return _regenerator2.default.wrap(function toBooleanValue$(_context30) {
				while (1) {
					switch (_context30.prev = _context30.next) {
						case 0:
							return _context30.abrupt('return', this.truthy ? tru : fals);

						case 1:
						case 'end':
							return _context30.stop();
					}
				}
			}, toBooleanValue, this);
		})
	}, {
		key: 'toUIntNative',
		value: /*#__PURE__*/_regenerator2.default.mark(function toUIntNative() {
			var nv;
			return _regenerator2.default.wrap(function toUIntNative$(_context31) {
				while (1) {
					switch (_context31.prev = _context31.next) {
						case 0:
							return _context31.delegateYield(this.toNumberValue(), 't0', 1);

						case 1:
							nv = _context31.t0;
							return _context31.abrupt('return', Math.floor(nv.native));

						case 3:
						case 'end':
							return _context31.stop();
					}
				}
			}, toUIntNative, this);
		})
	}, {
		key: 'toIntNative',
		value: /*#__PURE__*/_regenerator2.default.mark(function toIntNative() {
			var nv;
			return _regenerator2.default.wrap(function toIntNative$(_context32) {
				while (1) {
					switch (_context32.prev = _context32.next) {
						case 0:
							return _context32.delegateYield(this.toNumberValue(), 't0', 1);

						case 1:
							nv = _context32.t0;
							return _context32.abrupt('return', Math.floor(nv.native));

						case 3:
						case 'end':
							return _context32.stop();
					}
				}
			}, toIntNative, this);
		})
	}, {
		key: 'toNumberNative',
		value: /*#__PURE__*/_regenerator2.default.mark(function toNumberNative() {
			var nv;
			return _regenerator2.default.wrap(function toNumberNative$(_context33) {
				while (1) {
					switch (_context33.prev = _context33.next) {
						case 0:
							return _context33.delegateYield(this.toNumberValue(), 't0', 1);

						case 1:
							nv = _context33.t0;
							return _context33.abrupt('return', nv.native);

						case 3:
						case 'end':
							return _context33.stop();
					}
				}
			}, toNumberNative, this);
		})
	}, {
		key: 'toPrimitiveValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveValue$(_context34) {
				while (1) {
					switch (_context34.prev = _context34.next) {
						case 0:
							throw new Error('Unimplemented: Value#toPrimitiveValue');

						case 1:
						case 'end':
							return _context34.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'toPrimitiveNative',
		value: /*#__PURE__*/_regenerator2.default.mark(function toPrimitiveNative(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveNative$(_context35) {
				while (1) {
					switch (_context35.prev = _context35.next) {
						case 0:
							return _context35.delegateYield(this.toPrimitiveValue(preferedType), 't0', 1);

						case 1:
							return _context35.abrupt('return', _context35.t0.native);

						case 2:
						case 'end':
							return _context35.stop();
					}
				}
			}, toPrimitiveNative, this);
		})

		/**
   * Quickly make a generator for this value
   */

	}, {
		key: 'fastGen',
		value: /*#__PURE__*/_regenerator2.default.mark(function fastGen() {
			return _regenerator2.default.wrap(function fastGen$(_context36) {
				while (1) {
					switch (_context36.prev = _context36.next) {
						case 0:
							return _context36.abrupt('return', this);

						case 1:
						case 'end':
							return _context36.stop();
					}
				}
			}, fastGen, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			var native = this.toNative();
			return native ? native.toString() : '???';
		}
	}, {
		key: 'truthy',
		get: function get() {
			throw new Error('Unimplemented: Value#truthy');
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			throw new Error('Unimplemented: Value#jsTypeName');
		}
	}, {
		key: 'specTypeName',
		get: function get() {
			return this.jsTypeName;
		}
	}, {
		key: 'isCallable',
		get: function get() {
			return typeof this.call === 'function';
		}
	}]);
	return Value;
}();

module.exports = Value;

ObjectValue = __webpack_require__(197);
PrimitiveValue = __webpack_require__(211);
StringValue = __webpack_require__(214);
NumberValue = __webpack_require__(219);
var UndefinedValue = __webpack_require__(223);
var NullValue = __webpack_require__(220);

undef = new UndefinedValue();
nil = new NullValue();
tru = new PrimitiveValue(true);
fals = new PrimitiveValue(false);
nan = new PrimitiveValue(NaN);
emptyString = new StringValue('');

zero = new NumberValue(0);
negzero = new NumberValue(-0);
one = new NumberValue(1);
negone = new NumberValue(-1);
smallIntValues = [negone, zero, one, new NumberValue(2), new NumberValue(3), new NumberValue(4), new NumberValue(5), new NumberValue(6), new NumberValue(7), new NumberValue(8), new NumberValue(9)];

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(154), __esModule: true };

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(155);
var $Object = __webpack_require__(83).Object;
module.exports = function defineProperties(T, D) {
  return $Object.defineProperties(T, D);
};


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(81);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(91), 'Object', { defineProperties: __webpack_require__(100) });


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(157), __esModule: true };

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(116);
__webpack_require__(158);
module.exports = __webpack_require__(83).Array.from;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(84);
var $export = __webpack_require__(81);
var toObject = __webpack_require__(115);
var call = __webpack_require__(127);
var isArrayIter = __webpack_require__(128);
var toLength = __webpack_require__(104);
var createProperty = __webpack_require__(159);
var getIterFn = __webpack_require__(119);

$export($export.S + $export.F * !__webpack_require__(139)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(87);
var createDesc = __webpack_require__(95);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(161);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(164);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(162), __esModule: true };

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(116);
__webpack_require__(70);
module.exports = __webpack_require__(163).f('iterator');


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(113);


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(165), __esModule: true };

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(166);
__webpack_require__(123);
__webpack_require__(176);
__webpack_require__(177);
module.exports = __webpack_require__(83).Symbol;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(82);
var has = __webpack_require__(96);
var DESCRIPTORS = __webpack_require__(91);
var $export = __webpack_require__(81);
var redefine = __webpack_require__(97);
var META = __webpack_require__(167).KEY;
var $fails = __webpack_require__(92);
var shared = __webpack_require__(108);
var setToStringTag = __webpack_require__(112);
var uid = __webpack_require__(109);
var wks = __webpack_require__(113);
var wksExt = __webpack_require__(163);
var wksDefine = __webpack_require__(168);
var enumKeys = __webpack_require__(169);
var isArray = __webpack_require__(172);
var anObject = __webpack_require__(88);
var isObject = __webpack_require__(89);
var toIObject = __webpack_require__(75);
var toPrimitive = __webpack_require__(94);
var createDesc = __webpack_require__(95);
var _create = __webpack_require__(99);
var gOPNExt = __webpack_require__(173);
var $GOPD = __webpack_require__(175);
var $DP = __webpack_require__(87);
var $keys = __webpack_require__(101);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(174).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(171).f = $propertyIsEnumerable;
  __webpack_require__(170).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(80)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(86)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(109)('meta');
var isObject = __webpack_require__(89);
var has = __webpack_require__(96);
var setDesc = __webpack_require__(87).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(92)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(82);
var core = __webpack_require__(83);
var LIBRARY = __webpack_require__(80);
var wksExt = __webpack_require__(163);
var defineProperty = __webpack_require__(87).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(101);
var gOPS = __webpack_require__(170);
var pIE = __webpack_require__(171);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 170 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 171 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(77);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(75);
var gOPN = __webpack_require__(174).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(102);
var hiddenKeys = __webpack_require__(110).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(171);
var createDesc = __webpack_require__(95);
var toIObject = __webpack_require__(75);
var toPrimitive = __webpack_require__(94);
var has = __webpack_require__(96);
var IE8_DOM_DEFINE = __webpack_require__(90);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(91) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(168)('asyncIterator');


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(168)('observable');


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(179), __esModule: true };

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(123);
__webpack_require__(70);
__webpack_require__(180);
__webpack_require__(188);
__webpack_require__(190);
module.exports = __webpack_require__(83).WeakMap;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(82);
var each = __webpack_require__(181)(0);
var redefine = __webpack_require__(97);
var meta = __webpack_require__(167);
var assign = __webpack_require__(184);
var weak = __webpack_require__(185);
var isObject = __webpack_require__(89);
var validate = __webpack_require__(186);
var NATIVE_WEAK_MAP = __webpack_require__(186);
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(187)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(84);
var IObject = __webpack_require__(76);
var toObject = __webpack_require__(115);
var toLength = __webpack_require__(104);
var asc = __webpack_require__(182);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(183);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(89);
var isArray = __webpack_require__(172);
var SPECIES = __webpack_require__(113)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(101);
var gOPS = __webpack_require__(170);
var pIE = __webpack_require__(171);
var toObject = __webpack_require__(115);
var IObject = __webpack_require__(76);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(92)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(137);
var getWeak = __webpack_require__(167).getWeak;
var anObject = __webpack_require__(88);
var isObject = __webpack_require__(89);
var anInstance = __webpack_require__(125);
var forOf = __webpack_require__(126);
var createArrayMethod = __webpack_require__(181);
var $has = __webpack_require__(96);
var validate = __webpack_require__(186);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(89);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(82);
var $export = __webpack_require__(81);
var meta = __webpack_require__(167);
var fails = __webpack_require__(92);
var hide = __webpack_require__(86);
var redefineAll = __webpack_require__(137);
var forOf = __webpack_require__(126);
var anInstance = __webpack_require__(125);
var isObject = __webpack_require__(89);
var setToStringTag = __webpack_require__(112);
var dP = __webpack_require__(87).f;
var each = __webpack_require__(181)(0);
var DESCRIPTORS = __webpack_require__(91);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function (target, iterable) {
      anInstance(target, C, NAME, '_c');
      target._c = new Base();
      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
        anInstance(this, C, KEY);
        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    IS_WEAK || dP(C.prototype, 'size', {
      get: function () {
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__(189)('WeakMap');


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(81);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__(191)('WeakMap');


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(81);
var aFunction = __webpack_require__(85);
var ctx = __webpack_require__(84);
var forOf = __webpack_require__(126);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);

var CompletionRecord = function () {
	function CompletionRecord(type, value, target) {
		(0, _classCallCheck3.default)(this, CompletionRecord);

		if (value === undefined) {
			value = type;
			type = CompletionRecord.NORMAL;
		}

		this.type = type;
		this.value = value;
		this.target = target;
	}

	(0, _createClass3.default)(CompletionRecord, [{
		key: 'addExtra',


		/**
   * Easy access to value.addExtra.
   * Note: Returns a generator.
   * @param {Object} obj - Extra properties
   */
		value: function addExtra(obj) {
			return this.value.addExtra(obj);
		}
	}, {
		key: 'abrupt',
		get: function get() {
			return this.type !== CompletionRecord.NORMAL;
		}
	}], [{
		key: 'makeTypeError',
		value: function makeTypeError(realm, msg) {
			var err = void 0;
			if (msg instanceof Error) err = realm.TypeError.makeFrom(msg);else err = realm.TypeError.make(msg);
			return new CompletionRecord(CompletionRecord.THROW, err);
		}
	}, {
		key: 'makeReferenceError',
		value: function makeReferenceError(realm, msg) {
			var err = void 0;
			if (msg instanceof Error) err = realm.ReferenceError.makeFrom(msg);else err = realm.ReferenceError.make(msg);
			return new CompletionRecord(CompletionRecord.THROW, err);
		}
	}, {
		key: 'makeSyntaxError',
		value: function makeSyntaxError(realm, msg) {
			var err = void 0;
			if (msg instanceof Error) err = realm.SyntaxError.makeFrom(msg);else err = realm.SyntaxError.make(msg);
			return new CompletionRecord(CompletionRecord.THROW, err);
		}
	}, {
		key: 'makeRangeError',
		value: function makeRangeError(realm, msg) {
			var err = void 0;
			if (msg instanceof Error) err = realm.RangeError.makeFrom(msg);else err = realm.RangeError.make(msg);
			return new CompletionRecord(CompletionRecord.THROW, err);
		}
	}]);
	return CompletionRecord;
}();

module.exports = CompletionRecord;

CompletionRecord.NORMAL = 0;
CompletionRecord.BREAK = 1;
CompletionRecord.CONTINUE = 2;
CompletionRecord.RETURN = 3;
CompletionRecord.THROW = 4;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/_regenerator2.default.mark(sortValArray),
    _marked2 = /*#__PURE__*/_regenerator2.default.mark(mergeValArray);

function sortValArray(arr, comp) {
	var mid, left, right;
	return _regenerator2.default.wrap(function sortValArray$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (!(arr.length < 2)) {
						_context.next = 2;
						break;
					}

					return _context.abrupt('return', arr);

				case 2:
					mid = Math.floor(arr.length / 2);
					return _context.delegateYield(sortValArray(arr.slice(0, mid), comp), 't0', 4);

				case 4:
					left = _context.t0;
					return _context.delegateYield(sortValArray(arr.slice(mid, arr.length), comp), 't1', 6);

				case 6:
					right = _context.t1;
					return _context.delegateYield(mergeValArray(left, right, comp), 't2', 8);

				case 8:
					return _context.abrupt('return', _context.t2);

				case 9:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

function mergeValArray(l, r, comp) {
	var result;
	return _regenerator2.default.wrap(function mergeValArray$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					result = [];

				case 1:
					if (!(l.length && r.length)) {
						_context2.next = 10;
						break;
					}

					return _context2.delegateYield(comp(l[0], r[0]), 't0', 3);

				case 3:
					if (!_context2.t0) {
						_context2.next = 7;
						break;
					}

					result.push(l.shift());
					_context2.next = 8;
					break;

				case 7:
					result.push(r.shift());

				case 8:
					_context2.next = 1;
					break;

				case 10:

					while (l.length) {
						result.push(l.shift());
					}while (r.length) {
						result.push(r.shift());
					}return _context2.abrupt('return', result);

				case 13:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

var GenDash = function () {
	function GenDash() {
		(0, _classCallCheck3.default)(this, GenDash);
	}

	(0, _createClass3.default)(GenDash, null, [{
		key: 'identify',
		value: /*#__PURE__*/_regenerator2.default.mark(function identify(value) {
			return _regenerator2.default.wrap(function identify$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return', value);

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, identify, this);
		})
	}, {
		key: 'map',
		value: /*#__PURE__*/_regenerator2.default.mark(function map(what, fx) {
			var out, i;
			return _regenerator2.default.wrap(function map$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							fx = fx || GenDash.identify;
							out = new Array(what.length);
							i = 0;

						case 3:
							if (!(i < what.length)) {
								_context4.next = 9;
								break;
							}

							return _context4.delegateYield(fx(what[i], i, what), 't0', 5);

						case 5:
							out[i] = _context4.t0;

						case 6:
							++i;
							_context4.next = 3;
							break;

						case 9:
							return _context4.abrupt('return', out);

						case 10:
						case 'end':
							return _context4.stop();
					}
				}
			}, map, this);
		})
	}, {
		key: 'each',
		value: /*#__PURE__*/_regenerator2.default.mark(function each(what, fx) {
			var i;
			return _regenerator2.default.wrap(function each$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							if (!(what == null)) {
								_context5.next = 2;
								break;
							}

							return _context5.abrupt('return', what);

						case 2:
							i = 0;

						case 3:
							if (!(i < what.length)) {
								_context5.next = 11;
								break;
							}

							return _context5.delegateYield(fx(what[i], i, what), 't0', 5);

						case 5:
							_context5.t1 = _context5.t0;

							if (!(false === _context5.t1)) {
								_context5.next = 8;
								break;
							}

							return _context5.abrupt('break', 11);

						case 8:
							++i;
							_context5.next = 3;
							break;

						case 11:
							return _context5.abrupt('return', what);

						case 12:
						case 'end':
							return _context5.stop();
					}
				}
			}, each, this);
		})
	}, {
		key: 'noop',
		value: /*#__PURE__*/_regenerator2.default.mark(function noop() {
			return _regenerator2.default.wrap(function noop$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
						case 'end':
							return _context6.stop();
					}
				}
			}, noop, this);
		})
	}, {
		key: 'sort',
		value: /*#__PURE__*/_regenerator2.default.mark(function sort(what, comp) {
			return _regenerator2.default.wrap(function sort$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							comp = comp || /*#__PURE__*/_regenerator2.default.mark(function _callee(left, right) {
								return _regenerator2.default.wrap(function _callee$(_context7) {
									while (1) {
										switch (_context7.prev = _context7.next) {
											case 0:
												return _context7.abrupt('return', left < right);

											case 1:
											case 'end':
												return _context7.stop();
										}
									}
								}, _callee, this);
							});
							return _context8.delegateYield(sortValArray(what, comp), 't0', 2);

						case 2:
							return _context8.abrupt('return', _context8.t0);

						case 3:
						case 'end':
							return _context8.stop();
					}
				}
			}, sort, this);
		})
	}, {
		key: 'values',
		value: /*#__PURE__*/_regenerator2.default.mark(function values(what) {
			var out, o;
			return _regenerator2.default.wrap(function values$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							out = [];
							_context9.t0 = _regenerator2.default.keys(what);

						case 2:
							if ((_context9.t1 = _context9.t0()).done) {
								_context9.next = 9;
								break;
							}

							o = _context9.t1.value;

							if (Object.hasOwnProperty(o)) {
								_context9.next = 6;
								break;
							}

							return _context9.abrupt('continue', 2);

						case 6:
							out.push(what[o]);
							_context9.next = 2;
							break;

						case 9:
							return _context9.abrupt('return', out);

						case 10:
						case 'end':
							return _context9.stop();
					}
				}
			}, values, this);
		})
	}, {
		key: 'keys',
		value: /*#__PURE__*/_regenerator2.default.mark(function keys(what) {
			var out, o;
			return _regenerator2.default.wrap(function keys$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							out = [];
							_context10.t0 = _regenerator2.default.keys(what);

						case 2:
							if ((_context10.t1 = _context10.t0()).done) {
								_context10.next = 9;
								break;
							}

							o = _context10.t1.value;

							if (Object.hasOwnProperty(o)) {
								_context10.next = 6;
								break;
							}

							return _context10.abrupt('continue', 2);

						case 6:
							out.push(o);
							_context10.next = 2;
							break;

						case 9:
							return _context10.abrupt('return', out);

						case 10:
						case 'end':
							return _context10.stop();
					}
				}
			}, keys, this);
		})
	}, {
		key: 'identity',
		value: /*#__PURE__*/_regenerator2.default.mark(function identity(value) {
			return _regenerator2.default.wrap(function identity$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.abrupt('return', value);

						case 1:
						case 'end':
							return _context11.stop();
					}
				}
			}, identity, this);
		})
	}, {
		key: 'syncGenHelper',
		value: function syncGenHelper(gen) {
			var val = gen.next();
			if (!val.done) {
				console.log('This code path uses a helper, but the actual method yielded...');
				throw new Error('This code path uses a helper, but the actual method yielded...');
			}
			return val.value;
		}
	}]);
	return GenDash;
}();

module.exports = GenDash;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(195);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(196);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(14)))

/***/ }),
/* 195 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 196 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _getIterator2 = __webpack_require__(68);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _setPrototypeOf = __webpack_require__(198);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _defineProperty = __webpack_require__(144);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _create = __webpack_require__(202);

var _create2 = _interopRequireDefault(_create);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var PropertyDescriptor = __webpack_require__(210);
var CompletionRecord = __webpack_require__(192);
var PrimitiveValue = __webpack_require__(211);
var NullValue = __webpack_require__(220);
var GenDash = __webpack_require__(193);

var alwaysFalse = function alwaysFalse() {
	return false;
};
var undefinedReturningGenerator = /*#__PURE__*/_regenerator2.default.mark(function undefinedReturningGenerator() {
	return _regenerator2.default.wrap(function undefinedReturningGenerator$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					return _context.abrupt('return', Value.undef);

				case 1:
				case 'end':
					return _context.stop();
			}
		}
	}, undefinedReturningGenerator, this);
});

var ObjRefrence = function () {
	function ObjRefrence(object, name, ctxthis) {
		(0, _classCallCheck3.default)(this, ObjRefrence);

		this.object = object;
		this.name = name;
		this.ctxthis = ctxthis;
	}

	(0, _createClass3.default)(ObjRefrence, [{
		key: 'del',
		value: function del(s) {
			return this.object.delete(this.name, s);
		}
	}, {
		key: 'getValue',
		value: function getValue(s) {
			return this.object.get(this.name, this.ctxthis || this.object, s);
		}
	}, {
		key: 'setValue',
		value: function setValue(value, s) {
			return this.object.set(this.name, value, s);
		}
	}]);
	return ObjRefrence;
}();

/**
 * Represents an Object.
 */


var ObjectValue = function (_Value) {
	(0, _inherits3.default)(ObjectValue, _Value);

	function ObjectValue(realm, proto) {
		(0, _classCallCheck3.default)(this, ObjectValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (ObjectValue.__proto__ || (0, _getPrototypeOf2.default)(ObjectValue)).call(this));

		_this.extensable = true;
		_this.realm = realm;
		_this.proto = null;
		if (proto) _this.eraseAndSetPrototype(proto);else if (realm) _this.eraseAndSetPrototype(realm.ObjectPrototype);else _this.properties = (0, _create2.default)(null);
		return _this;
	}

	(0, _createClass3.default)(ObjectValue, [{
		key: 'ref',
		value: function ref(name, ctxthis) {
			var existing = this.properties[name];
			var thiz = this;

			var get = void 0;
			if (existing) {
				return new ObjRefrence(this, name, ctxthis);
			} else {
				return {
					name: name,
					object: thiz,
					isVariable: false,
					del: alwaysFalse,
					getValue: undefinedReturningGenerator,
					setValue: function setValue(to, s) {
						return this.object.set(this.name, to, s);
					}
				};
			}
		}

		//Note: Returns generator by tailcall.

	}, {
		key: 'set',
		value: function set(name, value, s, extra) {
			var thiz = this;
			extra = extra || {};
			if (!Object.prototype.hasOwnProperty.call(this.properties, name)) {
				if (this.properties[name] && this.properties[name].setter) {
					return this.properties[name].setValue(this, value, s);
				}
				if (!this.extensable) {
					//TODO: Should we throw here in strict mode?
					return Value.undef.fastGen();
				}
				var v = new PropertyDescriptor(value);
				v.enumerable = 'enumerable' in extra ? extra.enumerable : true;
				this.properties[name] = v;

				return v.setValue(this, value, s);
			}

			return this.properties[name].setValue(this, value, s);
		}
	}, {
		key: 'rawSetProperty',
		value: function rawSetProperty(name, value) {
			this.properties[name] = value;
		}
	}, {
		key: 'setImmediate',
		value: function setImmediate(name, value) {
			if (name in this.properties) {
				if (Object.prototype.hasOwnProperty.call(this.properties, name)) {
					if (this.properties[name].direct) {
						this.properties[name].value = value;
						return;
					}
				}
			} else if (this.extensable) {
				var v = new PropertyDescriptor(value);
				v.del = this.delete.bind(this, name);
				this.properties[name] = v;
				return;
			}
			return GenDash.syncGenHelper(this.set(name, value, this.realm));
		}
	}, {
		key: 'has',
		value: function has(name) {
			return name in this.properties;
		}
	}, {
		key: 'delete',
		value: function _delete(name, s) {
			var po = this.properties[name];
			if (!po.configurable) {
				if (s.strict) return CompletionRecord.makeTypeError(s.realm, "Can't delete nonconfigurable object");else return false;
			}
			return delete this.properties[name];
		}
	}, {
		key: 'toNative',
		value: function toNative() {
			var _this2 = this;

			//TODO: This is really a mess and should maybe be somewhere else.
			var bk = Value.createNativeBookmark(this, this.realm);
			if (this.jsTypeName === 'function') return bk;

			var _loop = function _loop(p) {
				var name = p; //work around bug in FF where the scope of p is incorrect
				var po = _this2.properties[name];
				if (Object.prototype.hasOwnProperty.call(bk, name)) return 'continue';
				if (bk[p] !== undefined) return 'continue';

				(0, _defineProperty2.default)(bk, p, {
					get: function get() {
						var c = _this2.properties[name].value;
						return c === undefined ? undefined : c.toNative();
					},
					set: function set(v) {
						_this2.properties[name].value = Value.fromNative(v, _this2.realm);
					},
					enumerable: po.enumerable,
					configurable: po.configurable
				});
			};

			for (var p in this.properties) {
				var _ret = _loop(p);

				if (_ret === 'continue') continue;
			}
			return bk;
		}
	}, {
		key: 'toJS',
		value: function toJS() {
			var out = {};
			for (var p in this.properties) {
				var _name = p; //work around bug in FF where the scope of p is incorrect
				var po = this.properties[_name];
				if (!po.enumerable) continue;
				out[_name] = po.value.toJS();
			}
			return out;
		}
	}, {
		key: 'add',
		value: /*#__PURE__*/_regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.delegateYield(this.toPrimitiveValue(), 't0', 1);

						case 1:
							_context2.t1 = other;
							return _context2.delegateYield(_context2.t0.add(_context2.t1), 't2', 3);

						case 3:
							return _context2.abrupt('return', _context2.t2);

						case 4:
						case 'end':
							return _context2.stop();
					}
				}
			}, add, this);
		})
	}, {
		key: 'doubleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function doubleEquals(other) {
			var hint, pv, pthis;
			return _regenerator2.default.wrap(function doubleEquals$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							if (!(other === this)) {
								_context3.next = 2;
								break;
							}

							return _context3.abrupt('return', Value.true);

						case 2:
							if (!(other instanceof PrimitiveValue)) {
								_context3.next = 8;
								break;
							}

							hint = other.jsTypeName == 'string' ? 'string' : 'number';
							return _context3.delegateYield(this.toPrimitiveValue(hint), 't0', 5);

						case 5:
							pv = _context3.t0;
							return _context3.delegateYield(pv.doubleEquals(other), 't1', 7);

						case 7:
							return _context3.abrupt('return', _context3.t1);

						case 8:
							return _context3.delegateYield(this.toPrimitiveValue('string'), 't2', 9);

						case 9:
							pthis = _context3.t2;
							return _context3.delegateYield(pthis.doubleEquals(other), 't3', 11);

						case 11:
							return _context3.abrupt('return', _context3.t3);

						case 12:
						case 'end':
							return _context3.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'inOperator',
		value: /*#__PURE__*/_regenerator2.default.mark(function inOperator(str) {
			var svalue;
			return _regenerator2.default.wrap(function inOperator$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.delegateYield(str.toStringValue(), 't0', 1);

						case 1:
							svalue = _context4.t0;
							return _context4.abrupt('return', this.has(svalue.toNative()) ? Value.true : Value.false);

						case 3:
						case 'end':
							return _context4.stop();
					}
				}
			}, inOperator, this);
		})
	}, {
		key: 'get',
		value: /*#__PURE__*/_regenerator2.default.mark(function get(name, realm, ctxthis) {
			var existing;
			return _regenerator2.default.wrap(function get$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							existing = this.properties[name];

							if (existing) {
								_context5.next = 8;
								break;
							}

							if (!this.proto) {
								_context5.next = 7;
								break;
							}

							return _context5.delegateYield(this.proto.get(name, realm, ctxthis), 't0', 4);

						case 4:
							return _context5.abrupt('return', _context5.t0);

						case 7:
							return _context5.abrupt('return', Value.undef);

						case 8:
							if (!existing.direct) {
								_context5.next = 10;
								break;
							}

							return _context5.abrupt('return', existing.value);

						case 10:
							return _context5.delegateYield(existing.getValue(ctxthis || this), 't1', 11);

						case 11:
							return _context5.abrupt('return', _context5.t1);

						case 12:
						case 'end':
							return _context5.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'getImmediate',
		value: function getImmediate(name, realm, ctxthis) {
			var existing = this.properties[name];
			if (!existing) return Value.undef;
			if (existing.direct) return existing.value;
			return GenDash.syncGenHelper(existing.getValue(ctxthis || this));
		}
	}, {
		key: 'instanceOf',
		value: /*#__PURE__*/_regenerator2.default.mark(function instanceOf(other, realm) {
			return _regenerator2.default.wrap(function instanceOf$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(other.constructorOf(this, realm), 't0', 1);

						case 1:
							return _context6.abrupt('return', _context6.t0);

						case 2:
						case 'end':
							return _context6.stop();
					}
				}
			}, instanceOf, this);
		})
	}, {
		key: 'constructorOf',
		value: /*#__PURE__*/_regenerator2.default.mark(function constructorOf(what, realm) {
			var target, pt, checked;
			return _regenerator2.default.wrap(function constructorOf$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.delegateYield(this.get('prototype'), 't0', 1);

						case 1:
							target = _context7.t0;
							pt = what.getPrototype(realm);
							checked = [];

						case 4:
							if (!pt) {
								_context7.next = 13;
								break;
							}

							if (!(pt === target)) {
								_context7.next = 7;
								break;
							}

							return _context7.abrupt('return', Value.true);

						case 7:
							checked.push(pt);
							pt = pt.getPrototype(realm);

							if (!(checked.indexOf(pt) !== -1)) {
								_context7.next = 11;
								break;
							}

							return _context7.abrupt('return', Value.false);

						case 11:
							_context7.next = 4;
							break;

						case 13:
							return _context7.abrupt('return', Value.false);

						case 14:
						case 'end':
							return _context7.stop();
					}
				}
			}, constructorOf, this);
		})
	}, {
		key: 'observableProperties',
		value: /*#__PURE__*/_regenerator2.default.mark(function observableProperties(realm) {
			var p;
			return _regenerator2.default.wrap(function observableProperties$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							_context8.t0 = _regenerator2.default.keys(this.properties);

						case 1:
							if ((_context8.t1 = _context8.t0()).done) {
								_context8.next = 9;
								break;
							}

							p = _context8.t1.value;

							if (this.properties[p].enumerable) {
								_context8.next = 5;
								break;
							}

							return _context8.abrupt('continue', 1);

						case 5:
							_context8.next = 7;
							return this.fromNative(p);

						case 7:
							_context8.next = 1;
							break;

						case 9:
							return _context8.abrupt('return');

						case 10:
						case 'end':
							return _context8.stop();
					}
				}
			}, observableProperties, this);
		})
	}, {
		key: 'getPropertyValueMap',
		value: function getPropertyValueMap() {
			var list = {};
			for (var p in this.properties) {
				var v = this.properties[p];
				if (v.value) {
					list[p] = v.value;
				}
			}
			return list;
		}
	}, {
		key: 'hasOwnProperty',
		value: function hasOwnProperty(name) {
			return Object.prototype.hasOwnProperty.call(this.properties, name);
		}
	}, {
		key: 'setPrototype',
		value: function setPrototype(val) {
			if (!this.properties) return this.eraseAndSetPrototype(val);
			if (val === null || val === undefined || val instanceof NullValue) {
				(0, _setPrototypeOf2.default)(this.properties, null);
				this.proto = null;
				return;
			}
			this.proto = val;
			if (val.properties) (0, _setPrototypeOf2.default)(this.properties, val.properties);
		}
	}, {
		key: 'eraseAndSetPrototype',
		value: function eraseAndSetPrototype(val) {
			if (val === null || val === undefined || val instanceof NullValue) {
				this.proto = null;
				this.properties = (0, _create2.default)(null);
			} else {
				this.proto = val;
				this.properties = (0, _create2.default)(val.properties);
			}
		}
	}, {
		key: 'getPrototype',
		value: function getPrototype() {
			return this.proto;
		}
	}, {
		key: 'toPrimitiveValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			var methodNames, _iterator, _isArray, _i, _ref, _name2, method, rescr, res;

			return _regenerator2.default.wrap(function toPrimitiveValue$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							methodNames = void 0;

							if (preferedType == 'string') {
								methodNames = ['toString', 'valueOf'];
							} else {
								methodNames = ['valueOf', 'toString'];
							}

							_iterator = methodNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

						case 3:
							if (!_isArray) {
								_context9.next = 9;
								break;
							}

							if (!(_i >= _iterator.length)) {
								_context9.next = 6;
								break;
							}

							return _context9.abrupt('break', 36);

						case 6:
							_ref = _iterator[_i++];
							_context9.next = 13;
							break;

						case 9:
							_i = _iterator.next();

							if (!_i.done) {
								_context9.next = 12;
								break;
							}

							return _context9.abrupt('break', 36);

						case 12:
							_ref = _i.value;

						case 13:
							_name2 = _ref;
							return _context9.delegateYield(this.get(_name2), 't0', 15);

						case 15:
							method = _context9.t0;

							if (!(method && method.call)) {
								_context9.next = 34;
								break;
							}

							return _context9.delegateYield(method.call(this, [], this.realm.globalScope), 't1', 18);

						case 18:
							_context9.next = 20;
							return _context9.t1;

						case 20:
							rescr = _context9.sent;
							//TODO: There should be more aruments here
							res = Value.undef;

							if (rescr instanceof CompletionRecord) {
								_context9.next = 26;
								break;
							}

							res = rescr;
							_context9.next = 32;
							break;

						case 26:
							if (!(rescr.type == CompletionRecord.RETURN)) {
								_context9.next = 30;
								break;
							}

							res = rescr.value;
							_context9.next = 32;
							break;

						case 30:
							if (!(rescr.type != CompletionRecord.NORMAL)) {
								_context9.next = 32;
								break;
							}

							return _context9.abrupt('continue', 34);

						case 32:
							if (!(res.specTypeName !== 'object')) {
								_context9.next = 34;
								break;
							}

							return _context9.abrupt('return', res);

						case 34:
							_context9.next = 3;
							break;

						case 36:
							_context9.next = 38;
							return CompletionRecord.makeTypeError(this.realm, 'Cannot convert object to primitive value');

						case 38:
							return _context9.abrupt('return', _context9.sent);

						case 39:
						case 'end':
							return _context9.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'toNumberValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toNumberValue() {
			var prim;
			return _regenerator2.default.wrap(function toNumberValue$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							return _context10.delegateYield(this.toPrimitiveValue('number'), 't0', 1);

						case 1:
							prim = _context10.t0;
							return _context10.delegateYield(prim.toNumberValue(), 't1', 3);

						case 3:
							return _context10.abrupt('return', _context10.t1);

						case 4:
						case 'end':
							return _context10.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'toObjectValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toObjectValue(realm) {
			return _regenerator2.default.wrap(function toObjectValue$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.abrupt('return', this);

						case 1:
						case 'end':
							return _context11.stop();
					}
				}
			}, toObjectValue, this);
		})
	}, {
		key: 'toStringValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toStringValue() {
			var prim, gen;
			return _regenerator2.default.wrap(function toStringValue$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							return _context12.delegateYield(this.toPrimitiveValue('string'), 't0', 1);

						case 1:
							prim = _context12.t0;
							gen = prim.toStringValue();
							return _context12.delegateYield(gen, 't1', 4);

						case 4:
							return _context12.abrupt('return', _context12.t1);

						case 5:
						case 'end':
							return _context12.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			var strProps = ['{', '[', this.clazz, ']'];
			var delim = [];
			if (this.wellKnownName) {
				strProps.push('(', this.wellKnownName, ')');
			}
			if (this.proto) {
				delim.push('[[Prototype]]: ' + (this.proto.wellKnownName || this.proto.clazz || this.proto.jsTypeName));
			}
			for (var n in this.properties) {
				if (!Object.prototype.hasOwnProperty.call(this.properties, n)) continue;
				var val = this.properties[n].value;
				if (this.properties[n].getter || this.properties[n].setter) delim.push(n + ': [Getter/Setter]');else if (val.specTypeName === 'object') delim.push(n + ': [Object]');else if (val.specTypeName === 'function') delim.push(n + ': [Function]');else delim.push(n + ': ' + val.debugString);
			}
			strProps.push(delim.join(', '));
			strProps.push('] }');
			return strProps.join(' ');
		}
	}, {
		key: 'truthy',
		get: function get() {
			return true;
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			if (typeof this.call !== 'function') return 'object';
			return 'function';
		}
	}, {
		key: 'specTypeName',
		get: function get() {
			return 'object';
		}
	}]);
	return ObjectValue;
}(Value);

ObjectValue.prototype.clazz = 'Object';

module.exports = ObjectValue;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(199), __esModule: true };

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(200);
module.exports = __webpack_require__(83).Object.setPrototypeOf;


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(81);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(201).set });


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(89);
var anObject = __webpack_require__(88);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(84)(Function.call, __webpack_require__(175).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(203), __esModule: true };

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(204);
var $Object = __webpack_require__(83).Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(81);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(99) });


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(206), __esModule: true };

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(207);
module.exports = __webpack_require__(83).Object.getPrototypeOf;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(115);
var $getPrototypeOf = __webpack_require__(114);

__webpack_require__(151)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof2 = __webpack_require__(160);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(198);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(202);

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(160);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var CompletionRecord = __webpack_require__(192);

var serial = 0;

//TODO: We should call this a PropertyDescriptor, not a variable.

var PropertyDescriptor = function () {
	function PropertyDescriptor(value, enumerable) {
		(0, _classCallCheck3.default)(this, PropertyDescriptor);

		this.value = value;
		this.serial = serial++;
		this.configurable = true;
		this.enumerable = enumerable !== undefined ? !!enumerable : true;
		this.writable = true;
		this.getter = undefined;
		this.setter = undefined;
		this.variable = false;
	}

	(0, _createClass3.default)(PropertyDescriptor, [{
		key: 'getValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function getValue(thiz) {
			return _regenerator2.default.wrap(function getValue$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							thiz = thiz || Value.null;

							if (!this.getter) {
								_context.next = 4;
								break;
							}

							return _context.delegateYield(this.getter.call(thiz, []), 't0', 3);

						case 3:
							return _context.abrupt('return', _context.t0);

						case 4:
							return _context.abrupt('return', this.value);

						case 5:
						case 'end':
							return _context.stop();
					}
				}
			}, getValue, this);
		})
	}, {
		key: 'setValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function setValue(thiz, to, s) {
			return _regenerator2.default.wrap(function setValue$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							thiz = thiz || Value.null;

							if (!this.setter) {
								_context2.next = 4;
								break;
							}

							return _context2.delegateYield(this.setter.call(thiz, [to], s), 't0', 3);

						case 3:
							return _context2.abrupt('return', _context2.t0);

						case 4:
							if (this.writable) {
								_context2.next = 10;
								break;
							}

							if (!(!s || !s.strict)) {
								_context2.next = 7;
								break;
							}

							return _context2.abrupt('return', this.value);

						case 7:
							_context2.next = 9;
							return CompletionRecord.makeTypeError(s.realm, "Can't write to non-writable value.");

						case 9:
							return _context2.abrupt('return', _context2.sent);

						case 10:
							this.value = to;
							return _context2.abrupt('return', this.value);

						case 12:
						case 'end':
							return _context2.stop();
					}
				}
			}, setValue, this);
		})
	}, {
		key: 'direct',
		get: function get() {
			return !this.getter && !this.setter && this.writable;
		}
	}]);
	return PropertyDescriptor;
}();

module.exports = PropertyDescriptor;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _stringify = __webpack_require__(212);

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = __webpack_require__(160);

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _create = __webpack_require__(202);

var _create2 = _interopRequireDefault(_create);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var CompletionRecord = __webpack_require__(192);
var StringValue = void 0;

/**
 * Represents a primitive value.
 */

var PrimitiveValue = function (_Value) {
	(0, _inherits3.default)(PrimitiveValue, _Value);

	function PrimitiveValue(value) {
		(0, _classCallCheck3.default)(this, PrimitiveValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (PrimitiveValue.__proto__ || (0, _getPrototypeOf2.default)(PrimitiveValue)).call(this, null));

		_this.native = value;
		//Object.defineProperty(this, 'native', {
		//	'value': value,
		//	'enumerable': true
		//});
		return _this;
	}

	(0, _createClass3.default)(PrimitiveValue, [{
		key: 'ref',
		value: function ref(name, realm) {
			var that = this;
			var out = (0, _create2.default)(null);
			out.getValue = /*#__PURE__*/_regenerator2.default.mark(function _callee() {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								return _context.delegateYield(that.get(name, realm), 't0', 1);

							case 1:
								return _context.abrupt('return', _context.t0);

							case 2:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			});
			out.setValue = /*#__PURE__*/_regenerator2.default.mark(function _callee2(to) {
				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								return _context2.delegateYield(that.set(name, to, realm), 't0', 1);

							case 1:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, this);
			});
			return out;
		}
	}, {
		key: 'get',
		value: /*#__PURE__*/_regenerator2.default.mark(function get(name, realm) {
			return _regenerator2.default.wrap(function get$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.delegateYield(this.derivePrototype(realm).get(name, realm, this), 't0', 1);

						case 1:
							return _context3.abrupt('return', _context3.t0);

						case 2:
						case 'end':
							return _context3.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'set',
		value: /*#__PURE__*/_regenerator2.default.mark(function set(name, to, realm) {
			return _regenerator2.default.wrap(function set$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
						case 'end':
							return _context4.stop();
					}
				}
			}, set, this);
		})
	}, {
		key: 'derivePrototype',
		value: function derivePrototype(realm) {
			switch ((0, _typeof3.default)(this.native)) {
				case 'string':
					return realm.StringPrototype;
				case 'number':
					return realm.NumberPrototype;
				case 'boolean':
					return realm.BooleanPrototype;
			}
		}
	}, {
		key: 'toNative',
		value: function toNative() {
			return this.native;
		}
	}, {
		key: 'asString',
		value: /*#__PURE__*/_regenerator2.default.mark(function asString() {
			return _regenerator2.default.wrap(function asString$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', this.native.toString());

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, asString, this);
		})
	}, {
		key: 'doubleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function doubleEquals(other) {
			var native, num, _num;

			return _regenerator2.default.wrap(function doubleEquals$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							native = this.native;

							if (!(other instanceof PrimitiveValue)) {
								_context6.next = 5;
								break;
							}

							return _context6.abrupt('return', Value.fromNative(this.native == other.native));

						case 5:
							if (!(typeof native === 'number')) {
								_context6.next = 15;
								break;
							}

							if (!(other instanceof StringValue)) {
								_context6.next = 12;
								break;
							}

							return _context6.delegateYield(other.toNumberValue(), 't0', 8);

						case 8:
							num = _context6.t0;
							return _context6.abrupt('return', Value.from(native === num.toNative()));

						case 12:
							return _context6.abrupt('return', Value.false);

						case 13:
							_context6.next = 20;
							break;

						case 15:
							if (!(typeof native == 'boolean')) {
								_context6.next = 20;
								break;
							}

							return _context6.delegateYield(this.toNumberValue(), 't1', 17);

						case 17:
							_num = _context6.t1;
							return _context6.delegateYield(_num.doubleEquals(other), 't2', 19);

						case 19:
							return _context6.abrupt('return', _context6.t2);

						case 20:
							return _context6.abrupt('return', Value.false);

						case 21:
						case 'end':
							return _context6.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'tripleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function tripleEquals(other) {
			return _regenerator2.default.wrap(function tripleEquals$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.abrupt('return', this.native === other.toNative() ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context7.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'add',
		value: /*#__PURE__*/_regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							_context8.t0 = this;
							_context8.t1 = this.native;
							return _context8.delegateYield(other.toPrimitiveNative(), 't2', 3);

						case 3:
							_context8.t3 = _context8.t2;
							_context8.t4 = _context8.t1 + _context8.t3;
							return _context8.abrupt('return', _context8.t0.fromNative.call(_context8.t0, _context8.t4));

						case 6:
						case 'end':
							return _context8.stop();
					}
				}
			}, add, this);
		})
	}, {
		key: 'instanceOf',
		value: /*#__PURE__*/_regenerator2.default.mark(function instanceOf(other) {
			return _regenerator2.default.wrap(function instanceOf$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							return _context9.abrupt('return', Value.false);

						case 1:
						case 'end':
							return _context9.stop();
					}
				}
			}, instanceOf, this);
		})
	}, {
		key: 'unaryPlus',
		value: /*#__PURE__*/_regenerator2.default.mark(function unaryPlus() {
			return _regenerator2.default.wrap(function unaryPlus$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							return _context10.abrupt('return', this.fromNative(+this.native));

						case 1:
						case 'end':
							return _context10.stop();
					}
				}
			}, unaryPlus, this);
		})
	}, {
		key: 'unaryMinus',
		value: /*#__PURE__*/_regenerator2.default.mark(function unaryMinus() {
			return _regenerator2.default.wrap(function unaryMinus$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.abrupt('return', this.fromNative(-this.native));

						case 1:
						case 'end':
							return _context11.stop();
					}
				}
			}, unaryMinus, this);
		})
	}, {
		key: 'not',
		value: /*#__PURE__*/_regenerator2.default.mark(function not() {
			return _regenerator2.default.wrap(function not$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							return _context12.abrupt('return', this.fromNative(!this.native));

						case 1:
						case 'end':
							return _context12.stop();
					}
				}
			}, not, this);
		})
	}, {
		key: 'observableProperties',
		value: /*#__PURE__*/_regenerator2.default.mark(function observableProperties(realm) {
			return _regenerator2.default.wrap(function observableProperties$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							return _context13.delegateYield(this.derivePrototype(realm).observableProperties(realm), 't0', 1);

						case 1:
						case 'end':
							return _context13.stop();
					}
				}
			}, observableProperties, this);
		})
	}, {
		key: 'makeThisForNew',
		value: /*#__PURE__*/_regenerator2.default.mark(function makeThisForNew() {
			return _regenerator2.default.wrap(function makeThisForNew$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							throw new Error('primative value is not a constructor');

						case 1:
						case 'end':
							return _context14.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}, {
		key: 'getPrototype',
		value: function getPrototype(realm) {
			return this.derivePrototype(realm);
		}
	}, {
		key: 'toPrimitiveValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveValue$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							return _context15.abrupt('return', this);

						case 1:
						case 'end':
							return _context15.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'toStringValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toStringValue() {
			return _regenerator2.default.wrap(function toStringValue$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							if (!(typeof this.native === 'string')) {
								_context16.next = 2;
								break;
							}

							return _context16.abrupt('return', this);

						case 2:
							return _context16.abrupt('return', this.fromNative(String(this.native)));

						case 3:
						case 'end':
							return _context16.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'toNumberValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toNumberValue() {
			return _regenerator2.default.wrap(function toNumberValue$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							if (!(typeof this.native === 'number')) {
								_context17.next = 2;
								break;
							}

							return _context17.abrupt('return', this);

						case 2:
							return _context17.abrupt('return', this.fromNative(Number(this.native)));

						case 3:
						case 'end':
							return _context17.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			if ((0, _typeof3.default)(this.native) === 'object') return '[native object]';else if (typeof this.native === 'function') return '[native function]';else if (typeof this.native === 'string') return (0, _stringify2.default)(this.native);else return '' + this.native;
		}
	}, {
		key: 'truthy',
		get: function get() {
			return !!this.native;
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return (0, _typeof3.default)(this.native);
		}
	}]);
	return PrimitiveValue;
}(Value);

module.exports = PrimitiveValue;

StringValue = __webpack_require__(214);

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(213), __esModule: true };

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(83);
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(215);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(211);
var Value = __webpack_require__(152);
var NumberValue = void 0;

var StringValue = function (_PrimitiveValue) {
	(0, _inherits3.default)(StringValue, _PrimitiveValue);

	function StringValue() {
		(0, _classCallCheck3.default)(this, StringValue);
		return (0, _possibleConstructorReturn3.default)(this, (StringValue.__proto__ || (0, _getPrototypeOf2.default)(StringValue)).apply(this, arguments));
	}

	(0, _createClass3.default)(StringValue, [{
		key: 'get',
		value: /*#__PURE__*/_regenerator2.default.mark(function get(name, realm) {
			var idx;
			return _regenerator2.default.wrap(function get$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							idx = Number(name);

							if (isNaN(idx)) {
								_context.next = 3;
								break;
							}

							return _context.abrupt('return', StringValue.fromNative(this.native[idx]));

						case 3:
							if (!(name === 'length')) {
								_context.next = 5;
								break;
							}

							return _context.abrupt('return', StringValue.fromNative(this.native.length));

						case 5:
							return _context.delegateYield((0, _get3.default)(StringValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(StringValue.prototype), 'get', this).call(this, name, realm), 't0', 6);

						case 6:
							return _context.abrupt('return', _context.t0);

						case 7:
						case 'end':
							return _context.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'doubleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function doubleEquals(other) {
			var rv;
			return _regenerator2.default.wrap(function doubleEquals$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(other instanceof StringValue)) {
								_context2.next = 4;
								break;
							}

							return _context2.abrupt('return', Value.fromNative(this.native == other.native));

						case 4:
							if (!(other instanceof NumberValue)) {
								_context2.next = 9;
								break;
							}

							return _context2.delegateYield(this.toNumberValue(), 't0', 6);

						case 6:
							rv = _context2.t0;
							return _context2.delegateYield(rv.doubleEquals(other), 't1', 8);

						case 8:
							return _context2.abrupt('return', _context2.t1);

						case 9:
							return _context2.delegateYield((0, _get3.default)(StringValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(StringValue.prototype), 'doubleEquals', this).call(this, other), 't2', 10);

						case 10:
							return _context2.abrupt('return', _context2.t2);

						case 11:
						case 'end':
							return _context2.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'gt',
		value: /*#__PURE__*/_regenerator2.default.mark(function gt(other) {
			return _regenerator2.default.wrap(function gt$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							_context3.t0 = this;
							_context3.t1 = this.native;
							return _context3.delegateYield(other.toStringNative(), 't2', 3);

						case 3:
							_context3.t3 = _context3.t2;
							_context3.t4 = _context3.t1 > _context3.t3;
							return _context3.abrupt('return', _context3.t0.fromNative.call(_context3.t0, _context3.t4));

						case 6:
						case 'end':
							return _context3.stop();
					}
				}
			}, gt, this);
		})
	}, {
		key: 'lt',
		value: /*#__PURE__*/_regenerator2.default.mark(function lt(other) {
			return _regenerator2.default.wrap(function lt$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							_context4.t0 = this;
							_context4.t1 = this.native;
							return _context4.delegateYield(other.toStringNative(), 't2', 3);

						case 3:
							_context4.t3 = _context4.t2;
							_context4.t4 = _context4.t1 < _context4.t3;
							return _context4.abrupt('return', _context4.t0.fromNative.call(_context4.t0, _context4.t4));

						case 6:
						case 'end':
							return _context4.stop();
					}
				}
			}, lt, this);
		})
	}, {
		key: 'gte',
		value: /*#__PURE__*/_regenerator2.default.mark(function gte(other) {
			return _regenerator2.default.wrap(function gte$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							_context5.t0 = this;
							_context5.t1 = this.native;
							return _context5.delegateYield(other.toStringNative(), 't2', 3);

						case 3:
							_context5.t3 = _context5.t2;
							_context5.t4 = _context5.t1 >= _context5.t3;
							return _context5.abrupt('return', _context5.t0.fromNative.call(_context5.t0, _context5.t4));

						case 6:
						case 'end':
							return _context5.stop();
					}
				}
			}, gte, this);
		})
	}, {
		key: 'lte',
		value: /*#__PURE__*/_regenerator2.default.mark(function lte(other) {
			return _regenerator2.default.wrap(function lte$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							_context6.t0 = this;
							_context6.t1 = this.native;
							return _context6.delegateYield(other.toStringNative(), 't2', 3);

						case 3:
							_context6.t3 = _context6.t2;
							_context6.t4 = _context6.t1 <= _context6.t3;
							return _context6.abrupt('return', _context6.t0.fromNative.call(_context6.t0, _context6.t4));

						case 6:
						case 'end':
							return _context6.stop();
					}
				}
			}, lte, this);
		})
	}, {
		key: 'add',
		value: /*#__PURE__*/_regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							_context7.t0 = this;
							_context7.t1 = this.native;
							return _context7.delegateYield(other.toPrimitiveNative('string'), 't2', 3);

						case 3:
							_context7.t3 = _context7.t2;
							_context7.t4 = _context7.t1 + _context7.t3;
							return _context7.abrupt('return', _context7.t0.fromNative.call(_context7.t0, _context7.t4));

						case 6:
						case 'end':
							return _context7.stop();
					}
				}
			}, add, this);
		})
	}]);
	return StringValue;
}(PrimitiveValue);

module.exports = StringValue;

NumberValue = __webpack_require__(219);

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _getOwnPropertyDescriptor = __webpack_require__(216);

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

  if (desc === undefined) {
    var parent = (0, _getPrototypeOf2.default)(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(217), __esModule: true };

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(218);
var $Object = __webpack_require__(83).Object;
module.exports = function getOwnPropertyDescriptor(it, key) {
  return $Object.getOwnPropertyDescriptor(it, key);
};


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(75);
var $getOwnPropertyDescriptor = __webpack_require__(175).f;

__webpack_require__(151)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(215);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(211);
var Value = __webpack_require__(152);
var StringValue = void 0;

var NumberValue = function (_PrimitiveValue) {
	(0, _inherits3.default)(NumberValue, _PrimitiveValue);

	function NumberValue() {
		(0, _classCallCheck3.default)(this, NumberValue);
		return (0, _possibleConstructorReturn3.default)(this, (NumberValue.__proto__ || (0, _getPrototypeOf2.default)(NumberValue)).apply(this, arguments));
	}

	(0, _createClass3.default)(NumberValue, [{
		key: 'doubleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function doubleEquals(other) {
			var on;
			return _regenerator2.default.wrap(function doubleEquals$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							on = void 0;

							if (!(other instanceof NumberValue)) {
								_context.next = 5;
								break;
							}

							return _context.abrupt('return', Value.fromNative(this.native == other.native));

						case 5:
							if (!(other instanceof StringValue)) {
								_context.next = 10;
								break;
							}

							return _context.delegateYield(other.toNumberValue(), 't0', 7);

						case 7:
							on = _context.t0;
							_context.next = 13;
							break;

						case 10:
							if (!(other.specTypeName == 'object')) {
								_context.next = 13;
								break;
							}

							return _context.delegateYield(other.toPrimitiveValue(), 't1', 12);

						case 12:
							on = _context.t1;

						case 13:
							if (on) {
								_context.next = 16;
								break;
							}

							return _context.delegateYield((0, _get3.default)(NumberValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(NumberValue.prototype), 'doubleEquals', this).call(this, other), 't2', 15);

						case 15:
							return _context.abrupt('return', _context.t2);

						case 16:
							return _context.delegateYield(this.doubleEquals(on), 't3', 17);

						case 17:
							return _context.abrupt('return', _context.t3);

						case 18:
						case 'end':
							return _context.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'add',
		value: /*#__PURE__*/_regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							_context2.t0 = this;
							_context2.t1 = this.native;
							return _context2.delegateYield(other.toPrimitiveNative(), 't2', 3);

						case 3:
							_context2.t3 = _context2.t2;
							_context2.t4 = _context2.t1 + _context2.t3;
							return _context2.abrupt('return', _context2.t0.fromNative.call(_context2.t0, _context2.t4));

						case 6:
						case 'end':
							return _context2.stop();
					}
				}
			}, add, this);
		})
	}]);
	return NumberValue;
}(PrimitiveValue);

module.exports = NumberValue;

StringValue = __webpack_require__(214);

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EmptyValue = __webpack_require__(221);
var Value = __webpack_require__(152);

var NullValue = function (_EmptyValue) {
	(0, _inherits3.default)(NullValue, _EmptyValue);

	function NullValue() {
		(0, _classCallCheck3.default)(this, NullValue);
		return (0, _possibleConstructorReturn3.default)(this, (NullValue.__proto__ || (0, _getPrototypeOf2.default)(NullValue)).apply(this, arguments));
	}

	(0, _createClass3.default)(NullValue, [{
		key: 'toNative',
		value: function toNative() {
			return null;
		}
	}, {
		key: 'tripleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function tripleEquals(other, realm) {
			return _regenerator2.default.wrap(function tripleEquals$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.abrupt('return', other instanceof NullValue ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'asString',
		value: /*#__PURE__*/_regenerator2.default.mark(function asString() {
			return _regenerator2.default.wrap(function asString$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.abrupt('return', 'null');

						case 1:
						case 'end':
							return _context2.stop();
					}
				}
			}, asString, this);
		})
	}, {
		key: 'toPrimitiveValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveValue$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return', this);

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'toNumberValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toNumberValue() {
			return _regenerator2.default.wrap(function toNumberValue$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', Value.zero);

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'toStringValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toStringValue() {
			return _regenerator2.default.wrap(function toStringValue$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', Value.fromNative('null'));

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'jsTypeName',
		get: function get() {
			return 'object';
		}
	}, {
		key: 'specTypeName',
		get: function get() {
			return 'null';
		}
	}, {
		key: 'debugString',
		get: function get() {
			return 'null';
		}
	}]);
	return NullValue;
}(EmptyValue);

module.exports = NullValue;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var BridgeValue = __webpack_require__(222);
var CompletionRecord = __webpack_require__(192);

var EmptyValue = function (_Value) {
	(0, _inherits3.default)(EmptyValue, _Value);

	function EmptyValue() {
		(0, _classCallCheck3.default)(this, EmptyValue);
		return (0, _possibleConstructorReturn3.default)(this, (EmptyValue.__proto__ || (0, _getPrototypeOf2.default)(EmptyValue)).call(this, null));
	}

	(0, _createClass3.default)(EmptyValue, [{
		key: 'not',
		value: /*#__PURE__*/_regenerator2.default.mark(function not() {
			return _regenerator2.default.wrap(function not$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.abrupt('return', Value.fromNative(true));

						case 1:
						case 'end':
							return _context.stop();
					}
				}
			}, not, this);
		})
	}, {
		key: 'doubleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function doubleEquals(other) {
			return _regenerator2.default.wrap(function doubleEquals$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(other instanceof EmptyValue)) {
								_context2.next = 4;
								break;
							}

							return _context2.abrupt('return', Value.true);

						case 4:
							if (!(other instanceof BridgeValue)) {
								_context2.next = 8;
								break;
							}

							return _context2.abrupt('return', this.fromNative(this.toNative() == other.toNative()));

						case 8:
							return _context2.abrupt('return', Value.false);

						case 9:
						case 'end':
							return _context2.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'observableProperties',
		value: /*#__PURE__*/_regenerator2.default.mark(function observableProperties(realm) {
			return _regenerator2.default.wrap(function observableProperties$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return');

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, observableProperties, this);
		})
	}, {
		key: 'instanceOf',
		value: /*#__PURE__*/_regenerator2.default.mark(function instanceOf() {
			return _regenerator2.default.wrap(function instanceOf$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', Value.false);

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, instanceOf, this);
		})

		/**
   * @param {String} name
   * @param {Realm} realm
   * @returns {CompletionRecord} Indexing empty values is a type error.
   */

	}, {
		key: 'get',
		value: /*#__PURE__*/_regenerator2.default.mark(function get(name, realm) {
			var str, err;
			return _regenerator2.default.wrap(function get$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							str = 'Cannot read property \'' + name + '\' of ' + this.specTypeName;
							err = CompletionRecord.makeTypeError(realm, str);
							return _context5.delegateYield(err.addExtra({ code: 'IndexEmpty', target: this, prop: name }), 't0', 3);

						case 3:
							return _context5.abrupt('return', err);

						case 4:
						case 'end':
							return _context5.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'truthy',
		get: function get() {
			return false;
		}
	}]);
	return EmptyValue;
}(Value);

module.exports = EmptyValue;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _typeof2 = __webpack_require__(160);

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _create = __webpack_require__(202);

var _create2 = _interopRequireDefault(_create);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var CompletionRecord = __webpack_require__(192);
/**
 * Represents a value that maps directly to an untrusted local value.
 */

var BridgeValue = function (_Value) {
	(0, _inherits3.default)(BridgeValue, _Value);

	function BridgeValue(value) {
		(0, _classCallCheck3.default)(this, BridgeValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (BridgeValue.__proto__ || (0, _getPrototypeOf2.default)(BridgeValue)).call(this));

		_this.native = value;
		return _this;
	}

	(0, _createClass3.default)(BridgeValue, [{
		key: 'makeBridge',
		value: function makeBridge(value) {
			return BridgeValue.make(value);
		}
	}, {
		key: 'ref',
		value: function ref(name, s) {
			var that = this;
			var out = (0, _create2.default)(null);
			var doset = function doset(value) {
				return that.native[name] = value.toNative();
			};
			out.getValue = /*#__PURE__*/_regenerator2.default.mark(function _callee() {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								return _context.abrupt('return', Value.fromNative(that.native[name]));

							case 1:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			});
			out.setValue = /*#__PURE__*/_regenerator2.default.mark(function _callee2(to) {
				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								doset(to);
							case 1:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, this);
			});

			return out;
		}
	}, {
		key: 'toNative',
		value: function toNative() {
			return this.native;
		}
	}, {
		key: 'asString',
		value: /*#__PURE__*/_regenerator2.default.mark(function asString() {
			return _regenerator2.default.wrap(function asString$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return', this.native.toString());

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, asString, this);
		})
	}, {
		key: 'doubleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function doubleEquals(other) {
			return _regenerator2.default.wrap(function doubleEquals$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', this.makeBridge(this.native == other.toNative()));

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'tripleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function tripleEquals(other) {
			return _regenerator2.default.wrap(function tripleEquals$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', this.makeBridge(this.native === other.toNative()));

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'add',
		value: /*#__PURE__*/_regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.abrupt('return', this.makeBridge(this.native + other.toNative()));

						case 1:
						case 'end':
							return _context6.stop();
					}
				}
			}, add, this);
		})
	}, {
		key: 'subtract',
		value: /*#__PURE__*/_regenerator2.default.mark(function subtract(other) {
			return _regenerator2.default.wrap(function subtract$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.abrupt('return', this.makeBridge(this.native - other.toNative()));

						case 1:
						case 'end':
							return _context7.stop();
					}
				}
			}, subtract, this);
		})
	}, {
		key: 'multiply',
		value: /*#__PURE__*/_regenerator2.default.mark(function multiply(other) {
			return _regenerator2.default.wrap(function multiply$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							return _context8.abrupt('return', this.makeBridge(this.native * other.toNative()));

						case 1:
						case 'end':
							return _context8.stop();
					}
				}
			}, multiply, this);
		})
	}, {
		key: 'divide',
		value: /*#__PURE__*/_regenerator2.default.mark(function divide(other) {
			return _regenerator2.default.wrap(function divide$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							return _context9.abrupt('return', this.makeBridge(this.native / other.toNative()));

						case 1:
						case 'end':
							return _context9.stop();
					}
				}
			}, divide, this);
		})
	}, {
		key: 'mod',
		value: /*#__PURE__*/_regenerator2.default.mark(function mod(other) {
			return _regenerator2.default.wrap(function mod$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							return _context10.abrupt('return', this.makeBridge(this.native % other.toNative()));

						case 1:
						case 'end':
							return _context10.stop();
					}
				}
			}, mod, this);
		})
	}, {
		key: 'shiftLeft',
		value: /*#__PURE__*/_regenerator2.default.mark(function shiftLeft(other) {
			return _regenerator2.default.wrap(function shiftLeft$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.abrupt('return', this.makeBridge(this.native << other.toNative()));

						case 1:
						case 'end':
							return _context11.stop();
					}
				}
			}, shiftLeft, this);
		})
	}, {
		key: 'shiftRight',
		value: /*#__PURE__*/_regenerator2.default.mark(function shiftRight(other) {
			return _regenerator2.default.wrap(function shiftRight$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							return _context12.abrupt('return', this.makeBridge(this.native >> other.toNative()));

						case 1:
						case 'end':
							return _context12.stop();
					}
				}
			}, shiftRight, this);
		})
	}, {
		key: 'shiftRightZF',
		value: /*#__PURE__*/_regenerator2.default.mark(function shiftRightZF(other) {
			return _regenerator2.default.wrap(function shiftRightZF$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							return _context13.abrupt('return', this.makeBridge(this.native >>> other.toNative()));

						case 1:
						case 'end':
							return _context13.stop();
					}
				}
			}, shiftRightZF, this);
		})
	}, {
		key: 'bitAnd',
		value: /*#__PURE__*/_regenerator2.default.mark(function bitAnd(other) {
			return _regenerator2.default.wrap(function bitAnd$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							return _context14.abrupt('return', this.makeBridge(this.native & other.toNative()));

						case 1:
						case 'end':
							return _context14.stop();
					}
				}
			}, bitAnd, this);
		})
	}, {
		key: 'bitOr',
		value: /*#__PURE__*/_regenerator2.default.mark(function bitOr(other) {
			return _regenerator2.default.wrap(function bitOr$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							return _context15.abrupt('return', this.makeBridge(this.native | other.toNative()));

						case 1:
						case 'end':
							return _context15.stop();
					}
				}
			}, bitOr, this);
		})
	}, {
		key: 'bitXor',
		value: /*#__PURE__*/_regenerator2.default.mark(function bitXor(other) {
			return _regenerator2.default.wrap(function bitXor$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							return _context16.abrupt('return', this.makeBridge(this.native ^ other.toNative()));

						case 1:
						case 'end':
							return _context16.stop();
					}
				}
			}, bitXor, this);
		})
	}, {
		key: 'gt',
		value: /*#__PURE__*/_regenerator2.default.mark(function gt(other) {
			return _regenerator2.default.wrap(function gt$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							return _context17.abrupt('return', this.makeBridge(this.native > other.toNative()));

						case 1:
						case 'end':
							return _context17.stop();
					}
				}
			}, gt, this);
		})
	}, {
		key: 'lt',
		value: /*#__PURE__*/_regenerator2.default.mark(function lt(other) {
			return _regenerator2.default.wrap(function lt$(_context18) {
				while (1) {
					switch (_context18.prev = _context18.next) {
						case 0:
							return _context18.abrupt('return', this.makeBridge(this.native < other.toNative()));

						case 1:
						case 'end':
							return _context18.stop();
					}
				}
			}, lt, this);
		})
	}, {
		key: 'gte',
		value: /*#__PURE__*/_regenerator2.default.mark(function gte(other) {
			return _regenerator2.default.wrap(function gte$(_context19) {
				while (1) {
					switch (_context19.prev = _context19.next) {
						case 0:
							return _context19.abrupt('return', this.makeBridge(this.native >= other.toNative()));

						case 1:
						case 'end':
							return _context19.stop();
					}
				}
			}, gte, this);
		})
	}, {
		key: 'lte',
		value: /*#__PURE__*/_regenerator2.default.mark(function lte(other) {
			return _regenerator2.default.wrap(function lte$(_context20) {
				while (1) {
					switch (_context20.prev = _context20.next) {
						case 0:
							return _context20.abrupt('return', this.makeBridge(this.native <= other.toNative()));

						case 1:
						case 'end':
							return _context20.stop();
					}
				}
			}, lte, this);
		})
	}, {
		key: 'inOperator',
		value: /*#__PURE__*/_regenerator2.default.mark(function inOperator(other) {
			return _regenerator2.default.wrap(function inOperator$(_context21) {
				while (1) {
					switch (_context21.prev = _context21.next) {
						case 0:
							return _context21.abrupt('return', this.makeBridge(other.toNative() in this.native));

						case 1:
						case 'end':
							return _context21.stop();
					}
				}
			}, inOperator, this);
		})
	}, {
		key: 'instanceOf',
		value: /*#__PURE__*/_regenerator2.default.mark(function instanceOf(other) {
			return _regenerator2.default.wrap(function instanceOf$(_context22) {
				while (1) {
					switch (_context22.prev = _context22.next) {
						case 0:
							return _context22.abrupt('return', this.makeBridge(this.native instanceof other.toNative()));

						case 1:
						case 'end':
							return _context22.stop();
					}
				}
			}, instanceOf, this);
		})
	}, {
		key: 'unaryPlus',
		value: /*#__PURE__*/_regenerator2.default.mark(function unaryPlus() {
			return _regenerator2.default.wrap(function unaryPlus$(_context23) {
				while (1) {
					switch (_context23.prev = _context23.next) {
						case 0:
							return _context23.abrupt('return', this.makeBridge(+this.native));

						case 1:
						case 'end':
							return _context23.stop();
					}
				}
			}, unaryPlus, this);
		})
	}, {
		key: 'unaryMinus',
		value: /*#__PURE__*/_regenerator2.default.mark(function unaryMinus() {
			return _regenerator2.default.wrap(function unaryMinus$(_context24) {
				while (1) {
					switch (_context24.prev = _context24.next) {
						case 0:
							return _context24.abrupt('return', this.makeBridge(-this.native));

						case 1:
						case 'end':
							return _context24.stop();
					}
				}
			}, unaryMinus, this);
		})
	}, {
		key: 'not',
		value: /*#__PURE__*/_regenerator2.default.mark(function not() {
			return _regenerator2.default.wrap(function not$(_context25) {
				while (1) {
					switch (_context25.prev = _context25.next) {
						case 0:
							return _context25.abrupt('return', this.makeBridge(!this.native));

						case 1:
						case 'end':
							return _context25.stop();
					}
				}
			}, not, this);
		})
	}, {
		key: 'get',
		value: /*#__PURE__*/_regenerator2.default.mark(function get(name) {
			return _regenerator2.default.wrap(function get$(_context26) {
				while (1) {
					switch (_context26.prev = _context26.next) {
						case 0:
							return _context26.abrupt('return', this.makeBridge(this.native[name]));

						case 1:
						case 'end':
							return _context26.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'set',
		value: /*#__PURE__*/_regenerator2.default.mark(function set(name, value) {
			return _regenerator2.default.wrap(function set$(_context27) {
				while (1) {
					switch (_context27.prev = _context27.next) {
						case 0:
							this.native[name] = value.toNative();

						case 1:
						case 'end':
							return _context27.stop();
					}
				}
			}, set, this);
		})
	}, {
		key: 'observableProperties',
		value: /*#__PURE__*/_regenerator2.default.mark(function observableProperties(realm) {
			var p;
			return _regenerator2.default.wrap(function observableProperties$(_context28) {
				while (1) {
					switch (_context28.prev = _context28.next) {
						case 0:
							_context28.t0 = _regenerator2.default.keys(this.native);

						case 1:
							if ((_context28.t1 = _context28.t0()).done) {
								_context28.next = 7;
								break;
							}

							p = _context28.t1.value;
							_context28.next = 5;
							return this.makeBridge(p);

						case 5:
							_context28.next = 1;
							break;

						case 7:
							return _context28.abrupt('return');

						case 8:
						case 'end':
							return _context28.stop();
					}
				}
			}, observableProperties, this);
		})

		/**
   *
   * @param {Value} thiz
   * @param {Value[]} args
   */

	}, {
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args) {
			var realArgs, i, result, _result;

			return _regenerator2.default.wrap(function call$(_context29) {
				while (1) {
					switch (_context29.prev = _context29.next) {
						case 0:
							realArgs = new Array(args.length);

							for (i = 0; i < args.length; ++i) {
								realArgs[i] = args[i].toNative();
							}
							_context29.prev = 2;
							result = this.native.apply(thiz ? thiz.toNative() : undefined, realArgs);
							return _context29.abrupt('return', this.makeBridge(result));

						case 7:
							_context29.prev = 7;
							_context29.t0 = _context29['catch'](2);
							_result = this.makeBridge(_context29.t0);
							return _context29.abrupt('return', new CompletionRecord(CompletionRecord.THROW, _result));

						case 11:
						case 'end':
							return _context29.stop();
					}
				}
			}, call, this, [[2, 7]]);
		})
	}, {
		key: 'makeThisForNew',
		value: /*#__PURE__*/_regenerator2.default.mark(function makeThisForNew() {
			return _regenerator2.default.wrap(function makeThisForNew$(_context30) {
				while (1) {
					switch (_context30.prev = _context30.next) {
						case 0:
							return _context30.abrupt('return', this.makeBridge((0, _create2.default)(this.native.prototype)));

						case 1:
						case 'end':
							return _context30.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}, {
		key: 'toStringValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toStringValue() {
			return _regenerator2.default.wrap(function toStringValue$(_context31) {
				while (1) {
					switch (_context31.prev = _context31.next) {
						case 0:
							return _context31.abrupt('return', this.fromNative(this.native.toString()));

						case 1:
						case 'end':
							return _context31.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			return '[Bridge: ' + this.native + ']';
		}
	}, {
		key: 'truthy',
		get: function get() {
			return !!this.native;
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return (0, _typeof3.default)(this.native);
		}
	}], [{
		key: 'make',
		value: function make(native) {
			if (native === undefined) return Value.undef;
			var prim = Value.fromPrimativeNative(native);
			if (prim) return prim;

			if (Value.hasBookmark(native)) {
				return Value.getBookmark(native);
			}

			return new BridgeValue(native);
		}
	}]);
	return BridgeValue;
}(Value);

module.exports = BridgeValue;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EmptyValue = __webpack_require__(221);
var Value = __webpack_require__(152);

var UndefinedValue = function (_EmptyValue) {
	(0, _inherits3.default)(UndefinedValue, _EmptyValue);

	function UndefinedValue() {
		(0, _classCallCheck3.default)(this, UndefinedValue);
		return (0, _possibleConstructorReturn3.default)(this, (UndefinedValue.__proto__ || (0, _getPrototypeOf2.default)(UndefinedValue)).apply(this, arguments));
	}

	(0, _createClass3.default)(UndefinedValue, [{
		key: 'toNative',
		value: function toNative() {
			return undefined;
		}
	}, {
		key: 'tripleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function tripleEquals(other, realm) {
			return _regenerator2.default.wrap(function tripleEquals$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.abrupt('return', other instanceof UndefinedValue ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'add',
		value: /*#__PURE__*/_regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.abrupt('return', this.fromNative(undefined + other.toNative()));

						case 1:
						case 'end':
							return _context2.stop();
					}
				}
			}, add, this);
		})
	}, {
		key: 'asString',
		value: /*#__PURE__*/_regenerator2.default.mark(function asString() {
			return _regenerator2.default.wrap(function asString$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return', 'undefined');

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, asString, this);
		})
	}, {
		key: 'toPrimitiveValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveValue$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', this);

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'toNumberValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toNumberValue() {
			return _regenerator2.default.wrap(function toNumberValue$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', Value.nan);

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'toStringValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toStringValue() {
			return _regenerator2.default.wrap(function toStringValue$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.abrupt('return', Value.fromNative('undefined'));

						case 1:
						case 'end':
							return _context6.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'jsTypeName',
		get: function get() {
			return 'undefined';
		}
	}, {
		key: 'debugString',
		get: function get() {
			return 'undefined';
		}
	}]);
	return UndefinedValue;
}(EmptyValue);

module.exports = UndefinedValue;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var PropertyDescriptor = __webpack_require__(210);
var ObjectValue = __webpack_require__(197);
var ArrayValue = __webpack_require__(225);
var EvaluatorInstruction = __webpack_require__(226);

/**
 * Represents a value that maps directly to an untrusted local value.
 */

var ClosureValue = function (_ObjectValue) {
	(0, _inherits3.default)(ClosureValue, _ObjectValue);

	/**
  * @param {object} func - AST Node for function
  * @param {Scope} scope - Functions up-values.
  */
	function ClosureValue(func, scope) {
		(0, _classCallCheck3.default)(this, ClosureValue);

		var realm = scope.realm;

		var _this = (0, _possibleConstructorReturn3.default)(this, (ClosureValue.__proto__ || (0, _getPrototypeOf2.default)(ClosureValue)).call(this, realm, realm.FunctionPrototype));

		_this.realm = scope.realm;
		_this.func = func;
		_this.funcSourceAST = func;
		_this.scope = scope;
		_this.returnLastValue = false;
		_this.properties['prototype'] = new PropertyDescriptor(new ObjectValue(realm), false);
		_this.properties['name'] = new PropertyDescriptor(_this.fromNative(func.id ? func.id.name : undefined), false);
		_this.properties['length'] = new PropertyDescriptor(_this.fromNative(func.params.length), false);

		return _this;
	}

	(0, _createClass3.default)(ClosureValue, [{
		key: 'toNative',
		value: function toNative() {
			return Value.createNativeBookmark(this, this.realm);
		}
	}, {
		key: 'doubleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function doubleEquals(other) {
			return _regenerator2.default.wrap(function doubleEquals$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.abrupt('return', other === this ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context.stop();
					}
				}
			}, doubleEquals, this);
		})

		/**
   *
   * @param {Value} thiz
   * @param {Value[]} args
   * @param {Scope} scope
   */

	}, {
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope, extra) {
			var invokeScope, obj, n, v, fn, _n, argn, argvars, argsObj, i, vv, _v, calleeProp, lengthProp, _i, name, rest, p, _name, opts, result;

			return _regenerator2.default.wrap(function call$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							//TODO: This way of scoping is entirelly wrong.
							if (!scope) scope = this.scope;
							invokeScope = void 0;

							if (this.boundScope) {
								invokeScope = this.boundScope.createChild();
								invokeScope.writeTo = this.boundScope.object;
								invokeScope.thiz = this.thiz || /* thiz ||*/this.boundScope.thiz;
							} else {
								invokeScope = scope.top.createChild();
								invokeScope.thiz = this.thiz || thiz;
							}

							if (this.func.strict === true) invokeScope.strict = true;

							obj = this.scope.object;

							if (this.func.upvars) {
								for (n in this.func.upvars) {
									//TODO: There should be a method that does this.
									invokeScope.object.rawSetProperty(n, obj.properties[n]);
								}
							}

							//Do Var Hoisting
							if (this.func.vars) {
								for (v in this.func.vars) {
									invokeScope.add(v, Value.undef);
									invokeScope.object.properties[v].isVariable = true;
								}
							}

							/*
       if ( this.func.funcs ) {
       	for ( let fn in this.func.funcs ) {
       		let n = this.func.funcs[fn];
       		let closure = new ClosureValue(n, scope);
       		invokeScope.add(n.id.name, closure);
       	}
       }
       */

							// Just a total guess that this is correct behavior...
							if (!invokeScope.strict && this.func.funcs) {
								for (fn in this.func.funcs) {
									_n = this.func.funcs[fn];

									invokeScope.add(_n.id.name, Value.undef);
								}
							}

							argn = Math.max(args.length, this.func.params.length);
							argvars = new Array(argn);
							argsObj = new ObjectValue(scope.realm);

							argsObj.clazz = 'Arguments';

							i = 0;

						case 13:
							if (!(i < argn)) {
								_context2.next = 26;
								break;
							}

							vv = Value.undef;

							if (i < args.length) vv = args[i];

							_v = new PropertyDescriptor(vv);

							argvars[i] = _v;

							if (!invokeScope.strict) {
								_context2.next = 22;
								break;
							}

							return _context2.delegateYield(argsObj.set(i, vv), 't0', 20);

						case 20:
							_context2.next = 23;
							break;

						case 22:
							argsObj.rawSetProperty(i, _v);

						case 23:
							++i;
							_context2.next = 13;
							break;

						case 26:
							if (invokeScope.strict) {
								_context2.next = 31;
								break;
							}

							calleeProp = new PropertyDescriptor(this.fromNative(args.length));

							calleeProp.enumerable = false;
							argsObj.rawSetProperty('callee', calleeProp);
							return _context2.delegateYield(argsObj.set('callee', this), 't1', 31);

						case 31:
							lengthProp = new PropertyDescriptor(this.fromNative(args.length));

							lengthProp.enumerable = false;
							argsObj.rawSetProperty('length', lengthProp);

							invokeScope.add('arguments', argsObj);

							for (_i = 0; _i < this.func.params.length; ++_i) {
								if (this.func.params[_i].type == 'RestElement') {
									name = this.func.params[_i].argument.name;
									rest = args.slice(_i);

									invokeScope.add(name, ArrayValue.make(rest, scope.realm));
								} else {
									p = this.func.params[_i];

									if (p.type == "Identifier") p = { id: p };
									_name = p.id.name;


									if (scope.strict) {
										//Scope is strict, so we make a copy for the args variable
										invokeScope.add(_name, _i < args.length ? args[_i] : Value.undef);
									} else {
										//Scope isnt strict, magic happens.
										invokeScope.object.rawSetProperty(_name, argvars[_i]);
									}
								}
							}
							opts = { returnLastValue: this.returnLastValue, creator: this };

							if (extra && extra.evaluator && extra.evaluator.debug) {
								opts['profileName'] = extra.callNode.callee.srcName;
							}
							if (extra && extra.callee) {
								opts.callee = extra.callee;
							}
							if (this.func.nonUserCode) {
								opts.yieldPower = -1;
							}

							_context2.next = 42;
							return EvaluatorInstruction.branch('function', this.func.body, invokeScope, opts);

						case 42:
							result = _context2.sent;
							return _context2.abrupt('return', result);

						case 44:
						case 'end':
							return _context2.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			if (this.func && this.func.id) return '[Function ' + this.func.id.name + ']';
			return '[Function]';
		}
	}, {
		key: 'truthy',
		get: function get() {
			return true;
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return 'function';
		}
	}, {
		key: 'specTypeName',
		get: function get() {
			return 'object';
		}
	}]);
	return ClosureValue;
}(ObjectValue);

ClosureValue.prototype.clazz = 'Function';

module.exports = ClosureValue;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _defineProperty = __webpack_require__(144);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _getIterator2 = __webpack_require__(68);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = __webpack_require__(148);

var _keys2 = _interopRequireDefault(_keys);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(215);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(211);
var ObjectValue = __webpack_require__(197);
var Value = __webpack_require__(152);
var GenDash = __webpack_require__(193);
var NumberValue = void 0;

var ArrayValue = function (_ObjectValue) {
	(0, _inherits3.default)(ArrayValue, _ObjectValue);

	function ArrayValue(realm) {
		(0, _classCallCheck3.default)(this, ArrayValue);
		return (0, _possibleConstructorReturn3.default)(this, (ArrayValue.__proto__ || (0, _getPrototypeOf2.default)(ArrayValue)).call(this, realm, realm.ArrayPrototype));
	}

	(0, _createClass3.default)(ArrayValue, [{
		key: 'get',
		value: /*#__PURE__*/_regenerator2.default.mark(function get(name, realm) {
			return _regenerator2.default.wrap(function get$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.delegateYield((0, _get3.default)(ArrayValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(ArrayValue.prototype), 'get', this).call(this, name, realm), 't0', 1);

						case 1:
							return _context.abrupt('return', _context.t0);

						case 2:
						case 'end':
							return _context.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'adjustLength',
		value: function adjustLength(name, value) {
			if (name == 'length' && this.properties.length) {
				//TODO: 15.4.5.2 specifies more complex behavior here.
				var target = GenDash.syncGenHelper(value.toIntNative());
				var length = this.getLengthSync();
				if (target < length) {
					for (var i = length - 1; i >= target; --i) {
						delete this.properties[i];
					}
				}
			}

			if (!isNaN(parseInt(name))) {
				var _length = this.getLengthSync();
				if (name >= _length) {
					this.properties.length.value = Value.fromNative(name + 1);
				}
			}
		}
	}, {
		key: 'getLengthSync',
		value: function getLengthSync() {
			return this.properties.length.value.native;
		}
	}, {
		key: 'set',
		value: function set(name, v) {
			this.adjustLength(name, v);
			return (0, _get3.default)(ArrayValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(ArrayValue.prototype), 'set', this).call(this, name, v);
		}
	}, {
		key: 'setImmediate',
		value: function setImmediate(name, v) {
			this.adjustLength(name, v);
			return (0, _get3.default)(ArrayValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(ArrayValue.prototype), 'setImmediate', this).call(this, name, v);
		}
	}, {
		key: 'toNative',
		value: function toNative() {
			var out = new Array(this.getLengthSync());
			for (var _iterator = (0, _keys2.default)(this.properties), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var i = _ref;

				if (i === 'length') continue;
				var po = this.properties[i];
				if (po && po.value) {
					if (!po.direct) {
						(0, _defineProperty2.default)(out, i, {
							enumerable: po.enumerable,
							writable: po.writable,
							configurable: po.configurable,
							value: po.value.toNative()
						});
					} else {
						out[i] = po.value.toNative();
					}
				}
			}
			return out;
		}
	}, {
		key: 'toJS',
		value: function toJS() {
			var out = new Array(this.getLengthSync());
			for (var _iterator2 = (0, _keys2.default)(this.properties), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
				var _ref2;

				if (_isArray2) {
					if (_i2 >= _iterator2.length) break;
					_ref2 = _iterator2[_i2++];
				} else {
					_i2 = _iterator2.next();
					if (_i2.done) break;
					_ref2 = _i2.value;
				}

				var i = _ref2;

				if (i === 'length') continue;
				var po = this.properties[i];
				out[i] = po.value.toJS();
			}
			return out;
		}
	}, {
		key: 'debugString',
		get: function get() {
			if (!this.properties.length) return (0, _get3.default)(ArrayValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(ArrayValue.prototype), 'debugString', this);
			var length = this.properties.length.value.native;

			var loop = Math.min(length, 20);
			var r = new Array(loop);
			for (var i = 0; i < loop; ++i) {
				var po = this.properties[i];
				if (po && po.value) r[i] = po.value.debugString;else r[i] = '';
			}
			return '[' + r.join(', ') + (loop < length ? '...' : '') + ']';
		}
	}], [{
		key: 'make',
		value: function make(vals, realm) {

			var av = new ArrayValue(realm);

			av.setImmediate('length', Value.fromNative(0));
			av.properties.length.enumerable = false;

			for (var i = 0; i < vals.length; ++i) {
				var v = vals[i];
				if (!(v instanceof Value)) v = realm.fromNative(v);
				av.setImmediate(i, v);
			}
			return av;
		}
	}]);
	return ArrayValue;
}(ObjectValue);

ArrayValue.prototype.clazz = 'Array';

module.exports = ArrayValue;

NumberValue = __webpack_require__(219);

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EvaluatorInstruction = function () {
	(0, _createClass3.default)(EvaluatorInstruction, null, [{
		key: 'branch',
		value: function branch(kind, ast, scope, extra) {
			var ei = new EvaluatorInstruction('branch');
			ei.kind = kind;
			ei.ast = ast;
			ei.scope = scope;
			ei.extra = extra;
			return ei;
		}
	}]);

	function EvaluatorInstruction(type) {
		(0, _classCallCheck3.default)(this, EvaluatorInstruction);

		this.type = type;
	}

	(0, _createClass3.default)(EvaluatorInstruction, [{
		key: 'mark',
		value: function mark(o) {
			for (var k in o) {
				this[k] = o[k];
			}return this;
		}
	}]);
	return EvaluatorInstruction;
}();

EvaluatorInstruction.stepMinor = new EvaluatorInstruction('step');
EvaluatorInstruction.stepMajor = new EvaluatorInstruction('step');
EvaluatorInstruction.stepStatement = new EvaluatorInstruction('step');
EvaluatorInstruction.waitForFramePop = new EvaluatorInstruction('waitForFramePop');
EvaluatorInstruction.framePushed = new EvaluatorInstruction('framePushed');
EvaluatorInstruction.getEvaluator = new EvaluatorInstruction('getEvaluator');
EvaluatorInstruction.eventLoopBodyStart = new EvaluatorInstruction('event').mark({ event: 'loopBodyStart' });
module.exports = EvaluatorInstruction;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

var _promise = __webpack_require__(121);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EmptyValue = __webpack_require__(221);
var Value = __webpack_require__(152);

function defer() {
	var resolve, reject;
	var promise = new _promise2.default(function (a, b) {
		resolve = a;
		reject = b;
	});
	return {
		resolve: resolve,
		reject: reject,
		promise: promise
	};
}

var FutureValue = function (_Value) {
	(0, _inherits3.default)(FutureValue, _Value);

	function FutureValue(realm) {
		(0, _classCallCheck3.default)(this, FutureValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (FutureValue.__proto__ || (0, _getPrototypeOf2.default)(FutureValue)).call(this, realm));

		_this.resolved = false;
		_this.successful = undefined;
		_this.value = undefined;
		_this.defered = defer();
		return _this;
	}

	/**
  * Creates a new future value wraping the promise p.
  * @param {Promise} promise
  */


	(0, _createClass3.default)(FutureValue, [{
		key: 'resolve',
		value: function resolve(value) {
			this.value = value;
			this.resolved = true;
			this.successful = true;
			this.defered.resolve(value);
		}
	}, {
		key: 'reject',
		value: function reject(value) {
			this.value = value;
			this.resolved = true;
			this.successful = false;
			this.defered.resolve(value);
		}
	}, {
		key: 'then',
		value: function then() {
			var p = this.defered.promise;
			return p.then.apply(p, arguments);
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return 'internal:future';
		}
	}, {
		key: 'debugString',
		get: function get() {
			return '[Future]';
		}
	}], [{
		key: 'make',
		value: function make(promise) {
			var fv = new FutureValue(null);
			promise.then(function (resolved) {
				fv.resolve(Value.fromNative(resolved));
			}, function (caught) {
				fv.reject(Value.fromNative(caught));
			});
			return fv;
		}
	}]);
	return FutureValue;
}(Value);

module.exports = FutureValue;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(211);
var ObjectValue = __webpack_require__(197);
var Value = __webpack_require__(152);

var RegExpValue = function (_ObjectValue) {
	(0, _inherits3.default)(RegExpValue, _ObjectValue);

	function RegExpValue(realm) {
		(0, _classCallCheck3.default)(this, RegExpValue);
		return (0, _possibleConstructorReturn3.default)(this, (RegExpValue.__proto__ || (0, _getPrototypeOf2.default)(RegExpValue)).call(this, realm, realm.RegExpPrototype));
	}

	(0, _createClass3.default)(RegExpValue, [{
		key: 'toNative',
		value: function toNative() {
			return this.regexp;
		}
	}, {
		key: 'debugString',
		get: function get() {
			return this.regexp.toString();
		}
	}], [{
		key: 'make',
		value: function make(regexp, realm) {

			var av = new RegExpValue(realm);
			av.regexp = regexp;
			av.setImmediate('source', Value.fromNative(regexp.source));
			av.properties['source'].enumerable = false;
			av.setImmediate('global', Value.fromNative(regexp.global));
			av.properties['global'].enumerable = false;
			av.setImmediate('ignoreCase', Value.fromNative(regexp.ignoreCase));
			av.properties['ignoreCase'].enumerable = false;
			av.setImmediate('multiline', Value.fromNative(regexp.multiline));
			av.properties['multiline'].enumerable = false;
			return av;
		}
	}]);
	return RegExpValue;
}(ObjectValue);

RegExpValue.prototype.clazz = 'RegExp';

module.exports = RegExpValue;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _defineProperty = __webpack_require__(144);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(211);
var ObjectValue = __webpack_require__(197);
var Value = __webpack_require__(152);
var EvaluatorInstruction = __webpack_require__(226);

var ErrorInstance = function (_ObjectValue) {
	(0, _inherits3.default)(ErrorInstance, _ObjectValue);

	function ErrorInstance() {
		(0, _classCallCheck3.default)(this, ErrorInstance);
		return (0, _possibleConstructorReturn3.default)(this, (ErrorInstance.__proto__ || (0, _getPrototypeOf2.default)(ErrorInstance)).apply(this, arguments));
	}

	(0, _createClass3.default)(ErrorInstance, [{
		key: 'createNativeAnalog',
		value: function createNativeAnalog() {
			if (!this.native) {
				var stack = void 0;
				var NativeClass = this.proto.nativeClass || Error;
				this.native = new NativeClass();
				if (!this.native.stack) {
					try {
						throw native;
					} catch (e) {
						stack = e.stack;
					}
				} else {
					stack = this.native.stack;
				}

				var frames = stack ? stack.split(/\n/) : [];
				if (stack.length > 1) {
					var header = frames.shift();
					while (/at (ErrorInstance.createNativeAnalog|ErrorObject.make|Function.makeTypeError)/.test(frames[0])) {
						frames.shift();
					}
					this.native.stack = header + '\n' + frames.join('\n');
				}
				for (var k in this.extra) {
					this.native[k] = this.extra[k];
				}
			}
			return this.native;
		}
	}, {
		key: 'toNative',
		value: function toNative() {
			var out = this.createNativeAnalog();
			var msg = this.properties['message'].value;
			if (msg) out.message = msg.toNative();

			if (this.properties['stack']) {
				msg.stack = this.properties['stack'].value.native;
			}

			return out;
		}
	}, {
		key: 'addExtra',
		value: /*#__PURE__*/_regenerator2.default.mark(function addExtra(extra) {
			var evaluator, scope, ast, list, _k, v, k;

			return _regenerator2.default.wrap(function addExtra$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (this.realm.options.extraErrorInfo) {
								_context.next = 2;
								break;
							}

							return _context.abrupt('return');

						case 2:
							_context.next = 4;
							return EvaluatorInstruction.getEvaluator;

						case 4:
							evaluator = _context.sent;

							if (!evaluator) {
								_context.next = 21;
								break;
							}

							scope = evaluator.topFrame.scope;
							ast = extra.ast = evaluator.topFrame.ast;

							extra.scope = scope;
							//TODO: Sometiems scope is undefined, figure out why.
							if (extra.ast.loc) {
								extra.line = extra.ast.loc.start.line;
							}

							_context.t0 = extra.code;
							_context.next = _context.t0 === 'UndefinedVariable' ? 13 : _context.t0 === 'SmartAccessDenied' ? 13 : _context.t0 === 'CallNonFunction' ? 15 : _context.t0 === 'IndexEmpty' ? 20 : 21;
							break;

						case 13:
							if (scope) extra.candidates = scope.getVariableNames();
							return _context.abrupt('break', 21);

						case 15:
							list = void 0;

							if (extra.base && extra.base.getPropertyValueMap) {
								list = extra.base.getPropertyValueMap();
							} else {
								list = scope.object.getPropertyValueMap();
							}

							extra.candidates = [];
							for (_k in list) {
								v = list[_k];

								if (v && v.isCallable) {
									extra.candidates.push(_k);
								}
							}
							return _context.abrupt('break', 21);

						case 20:
							return _context.abrupt('break', 21);

						case 21:
							if (this.native) {
								for (k in extra) {
									if (['ast', 'scope', 'candidates', 'targetAst'].indexOf(k) !== -1) {
										(0, _defineProperty2.default)(this.native, k, {
											value: extra[k],
											enumerable: false
										});
									} else {
										this.native[k] = extra[k];
									}
								}
							}
							this.extra = extra;

						case 23:
						case 'end':
							return _context.stop();
					}
				}
			}, addExtra, this);
		})
	}]);
	return ErrorInstance;
}(ObjectValue);

module.exports = ErrorInstance;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getIterator2 = __webpack_require__(68);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/_regenerator2.default.mark(evaluateArrayExpression),
    _marked2 = /*#__PURE__*/_regenerator2.default.mark(evaluateAssignmentExpression),
    _marked3 = /*#__PURE__*/_regenerator2.default.mark(evaluateBinaryExpression),
    _marked4 = /*#__PURE__*/_regenerator2.default.mark(evaluateBlockStatement),
    _marked5 = /*#__PURE__*/_regenerator2.default.mark(evaluateBreakStatement),
    _marked6 = /*#__PURE__*/_regenerator2.default.mark(evaluateCallExpression),
    _marked7 = /*#__PURE__*/_regenerator2.default.mark(doCall),
    _marked8 = /*#__PURE__*/_regenerator2.default.mark(addMethodFnToClass),
    _marked9 = /*#__PURE__*/_regenerator2.default.mark(evaluateClassExpression),
    _marked10 = /*#__PURE__*/_regenerator2.default.mark(evaluateClassDeclaration),
    _marked11 = /*#__PURE__*/_regenerator2.default.mark(evaluateConditionalExpression),
    _marked12 = /*#__PURE__*/_regenerator2.default.mark(evaluateContinueStatement),
    _marked13 = /*#__PURE__*/_regenerator2.default.mark(evaluateDoWhileStatement),
    _marked14 = /*#__PURE__*/_regenerator2.default.mark(evaluateEmptyStatement),
    _marked15 = /*#__PURE__*/_regenerator2.default.mark(evaluateExpressionStatement),
    _marked16 = /*#__PURE__*/_regenerator2.default.mark(evaluateIdentifier),
    _marked17 = /*#__PURE__*/_regenerator2.default.mark(evaluateIfStatement),
    _marked18 = /*#__PURE__*/_regenerator2.default.mark(evaluateImportDeclaration),
    _marked19 = /*#__PURE__*/_regenerator2.default.mark(genForLoop),
    _marked20 = /*#__PURE__*/_regenerator2.default.mark(evaluateForStatement),
    _marked21 = /*#__PURE__*/_regenerator2.default.mark(evaluateForInStatement),
    _marked22 = /*#__PURE__*/_regenerator2.default.mark(evaluateForOfStatement),
    _marked23 = /*#__PURE__*/_regenerator2.default.mark(evaluateFunctionDeclaration),
    _marked24 = /*#__PURE__*/_regenerator2.default.mark(evaluateFunctionExpression),
    _marked25 = /*#__PURE__*/_regenerator2.default.mark(evaluateLabeledStatement),
    _marked26 = /*#__PURE__*/_regenerator2.default.mark(evaluateLiteral),
    _marked27 = /*#__PURE__*/_regenerator2.default.mark(evaluateLogicalExpression),
    _marked28 = /*#__PURE__*/_regenerator2.default.mark(evaluateMemberExpression),
    _marked29 = /*#__PURE__*/_regenerator2.default.mark(evaluateMetaProperty),
    _marked30 = /*#__PURE__*/_regenerator2.default.mark(evaluateObjectExpression),
    _marked31 = /*#__PURE__*/_regenerator2.default.mark(evaluateProgram),
    _marked32 = /*#__PURE__*/_regenerator2.default.mark(evaluateReturnStatement),
    _marked33 = /*#__PURE__*/_regenerator2.default.mark(evaluateSequenceExpression),
    _marked34 = /*#__PURE__*/_regenerator2.default.mark(evaluateSuperExpression),
    _marked35 = /*#__PURE__*/_regenerator2.default.mark(evaluateSwitchStatement),
    _marked36 = /*#__PURE__*/_regenerator2.default.mark(evaluateTaggedTemplateExpression),
    _marked37 = /*#__PURE__*/_regenerator2.default.mark(evaluateTemplateLiteral),
    _marked38 = /*#__PURE__*/_regenerator2.default.mark(evaluateThisExpression),
    _marked39 = /*#__PURE__*/_regenerator2.default.mark(evaluateThrowStatement),
    _marked40 = /*#__PURE__*/_regenerator2.default.mark(evaluateTryStatement),
    _marked41 = /*#__PURE__*/_regenerator2.default.mark(evaluateUpdateExpression),
    _marked42 = /*#__PURE__*/_regenerator2.default.mark(evaluateUnaryExpression),
    _marked43 = /*#__PURE__*/_regenerator2.default.mark(evaluateVariableDeclaration),
    _marked44 = /*#__PURE__*/_regenerator2.default.mark(genWhileLoop),
    _marked45 = /*#__PURE__*/_regenerator2.default.mark(evaluateWhileStatement),
    _marked46 = /*#__PURE__*/_regenerator2.default.mark(evaluateWithStatement);

var Value = __webpack_require__(152);
var CompletionRecord = __webpack_require__(192);
var ClosureValue = __webpack_require__(224);
var ObjectValue = __webpack_require__(197);
var FutureValue = __webpack_require__(227);
var RegExpValue = __webpack_require__(228);
var PropertyDescriptor = __webpack_require__(210);
var ErrorValue = __webpack_require__(229);
var ArrayValue = __webpack_require__(225);
var EvaluatorInstruction = __webpack_require__(226);

function evaluateArrayExpression(e, n, s) {
	var result, i;
	return _regenerator2.default.wrap(function evaluateArrayExpression$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					//let result = new ObjectValue();
					result = new Array(n.elements.length);
					i = 0;

				case 2:
					if (!(i < n.elements.length)) {
						_context.next = 9;
						break;
					}

					if (!n.elements[i]) {
						_context.next = 6;
						break;
					}

					return _context.delegateYield(e.branch(n.elements[i], s), 't0', 5);

				case 5:
					result[i] = _context.t0;

				case 6:
					++i;
					_context.next = 2;
					break;

				case 9:
					if (!(e.yieldPower >= 3)) {
						_context.next = 12;
						break;
					}

					_context.next = 12;
					return EvaluatorInstruction.stepMinor;

				case 12:
					return _context.abrupt('return', ArrayValue.make(result, e.realm));

				case 13:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

function evaluateAssignmentExpression(e, n, s) {
	var realm, ref, argument, value, cur;
	return _regenerator2.default.wrap(function evaluateAssignmentExpression$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					//TODO: Account for not-strict mode
					realm = s.realm;
					return _context2.delegateYield(e.resolveRef(n.left, s, n.operator === '='), 't0', 2);

				case 2:
					ref = _context2.t0;

					if (!(!ref && s.strict)) {
						_context2.next = 5;
						break;
					}

					return _context2.abrupt('return', CompletionRecord.makeReferenceError(s.realm, 'Invalid refrence in assignment.'));

				case 5:
					return _context2.delegateYield(e.branch(n.right, s), 't1', 6);

				case 6:
					argument = _context2.t1;
					value = void 0;
					cur = void 0;

					if (!(e.yieldPower >= 3)) {
						_context2.next = 12;
						break;
					}

					_context2.next = 12;
					return EvaluatorInstruction.stepMinor;

				case 12:
					_context2.t2 = n.operator;
					_context2.next = _context2.t2 === '=' ? 15 : _context2.t2 === '+=' ? 17 : _context2.t2 === '-=' ? 22 : _context2.t2 === '*=' ? 27 : _context2.t2 === '/=' ? 32 : _context2.t2 === '%=' ? 37 : _context2.t2 === '<<=' ? 42 : _context2.t2 === '>>=' ? 47 : _context2.t2 === '>>>=' ? 52 : _context2.t2 === '|=' ? 57 : _context2.t2 === '&=' ? 62 : _context2.t2 === '^=' ? 67 : _context2.t2 === '**=' ? 72 : 77;
					break;

				case 15:
					value = argument;
					return _context2.abrupt('break', 78);

				case 17:
					return _context2.delegateYield(ref.getValue(), 't3', 18);

				case 18:
					cur = _context2.t3;
					return _context2.delegateYield(cur.add(argument, realm), 't4', 20);

				case 20:
					value = _context2.t4;
					return _context2.abrupt('break', 78);

				case 22:
					return _context2.delegateYield(ref.getValue(), 't5', 23);

				case 23:
					cur = _context2.t5;
					return _context2.delegateYield(cur.subtract(argument, realm), 't6', 25);

				case 25:
					value = _context2.t6;
					return _context2.abrupt('break', 78);

				case 27:
					return _context2.delegateYield(ref.getValue(), 't7', 28);

				case 28:
					cur = _context2.t7;
					return _context2.delegateYield(cur.multiply(argument, realm), 't8', 30);

				case 30:
					value = _context2.t8;
					return _context2.abrupt('break', 78);

				case 32:
					return _context2.delegateYield(ref.getValue(), 't9', 33);

				case 33:
					cur = _context2.t9;
					return _context2.delegateYield(cur.divide(argument, realm), 't10', 35);

				case 35:
					value = _context2.t10;
					return _context2.abrupt('break', 78);

				case 37:
					return _context2.delegateYield(ref.getValue(), 't11', 38);

				case 38:
					cur = _context2.t11;
					return _context2.delegateYield(cur.mod(argument, realm), 't12', 40);

				case 40:
					value = _context2.t12;
					return _context2.abrupt('break', 78);

				case 42:
					return _context2.delegateYield(ref.getValue(), 't13', 43);

				case 43:
					cur = _context2.t13;
					return _context2.delegateYield(cur.shiftLeft(argument, realm), 't14', 45);

				case 45:
					value = _context2.t14;
					return _context2.abrupt('break', 78);

				case 47:
					return _context2.delegateYield(ref.getValue(), 't15', 48);

				case 48:
					cur = _context2.t15;
					return _context2.delegateYield(cur.shiftRight(argument, realm), 't16', 50);

				case 50:
					value = _context2.t16;
					return _context2.abrupt('break', 78);

				case 52:
					return _context2.delegateYield(ref.getValue(), 't17', 53);

				case 53:
					cur = _context2.t17;
					return _context2.delegateYield(cur.shiftRightZF(argument, realm), 't18', 55);

				case 55:
					value = _context2.t18;
					return _context2.abrupt('break', 78);

				case 57:
					return _context2.delegateYield(ref.getValue(), 't19', 58);

				case 58:
					cur = _context2.t19;
					return _context2.delegateYield(cur.bitOr(argument, realm), 't20', 60);

				case 60:
					value = _context2.t20;
					return _context2.abrupt('break', 78);

				case 62:
					return _context2.delegateYield(ref.getValue(), 't21', 63);

				case 63:
					cur = _context2.t21;
					return _context2.delegateYield(cur.bitAnd(argument, realm), 't22', 65);

				case 65:
					value = _context2.t22;
					return _context2.abrupt('break', 78);

				case 67:
					return _context2.delegateYield(ref.getValue(), 't23', 68);

				case 68:
					cur = _context2.t23;
					return _context2.delegateYield(cur.bitXor(argument, realm), 't24', 70);

				case 70:
					value = _context2.t24;
					return _context2.abrupt('break', 78);

				case 72:
					return _context2.delegateYield(ref.getValue(), 't25', 73);

				case 73:
					cur = _context2.t25;
					return _context2.delegateYield(cur.pow(argument, realm), 't26', 75);

				case 75:
					value = _context2.t26;
					return _context2.abrupt('break', 78);

				case 77:
					throw new Error('Unknown assignment operator: ' + n.operator);

				case 78:
					if (!ref) {
						_context2.next = 82;
						break;
					}

					return _context2.delegateYield(ref.setValue(value, s), 't27', 80);

				case 80:
					_context2.next = 83;
					break;

				case 82:
					return _context2.delegateYield(s.put(n.left.name, value, s), 't28', 83);

				case 83:
					return _context2.abrupt('return', value);

				case 84:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

function evaluateBinaryExpression(e, n, s) {
	var left, right;
	return _regenerator2.default.wrap(function evaluateBinaryExpression$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					if (!(n.operator == '&&' || n.operator == '||')) {
						_context3.next = 3;
						break;
					}

					return _context3.delegateYield(evaluateLogicalExpression(e, n, s), 't0', 2);

				case 2:
					return _context3.abrupt('return', _context3.t0);

				case 3:
					return _context3.delegateYield(e.branch(n.left, s), 't1', 4);

				case 4:
					left = _context3.t1;
					return _context3.delegateYield(e.branch(n.right, s), 't2', 6);

				case 6:
					right = _context3.t2;

					if (!(e.yieldPower >= 4)) {
						_context3.next = 10;
						break;
					}

					_context3.next = 10;
					return EvaluatorInstruction.stepMinor;

				case 10:
					return _context3.delegateYield(e.doBinaryEvaluation(n.operator, left, right, s), 't3', 11);

				case 11:
					return _context3.abrupt('return', _context3.t3);

				case 12:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this);
}

function evaluateBlockStatement(e, n, s) {
	var result, ss, _iterator, _isArray, _i, _ref, statement, _iterator2, _isArray2, _i2, _ref2, _statement;

	return _regenerator2.default.wrap(function evaluateBlockStatement$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					result = Value.undef;
					ss = s.createBlockChild();
					_iterator = n.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

				case 3:
					if (!_isArray) {
						_context4.next = 9;
						break;
					}

					if (!(_i >= _iterator.length)) {
						_context4.next = 6;
						break;
					}

					return _context4.abrupt('break', 20);

				case 6:
					_ref = _iterator[_i++];
					_context4.next = 13;
					break;

				case 9:
					_i = _iterator.next();

					if (!_i.done) {
						_context4.next = 12;
						break;
					}

					return _context4.abrupt('break', 20);

				case 12:
					_ref = _i.value;

				case 13:
					statement = _ref;

					if (!(statement.type != "FunctionDeclaration")) {
						_context4.next = 16;
						break;
					}

					return _context4.abrupt('continue', 18);

				case 16:
					return _context4.delegateYield(e.branch(statement, ss), 't0', 17);

				case 17:
					result = _context4.t0;

				case 18:
					_context4.next = 3;
					break;

				case 20:
					_iterator2 = n.body, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);

				case 21:
					if (!_isArray2) {
						_context4.next = 27;
						break;
					}

					if (!(_i2 >= _iterator2.length)) {
						_context4.next = 24;
						break;
					}

					return _context4.abrupt('break', 38);

				case 24:
					_ref2 = _iterator2[_i2++];
					_context4.next = 31;
					break;

				case 27:
					_i2 = _iterator2.next();

					if (!_i2.done) {
						_context4.next = 30;
						break;
					}

					return _context4.abrupt('break', 38);

				case 30:
					_ref2 = _i2.value;

				case 31:
					_statement = _ref2;

					if (!(_statement.type == "FunctionDeclaration")) {
						_context4.next = 34;
						break;
					}

					return _context4.abrupt('continue', 36);

				case 34:
					return _context4.delegateYield(e.branch(_statement, ss), 't1', 35);

				case 35:
					result = _context4.t1;

				case 36:
					_context4.next = 21;
					break;

				case 38:
					return _context4.abrupt('return', result);

				case 39:
				case 'end':
					return _context4.stop();
			}
		}
	}, _marked4, this);
}

function evaluateBreakStatement(e, n, s) {
	var label;
	return _regenerator2.default.wrap(function evaluateBreakStatement$(_context5) {
		while (1) {
			switch (_context5.prev = _context5.next) {
				case 0:
					label = n.label ? n.label.name : undefined;

					if (!(e.yieldPower >= 1)) {
						_context5.next = 4;
						break;
					}

					_context5.next = 4;
					return EvaluatorInstruction.stepMinor;

				case 4:
					return _context5.abrupt('return', new CompletionRecord(CompletionRecord.BREAK, Value.undef, label));

				case 5:
				case 'end':
					return _context5.stop();
			}
		}
	}, _marked5, this);
}

function evaluateCallExpression(e, n, s) {
	return _regenerator2.default.wrap(function evaluateCallExpression$(_context7) {
		while (1) {
			switch (_context7.prev = _context7.next) {
				case 0:
					return _context7.delegateYield(doCall(e, n, n.callee, s, /*#__PURE__*/_regenerator2.default.mark(function _callee() {
						var args, i;
						return _regenerator2.default.wrap(function _callee$(_context6) {
							while (1) {
								switch (_context6.prev = _context6.next) {
									case 0:
										args = new Array(n.arguments.length);
										i = 0;

									case 2:
										if (!(i < n.arguments.length)) {
											_context6.next = 8;
											break;
										}

										return _context6.delegateYield(e.branch(n.arguments[i], s), 't0', 4);

									case 4:
										args[i] = _context6.t0;

									case 5:
										++i;
										_context6.next = 2;
										break;

									case 8:
										return _context6.abrupt('return', args);

									case 9:
									case 'end':
										return _context6.stop();
								}
							}
						}, _callee, this);
					})), 't0', 1);

				case 1:
					return _context7.abrupt('return', _context7.t0);

				case 2:
				case 'end':
					return _context7.stop();
			}
		}
	}, _marked6, this);
}

function doCall(e, n, c, s, argProvider) {
	var thiz, callee, base, args, name, err, callResult, result;
	return _regenerator2.default.wrap(function doCall$(_context8) {
		while (1) {
			switch (_context8.prev = _context8.next) {
				case 0:
					thiz = s.strict ? Value.undef : s.global.thiz;
					callee = void 0, base = void 0;

					if (!(c.type == 'Super')) {
						_context8.next = 8;
						break;
					}

					return _context8.delegateYield(e.branch(c, s), 't0', 4);

				case 4:
					callee = _context8.t0;

					thiz = s.thiz;
					_context8.next = 22;
					break;

				case 8:
					if (!(c.type === 'MemberExpression')) {
						_context8.next = 20;
						break;
					}

					return _context8.delegateYield(e.branch(c.object, s), 't1', 10);

				case 10:
					thiz = base = _context8.t1;
					return _context8.delegateYield(e.partialMemberExpression(thiz, c, s), 't2', 12);

				case 12:
					callee = _context8.t2;

					if (c.object.type == "Super") thiz = s.thiz;

					if (!(callee instanceof CompletionRecord)) {
						_context8.next = 18;
						break;
					}

					if (!(callee.type == CompletionRecord.THROW)) {
						_context8.next = 17;
						break;
					}

					return _context8.abrupt('return', callee);

				case 17:
					callee = callee.value;

				case 18:
					_context8.next = 22;
					break;

				case 20:
					return _context8.delegateYield(e.branch(c, s), 't3', 21);

				case 21:
					callee = _context8.t3;

				case 22:
					if (!(n.type === 'NewExpression')) {
						_context8.next = 29;
						break;
					}

					return _context8.delegateYield(callee.makeThisForNew(s.realm), 't4', 24);

				case 24:
					thiz = _context8.t4;

					if (!(thiz instanceof CompletionRecord)) {
						_context8.next = 29;
						break;
					}

					if (!(thiz.type == CompletionRecord.THROW)) {
						_context8.next = 28;
						break;
					}

					return _context8.abrupt('return', thiz);

				case 28:
					thiz = thiz.value;

				case 29:
					if (!(typeof callee.rawCall === 'function')) {
						_context8.next = 32;
						break;
					}

					return _context8.delegateYield(callee.rawCall(n, e, s), 't5', 31);

				case 31:
					return _context8.abrupt('return', _context8.t5);

				case 32:
					return _context8.delegateYield(argProvider(), 't6', 33);

				case 33:
					args = _context8.t6;
					name = c.srcName || c.source() || callee.jsTypeName;

					if (!(e.yieldPower >= 1)) {
						_context8.next = 38;
						break;
					}

					_context8.next = 38;
					return EvaluatorInstruction.stepMajor;

				case 38:
					if (callee.isCallable) {
						_context8.next = 42;
						break;
					}

					err = CompletionRecord.makeTypeError(e.realm, '' + name + ' is not a function');
					return _context8.delegateYield(err.addExtra({
						code: 'CallNonFunction',
						target: callee,
						targetAst: c,
						targetName: name,
						base: base
					}), 't7', 41);

				case 41:
					return _context8.abrupt('return', err);

				case 42:

					if (e.debug) {
						e.incrCtr('fxInvocationCount', c.srcName);
					}

					callResult = callee.call(thiz, args, s, {
						asConstructor: n.type === 'NewExpression',
						callNode: n,
						evaluator: e,
						callee: callee
					});

					if (!(callResult instanceof CompletionRecord)) {
						_context8.next = 46;
						break;
					}

					return _context8.abrupt('return', callResult);

				case 46:
					if (!(typeof callResult.next !== 'function')) {
						_context8.next = 49;
						break;
					}

					console.log('Generator Failure', callResult);
					return _context8.abrupt('return', CompletionRecord.makeTypeError(e.realm, '' + name + ' didnt make a generator'));

				case 49:
					return _context8.delegateYield(callResult, 't8', 50);

				case 50:
					result = _context8.t8;

					if (!(n.type === 'NewExpression')) {
						_context8.next = 59;
						break;
					}

					if (!(result instanceof Value)) {
						_context8.next = 56;
						break;
					}

					if (!(result.specTypeName === 'undefined')) {
						_context8.next = 55;
						break;
					}

					return _context8.abrupt('return', thiz);

				case 55:
					return _context8.abrupt('return', result);

				case 56:
					return _context8.abrupt('return', thiz);

				case 59:
					return _context8.abrupt('return', result);

				case 60:
				case 'end':
					return _context8.stop();
			}
		}
	}, _marked7, this);
}

var classFeatures = {};
function addMethodFnToClass(fx, clazz, proto, e, m, s) {
	var ks, k, pd;
	return _regenerator2.default.wrap(function addMethodFnToClass$(_context9) {
		while (1) {
			switch (_context9.prev = _context9.next) {
				case 0:
					if (!(m.kind == 'constructor')) {
						_context9.next = 3;
						break;
					}

					_context9.next = 24;
					break;

				case 3:
					ks = void 0;

					fx.funcSourceAST = m;

					if (!m.computed) {
						_context9.next = 12;
						break;
					}

					return _context9.delegateYield(e.branch(m.key, s), 't0', 7);

				case 7:
					k = _context9.t0;
					return _context9.delegateYield(k.toStringNative(e.realm), 't1', 9);

				case 9:
					ks = _context9.t1;
					_context9.next = 13;
					break;

				case 12:
					ks = m.key.name;

				case 13:
					pd = void 0;


					if (m.static) {
						fx.superTarget = clazz.getPrototype();
						if (Object.prototype.hasOwnProperty.call(clazz.properties, ks)) {
							pd = clazz.properties[ks];
						} else {
							pd = new PropertyDescriptor(Value.undef);
							clazz.rawSetProperty(ks, pd);
						}
					} else {
						fx.superTarget = proto.getPrototype();
						if (Object.prototype.hasOwnProperty.call(proto.properties, ks)) {
							pd = proto.properties[ks];
						} else {
							pd = new PropertyDescriptor(Value.undef);
							proto.rawSetProperty(ks, pd);
						}
					}
					_context9.t2 = m.kind;
					_context9.next = _context9.t2 === 'set' ? 18 : _context9.t2 === 'get' ? 20 : _context9.t2 === 'method' ? 22 : 24;
					break;

				case 18:
					pd.setter = fx;
					return _context9.abrupt('break', 24);

				case 20:
					pd.getter = fx;
					return _context9.abrupt('break', 24);

				case 22:
					pd.value = fx;
					return _context9.abrupt('break', 24);

				case 24:
					return _context9.abrupt('return', Value.undef);

				case 25:
				case 'end':
					return _context9.stop();
			}
		}
	}, _marked8, this);
}
classFeatures.MethodDefinition = /*#__PURE__*/_regenerator2.default.mark(function _callee2(clazz, proto, e, m, s) {
	return _regenerator2.default.wrap(function _callee2$(_context10) {
		while (1) {
			switch (_context10.prev = _context10.next) {
				case 0:
					_context10.t0 = addMethodFnToClass;
					return _context10.delegateYield(e.branch(m.value, s), 't1', 2);

				case 2:
					_context10.t2 = _context10.t1;
					_context10.t3 = clazz;
					_context10.t4 = proto;
					_context10.t5 = e;
					_context10.t6 = m;
					_context10.t7 = s;
					return _context10.delegateYield((0, _context10.t0)(_context10.t2, _context10.t3, _context10.t4, _context10.t5, _context10.t6, _context10.t7), 't8', 9);

				case 9:
				case 'end':
					return _context10.stop();
			}
		}
	}, _callee2, this);
});
classFeatures.ClassMethod = /*#__PURE__*/_regenerator2.default.mark(function _callee3(clazz, proto, e, m, s) {
	var fx;
	return _regenerator2.default.wrap(function _callee3$(_context11) {
		while (1) {
			switch (_context11.prev = _context11.next) {
				case 0:
					return _context11.delegateYield(evaluateFunctionExpression(e, m, s), 't0', 1);

				case 1:
					fx = _context11.t0;
					return _context11.delegateYield(addMethodFnToClass(fx, clazz, proto, e, {
						kind: m.kind,
						static: m.static,
						key: m.key
					}, s), 't1', 3);

				case 3:
					return _context11.abrupt('return', _context11.t1);

				case 4:
				case 'end':
					return _context11.stop();
			}
		}
	}, _callee3, this);
});
classFeatures.EmptyStatement = /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
	return _regenerator2.default.wrap(function _callee4$(_context12) {
		while (1) {
			switch (_context12.prev = _context12.next) {
				case 0:
					return _context12.abrupt('return', Value.undef);

				case 1:
				case 'end':
					return _context12.stop();
			}
		}
	}, _callee4, this);
});

function evaluateClassExpression(e, n, s) {
	var clazz, _iterator3, _isArray3, _i3, _ref3, m, sc, proto, _iterator4, _isArray4, _i4, _ref4, _m;

	return _regenerator2.default.wrap(function evaluateClassExpression$(_context15) {
		while (1) {
			switch (_context15.prev = _context15.next) {
				case 0:
					clazz = undefined;
					_iterator3 = n.body.body, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);

				case 2:
					if (!_isArray3) {
						_context15.next = 8;
						break;
					}

					if (!(_i3 >= _iterator3.length)) {
						_context15.next = 5;
						break;
					}

					return _context15.abrupt('break', 21);

				case 5:
					_ref3 = _iterator3[_i3++];
					_context15.next = 12;
					break;

				case 8:
					_i3 = _iterator3.next();

					if (!_i3.done) {
						_context15.next = 11;
						break;
					}

					return _context15.abrupt('break', 21);

				case 11:
					_ref3 = _i3.value;

				case 12:
					m = _ref3;

					if (!(m.type == "MethodDefinition" && m.kind == "constructor")) {
						_context15.next = 19;
						break;
					}

					return _context15.delegateYield(e.branch(m.value, s), 't0', 15);

				case 15:
					clazz = _context15.t0;

					clazz.superTarget = clazz;
					clazz.funcSourceAST = n;
					return _context15.abrupt('break', 21);

				case 19:
					_context15.next = 2;
					break;

				case 21:
					sc = void 0;

					if (!n.superClass) {
						_context15.next = 25;
						break;
					}

					return _context15.delegateYield(e.branch(n.superClass, s), 't1', 24);

				case 24:
					sc = _context15.t1;

				case 25:

					if (!clazz) {
						clazz = new ObjectValue(e.realm);
						if (sc) {
							clazz.call = /*#__PURE__*/_regenerator2.default.mark(function _callee5(thiz, args, scope, extra) {
								return _regenerator2.default.wrap(function _callee5$(_context13) {
									while (1) {
										switch (_context13.prev = _context13.next) {
											case 0:
												return _context13.delegateYield(sc.call(thiz, args, scope, extra), 't0', 1);

											case 1:
												return _context13.abrupt('return', Value.undef);

											case 2:
											case 'end':
												return _context13.stop();
										}
									}
								}, _callee5, this);
							});
						} else {
							clazz.call = /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
								return _regenerator2.default.wrap(function _callee6$(_context14) {
									while (1) {
										switch (_context14.prev = _context14.next) {
											case 0:
												return _context14.abrupt('return', Value.undef);

											case 1:
											case 'end':
												return _context14.stop();
										}
									}
								}, _callee6, this);
							});
						}
					}

					proto = new ObjectValue(e.realm);
					return _context15.delegateYield(clazz.set('prototype', proto), 't2', 28);

				case 28:
					return _context15.delegateYield(clazz.set('name', Value.fromNative(n.id.name)), 't3', 29);

				case 29:
					return _context15.delegateYield(proto.set('constructor', clazz), 't4', 30);

				case 30:

					if (sc) {
						clazz.setPrototype(sc);
						proto.setPrototype(sc.getPrototypeProperty());
						clazz.parentClassInstance = sc;
					}
					clazz.superTarget = clazz.getPrototype();

					s.add(n.id.name, clazz);

					if (!(e.yieldPower >= 3)) {
						_context15.next = 36;
						break;
					}

					_context15.next = 36;
					return EvaluatorInstruction.stepMinor;

				case 36:
					_iterator4 = n.body.body, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);

				case 37:
					if (!_isArray4) {
						_context15.next = 43;
						break;
					}

					if (!(_i4 >= _iterator4.length)) {
						_context15.next = 40;
						break;
					}

					return _context15.abrupt('break', 53);

				case 40:
					_ref4 = _iterator4[_i4++];
					_context15.next = 47;
					break;

				case 43:
					_i4 = _iterator4.next();

					if (!_i4.done) {
						_context15.next = 46;
						break;
					}

					return _context15.abrupt('break', 53);

				case 46:
					_ref4 = _i4.value;

				case 47:
					_m = _ref4;

					if (module.exports.classFeatures[_m.type]) {
						_context15.next = 50;
						break;
					}

					throw new Error("Unsuported Class Feature " + _m.type);

				case 50:
					return _context15.delegateYield(module.exports.classFeatures[_m.type](clazz, proto, e, _m, s), 't5', 51);

				case 51:
					_context15.next = 37;
					break;

				case 53:
					return _context15.abrupt('return', clazz);

				case 54:
				case 'end':
					return _context15.stop();
			}
		}
	}, _marked9, this);
}

function evaluateClassDeclaration(e, n, s) {
	var clazz;
	return _regenerator2.default.wrap(function evaluateClassDeclaration$(_context16) {
		while (1) {
			switch (_context16.prev = _context16.next) {
				case 0:
					return _context16.delegateYield(evaluateClassExpression(e, n, s), 't0', 1);

				case 1:
					clazz = _context16.t0;
					return _context16.delegateYield(s.put(n.id.name, clazz), 't1', 3);

				case 3:
					return _context16.abrupt('return', clazz);

				case 4:
				case 'end':
					return _context16.stop();
			}
		}
	}, _marked10, this);
}

function evaluateConditionalExpression(e, n, s) {
	var test;
	return _regenerator2.default.wrap(function evaluateConditionalExpression$(_context17) {
		while (1) {
			switch (_context17.prev = _context17.next) {
				case 0:
					return _context17.delegateYield(e.branch(n.test, s), 't0', 1);

				case 1:
					test = _context17.t0;

					if (!(e.yieldPower >= 4)) {
						_context17.next = 5;
						break;
					}

					_context17.next = 5;
					return EvaluatorInstruction.stepMinor;

				case 5:
					if (!test.truthy) {
						_context17.next = 10;
						break;
					}

					return _context17.delegateYield(e.branch(n.consequent, s), 't1', 7);

				case 7:
					return _context17.abrupt('return', _context17.t1);

				case 10:
					if (!n.alternate) {
						_context17.next = 13;
						break;
					}

					return _context17.delegateYield(e.branch(n.alternate, s), 't2', 12);

				case 12:
					return _context17.abrupt('return', _context17.t2);

				case 13:
					return _context17.abrupt('return', Value.undef);

				case 14:
				case 'end':
					return _context17.stop();
			}
		}
	}, _marked11, this);
}

function evaluateContinueStatement(e, n, s) {
	var label, val;
	return _regenerator2.default.wrap(function evaluateContinueStatement$(_context18) {
		while (1) {
			switch (_context18.prev = _context18.next) {
				case 0:
					label = n.label ? n.label.name : undefined;
					val = new CompletionRecord(CompletionRecord.CONTINUE, Value.undef, label);

					if (!(e.yieldPower >= 1)) {
						_context18.next = 5;
						break;
					}

					_context18.next = 5;
					return EvaluatorInstruction.stepMinor;

				case 5:
					return _context18.abrupt('return', val);

				case 6:
				case 'end':
					return _context18.stop();
			}
		}
	}, _marked12, this);
}

function evaluateDoWhileStatement(e, n, s) {
	var last, that, gen, finished;
	return _regenerator2.default.wrap(function evaluateDoWhileStatement$(_context20) {
		while (1) {
			switch (_context20.prev = _context20.next) {
				case 0:
					last = Value.undef;
					that = e;
					gen = /*#__PURE__*/_regenerator2.default.mark(function gen() {
						return _regenerator2.default.wrap(function gen$(_context19) {
							while (1) {
								switch (_context19.prev = _context19.next) {
									case 0:
										_context19.next = 2;
										return that.branchFrame('continue', n.body, s, { label: n.label });

									case 2:
										last = _context19.sent;

									case 3:
										return _context19.delegateYield(that.branch(n.test, s), 't0', 4);

									case 4:
										if (_context19.t0.truthy) {
											_context19.next = 0;
											break;
										}

									case 5:
									case 'end':
										return _context19.stop();
								}
							}
						}, gen, this);
					});

					if (!(e.yieldPower > 0)) {
						_context20.next = 6;
						break;
					}

					_context20.next = 6;
					return EvaluatorInstruction.stepMinor;

				case 6:
					e.pushFrame({ generator: gen(), type: 'loop', label: n.label, ast: n });

					_context20.next = 9;
					return EvaluatorInstruction.waitForFramePop;

				case 9:
					finished = _context20.sent;
					return _context20.abrupt('return', Value.undef);

				case 11:
				case 'end':
					return _context20.stop();
			}
		}
	}, _marked13, this);
}

function evaluateEmptyStatement(e, n, s) {
	return _regenerator2.default.wrap(function evaluateEmptyStatement$(_context21) {
		while (1) {
			switch (_context21.prev = _context21.next) {
				case 0:
					if (!(e.yieldPower >= 5)) {
						_context21.next = 3;
						break;
					}

					_context21.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					return _context21.abrupt('return', Value.undef);

				case 4:
				case 'end':
					return _context21.stop();
			}
		}
	}, _marked14, this);
}

function evaluateExpressionStatement(e, n, s) {
	return _regenerator2.default.wrap(function evaluateExpressionStatement$(_context22) {
		while (1) {
			switch (_context22.prev = _context22.next) {
				case 0:
					if (!(e.yieldPower > 4)) {
						_context22.next = 3;
						break;
					}

					_context22.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					return _context22.delegateYield(e.branch(n.expression, s), 't0', 4);

				case 4:
					return _context22.abrupt('return', _context22.t0);

				case 5:
				case 'end':
					return _context22.stop();
			}
		}
	}, _marked15, this);
}

function evaluateIdentifier(e, n, s) {
	var err;
	return _regenerator2.default.wrap(function evaluateIdentifier$(_context23) {
		while (1) {
			switch (_context23.prev = _context23.next) {
				case 0:
					if (!(e.yieldPower >= 4)) {
						_context23.next = 3;
						break;
					}

					_context23.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					if (!(n.name === 'undefined')) {
						_context23.next = 5;
						break;
					}

					return _context23.abrupt('return', Value.undef);

				case 5:
					if (s.has(n.name)) {
						_context23.next = 13;
						break;
					}

					if (true) {
						_context23.next = 8;
						break;
					}

					return _context23.abrupt('return', Value.undef);

				case 8:
					err = CompletionRecord.makeReferenceError(e.realm, n.name + ' is not defined');
					return _context23.delegateYield(err.addExtra({ code: 'UndefinedVariable', when: 'read', ident: n.name, strict: s.strict }), 't0', 10);

				case 10:
					_context23.next = 12;
					return err;

				case 12:
					return _context23.abrupt('return', _context23.sent);

				case 13:
					return _context23.abrupt('return', s.get(n.name));

				case 14:
				case 'end':
					return _context23.stop();
			}
		}
	}, _marked16, this);
}

function evaluateIfStatement(e, n, s) {
	var test;
	return _regenerator2.default.wrap(function evaluateIfStatement$(_context24) {
		while (1) {
			switch (_context24.prev = _context24.next) {
				case 0:
					if (!(e.yieldPower >= 2)) {
						_context24.next = 3;
						break;
					}

					_context24.next = 3;
					return EvaluatorInstruction.stepStatement;

				case 3:
					return _context24.delegateYield(e.branch(n.test, s), 't0', 4);

				case 4:
					test = _context24.t0;

					if (!test.truthy) {
						_context24.next = 10;
						break;
					}

					return _context24.delegateYield(e.branch(n.consequent, s), 't1', 7);

				case 7:
					return _context24.abrupt('return', _context24.t1);

				case 10:
					if (!n.alternate) {
						_context24.next = 13;
						break;
					}

					return _context24.delegateYield(e.branch(n.alternate, s), 't2', 12);

				case 12:
					return _context24.abrupt('return', _context24.t2);

				case 13:
					return _context24.abrupt('return', Value.undef);

				case 14:
				case 'end':
					return _context24.stop();
			}
		}
	}, _marked17, this);
}

function evaluateImportDeclaration(e, n, s) {
	return _regenerator2.default.wrap(function evaluateImportDeclaration$(_context25) {
		while (1) {
			switch (_context25.prev = _context25.next) {
				case 0:
					return _context25.abrupt('return', Value.undef);

				case 1:
				case 'end':
					return _context25.stop();
			}
		}
	}, _marked18, this);
}

function genForLoop(e, n, s) {
	var test, createPerIterationEnvironment, is, last;
	return _regenerator2.default.wrap(function genForLoop$(_context26) {
		while (1) {
			switch (_context26.prev = _context26.next) {
				case 0:
					test = Value.true;
					createPerIterationEnvironment = n.init && n.init.kind == 'let' ? function (p) {
						var is = s.createChild();
						for (var _iterator5 = n.init.declarations, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
							var _ref5;

							if (_isArray5) {
								if (_i5 >= _iterator5.length) break;
								_ref5 = _iterator5[_i5++];
							} else {
								_i5 = _iterator5.next();
								if (_i5.done) break;
								_ref5 = _i5.value;
							}

							var dec = _ref5;

							is.addBlock(dec.id.name, p.get(dec.id.name));
						}
						return is;
					} : function (p) {
						return p;
					};
					is = createPerIterationEnvironment(s);

					if (!n.test) {
						_context26.next = 6;
						break;
					}

					return _context26.delegateYield(e.branch(n.test, s), 't0', 5);

				case 5:
					test = _context26.t0;

				case 6:
					last = Value.undef;

				case 7:
					if (!test.truthy) {
						_context26.next = 23;
						break;
					}

					e.topFrame.ast = n;

					if (!(e.yieldPower > 0)) {
						_context26.next = 12;
						break;
					}

					_context26.next = 12;
					return EvaluatorInstruction.eventLoopBodyStart;

				case 12:
					_context26.next = 14;
					return e.branchFrame('continue', n.body, is, { label: n.label });

				case 14:
					last = _context26.sent;

					is = createPerIterationEnvironment(is);

					if (!n.update) {
						_context26.next = 18;
						break;
					}

					return _context26.delegateYield(e.branch(n.update, is), 't1', 18);

				case 18:
					if (!n.test) {
						_context26.next = 21;
						break;
					}

					return _context26.delegateYield(e.branch(n.test, is), 't2', 20);

				case 20:
					test = _context26.t2;

				case 21:
					_context26.next = 7;
					break;

				case 23:
				case 'end':
					return _context26.stop();
			}
		}
	}, _marked19, this);
};

function evaluateForStatement(e, n, s) {
	var finished;
	return _regenerator2.default.wrap(function evaluateForStatement$(_context27) {
		while (1) {
			switch (_context27.prev = _context27.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context27.next = 3;
						break;
					}

					_context27.next = 3;
					return EvaluatorInstruction.stepStatement;

				case 3:
					if (!n.init) {
						_context27.next = 5;
						break;
					}

					return _context27.delegateYield(e.branch(n.init, s), 't0', 5);

				case 5:

					e.pushFrame({ generator: genForLoop(e, n, s), type: 'loop', label: n.label, ast: n });

					_context27.next = 8;
					return EvaluatorInstruction.waitForFramePop;

				case 8:
					finished = _context27.sent;
					return _context27.abrupt('return', Value.undef);

				case 10:
				case 'end':
					return _context27.stop();
			}
		}
	}, _marked20, this);
}

function evaluateForInStatement(e, n, s) {
	var last, object, names, that, ref, decl, gen, finished;
	return _regenerator2.default.wrap(function evaluateForInStatement$(_context29) {
		while (1) {
			switch (_context29.prev = _context29.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context29.next = 3;
						break;
					}

					_context29.next = 3;
					return EvaluatorInstruction.stepStatement;

				case 3:
					last = Value.undef;
					return _context29.delegateYield(e.branch(n.right, s), 't0', 5);

				case 5:
					object = _context29.t0;
					names = object.observableProperties(s.realm);
					that = e;
					ref = void 0;

					s = s.createBlockChild();

					if (n.left.type === 'VariableDeclaration') {
						decl = n.left.declarations[0];

						if (decl.kind == 'var') s.add(decl.id.name, Value.undef);else s.addBlock(decl.id.name, Value.undef);
						ref = s.ref(decl.id.name, s);
					} else {
						ref = s.ref(n.left.name, s);
					}

					if (ref) {
						_context29.next = 16;
						break;
					}

					if (!s.strict) {
						_context29.next = 14;
						break;
					}

					return _context29.abrupt('return', CompletionRecord.makeReferenceError(s.realm, n.left.name + ' is not defined'));

				case 14:
					//Create an var in global scope if varialbe doesnt exist and not in strict mode.
					s.global.add(n.left.name, Value.undef);
					ref = s.ref(n.left.name);

				case 16:
					gen = /*#__PURE__*/_regenerator2.default.mark(function gen() {
						var _iterator6, _isArray6, _i6, _ref6, name;

						return _regenerator2.default.wrap(function gen$(_context28) {
							while (1) {
								switch (_context28.prev = _context28.next) {
									case 0:
										_iterator6 = names, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);

									case 1:
										if (!_isArray6) {
											_context28.next = 7;
											break;
										}

										if (!(_i6 >= _iterator6.length)) {
											_context28.next = 4;
											break;
										}

										return _context28.abrupt('break', 18);

									case 4:
										_ref6 = _iterator6[_i6++];
										_context28.next = 11;
										break;

									case 7:
										_i6 = _iterator6.next();

										if (!_i6.done) {
											_context28.next = 10;
											break;
										}

										return _context28.abrupt('break', 18);

									case 10:
										_ref6 = _i6.value;

									case 11:
										name = _ref6;
										return _context28.delegateYield(ref.setValue(name), 't0', 13);

									case 13:
										_context28.next = 15;
										return that.branchFrame('continue', n.body, s, { label: n.label });

									case 15:
										last = _context28.sent;

									case 16:
										_context28.next = 1;
										break;

									case 18:
									case 'end':
										return _context28.stop();
								}
							}
						}, gen, this);
					});

					e.pushFrame({ generator: gen(), type: 'loop', label: n.label, ast: n });

					_context29.next = 20;
					return EvaluatorInstruction.waitForFramePop;

				case 20:
					finished = _context29.sent;
					return _context29.abrupt('return', Value.undef);

				case 22:
				case 'end':
					return _context29.stop();
			}
		}
	}, _marked21, this);
}

//TODO: For of does more crazy Symbol iterator stuff
function evaluateForOfStatement(e, n, s) {
	var last, object, names, that, ref, decl, gen, finished;
	return _regenerator2.default.wrap(function evaluateForOfStatement$(_context31) {
		while (1) {
			switch (_context31.prev = _context31.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context31.next = 3;
						break;
					}

					_context31.next = 3;
					return EvaluatorInstruction.stepStatement;

				case 3:
					last = Value.undef;
					return _context31.delegateYield(e.branch(n.right, s), 't0', 5);

				case 5:
					object = _context31.t0;
					names = object.observableProperties(s.realm);
					that = e;
					ref = void 0;

					s = s.createBlockChild();
					if (n.left.type === 'VariableDeclaration') {
						decl = n.left.declarations[0];

						if (decl.kind == 'var') s.add(decl.id.name, Value.undef);else s.addBlock(decl.id.name, Value.undef);
						//yield * s.put(n.left.declarations[0].id.name, Value.undef);
						ref = s.ref(n.left.declarations[0].id.name, s.realm);
					} else {
						ref = s.ref(n.left.name, s.realm);
					}

					gen = /*#__PURE__*/_regenerator2.default.mark(function gen() {
						var _iterator7, _isArray7, _i7, _ref7, name;

						return _regenerator2.default.wrap(function gen$(_context30) {
							while (1) {
								switch (_context30.prev = _context30.next) {
									case 0:
										_iterator7 = names, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);

									case 1:
										if (!_isArray7) {
											_context30.next = 7;
											break;
										}

										if (!(_i7 >= _iterator7.length)) {
											_context30.next = 4;
											break;
										}

										return _context30.abrupt('break', 24);

									case 4:
										_ref7 = _iterator7[_i7++];
										_context30.next = 11;
										break;

									case 7:
										_i7 = _iterator7.next();

										if (!_i7.done) {
											_context30.next = 10;
											break;
										}

										return _context30.abrupt('break', 24);

									case 10:
										_ref7 = _i7.value;

									case 11:
										name = _ref7;
										_context30.t0 = ref;
										_context30.t1 = object;
										return _context30.delegateYield(name.toStringNative(), 't2', 15);

									case 15:
										_context30.t3 = _context30.t2;
										return _context30.delegateYield(_context30.t1.get.call(_context30.t1, _context30.t3), 't4', 17);

									case 17:
										_context30.t5 = _context30.t4;
										return _context30.delegateYield(_context30.t0.setValue.call(_context30.t0, _context30.t5), 't6', 19);

									case 19:
										_context30.next = 21;
										return that.branchFrame('continue', n.body, s, { label: n.label });

									case 21:
										last = _context30.sent;

									case 22:
										_context30.next = 1;
										break;

									case 24:
									case 'end':
										return _context30.stop();
								}
							}
						}, gen, this);
					});

					e.pushFrame({ generator: gen(), type: 'loop', label: n.label });

					_context31.next = 15;
					return EvaluatorInstruction.waitForFramePop;

				case 15:
					finished = _context31.sent;
					return _context31.abrupt('return', Value.undef);

				case 17:
				case 'end':
					return _context31.stop();
			}
		}
	}, _marked22, this);
}

function evaluateFunctionDeclaration(e, n, s) {
	var closure;
	return _regenerator2.default.wrap(function evaluateFunctionDeclaration$(_context32) {
		while (1) {
			switch (_context32.prev = _context32.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context32.next = 3;
						break;
					}

					_context32.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					closure = new ClosureValue(n, s);

					s.add(n.id.name, closure);
					return _context32.abrupt('return', Value.undef);

				case 6:
				case 'end':
					return _context32.stop();
			}
		}
	}, _marked23, this);
}

function evaluateFunctionExpression(e, n, s) {
	var value;
	return _regenerator2.default.wrap(function evaluateFunctionExpression$(_context33) {
		while (1) {
			switch (_context33.prev = _context33.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context33.next = 3;
						break;
					}

					_context33.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					value = new ClosureValue(n, s);

					if (n.type === 'ArrowFunctionExpression') {
						value.thiz = s.thiz;
						if (n.expression) value.returnLastValue = true;
					}
					return _context33.abrupt('return', value);

				case 6:
				case 'end':
					return _context33.stop();
			}
		}
	}, _marked24, this);
}

function evaluateLabeledStatement(e, n, s) {
	return _regenerator2.default.wrap(function evaluateLabeledStatement$(_context34) {
		while (1) {
			switch (_context34.prev = _context34.next) {
				case 0:
					if (!(e.yieldPower >= 5)) {
						_context34.next = 3;
						break;
					}

					_context34.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					return _context34.delegateYield(e.branch(n.body, s), 't0', 4);

				case 4:
					return _context34.abrupt('return', _context34.t0);

				case 5:
				case 'end':
					return _context34.stop();
			}
		}
	}, _marked25, this);
}

function evaluateLiteral(e, n, s) {
	var tryFloat;
	return _regenerator2.default.wrap(function evaluateLiteral$(_context35) {
		while (1) {
			switch (_context35.prev = _context35.next) {
				case 0:
					if (!(e.yieldPower >= 5)) {
						_context35.next = 3;
						break;
					}

					_context35.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					if (!n.regex) {
						_context35.next = 7;
						break;
					}

					return _context35.abrupt('return', RegExpValue.make(new RegExp(n.regex.pattern, n.regex.flags), s.realm));

				case 7:
					if (!(n.value === null)) {
						_context35.next = 16;
						break;
					}

					if (!(e.raw === 'null')) {
						_context35.next = 10;
						break;
					}

					return _context35.abrupt('return', Value.null);

				case 10:

					//Work around Esprima turning Infinity into null. =\
					tryFloat = parseFloat(n.raw);

					if (isNaN(tryFloat)) {
						_context35.next = 13;
						break;
					}

					return _context35.abrupt('return', e.fromNative(tryFloat, n));

				case 13:
					return _context35.abrupt('return', e.fromNative(null, n));

				case 16:
					return _context35.abrupt('return', e.realm.makeLiteralValue(n.value, n));

				case 17:
				case 'end':
					return _context35.stop();
			}
		}
	}, _marked26, this);
}

function evaluateLogicalExpression(e, n, s) {
	var left;
	return _regenerator2.default.wrap(function evaluateLogicalExpression$(_context36) {
		while (1) {
			switch (_context36.prev = _context36.next) {
				case 0:
					return _context36.delegateYield(e.branch(n.left, s), 't0', 1);

				case 1:
					left = _context36.t0;

					if (!(e.yieldPower >= 4)) {
						_context36.next = 5;
						break;
					}

					_context36.next = 5;
					return EvaluatorInstruction.stepMajor;

				case 5:
					_context36.t1 = n.operator;
					_context36.next = _context36.t1 === '&&' ? 8 : _context36.t1 === '||' ? 12 : 16;
					break;

				case 8:
					if (!left.truthy) {
						_context36.next = 11;
						break;
					}

					return _context36.delegateYield(e.branch(n.right, s), 't2', 10);

				case 10:
					return _context36.abrupt('return', _context36.t2);

				case 11:
					return _context36.abrupt('return', left);

				case 12:
					if (!left.truthy) {
						_context36.next = 14;
						break;
					}

					return _context36.abrupt('return', left);

				case 14:
					return _context36.delegateYield(e.branch(n.right, s), 't3', 15);

				case 15:
					return _context36.abrupt('return', _context36.t3);

				case 16:
					throw new Error('Unknown logical operator: ' + n.operator);

				case 17:
				case 'end':
					return _context36.stop();
			}
		}
	}, _marked27, this);
}

function evaluateMemberExpression(e, n, s) {
	var left;
	return _regenerator2.default.wrap(function evaluateMemberExpression$(_context37) {
		while (1) {
			switch (_context37.prev = _context37.next) {
				case 0:
					if (!(e.yieldPower >= 4)) {
						_context37.next = 3;
						break;
					}

					_context37.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					return _context37.delegateYield(e.branch(n.object, s), 't0', 4);

				case 4:
					left = _context37.t0;
					return _context37.delegateYield(e.partialMemberExpression(left, n, s), 't1', 6);

				case 6:
					return _context37.abrupt('return', _context37.t1);

				case 7:
				case 'end':
					return _context37.stop();
			}
		}
	}, _marked28, this);
}

function evaluateMetaProperty(e, n, s) {
	var i, t;
	return _regenerator2.default.wrap(function evaluateMetaProperty$(_context38) {
		while (1) {
			switch (_context38.prev = _context38.next) {
				case 0:
					i = 0;

				case 1:
					if (!(i < e.frames.length - 1)) {
						_context38.next = 12;
						break;
					}

					t = e.frames[i].type;

					if (!(t === "function")) {
						_context38.next = 9;
						break;
					}

					if (!(e.frames[i + 1].ast.type == "NewExpression")) {
						_context38.next = 8;
						break;
					}

					return _context38.abrupt('return', e.frames[i].callee);

				case 8:
					return _context38.abrupt('return', Value.undef);

				case 9:
					++i;
					_context38.next = 1;
					break;

				case 12:
					return _context38.abrupt('return', Value.undef);

				case 13:
				case 'end':
					return _context38.stop();
			}
		}
	}, _marked29, this);
}

function evaluateObjectExpression(e, n, s) {
	var nat, i, prop, key, value, pd;
	return _regenerator2.default.wrap(function evaluateObjectExpression$(_context39) {
		while (1) {
			switch (_context39.prev = _context39.next) {
				case 0:
					//TODO: Need to wire up native prototype
					nat = new ObjectValue(s.realm);
					i = 0;

				case 2:
					if (!(i < n.properties.length)) {
						_context39.next = 27;
						break;
					}

					prop = n.properties[i];
					key = void 0;

					if (!n.computed) {
						_context39.next = 10;
						break;
					}

					return _context39.delegateYield(e.branch(prop.key, s), 't0', 7);

				case 7:
					key = _context39.t0.toNative().toString();
					_context39.next = 11;
					break;

				case 10:
					if (prop.key.type == 'Identifier') {
						key = prop.key.name;
					} else if (prop.key.type == 'Literal') {
						key = prop.key.value.toString();
					}

				case 11:
					return _context39.delegateYield(e.branch(prop.value, s), 't1', 12);

				case 12:
					value = _context39.t1;
					pd = void 0;


					if (Object.prototype.hasOwnProperty.call(nat.properties, key)) {
						pd = nat.properties[key];
					} else {
						pd = new PropertyDescriptor(Value.undef);
						nat.rawSetProperty(key, pd);
					}

					_context39.t2 = prop.kind;
					_context39.next = _context39.t2 === 'init' ? 18 : _context39.t2 === 'get' ? 20 : _context39.t2 === 'set' ? 22 : 18;
					break;

				case 18:
					pd.value = value;
					return _context39.abrupt('break', 24);

				case 20:
					pd.getter = value;
					return _context39.abrupt('break', 24);

				case 22:
					pd.setter = value;
					return _context39.abrupt('break', 24);

				case 24:
					++i;
					_context39.next = 2;
					break;

				case 27:
					if (!(e.yieldPower > 0)) {
						_context39.next = 30;
						break;
					}

					_context39.next = 30;
					return EvaluatorInstruction.stepMajor;

				case 30:
					return _context39.abrupt('return', nat);

				case 31:
				case 'end':
					return _context39.stop();
			}
		}
	}, _marked30, this);
}

function evaluateProgram(e, n, s) {
	var result, v, _iterator8, _isArray8, _i8, _ref8, statement;

	return _regenerator2.default.wrap(function evaluateProgram$(_context40) {
		while (1) {
			switch (_context40.prev = _context40.next) {
				case 0:
					result = Value.undef;

					if (n.vars) for (v in n.vars) {
						s.add(v, Value.undef);
					}
					if (n.strict === true) s.strict = true;

					if (!(e.yieldPower >= 4)) {
						_context40.next = 6;
						break;
					}

					_context40.next = 6;
					return EvaluatorInstruction.stepMajor;

				case 6:
					_iterator8 = n.body, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : (0, _getIterator3.default)(_iterator8);

				case 7:
					if (!_isArray8) {
						_context40.next = 13;
						break;
					}

					if (!(_i8 >= _iterator8.length)) {
						_context40.next = 10;
						break;
					}

					return _context40.abrupt('break', 22);

				case 10:
					_ref8 = _iterator8[_i8++];
					_context40.next = 17;
					break;

				case 13:
					_i8 = _iterator8.next();

					if (!_i8.done) {
						_context40.next = 16;
						break;
					}

					return _context40.abrupt('break', 22);

				case 16:
					_ref8 = _i8.value;

				case 17:
					statement = _ref8;
					return _context40.delegateYield(e.branch(statement, s), 't0', 19);

				case 19:
					result = _context40.t0;

				case 20:
					_context40.next = 7;
					break;

				case 22:
					return _context40.abrupt('return', result);

				case 23:
				case 'end':
					return _context40.stop();
			}
		}
	}, _marked31, this);
}

function evaluateReturnStatement(e, n, s) {
	var retVal;
	return _regenerator2.default.wrap(function evaluateReturnStatement$(_context41) {
		while (1) {
			switch (_context41.prev = _context41.next) {
				case 0:
					retVal = Value.undef;

					if (!n.argument) {
						_context41.next = 4;
						break;
					}

					return _context41.delegateYield(e.branch(n.argument, s), 't0', 3);

				case 3:
					retVal = _context41.t0;

				case 4:
					if (!(e.yieldPower >= 2)) {
						_context41.next = 7;
						break;
					}

					_context41.next = 7;
					return EvaluatorInstruction.stepMajor;

				case 7:
					return _context41.abrupt('return', new CompletionRecord(CompletionRecord.RETURN, retVal));

				case 8:
				case 'end':
					return _context41.stop();
			}
		}
	}, _marked32, this);
}

function evaluateSequenceExpression(e, n, s) {
	var last, _iterator9, _isArray9, _i9, _ref9, expr;

	return _regenerator2.default.wrap(function evaluateSequenceExpression$(_context42) {
		while (1) {
			switch (_context42.prev = _context42.next) {
				case 0:
					last = Value.undef;

					if (!(e.yieldPower >= 4)) {
						_context42.next = 4;
						break;
					}

					_context42.next = 4;
					return EvaluatorInstruction.stepMajor;

				case 4:
					_iterator9 = n.expressions, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : (0, _getIterator3.default)(_iterator9);

				case 5:
					if (!_isArray9) {
						_context42.next = 11;
						break;
					}

					if (!(_i9 >= _iterator9.length)) {
						_context42.next = 8;
						break;
					}

					return _context42.abrupt('break', 20);

				case 8:
					_ref9 = _iterator9[_i9++];
					_context42.next = 15;
					break;

				case 11:
					_i9 = _iterator9.next();

					if (!_i9.done) {
						_context42.next = 14;
						break;
					}

					return _context42.abrupt('break', 20);

				case 14:
					_ref9 = _i9.value;

				case 15:
					expr = _ref9;
					return _context42.delegateYield(e.branch(expr, s), 't0', 17);

				case 17:
					last = _context42.t0;

				case 18:
					_context42.next = 5;
					break;

				case 20:
					return _context42.abrupt('return', last);

				case 21:
				case 'end':
					return _context42.stop();
			}
		}
	}, _marked33, this);
}

function evaluateSuperExpression(e, n, s) {
	var fr, i, result;
	return _regenerator2.default.wrap(function evaluateSuperExpression$(_context43) {
		while (1) {
			switch (_context43.prev = _context43.next) {
				case 0:
					fr = void 0;
					i = 0;

				case 2:
					if (!(i < e.frames.length)) {
						_context43.next = 9;
						break;
					}

					fr = e.frames[i];

					if (!fr.creator) {
						_context43.next = 6;
						break;
					}

					return _context43.abrupt('break', 9);

				case 6:
					++i;
					_context43.next = 2;
					break;

				case 9:
					result = fr.creator.superTarget;
					return _context43.abrupt('return', result);

				case 11:
				case 'end':
					return _context43.stop();
			}
		}
	}, _marked34, this);
}

function evaluateSwitchStatement(e, n, s) {
	var discriminant, last, matches, matchVals, matched, i, cas, testval, equality, genSwitch, finished;
	return _regenerator2.default.wrap(function evaluateSwitchStatement$(_context45) {
		while (1) {
			switch (_context45.prev = _context45.next) {
				case 0:
					if (!(e.yieldPower >= 2)) {
						_context45.next = 3;
						break;
					}

					_context45.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					return _context45.delegateYield(e.branch(n.discriminant, s), 't0', 4);

				case 4:
					discriminant = _context45.t0;
					last = Value.undef;
					matches = 0;
					matchVals = new Array(n.cases.length);
					matched = false;
					i = 0;

				case 10:
					if (!(i < n.cases.length)) {
						_context45.next = 22;
						break;
					}

					cas = n.cases[i];

					if (!cas.test) {
						_context45.next = 19;
						break;
					}

					return _context45.delegateYield(e.branch(cas.test, s), 't1', 14);

				case 14:
					testval = _context45.t1;
					return _context45.delegateYield(testval.tripleEquals(discriminant), 't2', 16);

				case 16:
					equality = _context45.t2;

					if (equality.truthy) ++matches;
					matchVals[i] = equality.truthy;

				case 19:
					++i;
					_context45.next = 10;
					break;

				case 22:
					genSwitch = /*#__PURE__*/_regenerator2.default.mark(function genSwitch(e, n) {
						var _i10, _cas, _iterator10, _isArray10, _i11, _ref10, statement;

						return _regenerator2.default.wrap(function genSwitch$(_context44) {
							while (1) {
								switch (_context44.prev = _context44.next) {
									case 0:
										_i10 = 0;

									case 1:
										if (!(_i10 < n.cases.length)) {
											_context44.next = 31;
											break;
										}

										_cas = n.cases[_i10];

										if (matched) {
											_context44.next = 12;
											break;
										}

										if (!_cas.test) {
											_context44.next = 9;
											break;
										}

										if (matchVals[_i10]) {
											_context44.next = 7;
											break;
										}

										return _context44.abrupt('continue', 28);

									case 7:
										_context44.next = 11;
										break;

									case 9:
										if (!(matches !== 0)) {
											_context44.next = 11;
											break;
										}

										return _context44.abrupt('continue', 28);

									case 11:
										matched = true;

									case 12:
										_iterator10 = _cas.consequent, _isArray10 = Array.isArray(_iterator10), _i11 = 0, _iterator10 = _isArray10 ? _iterator10 : (0, _getIterator3.default)(_iterator10);

									case 13:
										if (!_isArray10) {
											_context44.next = 19;
											break;
										}

										if (!(_i11 >= _iterator10.length)) {
											_context44.next = 16;
											break;
										}

										return _context44.abrupt('break', 28);

									case 16:
										_ref10 = _iterator10[_i11++];
										_context44.next = 23;
										break;

									case 19:
										_i11 = _iterator10.next();

										if (!_i11.done) {
											_context44.next = 22;
											break;
										}

										return _context44.abrupt('break', 28);

									case 22:
										_ref10 = _i11.value;

									case 23:
										statement = _ref10;
										return _context44.delegateYield(e.branch(statement, s), 't0', 25);

									case 25:
										last = _context44.t0;

									case 26:
										_context44.next = 13;
										break;

									case 28:
										++_i10;
										_context44.next = 1;
										break;

									case 31:
									case 'end':
										return _context44.stop();
								}
							}
						}, genSwitch, this);
					});


					e.pushFrame({ generator: genSwitch(e, n), type: 'loop', label: n.label });
					_context45.next = 26;
					return EvaluatorInstruction.waitForFramePop;

				case 26:
					finished = _context45.sent;
					return _context45.abrupt('return', last);

				case 28:
				case 'end':
					return _context45.stop();
			}
		}
	}, _marked35, this);
}

function evaluateTaggedTemplateExpression(e, n, s) {
	var quasis, expressions, value, fn, strings, rawStrings, i, sv, rv, args, _i12;

	return _regenerator2.default.wrap(function evaluateTaggedTemplateExpression$(_context47) {
		while (1) {
			switch (_context47.prev = _context47.next) {
				case 0:
					quasis = n.quasi.quasis;
					expressions = n.quasi.expressions;
					value = Value.fromNative(quasis[0].value.cooked);
					return _context47.delegateYield(e.branch(n.tag, s), 't0', 4);

				case 4:
					fn = _context47.t0;
					strings = [];
					rawStrings = [];

					for (i = 0; i < quasis.length; ++i) {
						strings.push(e.realm.fromNative(quasis[i].value.cooked));
						rawStrings.push(e.realm.fromNative(quasis[i].value.raw));
					}
					sv = ArrayValue.make(strings, e.realm);
					rv = ArrayValue.make(rawStrings, e.realm);

					sv.rawSetProperty('raw', new PropertyDescriptor(rv, false));

					args = [sv];
					_i12 = 0;

				case 13:
					if (!(_i12 < expressions.length)) {
						_context47.next = 21;
						break;
					}

					_context47.t1 = args;
					return _context47.delegateYield(e.branch(expressions[_i12], s), 't2', 16);

				case 16:
					_context47.t3 = _context47.t2;

					_context47.t1.push.call(_context47.t1, _context47.t3);

				case 18:
					++_i12;
					_context47.next = 13;
					break;

				case 21:
					return _context47.delegateYield(doCall(e, n, n.tag, s, /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
						return _regenerator2.default.wrap(function _callee7$(_context46) {
							while (1) {
								switch (_context46.prev = _context46.next) {
									case 0:
										return _context46.abrupt('return', args);

									case 1:
									case 'end':
										return _context46.stop();
								}
							}
						}, _callee7, this);
					})), 't4', 22);

				case 22:
					return _context47.abrupt('return', _context47.t4);

				case 23:
				case 'end':
					return _context47.stop();
			}
		}
	}, _marked36, this);
}

function evaluateTemplateLiteral(e, n, s) {
	var value, i;
	return _regenerator2.default.wrap(function evaluateTemplateLiteral$(_context48) {
		while (1) {
			switch (_context48.prev = _context48.next) {
				case 0:
					value = Value.fromNative(n.quasis[0].value.cooked);
					i = 0;

				case 2:
					if (!(i < n.expressions.length)) {
						_context48.next = 13;
						break;
					}

					_context48.t0 = value;
					return _context48.delegateYield(e.branch(n.expressions[i], s), 't1', 5);

				case 5:
					_context48.t2 = _context48.t1;
					return _context48.delegateYield(_context48.t0.add.call(_context48.t0, _context48.t2), 't3', 7);

				case 7:
					value = _context48.t3;
					return _context48.delegateYield(value.add(Value.fromNative(n.quasis[i + 1].value.cooked)), 't4', 9);

				case 9:
					value = _context48.t4;

				case 10:
					++i;
					_context48.next = 2;
					break;

				case 13:
					return _context48.abrupt('return', value);

				case 14:
				case 'end':
					return _context48.stop();
			}
		}
	}, _marked37, this);
}

function evaluateThisExpression(e, n, s) {
	return _regenerator2.default.wrap(function evaluateThisExpression$(_context49) {
		while (1) {
			switch (_context49.prev = _context49.next) {
				case 0:
					if (!(e.yieldPower >= 4)) {
						_context49.next = 3;
						break;
					}

					_context49.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					if (!s.thiz) {
						_context49.next = 7;
						break;
					}

					return _context49.abrupt('return', s.thiz);

				case 7:
					return _context49.abrupt('return', Value.undef);

				case 8:
				case 'end':
					return _context49.stop();
			}
		}
	}, _marked38, this);
}

function evaluateThrowStatement(e, n, s) {
	var value;
	return _regenerator2.default.wrap(function evaluateThrowStatement$(_context50) {
		while (1) {
			switch (_context50.prev = _context50.next) {
				case 0:
					return _context50.delegateYield(e.branch(n.argument, s), 't0', 1);

				case 1:
					value = _context50.t0;

					if (!(e.yieldPower >= 2)) {
						_context50.next = 5;
						break;
					}

					_context50.next = 5;
					return EvaluatorInstruction.stepMajor;

				case 5:
					return _context50.abrupt('return', new CompletionRecord(CompletionRecord.THROW, value));

				case 6:
				case 'end':
					return _context50.stop();
			}
		}
	}, _marked39, this);
}

function evaluateTryStatement(e, n, s) {
	var result, handlerScope;
	return _regenerator2.default.wrap(function evaluateTryStatement$(_context51) {
		while (1) {
			switch (_context51.prev = _context51.next) {
				case 0:
					if (!(e.yieldPower >= 2)) {
						_context51.next = 3;
						break;
					}

					_context51.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					if (n.finalizer) e.pushFrame({ generator: e.branch(n.finalizer, s), type: 'finally', scope: s });
					_context51.next = 6;
					return e.branchFrame('catch', n.block, s);

				case 6:
					result = _context51.sent;

					if (!(result instanceof CompletionRecord && result.type == CompletionRecord.THROW)) {
						_context51.next = 14;
						break;
					}

					if (n.handler) {
						_context51.next = 10;
						break;
					}

					return _context51.abrupt('return', result);

				case 10:
					handlerScope = s.createChild();

					handlerScope.add(n.handler.param.name, result.value);
					return _context51.delegateYield(e.branch(n.handler.body, handlerScope), 't0', 13);

				case 13:
					return _context51.abrupt('return', _context51.t0);

				case 14:
					return _context51.abrupt('return', result);

				case 15:
				case 'end':
					return _context51.stop();
			}
		}
	}, _marked40, this);
}

function evaluateUpdateExpression(e, n, s) {
	var nue, ref, old;
	return _regenerator2.default.wrap(function evaluateUpdateExpression$(_context52) {
		while (1) {
			switch (_context52.prev = _context52.next) {
				case 0:
					//TODO: Need to support something like ++x[1];
					nue = void 0;

					if (!(e.yieldPower >= 3)) {
						_context52.next = 4;
						break;
					}

					_context52.next = 4;
					return EvaluatorInstruction.stepMajor;

				case 4:
					return _context52.delegateYield(e.resolveRef(n.argument, s, true), 't0', 5);

				case 5:
					ref = _context52.t0;
					old = Value.nan;

					if (!ref) {
						_context52.next = 10;
						break;
					}

					return _context52.delegateYield(ref.getValue(), 't1', 9);

				case 9:
					old = _context52.t1;

				case 10:
					if (old === undefined) old = Value.nan;
					_context52.t2 = n.operator;
					_context52.next = _context52.t2 === '++' ? 14 : _context52.t2 === '--' ? 17 : 20;
					break;

				case 14:
					return _context52.delegateYield(old.add(e.fromNative(1)), 't3', 15);

				case 15:
					nue = _context52.t3;
					return _context52.abrupt('break', 21);

				case 17:
					return _context52.delegateYield(old.subtract(e.fromNative(1)), 't4', 18);

				case 18:
					nue = _context52.t4;
					return _context52.abrupt('break', 21);

				case 20:
					throw new Error('Unknown update expression type: ' + n.operator);

				case 21:
					if (!ref) {
						_context52.next = 23;
						break;
					}

					return _context52.delegateYield(ref.setValue(nue, s), 't5', 23);

				case 23:
					if (!n.prefix) {
						_context52.next = 25;
						break;
					}

					return _context52.abrupt('return', nue);

				case 25:
					return _context52.abrupt('return', old);

				case 26:
				case 'end':
					return _context52.stop();
			}
		}
	}, _marked41, this);
}

function evaluateUnaryExpression(e, n, s) {
	var ref, worked, left;
	return _regenerator2.default.wrap(function evaluateUnaryExpression$(_context53) {
		while (1) {
			switch (_context53.prev = _context53.next) {
				case 0:
					if (!(e.yieldPower >= 4)) {
						_context53.next = 3;
						break;
					}

					_context53.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					if (!(n.operator === 'delete')) {
						_context53.next = 18;
						break;
					}

					if (!(n.argument.type !== 'MemberExpression' && n.argument.type !== 'Identifier')) {
						_context53.next = 6;
						break;
					}

					return _context53.abrupt('return', Value.true);

				case 6:
					return _context53.delegateYield(e.resolveRef(n.argument, s), 't0', 7);

				case 7:
					ref = _context53.t0;

					if (ref) {
						_context53.next = 10;
						break;
					}

					return _context53.abrupt('return', Value.false);

				case 10:
					if (!(ref.isVariable || !ref.del)) {
						_context53.next = 12;
						break;
					}

					return _context53.abrupt('return', Value.false);

				case 12:
					worked = ref.del(s);

					if (!(worked instanceof CompletionRecord)) {
						_context53.next = 17;
						break;
					}

					_context53.next = 16;
					return worked;

				case 16:
					return _context53.abrupt('return', _context53.sent);

				case 17:
					return _context53.abrupt('return', Value.fromNative(worked));

				case 18:
					if (!(n.operator === 'typeof')) {
						_context53.next = 23;
						break;
					}

					if (!(n.argument.type == 'Identifier')) {
						_context53.next = 23;
						break;
					}

					if (s.has(n.argument.name)) {
						_context53.next = 23;
						break;
					}

					return _context53.delegateYield(Value.undef.typeOf(), 't1', 22);

				case 22:
					return _context53.abrupt('return', _context53.t1);

				case 23:
					return _context53.delegateYield(e.branch(n.argument, s), 't2', 24);

				case 24:
					left = _context53.t2;
					_context53.t3 = n.operator;
					_context53.next = _context53.t3 === '-' ? 28 : _context53.t3 === '+' ? 30 : _context53.t3 === '!' ? 32 : _context53.t3 === '~' ? 34 : _context53.t3 === 'typeof' ? 36 : _context53.t3 === 'void' ? 38 : 39;
					break;

				case 28:
					return _context53.delegateYield(left.unaryMinus(), 't4', 29);

				case 29:
					return _context53.abrupt('return', _context53.t4);

				case 30:
					return _context53.delegateYield(left.unaryPlus(), 't5', 31);

				case 31:
					return _context53.abrupt('return', _context53.t5);

				case 32:
					return _context53.delegateYield(left.not(), 't6', 33);

				case 33:
					return _context53.abrupt('return', _context53.t6);

				case 34:
					return _context53.delegateYield(left.bitNot(), 't7', 35);

				case 35:
					return _context53.abrupt('return', _context53.t7);

				case 36:
					return _context53.delegateYield(left.typeOf(), 't8', 37);

				case 37:
					return _context53.abrupt('return', _context53.t8);

				case 38:
					return _context53.abrupt('return', Value.undef);

				case 39:
					throw new Error('Unknown binary operator: ' + n.operator);

				case 40:
				case 'end':
					return _context53.stop();
			}
		}
	}, _marked42, this);
}

function evaluateVariableDeclaration(e, n, s) {
	var kind, _iterator11, _isArray11, _i13, _ref11, decl, value;

	return _regenerator2.default.wrap(function evaluateVariableDeclaration$(_context54) {
		while (1) {
			switch (_context54.prev = _context54.next) {
				case 0:
					kind = n.kind;

					if (!(e.yieldPower >= 3)) {
						_context54.next = 4;
						break;
					}

					_context54.next = 4;
					return EvaluatorInstruction.stepMajor;

				case 4:
					_iterator11 = n.declarations, _isArray11 = Array.isArray(_iterator11), _i13 = 0, _iterator11 = _isArray11 ? _iterator11 : (0, _getIterator3.default)(_iterator11);

				case 5:
					if (!_isArray11) {
						_context54.next = 11;
						break;
					}

					if (!(_i13 >= _iterator11.length)) {
						_context54.next = 8;
						break;
					}

					return _context54.abrupt('break', 27);

				case 8:
					_ref11 = _iterator11[_i13++];
					_context54.next = 15;
					break;

				case 11:
					_i13 = _iterator11.next();

					if (!_i13.done) {
						_context54.next = 14;
						break;
					}

					return _context54.abrupt('break', 27);

				case 14:
					_ref11 = _i13.value;

				case 15:
					decl = _ref11;
					value = Value.undef;

					if (!decl.init) {
						_context54.next = 22;
						break;
					}

					return _context54.delegateYield(e.branch(decl.init, s), 't0', 19);

				case 19:
					value = _context54.t0;
					_context54.next = 24;
					break;

				case 22:
					if (!s.has(decl.id.name)) {
						_context54.next = 24;
						break;
					}

					return _context54.abrupt('continue', 25);

				case 24:

					if (kind === 'const') {
						s.addConst(decl.id.name, value);
					} else if (kind == 'let') {
						s.addBlock(decl.id.name, value);
					} else {
						s.add(decl.id.name, value);
					}

				case 25:
					_context54.next = 5;
					break;

				case 27:
					return _context54.abrupt('return', Value.undef);

				case 28:
				case 'end':
					return _context54.stop();
			}
		}
	}, _marked43, this);
}

function genWhileLoop(e, n, s) {
	var last;
	return _regenerator2.default.wrap(function genWhileLoop$(_context55) {
		while (1) {
			switch (_context55.prev = _context55.next) {
				case 0:
					last = Value.undef;

				case 1:
					return _context55.delegateYield(e.branch(n.test, s), 't0', 2);

				case 2:
					if (!_context55.t0.truthy) {
						_context55.next = 12;
						break;
					}

					e.topFrame.ast = n;

					if (!(e.yieldPower > 0)) {
						_context55.next = 7;
						break;
					}

					_context55.next = 7;
					return EvaluatorInstruction.eventLoopBodyStart;

				case 7:
					_context55.next = 9;
					return e.branchFrame('continue', n.body, s);

				case 9:
					last = _context55.sent;
					_context55.next = 1;
					break;

				case 12:
				case 'end':
					return _context55.stop();
			}
		}
	}, _marked44, this);
}

function evaluateWhileStatement(e, n, s) {
	var finished;
	return _regenerator2.default.wrap(function evaluateWhileStatement$(_context56) {
		while (1) {
			switch (_context56.prev = _context56.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context56.next = 3;
						break;
					}

					_context56.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					e.pushFrame({ generator: genWhileLoop(e, n, s), type: 'loop', label: n.label, ast: n });
					_context56.next = 6;
					return EvaluatorInstruction.waitForFramePop;

				case 6:
					finished = _context56.sent;
					return _context56.abrupt('return', Value.undef);

				case 8:
				case 'end':
					return _context56.stop();
			}
		}
	}, _marked45, this);
}

function evaluateWithStatement(e, n, s) {
	var o, ns, pairs, p;
	return _regenerator2.default.wrap(function evaluateWithStatement$(_context57) {
		while (1) {
			switch (_context57.prev = _context57.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context57.next = 3;
						break;
					}

					_context57.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					if (!s.strict) {
						_context57.next = 5;
						break;
					}

					return _context57.abrupt('return', CompletionRecord.makeSyntaxError(e.realm, 'Strict mode code may not include a with statement'));

				case 5:
					return _context57.delegateYield(e.branch(n.object, s), 't0', 6);

				case 6:
					o = _context57.t0;
					ns = s.createBlockChild();

					if (o instanceof ObjectValue) {
						pairs = o.getPropertyValueMap();

						for (p in pairs) {
							ns.set(p, pairs[p]);
						}
					}
					return _context57.delegateYield(e.branch(n.body, ns), 't1', 10);

				case 10:
					return _context57.abrupt('return', _context57.t1);

				case 11:
				case 'end':
					return _context57.stop();
			}
		}
	}, _marked46, this);
}

function findNextStep(type) {
	switch (type) {
		case 'ArrayExpression':
			return evaluateArrayExpression;
		case 'ArrowFunctionExpression':
			return evaluateFunctionExpression;
		case 'AssignmentExpression':
			return evaluateAssignmentExpression;
		case 'BinaryExpression':
			return evaluateBinaryExpression;
		case 'BreakStatement':
			return evaluateBreakStatement;
		case 'BlockStatement':
			return evaluateBlockStatement;
		case 'CallExpression':
			return evaluateCallExpression;
		case 'ClassDeclaration':
			return evaluateClassDeclaration;
		case 'ClassExpression':
			return evaluateClassExpression;
		case 'ConditionalExpression':
			return evaluateConditionalExpression;
		case 'DebuggerStatement':
			return evaluateEmptyStatement;
		case 'DoWhileStatement':
			return evaluateDoWhileStatement;
		case 'ContinueStatement':
			return evaluateContinueStatement;
		case 'EmptyStatement':
			return evaluateEmptyStatement;
		case 'ExpressionStatement':
			return evaluateExpressionStatement;
		case 'ForStatement':
			return evaluateForStatement;
		case 'ForInStatement':
			return evaluateForInStatement;
		case 'ForOfStatement':
			return evaluateForOfStatement;
		case 'FunctionDeclaration':
			return evaluateFunctionDeclaration;
		case 'FunctionExpression':
			return evaluateFunctionExpression;
		case 'Identifier':
			return evaluateIdentifier;
		case 'IfStatement':
			return evaluateIfStatement;
		case 'ImportDeclaration':
			return evaluateImportDeclaration;
		case 'LabeledStatement':
			return evaluateLabeledStatement;
		case 'Literal':
			return evaluateLiteral;
		case 'LogicalExpression':
			return evaluateLogicalExpression;
		case 'MetaProperty':
			return evaluateMetaProperty;
		case 'MemberExpression':
			return evaluateMemberExpression;
		case 'NewExpression':
			return evaluateCallExpression;
		case 'ObjectExpression':
			return evaluateObjectExpression;
		case 'Program':
			return evaluateProgram;
		case 'ReturnStatement':
			return evaluateReturnStatement;
		case 'SequenceExpression':
			return evaluateSequenceExpression;
		case 'Super':
			return evaluateSuperExpression;
		case 'SwitchStatement':
			return evaluateSwitchStatement;
		case 'TaggedTemplateExpression':
			return evaluateTaggedTemplateExpression;
		case 'TemplateLiteral':
			return evaluateTemplateLiteral;
		case 'ThisExpression':
			return evaluateThisExpression;
		case 'ThrowStatement':
			return evaluateThrowStatement;
		case 'TryStatement':
			return evaluateTryStatement;
		case 'UnaryExpression':
			return evaluateUnaryExpression;
		case 'UpdateExpression':
			return evaluateUpdateExpression;
		case 'VariableDeclaration':
			return evaluateVariableDeclaration;
		case 'WhileStatement':
			return evaluateWhileStatement;
		case 'WithStatement':
			return evaluateWithStatement;

		case 'BooleanLiteral':
		case 'StringLiteral':
		case 'NumericLiteral':
		case 'NullLiteral':
			return evaluateLiteral;

		default:
			throw new Error('Unknown AST Node Type: ' + type);
	}
}

module.exports = {
	evaluateIdentifier: evaluateIdentifier,
	findNextStep: findNextStep,
	classFeatures: classFeatures
};

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _weakMap = __webpack_require__(178);

var _weakMap2 = _interopRequireDefault(_weakMap);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Scope = __webpack_require__(232);
var Value = __webpack_require__(152);
var CompletionRecord = __webpack_require__(192);
var ObjectValue = __webpack_require__(197);
var PrimitiveValue = __webpack_require__(211);
var StringValue = __webpack_require__(214);
var LinkValue = __webpack_require__(233);
var SmartLinkValue = __webpack_require__(234);
var BridgeValue = __webpack_require__(222);
var ASTPreprocessor = __webpack_require__(240);
var EasyNativeFunction = __webpack_require__(241);
var PropertyDescriptor = __webpack_require__(210);
var Evaluator = __webpack_require__(147);
var EvaluatorInstruction = __webpack_require__(226);

var ObjectPrototype = __webpack_require__(242);
var FunctionPrototype = __webpack_require__(247);
var ObjectClass = __webpack_require__(248);
var FunctionClass = __webpack_require__(249);
var NumberPrototype = __webpack_require__(250);

var StringPrototype = __webpack_require__(251);

var ArrayPrototype = __webpack_require__(252);
var ArrayClass = __webpack_require__(253);
var StringClass = __webpack_require__(254);
var NumberClass = __webpack_require__(255);

var BooleanPrototype = __webpack_require__(256);
var BooleanClass = __webpack_require__(257);
var RegExpPrototype = __webpack_require__(258);
var RegExpClass = __webpack_require__(259);
var EsperClass = __webpack_require__(260);
var ErrorPrototype = __webpack_require__(261);
var ErrorClass = __webpack_require__(262);

var AssertClass = __webpack_require__(263);
var MathClass = __webpack_require__(264);
var ConsoleClass = __webpack_require__(265);
var JSONClass = __webpack_require__(266);
var ProxyClass = __webpack_require__(267);
var esper = __webpack_require__(63);

var EvalFunction = function (_ObjectValue) {
	(0, _inherits3.default)(EvalFunction, _ObjectValue);

	function EvalFunction(realm) {
		(0, _classCallCheck3.default)(this, EvalFunction);

		var _this = (0, _possibleConstructorReturn3.default)(this, (EvalFunction.__proto__ || (0, _getPrototypeOf2.default)(EvalFunction)).call(this, realm));

		_this.setPrototype(realm.FunctionPrototype);
		return _this;
	}

	(0, _createClass3.default)(EvalFunction, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope) {
			var cv, code, ast, oast, eo, desc, bak;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							cv = Value.undef;

							if (args.length > 0) cv = args[0];

							if (cv instanceof StringValue) {
								_context.next = 4;
								break;
							}

							return _context.abrupt('return', cv);

						case 4:
							return _context.delegateYield(cv.toStringNative(), 't0', 5);

						case 5:
							code = _context.t0;
							ast = void 0;
							_context.prev = 7;
							oast = scope.realm.parser(code, { loc: true });

							ast = ASTPreprocessor.process(oast);
							_context.next = 18;
							break;

						case 12:
							_context.prev = 12;
							_context.t1 = _context['catch'](7);
							desc = _context.t1.description || _context.t1.message;

							if (_context.t1.name == 'ReferenceError' || /Invalid left-hand side in/.test(desc)) eo = new ReferenceError(_context.t1.description, _context.t1.fileName, _context.t1.lineNumber);else eo = new SyntaxError(_context.t1.description, _context.t1.fileName, _context.t1.lineNumber);

							if (_context.t1.stack) eo.stack = _context.t1.stack;
							return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, Value.fromNative(eo, scope.realm)));

						case 18:
							_context.next = 20;
							return EvaluatorInstruction.branch('eval', ast, scope);

						case 20:
							bak = _context.sent;
							return _context.abrupt('return', bak);

						case 22:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this, [[7, 12]]);
		})
	}]);
	return EvalFunction;
}(ObjectValue);

var timeoutIds = 0;;

var SetTimeoutFunction = function (_ObjectValue2) {
	(0, _inherits3.default)(SetTimeoutFunction, _ObjectValue2);

	function SetTimeoutFunction(realm, runtime, isSetInterval) {
		(0, _classCallCheck3.default)(this, SetTimeoutFunction);

		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SetTimeoutFunction.__proto__ || (0, _getPrototypeOf2.default)(SetTimeoutFunction)).call(this, realm));

		_this2.setPrototype(realm.FunctionPrototype);
		_this2.runtime = runtime;
		_this2.isSetInterval = isSetInterval;
		return _this2;
	}

	(0, _createClass3.default)(SetTimeoutFunction, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope) {
			var engine, ev, evaluator, time, id, isSetInterval, o;
			return _regenerator2.default.wrap(function call$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							engine = scope.realm.engine;
							ev = args[0];
							evaluator = new Evaluator(scope.realm, null, scope.global);
							time = args.length > 1 ? 0 + args[1].toNative() : 0;
							id = timeoutIds++;
							isSetInterval = this.isSetInterval;

							if (!(!ev || ev.jsTypeName !== "function" && ev.jsTypeName !== "string")) {
								_context3.next = 8;
								break;
							}

							return _context3.abrupt('return', new CompletionRecord(CompletionRecord.THROW, Value.fromNative(new TypeError('"callback" argument must be a function'), scope.realm)));

						case 8:

							evaluator.pushFrame({ generator: /*#__PURE__*/_regenerator2.default.mark(function _callee() {
									var tv, oast, ast;
									return _regenerator2.default.wrap(function _callee$(_context2) {
										while (1) {
											switch (_context2.prev = _context2.next) {
												case 0:
													if (false) {}

													_context2.t0 = esper.FutureValue;
													return _context2.delegateYield(engine.runtime.wait(time), 't1', 3);

												case 3:
													_context2.t2 = _context2.t1;
													_context2.next = 6;
													return _context2.t0.make.call(_context2.t0, _context2.t2);

												case 6:
													if (!(ev.jsTypeName == "function")) {
														_context2.next = 11;
														break;
													}

													tv = scope.strict ? esper.undef : scope.global.thiz;
													return _context2.delegateYield(ev.call(tv, args.slice(2), scope.global), 't3', 9);

												case 9:
													_context2.next = 20;
													break;

												case 11:
													if (!(ev.jsTypeName == "string")) {
														_context2.next = 20;
														break;
													}

													_context2.t4 = scope.realm;
													return _context2.delegateYield(ev.toStringNative(), 't5', 14);

												case 14:
													_context2.t6 = _context2.t5;
													_context2.t7 = { loc: true };
													oast = _context2.t4.parser.call(_context2.t4, _context2.t6, _context2.t7);
													ast = ASTPreprocessor.process(oast);
													_context2.next = 20;
													return EvaluatorInstruction.branch('eval', ast, scope.global);

												case 20:
													if (isSetInterval) {
														_context2.next = 22;
														break;
													}

													return _context2.abrupt('break', 24);

												case 22:
													_context2.next = 0;
													break;

												case 24:
													return _context2.abrupt('return', Value.undef);

												case 25:
												case 'end':
													return _context2.stop();
											}
										}
									}, _callee, this);
								})(), type: 'invoke' });

							o = evaluator.generator();

							evaluator.id = id;
							engine.threads.push(o);
							return _context3.abrupt('return', Value.fromNative(id));

						case 13:
						case 'end':
							return _context3.stop();
					}
				}
			}, call, this);
		})
	}]);
	return SetTimeoutFunction;
}(ObjectValue);

var ClearTimeoutFunction = function (_ObjectValue3) {
	(0, _inherits3.default)(ClearTimeoutFunction, _ObjectValue3);

	function ClearTimeoutFunction(realm, runtime) {
		(0, _classCallCheck3.default)(this, ClearTimeoutFunction);

		var _this3 = (0, _possibleConstructorReturn3.default)(this, (ClearTimeoutFunction.__proto__ || (0, _getPrototypeOf2.default)(ClearTimeoutFunction)).call(this, realm));

		_this3.setPrototype(realm.FunctionPrototype);
		_this3.runtime = runtime;
		return _this3;
	}

	(0, _createClass3.default)(ClearTimeoutFunction, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope) {
			var target, engine, i, thr;
			return _regenerator2.default.wrap(function call$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							if (!(args.length < 1)) {
								_context4.next = 2;
								break;
							}

							return _context4.abrupt('return', Value.undef);

						case 2:
							return _context4.delegateYield(args[0].toIntNative(), 't0', 3);

						case 3:
							target = _context4.t0;
							engine = scope.realm.engine;
							i = 0;

						case 6:
							if (!(i < engine.threads.length)) {
								_context4.next = 14;
								break;
							}

							if (!(engine.threads[i].evaluator.id == target)) {
								_context4.next = 11;
								break;
							}

							thr = engine.threads.splice(i, 1);

							thr[0].evaluator.dispose.map(function (x) {
								return x();
							});
							return _context4.abrupt('return', Value.fromNative(true));

						case 11:
							++i;
							_context4.next = 6;
							break;

						case 14:
							return _context4.abrupt('return', Value.fromNative(false));

						case 15:
						case 'end':
							return _context4.stop();
					}
				}
			}, call, this);
		})
	}]);
	return ClearTimeoutFunction;
}(ObjectValue);

/**
 * Represents a javascript execution environment including
 * it's scopes and standard libraries.
 */


var Realm = function () {
	(0, _createClass3.default)(Realm, [{
		key: 'print',
		value: function print() {
			console.log.apply(console, arguments);
		}
	}, {
		key: 'write',
		value: function write() {
			this.print.apply(this, arguments);
		}
	}, {
		key: 'parser',
		value: function parser(code, options) {
			if (!esper.languages[this.language]) {
				throw new Error('Unknown language ' + this.language + '. Load the lang-' + this.language + ' plugin?');
			}
			return esper.languages[this.language].parser(code, options);
		}
	}, {
		key: 'makeLiteralValue',
		value: function makeLiteralValue(v, n) {
			var lang = esper.languages[this.language];
			if (lang && lang.makeLiteralValue) {
				var langv = lang.makeLiteralValue(v, this, n);
				if (langv) return langv;
			}
			return this.fromNative(v, n);
		}
	}]);

	function Realm(options, engine) {
		(0, _classCallCheck3.default)(this, Realm);

		this.engine = engine;
		this.options = options || {};
		this.language = options.language || 'javascript';
		/** @type {Value} */
		this.ObjectPrototype = new ObjectPrototype(this);
		this.FunctionPrototype = new FunctionPrototype(this);
		this.Object = new ObjectClass(this);
		this.ObjectPrototype._init(this);
		this.FunctionPrototype._init(this);
		this.Object.setPrototype(this.ObjectPrototype);
		this.FunctionPrototype.setPrototype(this.ObjectPrototype);

		//TODO: Do this when we can make the property non enumerable.
		this.ObjectPrototype.rawSetProperty('constructor', new PropertyDescriptor(this.Object, false));

		this.Function = new FunctionClass(this);
		this.FunctionPrototype.rawSetProperty('constructor', new PropertyDescriptor(this.Function, false));

		/** @type {Math} */
		this.Math = new MathClass(this);

		/** @type {NumberPrototype} */
		this.NumberPrototype = new NumberPrototype(this);

		/** @type {StringPrototype} */
		this.StringPrototype = new StringPrototype(this);

		this.ArrayPrototype = new ArrayPrototype(this);
		this.Array = new ArrayClass(this);
		this.String = new StringClass(this);
		this.Number = new NumberClass(this);

		this.BooleanPrototype = new BooleanPrototype(this);
		this.Boolean = new BooleanClass(this);

		this.RegExpPrototype = new RegExpPrototype(this);
		this.RegExp = new RegExpClass(this);
		this.Proxy = new ProxyClass(this);

		this.Esper = new EsperClass(this);
		this.ErrorPrototype = new ErrorPrototype(this);
		this.Error = new ErrorClass(this);
		this.ErrorPrototype.rawSetProperty('constructor', new PropertyDescriptor(this.Error, false));

		/** @type {Value} */
		this.console = new ConsoleClass(this);

		var scope = new Scope(this);
		scope.object.clazz = 'global';
		scope.strict = options.strict || false;
		var that = this;
		var printer = EasyNativeFunction.makeForNative(this, function () {
			that.print.apply(that, arguments);
		});
		scope.set('print', printer);
		scope.set('log', printer);

		scope.addConst('NaN', this.fromNative(NaN));
		scope.addConst('Infinity', this.fromNative(Infinity));

		scope.set('console', this.console);
		scope.set('JSON', new JSONClass(this));

		if (options.exposeEsperGlobal) {
			scope.set('Esper', this.Esper);
		}

		scope.set('Math', this.Math);

		scope.set('Number', this.Number);
		scope.set('Boolean', this.Boolean);
		scope.set('Object', this.Object);
		scope.set('Function', this.Function);
		scope.set('Array', this.Array);
		scope.set('String', this.String);
		scope.set('RegExp', this.RegExp);
		scope.set('Proxy', this.Proxy);

		scope.set('Error', this.Error);
		scope.set('TypeError', this.TypeError = this.Error.makeErrorType(TypeError));
		scope.set('SyntaxError', this.SyntaxError = this.Error.makeErrorType(SyntaxError));
		scope.set('ReferenceError', this.ReferenceError = this.Error.makeErrorType(ReferenceError));
		scope.set('RangeError', this.RangeError = this.Error.makeErrorType(RangeError));
		scope.set('EvalError', this.EvalError = this.Error.makeErrorType(EvalError));
		scope.set('URIError', this.URIError = this.Error.makeErrorType(URIError));

		scope.set('parseInt', EasyNativeFunction.makeForNative(this, parseInt));
		scope.set('parseFloat', EasyNativeFunction.makeForNative(this, parseFloat));
		scope.set('isNaN', EasyNativeFunction.makeForNative(this, isNaN));
		scope.set('isFinite', EasyNativeFunction.makeForNative(this, isFinite));

		//scope.set('Date', this.fromNative(Date));
		scope.set('eval', new EvalFunction(this));
		scope.set('assert', new AssertClass(this));

		if (options.runtime) {
			scope.set("setTimeout", new SetTimeoutFunction(this, options.runtime, false));
			scope.set("setInterval", new SetTimeoutFunction(this, options.runtime, true));
			scope.set("clearTimeout", new ClearTimeoutFunction(this, options.runtime));
			scope.set("clearInterval", new ClearTimeoutFunction(this, options.runtime));
		}

		scope.thiz = scope.object;
		this.importCache = new _weakMap2.default();
		/** @type {Scope} */
		this.globalScope = scope;

		var lang = esper.languages[this.language];
		if (lang && lang.setupRealm) lang.setupRealm(this);
	}

	(0, _createClass3.default)(Realm, [{
		key: 'lookupWellKnown',
		value: function lookupWellKnown(v) {
			if (v === Object) return this.Object;
			if (v === Object.prototype) return this.ObjectPrototype;
			if (v === Function) return this.Function;
			if (v === Function.prototype) return this.FunctionPrototype;
			if (v === Math) return this.Math;
			if (v === Number) return this.Number;
			if (v === Number.prototype) return this.NumberPrototype;
			if (v === String) return this.String;
			if (v === String.prototype) return this.StringPrototype;
			if (v === Array) return this.Array;
			if (v === Array.prototype) return this.ArrayPrototype;
			if (v === RegExp) return this.RegExp;
			if (v === RegExp.prototype) return this.RegExpPrototype;
			if (typeof console !== 'undefined' && v === console) return this.console;
		}
	}, {
		key: 'lookupWellKnownByName',
		value: function lookupWellKnownByName(v) {
			switch (v) {
				case '%Object%':
					return this.Object;
				case '%ObjectPrototype%':
					return this.ObjectPrototype;
				case '%Function%':
					return this.Function;
				case '%FunctionPrototype%':
					return this.FunctionPrototype;
				case '%Math%':
					return this.Math;
				case '%Number%':
					return this.Number;
				case '%NumberPrototype%':
					return this.NumberPrototype;
				case '%Array%':
					return this.Array;
				case '%ArrayPrototype%':
					return this.ArrayPrototype;
				case '%RegExp%':
					return this.RegExp;
				case '%RegExpPrototype%':
					return this.RegExpPrototype;
			}
		}
	}, {
		key: 'fromNative',
		value: function fromNative(native, x) {
			return Value.fromNative(native, this);
		}
	}, {
		key: 'import',
		value: function _import(native, modeHint) {
			if (native instanceof Value) return native;
			if (native === undefined) return Value.undef;

			var prim = Value.fromPrimativeNative(native);
			if (prim) return prim;

			//if ( this.importCache.has(native) ) {
			//	return this.importCache.get(native);
			//}

			if (Value.hasBookmark(native)) {
				return Value.getBookmark(native);
			}

			var result = void 0;
			switch (modeHint || this.options.foreignObjectMode) {
				case 'bridge':
					result = BridgeValue.make(native, this);
					break;
				case 'smart':
					result = SmartLinkValue.make(native, this);
					break;
				case 'link':
				default:
					result = LinkValue.make(native, this);
					break;
			}

			//this.importCache.set(native, result);
			return result;
		}
	}]);
	return Realm;
}();

Realm.prototype.makeForForeignObject = Realm.prototype.import;

module.exports = Realm;

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PropertyDescriptor = __webpack_require__(210);

var Value = __webpack_require__(152);
var ObjectValue = __webpack_require__(197);

var Scope = function () {
	function Scope(realm) {
		(0, _classCallCheck3.default)(this, Scope);

		this.parent = null;
		this.object = new ObjectValue(realm);
		this.strict = false;
		this.realm = realm;
		this.global = this;
		this.top = this;
		this.writeTo = this.object;
		this.writeToBlock = this.object;
		this.thiz = null;
	}

	/**
  * @param {string} name - Identifier to retreive
  * @returns {Value}
  */


	(0, _createClass3.default)(Scope, [{
		key: 'get',
		value: function get(name) {
			//Fast property access in the common case.
			var prop = this.object.properties[name];
			if (!prop) return Value.undef;
			if (!prop.getter) return prop.value;
			return this.object.getImmediate(name);
		}
	}, {
		key: 'ref',
		value: function ref(name) {
			var _this = this;

			var vhar = this.object.properties[name];
			if (!vhar) return undefined;
			var that = this;
			var o = {
				setValue: vhar.setValue.bind(vhar, this),
				getValue: vhar.getValue.bind(vhar, this),
				isVariable: !!vhar.variable
			};

			if (this.global.object.properties[name] === vhar) {
				o.del = function (s) {
					return _this.global.object.delete(name, s);
				};
			}

			return o;
		}
	}, {
		key: 'add',
		value: function add(name, value) {
			this.writeTo.setImmediate(name, value);
			this.writeToBlock.properties[name].variable = true;
		}
	}, {
		key: 'addBlock',
		value: function addBlock(name, value) {
			this.writeToBlock.setImmediate(name, value);
			this.writeToBlock.properties[name].variable = true;
		}
	}, {
		key: 'addConst',
		value: function addConst(name, value) {
			this.set(name, value);
			this.writeToBlock.properties[name].writable = false;
			this.writeToBlock.properties[name].configurable = false;
		}

		/**
   * Set the identifier in its nearest scope, or create a global.
   * @param {string} name - Identifier to retreive
   * @param {Value} value - New vaalue of variable
   */

	}, {
		key: 'set',
		value: function set(name, value) {
			return this.put(name, value);
		}
	}, {
		key: 'has',
		value: function has(name) {
			return this.object.has(name);
		}

		/**
   * Set the identifier in its nearest scope, or create a global.
   * @param {string} name - Identifier to retreive
   * @param {Value} value - New vaalue of variable
   * @param {Scope} s - Code scope to run setter functions in
   */

	}, {
		key: 'put',
		value: function put(name, value, s) {
			var variable = this.object.properties[name];
			if (variable) {
				return variable.setValue(this.object, value, s);
			}
			var v = new PropertyDescriptor(value, this);
			this.writeTo.properties[name] = v;
			return Value.undef.fastGen();
		}
	}, {
		key: 'createChild',
		value: function createChild() {
			var child = new Scope(this.realm);
			child.object.eraseAndSetPrototype(this.object);
			child.parent = this;
			child.strict = this.strict;
			child.global = this.global;
			child.realm = this.realm;
			child.top = this.top;
			return child;
		}
	}, {
		key: 'createBlockChild',
		value: function createBlockChild() {
			var c = this.createChild();
			c.thiz = this.thiz;
			c.writeTo = this.writeTo;
			c.parent = this.parent;
			return c;
		}
	}, {
		key: 'fromNative',
		value: function fromNative(value, x) {
			return this.realm.fromNative(value, x);
		}
	}, {
		key: 'getVariableNames',
		value: function getVariableNames() {
			var list = [];
			for (var o in this.object.properties) {
				list.push(o);
			}return list;
		}
	}]);
	return Scope;
}();

module.exports = Scope;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _typeof2 = __webpack_require__(160);

var _typeof3 = _interopRequireDefault(_typeof2);

var _getOwnPropertyDescriptor = __webpack_require__(216);

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _create = __webpack_require__(202);

var _create2 = _interopRequireDefault(_create);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var CompletionRecord = __webpack_require__(192);
var ArrayValue = __webpack_require__(225);

function invoke(target, thiz, args) {
	return Function.prototype.apply.call(target, thiz, args);
}

function invokeAsNew(target, args) {
	if (target.bind) {
		var bindArgs = [null].concat(args);
		return new (target.bind.apply(target, bindArgs))();
	} else {
		return invoke(target, null, args);
	}
}

/**
 * Represents a value that maps directly to an untrusted local value.
 */

var LinkValue = function (_Value) {
	(0, _inherits3.default)(LinkValue, _Value);

	function LinkValue(value, realm) {
		(0, _classCallCheck3.default)(this, LinkValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (LinkValue.__proto__ || (0, _getPrototypeOf2.default)(LinkValue)).call(this));

		_this.native = value;
		_this.realm = realm;
		return _this;
	}

	(0, _createClass3.default)(LinkValue, [{
		key: 'ref',
		value: function ref(name, s) {

			var that = this;
			var out = (0, _create2.default)(null);

			out.getValue = /*#__PURE__*/_regenerator2.default.mark(function _callee() {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								return _context.delegateYield(that.get(name, s), 't0', 1);

							case 1:
								return _context.abrupt('return', _context.t0);

							case 2:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			});
			out.setValue = /*#__PURE__*/_regenerator2.default.mark(function _callee2(to, s) {
				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								return _context2.delegateYield(that.set(name, to, s), 't0', 1);

							case 1:
								return _context2.abrupt('return', _context2.t0);

							case 2:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, this);
			});
			out.del = function () {
				return false;
			};

			return out;
		}
	}, {
		key: 'set',
		value: /*#__PURE__*/_regenerator2.default.mark(function set(name, value, s, extra) {
			return _regenerator2.default.wrap(function set$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							this.native[name] = value.toNative();

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, set, this);
		})
	}, {
		key: 'toNative',
		value: function toNative() {
			return this.native;
		}
	}, {
		key: 'asString',
		value: /*#__PURE__*/_regenerator2.default.mark(function asString() {
			return _regenerator2.default.wrap(function asString$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', this.native.toString());

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, asString, this);
		})
	}, {
		key: 'makeLink',
		value: function makeLink(value) {
			return this.realm.import(value, this.linkKind);
		}
	}, {
		key: 'doubleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function doubleEquals(other) {
			return _regenerator2.default.wrap(function doubleEquals$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', this.makeLink(this.native == other.toNative()));

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'tripleEquals',
		value: /*#__PURE__*/_regenerator2.default.mark(function tripleEquals(other) {
			return _regenerator2.default.wrap(function tripleEquals$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.abrupt('return', this.makeLink(this.native === other.toNative()));

						case 1:
						case 'end':
							return _context6.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'add',
		value: /*#__PURE__*/_regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.abrupt('return', this.makeLink(this.native + other.toNative()));

						case 1:
						case 'end':
							return _context7.stop();
					}
				}
			}, add, this);
		})
	}, {
		key: 'subtract',
		value: /*#__PURE__*/_regenerator2.default.mark(function subtract(other) {
			return _regenerator2.default.wrap(function subtract$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							return _context8.abrupt('return', this.makeLink(this.native - other.toNative()));

						case 1:
						case 'end':
							return _context8.stop();
					}
				}
			}, subtract, this);
		})
	}, {
		key: 'multiply',
		value: /*#__PURE__*/_regenerator2.default.mark(function multiply(other) {
			return _regenerator2.default.wrap(function multiply$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							return _context9.abrupt('return', this.makeLink(this.native * other.toNative()));

						case 1:
						case 'end':
							return _context9.stop();
					}
				}
			}, multiply, this);
		})
	}, {
		key: 'divide',
		value: /*#__PURE__*/_regenerator2.default.mark(function divide(other) {
			return _regenerator2.default.wrap(function divide$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							return _context10.abrupt('return', this.makeLink(this.native / other.toNative()));

						case 1:
						case 'end':
							return _context10.stop();
					}
				}
			}, divide, this);
		})
	}, {
		key: 'mod',
		value: /*#__PURE__*/_regenerator2.default.mark(function mod(other) {
			return _regenerator2.default.wrap(function mod$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.abrupt('return', this.makeLink(this.native % other.toNative()));

						case 1:
						case 'end':
							return _context11.stop();
					}
				}
			}, mod, this);
		})
	}, {
		key: 'shiftLeft',
		value: /*#__PURE__*/_regenerator2.default.mark(function shiftLeft(other) {
			return _regenerator2.default.wrap(function shiftLeft$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							return _context12.abrupt('return', this.makeLink(this.native << other.toNative()));

						case 1:
						case 'end':
							return _context12.stop();
					}
				}
			}, shiftLeft, this);
		})
	}, {
		key: 'shiftRight',
		value: /*#__PURE__*/_regenerator2.default.mark(function shiftRight(other) {
			return _regenerator2.default.wrap(function shiftRight$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							return _context13.abrupt('return', this.makeLink(this.native >> other.toNative()));

						case 1:
						case 'end':
							return _context13.stop();
					}
				}
			}, shiftRight, this);
		})
	}, {
		key: 'shiftRightZF',
		value: /*#__PURE__*/_regenerator2.default.mark(function shiftRightZF(other) {
			return _regenerator2.default.wrap(function shiftRightZF$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							return _context14.abrupt('return', this.makeLink(this.native >>> other.toNative()));

						case 1:
						case 'end':
							return _context14.stop();
					}
				}
			}, shiftRightZF, this);
		})
	}, {
		key: 'bitAnd',
		value: /*#__PURE__*/_regenerator2.default.mark(function bitAnd(other) {
			return _regenerator2.default.wrap(function bitAnd$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							return _context15.abrupt('return', this.makeLink(this.native & other.toNative()));

						case 1:
						case 'end':
							return _context15.stop();
					}
				}
			}, bitAnd, this);
		})
	}, {
		key: 'bitOr',
		value: /*#__PURE__*/_regenerator2.default.mark(function bitOr(other) {
			return _regenerator2.default.wrap(function bitOr$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							return _context16.abrupt('return', this.makeLink(this.native | other.toNative()));

						case 1:
						case 'end':
							return _context16.stop();
					}
				}
			}, bitOr, this);
		})
	}, {
		key: 'bitXor',
		value: /*#__PURE__*/_regenerator2.default.mark(function bitXor(other) {
			return _regenerator2.default.wrap(function bitXor$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							return _context17.abrupt('return', this.makeLink(this.native ^ other.toNative()));

						case 1:
						case 'end':
							return _context17.stop();
					}
				}
			}, bitXor, this);
		})
	}, {
		key: 'gt',
		value: /*#__PURE__*/_regenerator2.default.mark(function gt(other) {
			return _regenerator2.default.wrap(function gt$(_context18) {
				while (1) {
					switch (_context18.prev = _context18.next) {
						case 0:
							return _context18.abrupt('return', this.makeLink(this.native > other.toNative()));

						case 1:
						case 'end':
							return _context18.stop();
					}
				}
			}, gt, this);
		})
	}, {
		key: 'lt',
		value: /*#__PURE__*/_regenerator2.default.mark(function lt(other) {
			return _regenerator2.default.wrap(function lt$(_context19) {
				while (1) {
					switch (_context19.prev = _context19.next) {
						case 0:
							return _context19.abrupt('return', this.makeLink(this.native < other.toNative()));

						case 1:
						case 'end':
							return _context19.stop();
					}
				}
			}, lt, this);
		})
	}, {
		key: 'gte',
		value: /*#__PURE__*/_regenerator2.default.mark(function gte(other) {
			return _regenerator2.default.wrap(function gte$(_context20) {
				while (1) {
					switch (_context20.prev = _context20.next) {
						case 0:
							return _context20.abrupt('return', this.makeLink(this.native >= other.toNative()));

						case 1:
						case 'end':
							return _context20.stop();
					}
				}
			}, gte, this);
		})
	}, {
		key: 'lte',
		value: /*#__PURE__*/_regenerator2.default.mark(function lte(other) {
			return _regenerator2.default.wrap(function lte$(_context21) {
				while (1) {
					switch (_context21.prev = _context21.next) {
						case 0:
							return _context21.abrupt('return', this.makeLink(this.native <= other.toNative()));

						case 1:
						case 'end':
							return _context21.stop();
					}
				}
			}, lte, this);
		})
	}, {
		key: 'inOperator',
		value: /*#__PURE__*/_regenerator2.default.mark(function inOperator(other) {
			return _regenerator2.default.wrap(function inOperator$(_context22) {
				while (1) {
					switch (_context22.prev = _context22.next) {
						case 0:
							return _context22.abrupt('return', this.makeLink(other.toNative() in this.native));

						case 1:
						case 'end':
							return _context22.stop();
					}
				}
			}, inOperator, this);
		})
	}, {
		key: 'instanceOf',
		value: /*#__PURE__*/_regenerator2.default.mark(function instanceOf(other) {
			return _regenerator2.default.wrap(function instanceOf$(_context23) {
				while (1) {
					switch (_context23.prev = _context23.next) {
						case 0:
							return _context23.abrupt('return', this.makeLink(this.native instanceof other.toNative()));

						case 1:
						case 'end':
							return _context23.stop();
					}
				}
			}, instanceOf, this);
		})
	}, {
		key: 'unaryPlus',
		value: /*#__PURE__*/_regenerator2.default.mark(function unaryPlus() {
			return _regenerator2.default.wrap(function unaryPlus$(_context24) {
				while (1) {
					switch (_context24.prev = _context24.next) {
						case 0:
							return _context24.abrupt('return', this.makeLink(+this.native));

						case 1:
						case 'end':
							return _context24.stop();
					}
				}
			}, unaryPlus, this);
		})
	}, {
		key: 'unaryMinus',
		value: /*#__PURE__*/_regenerator2.default.mark(function unaryMinus() {
			return _regenerator2.default.wrap(function unaryMinus$(_context25) {
				while (1) {
					switch (_context25.prev = _context25.next) {
						case 0:
							return _context25.abrupt('return', this.makeLink(-this.native));

						case 1:
						case 'end':
							return _context25.stop();
					}
				}
			}, unaryMinus, this);
		})
	}, {
		key: 'not',
		value: /*#__PURE__*/_regenerator2.default.mark(function not() {
			return _regenerator2.default.wrap(function not$(_context26) {
				while (1) {
					switch (_context26.prev = _context26.next) {
						case 0:
							return _context26.abrupt('return', this.makeLink(!this.native));

						case 1:
						case 'end':
							return _context26.stop();
					}
				}
			}, not, this);
		})
	}, {
		key: 'get',
		value: /*#__PURE__*/_regenerator2.default.mark(function get(name, realm, origional) {
			var desc;
			return _regenerator2.default.wrap(function get$(_context27) {
				while (1) {
					switch (_context27.prev = _context27.next) {
						case 0:
							desc = (0, _getOwnPropertyDescriptor2.default)(this.native, name);

							if (!desc) {
								_context27.next = 5;
								break;
							}

							if (!(desc.get && origional)) {
								_context27.next = 4;
								break;
							}

							return _context27.abrupt('return', this.makeLink(origional.native[name], realm));

						case 4:
							return _context27.abrupt('return', this.makeLink(this.native[name], realm));

						case 5:
							return _context27.delegateYield(this.makeLink((0, _getPrototypeOf2.default)(this.native), realm).get(name, realm, origional || this), 't0', 6);

						case 6:
							return _context27.abrupt('return', _context27.t0);

						case 7:
						case 'end':
							return _context27.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'observableProperties',
		value: /*#__PURE__*/_regenerator2.default.mark(function observableProperties(realm) {
			var p;
			return _regenerator2.default.wrap(function observableProperties$(_context28) {
				while (1) {
					switch (_context28.prev = _context28.next) {
						case 0:
							_context28.t0 = _regenerator2.default.keys(this.native);

						case 1:
							if ((_context28.t1 = _context28.t0()).done) {
								_context28.next = 7;
								break;
							}

							p = _context28.t1.value;
							_context28.next = 5;
							return this.makeLink(p);

						case 5:
							_context28.next = 1;
							break;

						case 7:
							return _context28.abrupt('return');

						case 8:
						case 'end':
							return _context28.stop();
					}
				}
			}, observableProperties, this);
		})

		/**
   *
   * @param {Value} thiz
   * @param {Value[]} args
   * @param {Scope} s
   */

	}, {
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, s, ext) {
			var realArgs, i, asConstructor, result, val, _result;

			return _regenerator2.default.wrap(function call$(_context29) {
				while (1) {
					switch (_context29.prev = _context29.next) {
						case 0:
							realArgs = new Array(args.length);

							for (i = 0; i < args.length; ++i) {
								realArgs[i] = args[i].toNative();
							}
							_context29.prev = 2;
							asConstructor = ext && ext.asConstructor;
							result = void 0;

							if (asConstructor) result = invokeAsNew(this.native, realArgs);else result = invoke(this.native, thiz ? thiz.toNative() : undefined, realArgs);
							val = this.makeLink(result, s.realm);

							if (typeof s.realm.options.linkValueCallReturnValueWrapper === 'function') {
								val = s.realm.options.linkValueCallReturnValueWrapper(val);
							}
							return _context29.abrupt('return', val);

						case 11:
							_context29.prev = 11;
							_context29.t0 = _context29['catch'](2);
							_result = this.makeLink(_context29.t0, s.realm);
							return _context29.abrupt('return', new CompletionRecord(CompletionRecord.THROW, _result));

						case 15:
						case 'end':
							return _context29.stop();
					}
				}
			}, call, this, [[2, 11]]);
		})
	}, {
		key: 'getPropertyValueMap',
		value: function getPropertyValueMap() {
			var list = {};
			for (var p in this.native) {
				var v = this.native[p];
				list[p] = this.makeLink(v);
			}
			return list;
		}
	}, {
		key: 'toNumberValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toNumberValue() {
			return _regenerator2.default.wrap(function toNumberValue$(_context30) {
				while (1) {
					switch (_context30.prev = _context30.next) {
						case 0:
							return _context30.abrupt('return', Value.fromNative(Number(this.native)));

						case 1:
						case 'end':
							return _context30.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'toStringValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toStringValue() {
			return _regenerator2.default.wrap(function toStringValue$(_context31) {
				while (1) {
					switch (_context31.prev = _context31.next) {
						case 0:
							return _context31.abrupt('return', Value.fromNative(String(this.native)));

						case 1:
						case 'end':
							return _context31.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'getPrototypeProperty',
		value: function getPrototypeProperty() {
			return this.makeLink(this.native.prototype);
		}
	}, {
		key: 'getPrototype',
		value: function getPrototype(realm) {
			return realm.ObjectPrototype;
		}
	}, {
		key: 'makeThisForNew',
		value: /*#__PURE__*/_regenerator2.default.mark(function makeThisForNew() {
			return _regenerator2.default.wrap(function makeThisForNew$(_context32) {
				while (1) {
					switch (_context32.prev = _context32.next) {
						case 0:
							return _context32.abrupt('return', Value.undef);

						case 1:
						case 'end':
							return _context32.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}, {
		key: 'toPrimitiveValue',
		value: /*#__PURE__*/_regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveValue$(_context33) {
				while (1) {
					switch (_context33.prev = _context33.next) {
						case 0:
							_context33.t0 = preferedType;
							_context33.next = _context33.t0 === 'string' ? 3 : 4;
							break;

						case 3:
							return _context33.abrupt('return', Value.fromNative(this.native.toString()));

						case 4:
							return _context33.abrupt('return', Value.fromNative(this.native.valueOf()));

						case 5:
						case 'end':
							return _context33.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'isCallable',
		get: function get() {
			return typeof this.native === 'function';
		}
	}, {
		key: 'debugString',
		get: function get() {
			return '[Link: ' + this.native + ']';
		}
	}, {
		key: 'truthy',
		get: function get() {
			return !!this.native;
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return (0, _typeof3.default)(this.native);
		}
	}, {
		key: 'linkKind',
		get: function get() {
			return 'link';
		}
	}], [{
		key: 'make',
		value: function make(native, realm) {
			var wellKnown = realm.lookupWellKnown(native);
			if (wellKnown) return wellKnown;

			if (Array.isArray(native)) {
				var ia = new Array(native.length);
				for (var i = 0; i < native.length; ++i) {
					ia[i] = LinkValue.make(native[i], realm);
				}
				return ArrayValue.make(ia, realm);
			}

			return new LinkValue(native, realm);
		}
	}]);
	return LinkValue;
}(Value);

module.exports = LinkValue;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(215);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

var _weakSet = __webpack_require__(235);

var _weakSet2 = _interopRequireDefault(_weakSet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var LinkValue = __webpack_require__(233);
var CompletionRecord = __webpack_require__(192);
var ArrayValue = __webpack_require__(225);
var EvaluatorInstruction = __webpack_require__(226);
/**
 * Represents a value that maps directly to an untrusted local value.
 */

var privilegedThreads = new _weakSet2.default();

var SmartLinkValue = function (_LinkValue) {
	(0, _inherits3.default)(SmartLinkValue, _LinkValue);

	function SmartLinkValue(value, realm) {
		(0, _classCallCheck3.default)(this, SmartLinkValue);
		return (0, _possibleConstructorReturn3.default)(this, (SmartLinkValue.__proto__ || (0, _getPrototypeOf2.default)(SmartLinkValue)).call(this, value, realm));
	}

	(0, _createClass3.default)(SmartLinkValue, [{
		key: 'allowRead',
		value: function allowRead(name, e) {
			if (e && privilegedThreads.has(e)) return true;
			//if ( name === 'call' ) return true;
			//return true;
			if (name.indexOf('esper_') === 0) return true;
			if (name === 'hasOwnProperty') return true;
			var props = this.apiProperties;
			if (props === null) return true;
			return props.indexOf(name) !== -1;
		}
	}, {
		key: 'allowWrite',
		value: function allowWrite(name, e) {
			if (e && privilegedThreads.has(e)) return true;
			if (name.indexOf('esper_') === 0) name = name.substr(6);
			var allowed = [];
			var native = this.native;
			if (native.apiUserProperties) {
				Array.prototype.push.apply(allowed, native.apiUserProperties);
			}

			return allowed.indexOf(name) != -1;
		}
	}, {
		key: 'getPropertyValueMap',
		value: function getPropertyValueMap() {
			var list = {};
			for (var p in this.native) {
				var v = this.native[p];
				if (this.allowRead(p)) {
					list[p] = this.makeLink(v);
				}
			}
			return list;
		}
	}, {
		key: 'makeLink',
		value: function makeLink(value) {
			return this.realm.import(value, 'smart');
		}
	}, {
		key: 'ref',
		value: function ref(name, s) {
			var native = this.native;
			var owner = this;
			if ('esper_' + name in native) name = 'esper_' + name;

			return (0, _get3.default)(SmartLinkValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(SmartLinkValue.prototype), 'ref', this).call(this, name, s);
		}
	}, {
		key: 'set',
		value: /*#__PURE__*/_regenerator2.default.mark(function set(name, value, s) {
			var evaluator, native;
			return _regenerator2.default.wrap(function set$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							_context.next = 2;
							return EvaluatorInstruction.getEvaluator;

						case 2:
							evaluator = _context.sent;
							native = this.native;

							if (!(name in this.native)) {
								_context.next = 11;
								break;
							}

							if (this.allowWrite(name, evaluator)) {
								_context.next = 9;
								break;
							}

							_context.next = 8;
							return CompletionRecord.makeTypeError(s.realm, "Can't write to protected property: " + name);

						case 8:
							return _context.abrupt('return', _context.sent);

						case 9:
							_context.next = 13;
							break;

						case 11:
							if (!native.apiUserProperties) native.apiUserProperties = [];

							if (native.apiUserProperties.indexOf(name) == -1) {
								native.apiUserProperties.push(name);
							}

						case 13:
							return _context.delegateYield((0, _get3.default)(SmartLinkValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(SmartLinkValue.prototype), 'set', this).call(this, name, value, s), 't0', 14);

						case 14:
							return _context.abrupt('return', _context.t0);

						case 15:
						case 'end':
							return _context.stop();
					}
				}
			}, set, this);
		})
	}, {
		key: 'get',
		value: /*#__PURE__*/_regenerator2.default.mark(function get(name, realm, origional) {
			var evaluator, native;
			return _regenerator2.default.wrap(function get$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							_context2.next = 2;
							return EvaluatorInstruction.getEvaluator;

						case 2:
							evaluator = _context2.sent;
							native = this.native;

							if ('esper_' + name in this.native) name = 'esper_' + name;

							if (name in native) {
								_context2.next = 7;
								break;
							}

							return _context2.abrupt('return', Value.undef);

						case 7:
							if (this.allowRead(name, evaluator)) {
								_context2.next = 11;
								break;
							}

							_context2.next = 10;
							return CompletionRecord.makeTypeError(realm, "Can't read protected property: " + name);

						case 10:
							return _context2.abrupt('return', _context2.sent);

						case 11:
							return _context2.delegateYield((0, _get3.default)(SmartLinkValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(SmartLinkValue.prototype), 'get', this).call(this, name, realm, origional), 't0', 12);

						case 12:
							return _context2.abrupt('return', _context2.t0);

						case 13:
						case 'end':
							return _context2.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'apiProperties',
		get: function get() {
			var allowed = [];
			var native = this.native;

			if (native.apiProperties === undefined && native.apiMethods === undefined) return null;

			if (native.apiProperties) {
				Array.prototype.push.apply(allowed, native.apiProperties);
			}

			if (native.apiUserProperties) {
				Array.prototype.push.apply(allowed, native.apiUserProperties);
			}

			if (native.apiMethods) {
				Array.prototype.push.apply(allowed, native.apiMethods);
			}

			if (native.apiOwnMethods) {
				Array.prototype.push.apply(allowed, native.apiOwnMethods);
			}

			if (native.programmableProperties) {
				Array.prototype.push.apply(allowed, native.programmableProperties);
			}

			return allowed;
		}
	}, {
		key: 'debugString',
		get: function get() {
			var props = this.apiProperties;
			return '[SmartLink: ' + this.native + ', props: ' + (props ? props.join(',') : '[none]') + ']';
		}
	}], [{
		key: 'make',
		value: function make(native, realm) {
			var wellKnown = realm.lookupWellKnown(native);
			if (wellKnown) return wellKnown;

			if (Array.isArray(native)) {
				var ia = new Array(native.length);
				for (var i = 0; i < native.length; ++i) {
					ia[i] = realm.import(native[i], 'smart');
				}
				return ArrayValue.make(ia, realm);
			}

			return new SmartLinkValue(native, realm);
		}
	}]);
	return SmartLinkValue;
}(LinkValue);

SmartLinkValue.makeThreadPrivileged = function (e) {
	privilegedThreads.add(e);
};

SmartLinkValue.isThreadPrivileged = function (e) {
	return privilegedThreads.has(e);
};

SmartLinkValue.makeThreadPrivlaged = SmartLinkValue.makeThreadPrivileged;

module.exports = SmartLinkValue;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(236), __esModule: true };

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(123);
__webpack_require__(70);
__webpack_require__(237);
__webpack_require__(238);
__webpack_require__(239);
module.exports = __webpack_require__(83).WeakSet;


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(185);
var validate = __webpack_require__(186);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(187)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__(189)('WeakSet');


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__(191)('WeakSet');


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _create = __webpack_require__(202);

var _create2 = _interopRequireDefault(_create);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = __webpack_require__(68);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _stringify = __webpack_require__(212);

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = __webpack_require__(148);

var _keys2 = _interopRequireDefault(_keys);

var _defineProperty = __webpack_require__(144);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _typeof2 = __webpack_require__(160);

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var esper = __webpack_require__(63);
var compiler = void 0;

function invokeCB(o, name) {
	if (!(name in o)) return;
	var args = Array.prototype.slice.call(arguments, 2);
	o[name].apply(o, args);
}

function detectStrict(body) {
	if (!body || body.length < 1) return;
	var first = body[0];
	if (first.type === 'ExpressionStatement') {
		var exp = first.expression;
		if (exp.type === 'Literal' && exp.value === 'use strict') {
			return true;
		}
	}
}

var ASTNode = function () {
	function ASTNode(o) {
		(0, _classCallCheck3.default)(this, ASTNode);

		this.visits = 0;
		this.dispatch = false;
		if ((typeof o === 'undefined' ? 'undefined' : (0, _typeof3.default)(o)) === 'object') {
			for (var k in o) {
				this[k] = o[k];
			}
		}
	}

	(0, _createClass3.default)(ASTNode, [{
		key: 'addHiddenProperty',
		value: function addHiddenProperty(name, value) {
			(0, _defineProperty2.default)(this, name, {
				value: value,
				configurable: true
			});
		}
	}, {
		key: 'source',
		value: function source() {
			if (!this._source) return;
			if (!this.range) return;
			return this._source.substring(this.range[0], this.range[1]);
		}
	}, {
		key: 'toString',
		value: function toString() {
			var _this = this;

			var extra = (0, _keys2.default)(this).map(function (k) {
				var v = _this[k];
				if (v === null || typeof v === 'function') return;
				if (k == 'range' || k == 'loc' || k == 'nodeID') return;
				if (v instanceof ASTNode) return k + ': [ASTNode: ' + v.type + ']';
				if (Array.isArray(v)) return '[...]';else return k + ': ' + (0, _stringify2.default)(v);
			}).filter(function (v) {
				return !!v;
			}).join(', ');
			return '[ASTNode: ' + this.type + ' ' + extra + ']';
		}
	}]);
	return ASTNode;
}();

var ASTPreprocessor = function () {
	(0, _createClass3.default)(ASTPreprocessor, null, [{
		key: 'clone',
		value: function clone(ast, extra) {
			return JSON.parse((0, _stringify2.default)(ast), function (n, o) {
				if (o === null) return null;
				if ((typeof o === 'undefined' ? 'undefined' : (0, _typeof3.default)(o)) !== 'object') return o;
				if (Array.isArray(o)) {
					return o;
				} else if (o.type) {
					var z = new ASTNode(o);
					if (!o.range && typeof o.start != 'undefined' && typeof o.end != 'undefined') {
						z.range = [o.start, o.end];
					}
					if (extra && extra.source) z.addHiddenProperty('_source', extra.source);
					return z;
				} else if (n === "start" || n === "end" || n === "loc" || n == "extra") {
					return o;
				} else {
					return o;
					//throw new TypeError("Tried to process ASTNode with no type:" + n);
				}
			});
		}
	}, {
		key: 'process',
		value: function process(ast, extra) {
			if ((typeof ast === 'undefined' ? 'undefined' : (0, _typeof3.default)(ast)) !== 'object') throw new TypeError('Provided AST is invalid (type is ' + (typeof ast === 'undefined' ? 'undefined' : (0, _typeof3.default)(ast)) + ')');
			var nast = ASTPreprocessor.clone(ast, extra);

			var options = extra || {};
			var cbs = new EsperASTInstructions(ast, options);
			new ASTPreprocessor(nast, extra).start(cbs);
			return nast;
		}
	}, {
		key: 'walker',
		value: /*#__PURE__*/_regenerator2.default.mark(function walker(ast, cbs, parent) {
			var me, _iterator, _isArray, _i, _ref, e, _iterator2, _isArray2, _i2, _ref2, _e, _iterator3, _isArray3, _i3, _ref3, _e2, _iterator4, _isArray4, _i4, _ref4, _e3, _iterator5, _isArray5, _i5, _ref5, _e4, _iterator6, _isArray6, _i6, _ref6, _e5, _iterator7, _isArray7, _i7, _ref7, _e6, p, n;

			return _regenerator2.default.wrap(function walker$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							me = function me(a) {
								return ASTPreprocessor.walker(a, cbs, ast);
							};

							if (!(!ast instanceof ASTNode)) {
								_context.next = 3;
								break;
							}

							throw new TypeError("Walked a non ASTNode");

						case 3:
							if (parent) ast.addHiddenProperty('parent', parent);
							invokeCB(cbs, 'enter', ast);
							invokeCB(cbs, 'enter' + ast.type, ast);
							_context.t0 = ast.type;
							_context.next = _context.t0 === 'Program' ? 9 : _context.t0 === 'BlockStatement' ? 25 : _context.t0 === 'NewExpression' ? 41 : _context.t0 === 'CallExpression' ? 41 : _context.t0 === 'WhileStatement' ? 58 : _context.t0 === 'DoWhileStatement' ? 58 : _context.t0 === 'VariableDeclaration' ? 62 : _context.t0 === 'VariableDeclarator' ? 78 : _context.t0 === 'FunctionDeclaration' ? 82 : _context.t0 === 'ClassBody' ? 87 : _context.t0 === 'ArrowFunctionExpression' ? 103 : _context.t0 === 'FunctionExpression' ? 103 : _context.t0 === 'ClassMethod' ? 103 : _context.t0 === 'Identifier' ? 107 : _context.t0 === 'ArrayExpression' ? 108 : _context.t0 === 'ObjectExpression' ? 126 : _context.t0 === 'Property' ? 144 : 147;
							break;

						case 9:
							_iterator = ast.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

						case 10:
							if (!_isArray) {
								_context.next = 16;
								break;
							}

							if (!(_i >= _iterator.length)) {
								_context.next = 13;
								break;
							}

							return _context.abrupt('break', 24);

						case 13:
							_ref = _iterator[_i++];
							_context.next = 20;
							break;

						case 16:
							_i = _iterator.next();

							if (!_i.done) {
								_context.next = 19;
								break;
							}

							return _context.abrupt('break', 24);

						case 19:
							_ref = _i.value;

						case 20:
							e = _ref;
							return _context.delegateYield(me(e), 't1', 22);

						case 22:
							_context.next = 10;
							break;

						case 24:
							return _context.abrupt('break', 172);

						case 25:
							_iterator2 = ast.body, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);

						case 26:
							if (!_isArray2) {
								_context.next = 32;
								break;
							}

							if (!(_i2 >= _iterator2.length)) {
								_context.next = 29;
								break;
							}

							return _context.abrupt('break', 40);

						case 29:
							_ref2 = _iterator2[_i2++];
							_context.next = 36;
							break;

						case 32:
							_i2 = _iterator2.next();

							if (!_i2.done) {
								_context.next = 35;
								break;
							}

							return _context.abrupt('break', 40);

						case 35:
							_ref2 = _i2.value;

						case 36:
							_e = _ref2;
							return _context.delegateYield(me(_e), 't2', 38);

						case 38:
							_context.next = 26;
							break;

						case 40:
							return _context.abrupt('break', 172);

						case 41:
							_iterator3 = ast.arguments, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);

						case 42:
							if (!_isArray3) {
								_context.next = 48;
								break;
							}

							if (!(_i3 >= _iterator3.length)) {
								_context.next = 45;
								break;
							}

							return _context.abrupt('break', 56);

						case 45:
							_ref3 = _iterator3[_i3++];
							_context.next = 52;
							break;

						case 48:
							_i3 = _iterator3.next();

							if (!_i3.done) {
								_context.next = 51;
								break;
							}

							return _context.abrupt('break', 56);

						case 51:
							_ref3 = _i3.value;

						case 52:
							_e2 = _ref3;
							return _context.delegateYield(me(_e2), 't3', 54);

						case 54:
							_context.next = 42;
							break;

						case 56:
							return _context.delegateYield(me(ast.callee), 't4', 57);

						case 57:
							return _context.abrupt('break', 172);

						case 58:
							if (!ast.test) {
								_context.next = 60;
								break;
							}

							return _context.delegateYield(me(ast.test), 't5', 60);

						case 60:
							return _context.delegateYield(me(ast.body), 't6', 61);

						case 61:
							return _context.abrupt('break', 172);

						case 62:
							_iterator4 = ast.declarations, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);

						case 63:
							if (!_isArray4) {
								_context.next = 69;
								break;
							}

							if (!(_i4 >= _iterator4.length)) {
								_context.next = 66;
								break;
							}

							return _context.abrupt('break', 77);

						case 66:
							_ref4 = _iterator4[_i4++];
							_context.next = 73;
							break;

						case 69:
							_i4 = _iterator4.next();

							if (!_i4.done) {
								_context.next = 72;
								break;
							}

							return _context.abrupt('break', 77);

						case 72:
							_ref4 = _i4.value;

						case 73:
							_e3 = _ref4;
							return _context.delegateYield(me(_e3), 't7', 75);

						case 75:
							_context.next = 63;
							break;

						case 77:
							return _context.abrupt('break', 172);

						case 78:
							invokeCB(cbs, 'decl', ast);

							if (!ast.init) {
								_context.next = 81;
								break;
							}

							return _context.delegateYield(me(ast.init), 't8', 81);

						case 81:
							return _context.abrupt('break', 172);

						case 82:
							invokeCB(cbs, 'decl', ast);
							invokeCB(cbs, 'enterFunction', ast);
							return _context.delegateYield(me(ast.body), 't9', 85);

						case 85:
							invokeCB(cbs, 'exitFunction', ast);
							return _context.abrupt('break', 172);

						case 87:
							_iterator5 = ast.body, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);

						case 88:
							if (!_isArray5) {
								_context.next = 94;
								break;
							}

							if (!(_i5 >= _iterator5.length)) {
								_context.next = 91;
								break;
							}

							return _context.abrupt('break', 102);

						case 91:
							_ref5 = _iterator5[_i5++];
							_context.next = 98;
							break;

						case 94:
							_i5 = _iterator5.next();

							if (!_i5.done) {
								_context.next = 97;
								break;
							}

							return _context.abrupt('break', 102);

						case 97:
							_ref5 = _i5.value;

						case 98:
							_e4 = _ref5;
							return _context.delegateYield(me(_e4), 't10', 100);

						case 100:
							_context.next = 88;
							break;

						case 102:
							return _context.abrupt('break', 172);

						case 103:
							invokeCB(cbs, 'enterFunction', ast);
							return _context.delegateYield(me(ast.body), 't11', 105);

						case 105:
							invokeCB(cbs, 'exitFunction', ast);
							return _context.abrupt('break', 172);

						case 107:
							return _context.abrupt('break', 172);

						case 108:
							if (!ast.elements) {
								_context.next = 125;
								break;
							}

							_iterator6 = ast.elements, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);

						case 110:
							if (!_isArray6) {
								_context.next = 116;
								break;
							}

							if (!(_i6 >= _iterator6.length)) {
								_context.next = 113;
								break;
							}

							return _context.abrupt('break', 125);

						case 113:
							_ref6 = _iterator6[_i6++];
							_context.next = 120;
							break;

						case 116:
							_i6 = _iterator6.next();

							if (!_i6.done) {
								_context.next = 119;
								break;
							}

							return _context.abrupt('break', 125);

						case 119:
							_ref6 = _i6.value;

						case 120:
							_e5 = _ref6;

							if (!_e5) {
								_context.next = 123;
								break;
							}

							return _context.delegateYield(me(_e5), 't12', 123);

						case 123:
							_context.next = 110;
							break;

						case 125:
							return _context.abrupt('break', 172);

						case 126:
							if (!ast.properties) {
								_context.next = 143;
								break;
							}

							_iterator7 = ast.properties, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);

						case 128:
							if (!_isArray7) {
								_context.next = 134;
								break;
							}

							if (!(_i7 >= _iterator7.length)) {
								_context.next = 131;
								break;
							}

							return _context.abrupt('break', 143);

						case 131:
							_ref7 = _iterator7[_i7++];
							_context.next = 138;
							break;

						case 134:
							_i7 = _iterator7.next();

							if (!_i7.done) {
								_context.next = 137;
								break;
							}

							return _context.abrupt('break', 143);

						case 137:
							_ref7 = _i7.value;

						case 138:
							_e6 = _ref7;

							if (!_e6) {
								_context.next = 141;
								break;
							}

							return _context.delegateYield(me(_e6), 't13', 141);

						case 141:
							_context.next = 128;
							break;

						case 143:
							return _context.abrupt('break', 172);

						case 144:
							return _context.delegateYield(me(ast.key), 't14', 145);

						case 145:
							return _context.delegateYield(me(ast.value), 't15', 146);

						case 146:
							return _context.abrupt('break', 172);

						case 147:
							_context.t16 = _regenerator2.default.keys(ast);

						case 148:
							if ((_context.t17 = _context.t16()).done) {
								_context.next = 172;
								break;
							}

							p = _context.t17.value;
							n = ast[p];

							if (!(p === 'parent')) {
								_context.next = 153;
								break;
							}

							return _context.abrupt('continue', 148);

						case 153:
							if (!(p === 'loc')) {
								_context.next = 155;
								break;
							}

							return _context.abrupt('continue', 148);

						case 155:
							if (!(p === 'range')) {
								_context.next = 157;
								break;
							}

							return _context.abrupt('continue', 148);

						case 157:
							if (!(p === 'type')) {
								_context.next = 159;
								break;
							}

							return _context.abrupt('continue', 148);

						case 159:
							if (!(p === 'nodeID')) {
								_context.next = 161;
								break;
							}

							return _context.abrupt('continue', 148);

						case 161:
							if (!(p === 'parentFunction')) {
								_context.next = 163;
								break;
							}

							return _context.abrupt('continue', 148);

						case 163:
							if (!(p === 'funcs')) {
								_context.next = 165;
								break;
							}

							return _context.abrupt('continue', 148);

						case 165:
							if (!(n === null)) {
								_context.next = 167;
								break;
							}

							return _context.abrupt('continue', 148);

						case 167:
							if (!(typeof n.type !== 'string')) {
								_context.next = 169;
								break;
							}

							return _context.abrupt('continue', 148);

						case 169:
							return _context.delegateYield(me(n), 't18', 170);

						case 170:
							_context.next = 148;
							break;

						case 172:

							invokeCB(cbs, 'exit' + ast.type, ast);
							invokeCB(cbs, 'exit', ast);

						case 174:
						case 'end':
							return _context.stop();
					}
				}
			}, walker, this);
		})
	}]);

	function ASTPreprocessor(ast) {
		(0, _classCallCheck3.default)(this, ASTPreprocessor);

		this.ast = ast;
	}

	(0, _createClass3.default)(ASTPreprocessor, [{
		key: 'start',
		value: function start(cbs) {
			var gen = ASTPreprocessor.walker(this.ast, cbs);
			for (var _iterator8 = gen, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : (0, _getIterator3.default)(_iterator8);;) {
				var _ref8;

				if (_isArray8) {
					if (_i8 >= _iterator8.length) break;
					_ref8 = _iterator8[_i8++];
				} else {
					_i8 = _iterator8.next();
					if (_i8.done) break;
					_ref8 = _i8.value;
				}

				var x = _ref8;
			}
		}
	}]);
	return ASTPreprocessor;
}();

ASTPreprocessor.ASTNode = ASTNode;

var EsperASTInstructions = function () {
	function EsperASTInstructions(ast, options) {
		(0, _classCallCheck3.default)(this, EsperASTInstructions);


		if (!compiler && esper.plugins['jit']) {
			compiler = new esper.plugins['jit'].Compiler();
		}

		this.ast = ast;
		this.options = options;
		this.counter = 0;
		this.depth = 0;

		var globalScope = (0, _create2.default)(null);
		var globalVars = (0, _create2.default)(null);
		var globalFuncs = (0, _create2.default)(null);

		if (options.locals) {
			for (var _iterator9 = options.locals, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : (0, _getIterator3.default)(_iterator9);;) {
				var _ref9;

				if (_isArray9) {
					if (_i9 >= _iterator9.length) break;
					_ref9 = _iterator9[_i9++];
				} else {
					_i9 = _iterator9.next();
					if (_i9.done) break;
					_ref9 = _i9.value;
				}

				var o = _ref9;
				globalScope[o] = true;
			}
		}

		this.scopeStack = [globalScope];
		this.varStack = [globalVars];
		this.funcStack = [globalFuncs];
	}

	(0, _createClass3.default)(EsperASTInstructions, [{
		key: 'log',
		value: function log() {
			var str = Array.prototype.join.call(arguments, ', ');
			var indent = new Array(this.depth).join('  ');
			//console.log(indent + str);
		}
	}, {
		key: 'enter',
		value: function enter(a) {
			++this.depth;
			if (this.options.markNonUser) {
				a.nonUserCode = true;
			}
			a.nodeID = this.counter++;
			this.log('Entering', a.type);
		}
	}, {
		key: 'enterIdentifier',
		value: function enterIdentifier(a) {
			var fn = this.funcStack[0];
			var parent = a.parent;
			if (parent.type == "MemberExpression" && !parent.computed && parent.property == a) {
				return;
			}
			if (parent.type == "Property" && parent.key == a) {
				return;
			}
			fn.refs[a.name] = true;
		}
	}, {
		key: 'decl',
		value: function decl(a) {
			if (a.parent.type == 'VariableDeclaration') {
				if (a.parent.kind != 'var') {
					var _stack = this.scopeStack[0];
					_stack[a.id.name] = a;
					return;
				}
			}
			if (a.type == 'FunctionDeclaration') return;
			var stack = this.varStack[0];
			stack[a.id.name] = a;
		}
	}, {
		key: 'enterProgram',
		value: function enterProgram(a) {
			var scope = (0, _create2.default)(this.scopeStack[0]);

			a.addHiddenProperty('refs', (0, _create2.default)(null));
			a.addHiddenProperty('vars', (0, _create2.default)(null));
			a.addHiddenProperty('funcs', (0, _create2.default)(null));
			a.addHiddenProperty('ss', scope);

			this.funcStack.unshift(a);
			this.scopeStack.unshift(scope);
			this.varStack.unshift(a.vars);

			this.mangleBody(a);

			var strict = detectStrict(a.body);
			if (strict !== undefined) a.strict = strict;
		}
	}, {
		key: 'enterThisExpression',
		value: function enterThisExpression(a) {
			a.srcName = 'this';
		}
	}, {
		key: 'enterLabeledStatement',
		value: function enterLabeledStatement(a) {
			a.body.label = a.label.name;
		}
	}, {
		key: 'exitArrayExpression',
		value: function exitArrayExpression(a) {
			a.srcName = '[' + a.elements.map(function (e) {
				return e ? e.srcName : '';
			}).join() + ']';
		}
	}, {
		key: 'mangleBody',
		value: function mangleBody(a) {
			function prehoist(s) {
				if (s.type === 'VariableDeclaration' && s.kind == 'var') {
					for (var _iterator10 = s.declarations, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : (0, _getIterator3.default)(_iterator10);;) {
						var _ref10;

						if (_isArray10) {
							if (_i10 >= _iterator10.length) break;
							_ref10 = _iterator10[_i10++];
						} else {
							_i10 = _iterator10.next();
							if (_i10.done) break;
							_ref10 = _i10.value;
						}

						var decl = _ref10;

						a.vars[decl.id.name] = decl;
						a.ss[decl.id.name] = decl;
					}
				} else if (s.type === 'FunctionDeclaration') {
					a.vars[s.id.name] = s;
					a.ss[s.id.name] = s;
				}
			}

			if (a.body.type === 'BlockStatement') {
				for (var _iterator11 = a.body.body, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : (0, _getIterator3.default)(_iterator11);;) {
					var _ref11;

					if (_isArray11) {
						if (_i11 >= _iterator11.length) break;
						_ref11 = _iterator11[_i11++];
					} else {
						_i11 = _iterator11.next();
						if (_i11.done) break;
						_ref11 = _i11.value;
					}

					var stmt = _ref11;
					prehoist(stmt);
				}
			} else if (Array.isArray(a.body)) {
				for (var _iterator12 = a.body, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : (0, _getIterator3.default)(_iterator12);;) {
					var _ref12;

					if (_isArray12) {
						if (_i12 >= _iterator12.length) break;
						_ref12 = _iterator12[_i12++];
					} else {
						_i12 = _iterator12.next();
						if (_i12.done) break;
						_ref12 = _i12.value;
					}

					var _stmt = _ref12;
					prehoist(_stmt);
				}
			} else {
				prehoist(a.body);
			}
		}
	}, {
		key: 'enterClassExpression',
		value: function enterClassExpression(a) {
			var scope = (0, _create2.default)(this.scopeStack[0]);
			this.scopeStack.unshift(scope);
			scope[a.id.name] = a;
			for (var _iterator13 = a.body.body, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : (0, _getIterator3.default)(_iterator13);;) {
				var _ref13;

				if (_isArray13) {
					if (_i13 >= _iterator13.length) break;
					_ref13 = _iterator13[_i13++];
				} else {
					_i13 = _iterator13.next();
					if (_i13.done) break;
					_ref13 = _i13.value;
				}

				var x = _ref13;

				if (!x) continue;
				if (x.key) scope[x.key.name] = x;
				if (x.id) scope[x.id.name] = x;
			}
		}
	}, {
		key: 'enterFunction',
		value: function enterFunction(a) {
			this.funcStack.unshift(a);
			var scope = (0, _create2.default)(this.scopeStack[0]);
			this.scopeStack.unshift(scope);

			a.addHiddenProperty('refs', (0, _create2.default)(null));
			a.addHiddenProperty('vars', (0, _create2.default)(null));
			a.addHiddenProperty('funcs', (0, _create2.default)(null));
			a.addHiddenProperty('ss', scope);

			if (this.options.nonUserCode) {
				a.addHiddenProperty('nonUserCode', true);
			}

			for (var _iterator14 = a.params, _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : (0, _getIterator3.default)(_iterator14);;) {
				var _ref14;

				if (_isArray14) {
					if (_i14 >= _iterator14.length) break;
					_ref14 = _iterator14[_i14++];
				} else {
					_i14 = _iterator14.next();
					if (_i14.done) break;
					_ref14 = _i14.value;
				}

				var o = _ref14;

				if (o.type == 'Identifier') {
					scope[o.name] = a;
					a.vars[o.name] = a;
				} else if (o.type == 'RestElement') {
					scope[o.argument.name] = a;
					a.vars[o.argument.name] = a;
				}
			}

			this.mangleBody(a);

			var strict = detectStrict(a.body.body);
			if (strict !== undefined) a.strict = strict;

			this.varStack.unshift(a.vars);
		}
	}, {
		key: 'enterFunctionDeclaration',
		value: function enterFunctionDeclaration(a) {
			var parent = this.funcStack[0];
			//a.parentFunction = parent.nodeID;
			a.srcName = 'function ' + a.id.name + ' {';
			parent.funcs[a.id.name] = a;
		}
	}, {
		key: 'exitIdentifier',
		value: function exitIdentifier(a) {
			a.srcName = a.name;
		}
	}, {
		key: 'exitLiteral',
		value: function exitLiteral(a) {
			if (a.regex) {
				a.srcName = '/' + a.regex.pattern + '/' + a.regex.flags;
			} else if (typeof a.value === 'string') {
				a.srcName = a.raw;
			} else if (typeof a.value === 'undefined') {
				a.srcName = 'undefiend';
			} else {
				a.srcName = a.raw;
			}
		}
	}, {
		key: 'exitBinaryExpression',
		value: function exitBinaryExpression(a) {
			a.srcName = a.left.srcName + ' ' + a.operator + ' ' + a.right.srcName;
		}
	}, {
		key: 'exitMemberExpression',
		value: function exitMemberExpression(a) {
			var left = a.object.srcName || '??';
			var right = a.property.srcName || '(intermediate value)';
			if (!a.computed) a.srcName = left + '.' + right;else a.srcName = a.srcName = left + '[' + right + ']';
		}
	}, {
		key: 'exitCallExpression',
		value: function exitCallExpression(a) {
			a.srcName = a.callee.srcName + '(...)';
		}
	}, {
		key: 'exitFunction',
		value: function exitFunction(a) {
			var vars = this.varStack.shift();
			var scope = this.scopeStack.shift();
			var free = {};
			var upvars = {};
			var locals = {};
			for (var r in a.refs) {

				if (r == 'arguments') continue;
				if (Object.hasOwnProperty.call(vars, r) || Object.hasOwnProperty.call(scope, r)) {
					locals[r] = true;
				} else if (r in this.varStack[0]) {
					upvars[r] = true;
				} else if (r in this.scopeStack[0]) {
					upvars[r] = true;
				} else {
					free[r] = true;
				}
			}
			a.upvars = upvars;
			a.freevars = free;

			this.funcStack.shift();
			delete a.refs;

			var target = this.funcStack[0];
			if (target && target.refs) {
				for (var v in upvars) {
					target.refs[v] = true;
				}for (var _v in free) {
					target.refs[_v] = true;
				}
			}

			if (compiler && this.options.compile === 'pre' && compiler.canCompile(a.body)) {
				a.body.dispatch = compiler.compileNode(a.body);
			}
			//this.log("VARS:", Object.getOwnPropertyNames(a.vars).join(', '));
		}
	}, {
		key: 'exitClassExpression',
		value: function exitClassExpression(a) {
			this.scopeStack.shift();
		}
	}, {
		key: 'exitProgram',
		value: function exitProgram(a) {
			this.scopeStack.shift();
			var vars = this.varStack.shift();
			//this.log("VARS:", Object.getOwnPropertyNames(a.vars).join(', '));
		}
	}, {
		key: 'exit',
		value: function exit(a) {
			this.log('Exiting', a.type);
			--this.depth;
		}
	}]);
	return EsperASTInstructions;
}();

ASTPreprocessor.ASTNode = ASTNode;
ASTPreprocessor.EsperASTInstructions = EsperASTInstructions;

module.exports = ASTPreprocessor;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var ObjectValue = __webpack_require__(197);
var CompletionRecord = __webpack_require__(192);

var EasyNativeFunction = function (_ObjectValue) {
	(0, _inherits3.default)(EasyNativeFunction, _ObjectValue);

	function EasyNativeFunction(realm) {
		(0, _classCallCheck3.default)(this, EasyNativeFunction);
		return (0, _possibleConstructorReturn3.default)(this, (EasyNativeFunction.__proto__ || (0, _getPrototypeOf2.default)(EasyNativeFunction)).call(this, realm, realm.FunctionPrototype));
	}

	(0, _createClass3.default)(EasyNativeFunction, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, argz, scope, extra) {
			var profile,
			    start,
			    s,
			    o,
			    _args = arguments;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							profile = false;
							start = 0;
							_context.prev = 2;

							if (extra && extra.evaluator && extra.evaluator.debug) {
								profile = true;
								start = Date.now();
							}
							s = scope ? scope.createChild() : scope;

							if (s) s.strict = true;
							return _context.delegateYield(this.fn.apply(this.binding, _args, s, extra), 't0', 7);

						case 7:
							o = _context.t0;

							if (!(o instanceof CompletionRecord)) {
								_context.next = 10;
								break;
							}

							return _context.abrupt('return', o);

						case 10:
							if (!(o instanceof Value)) o = scope.realm.makeForForeignObject(o);
							if (profile) extra.evaluator.incrCtr('fxTime', extra.callNode.callee.srcName, Date.now() - start);
							return _context.abrupt('return', new CompletionRecord(CompletionRecord.NORMAL, o));

						case 15:
							_context.prev = 15;
							_context.t1 = _context['catch'](2);

							if (profile) extra.evaluator.incrCtr('fxTime', extra.callNode.callee.srcName, Date.now() - start);
							return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, scope.realm.makeForForeignObject(_context.t1)));

						case 19:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this, [[2, 15]]);
		})
	}, {
		key: 'makeThisForNew',
		value: /*#__PURE__*/_regenerator2.default.mark(function makeThisForNew(realm) {
			return _regenerator2.default.wrap(function makeThisForNew$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							_context2.next = 2;
							return CompletionRecord.makeTypeError(realm, 'function is not a constructor');

						case 2:
							return _context2.abrupt('return', _context2.sent);

						case 3:
						case 'end':
							return _context2.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			return 'function() { [Native Code] }';
		}
	}], [{
		key: 'make',
		value: function make(realm, fx, binding) {
			var out = new EasyNativeFunction(realm);
			out.fn = fx;
			out.binding = binding;
			return out;
		}
	}, {
		key: 'makeForNative',
		value: function makeForNative(realm, fx) {
			var out = new EasyNativeFunction(realm);
			out.fn = /*#__PURE__*/_regenerator2.default.mark(function _callee(thiz, args) {
				var rargs, i, nt, nr;
				return _regenerator2.default.wrap(function _callee$(_context3) {
					while (1) {
						switch (_context3.prev = _context3.next) {
							case 0:
								rargs = new Array(args.length);

								for (i = 0; i < args.length; ++i) {
									rargs[i] = args[i].toNative();
								}
								nt = thiz.toNative();
								nr = fx.apply(nt, rargs);
								return _context3.abrupt('return', Value.fromNative(nr));

							case 5:
							case 'end':
								return _context3.stop();
						}
					}
				}, _callee, this);
			});
			return out;
		}
	}]);
	return EasyNativeFunction;
}(ObjectValue);

EasyNativeFunction.prototype.clazz = 'Function';

module.exports = EasyNativeFunction;

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ObjectValue = __webpack_require__(197);
var EasyObjectValue = __webpack_require__(243);
var Value = __webpack_require__(152);
var NullValue = __webpack_require__(220);
var UndefinedValue = __webpack_require__(223);

var ObjectPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(ObjectPrototype, _EasyObjectValue);

	function ObjectPrototype(realm) {
		(0, _classCallCheck3.default)(this, ObjectPrototype);

		var _this = (0, _possibleConstructorReturn3.default)(this, (ObjectPrototype.__proto__ || (0, _getPrototypeOf2.default)(ObjectPrototype)).call(this, realm));

		_this.setPrototype(null);
		return _this;
	}

	(0, _createClass3.default)(ObjectPrototype, null, [{
		key: 'hasOwnProperty$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function hasOwnProperty$e(thiz, args) {
			var name;
			return _regenerator2.default.wrap(function hasOwnProperty$e$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.delegateYield(args[0].toStringNative(), 't0', 1);

						case 1:
							name = _context.t0;

							if (thiz instanceof ObjectValue) {
								_context.next = 6;
								break;
							}

							return _context.abrupt('return', Value.false);

						case 6:
							if (!thiz.hasOwnProperty(name)) {
								_context.next = 8;
								break;
							}

							return _context.abrupt('return', Value.true);

						case 8:
							return _context.abrupt('return', Value.false);

						case 9:
						case 'end':
							return _context.stop();
					}
				}
			}, hasOwnProperty$e, this);
		})
	}, {
		key: 'isPrototypeOf$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function isPrototypeOf$e(thiz, args, s) {
			var target, pt, checked;
			return _regenerator2.default.wrap(function isPrototypeOf$e$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(args.length < 1)) {
								_context2.next = 2;
								break;
							}

							return _context2.abrupt('return', Value.false);

						case 2:
							target = args[0]; //TODO: Call ToObject();

							if (target.getPrototype) {
								_context2.next = 7;
								break;
							}

							_context2.next = 6;
							return CompletionRecord.makeTypeError(s.realm, 'No prototype.');

						case 6:
							return _context2.abrupt('return', _context2.sent);

						case 7:
							pt = target.getPrototype(s.realm);
							checked = [pt];

						case 9:
							if (!pt) {
								_context2.next = 18;
								break;
							}

							if (!(pt === thiz)) {
								_context2.next = 12;
								break;
							}

							return _context2.abrupt('return', Value.true);

						case 12:
							pt = pt.getPrototype(s.realm);

							if (!(checked.indexOf(pt) !== -1)) {
								_context2.next = 15;
								break;
							}

							return _context2.abrupt('break', 18);

						case 15:
							checked.push(pt);
							_context2.next = 9;
							break;

						case 18:
							return _context2.abrupt('return', Value.false);

						case 19:
						case 'end':
							return _context2.stop();
					}
				}
			}, isPrototypeOf$e, this);
		})
	}, {
		key: 'propertyIsEnumerable$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function propertyIsEnumerable$e(thiz, args) {
			var nam, pd;
			return _regenerator2.default.wrap(function propertyIsEnumerable$e$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.delegateYield(args[0].toStringNative(), 't0', 1);

						case 1:
							nam = _context3.t0;
							pd = thiz.properties[nam];
							return _context3.abrupt('return', this.fromNative(pd.enumerable));

						case 4:
						case 'end':
							return _context3.stop();
					}
				}
			}, propertyIsEnumerable$e, this);
		})
	}, {
		key: 'toLocaleString$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function toLocaleString$e(thiz, args) {
			return _regenerator2.default.wrap(function toLocaleString$e$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.delegateYield(ObjectPrototype.toString$e(thiz, args), 't0', 1);

						case 1:
							return _context4.abrupt('return', _context4.t0);

						case 2:
						case 'end':
							return _context4.stop();
					}
				}
			}, toLocaleString$e, this);
		})
	}, {
		key: 'toString$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function toString$e(thiz, args) {
			return _regenerator2.default.wrap(function toString$e$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							if (!(thiz instanceof UndefinedValue)) {
								_context5.next = 2;
								break;
							}

							return _context5.abrupt('return', this.fromNative('[object Undefined]'));

						case 2:
							if (!(thiz instanceof NullValue)) {
								_context5.next = 4;
								break;
							}

							return _context5.abrupt('return', this.fromNative('[object Null]'));

						case 4:
							return _context5.abrupt('return', this.fromNative('[object ' + thiz.clazz + ']'));

						case 5:
						case 'end':
							return _context5.stop();
					}
				}
			}, toString$e, this);
		})
	}, {
		key: 'valueOf$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function valueOf$e(thiz, args) {
			return _regenerator2.default.wrap(function valueOf$e$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							if (!(thiz.specTypeName === 'object')) {
								_context6.next = 2;
								break;
							}

							return _context6.abrupt('return', thiz);

						case 2:
							return _context6.abrupt('return', thiz);

						case 3:
						case 'end':
							return _context6.stop();
					}
				}
			}, valueOf$e, this);
		})
	}]);
	return ObjectPrototype;
}(EasyObjectValue);

ObjectPrototype.prototype.wellKnownName = '%ObjectPrototype%';

module.exports = ObjectPrototype;

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _getOwnPropertyDescriptor = __webpack_require__(216);

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _getIterator2 = __webpack_require__(68);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getOwnPropertyNames = __webpack_require__(244);

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var PropertyDescriptor = __webpack_require__(210);
var ObjectValue = __webpack_require__(197);
var CompletionRecord = __webpack_require__(192);
var EasyNativeFunction = __webpack_require__(241);

var EasyObjectValue = function (_ObjectValue) {
	(0, _inherits3.default)(EasyObjectValue, _ObjectValue);

	function EasyObjectValue(realm) {
		(0, _classCallCheck3.default)(this, EasyObjectValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (EasyObjectValue.__proto__ || (0, _getPrototypeOf2.default)(EasyObjectValue)).call(this, realm));

		var objProto = realm.ObjectPrototype;
		if (typeof _this.objPrototype === 'function') {
			objProto = _this.objPrototype(realm);
		} else if (typeof _this.call === 'function') {
			objProto = realm.FunctionPrototype;
		}
		if (_this.call == 'function') _this.clazz = 'Function';
		_this.setPrototype(objProto);

		_this._init(realm);
		_this.easyRef = (0, _getPrototypeOf2.default)(_this).constructor;
		return _this;
	}

	(0, _createClass3.default)(EasyObjectValue, [{
		key: '_init',
		value: function _init(realm) {
			var clazz = (0, _getPrototypeOf2.default)(this);
			for (var _iterator = (0, _getOwnPropertyNames2.default)(clazz.constructor), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var p = _ref;

				if (p === 'length') continue;
				if (p === 'name') continue;
				if (p === 'prototype') continue;
				if (p === 'constructor') continue;
				if (p === 'caller') continue;
				if (p === 'callee') continue;
				if (p === 'arguments') continue;
				var parts = p.split(/\$/);
				var flags = parts.length > 1 ? parts.pop() : '';
				var name = parts.join('');

				var d = (0, _getOwnPropertyDescriptor2.default)(clazz.constructor, p);
				var v = new PropertyDescriptor();
				var length = 1;

				if (d.get) {
					//Its a property
					var val = d.get();
					if (val instanceof Value) v.value = val;else v.value = this.fromNative(val);
				} else {
					if (d.value.esperLength !== undefined) length = d.value.esperLength;
					var rb = EasyNativeFunction.make(realm, d.value, this);
					var _rblen = new PropertyDescriptor(Value.fromNative(length));
					_rblen.configurable = false;
					_rblen.writable = false;
					_rblen.enumerable = false;
					rb.properties['length'] = _rblen;
					v.value = rb;
				}
				if (flags.indexOf('e') !== -1) v.enumerable = false;
				if (flags.indexOf('w') !== -1) v.writable = false;
				if (flags.indexOf('c') !== -1) v.configurable = false;
				if (flags.indexOf('g') !== -1) {
					v.getter = v.value;
					delete v.value;
				}
				this.properties[name] = v;
			}

			if (this.callPrototype) {
				var pt = new PropertyDescriptor(this.callPrototype(realm));
				pt.configurable = false;
				pt.enumerable = false;
				pt.writable = false;
				this.properties['prototype'] = pt;
			}

			if (this.callLength !== undefined) {
				var rblen = new PropertyDescriptor(Value.fromNative(this.callLength));
				rblen.configurable = false;
				rblen.writable = false;
				rblen.enumerable = false;
				this.properties['length'] = rblen;
			}

			if (this.constructorFor) {
				var target = this.constructorFor(realm);
				if (target) {
					var cs = new PropertyDescriptor(this);
					cs.configurable = false;
					cs.enumerable = false;
					target.properties['constructor'] = cs;
				}
			}

			/*
   if ( realm.Function ) {
   	let cs = new PropertyDescriptor(realm.Function);
   	cs.configurable = false;
   	cs.enumerable = false;
   	this.properties['constructor'] = cs;
   }
   */
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return typeof this.call === 'function' ? 'function' : 'object';
		}
	}]);
	return EasyObjectValue;
}(ObjectValue);

EasyObjectValue.EasyNativeFunction = EasyNativeFunction;

module.exports = EasyObjectValue;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(245), __esModule: true };

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(246);
var $Object = __webpack_require__(83).Object;
module.exports = function getOwnPropertyNames(it) {
  return $Object.getOwnPropertyNames(it);
};


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(151)('getOwnPropertyNames', function () {
  return __webpack_require__(173).f;
});


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(243);
var ClosureValue = __webpack_require__(224);
var Value = __webpack_require__(152);
var ObjectValue = __webpack_require__(197);
var CompletionRecord = __webpack_require__(192);
var PropertyDescriptor = __webpack_require__(210);

var BoundFunction = function (_ObjectValue) {
	(0, _inherits3.default)(BoundFunction, _ObjectValue);

	function BoundFunction(func, realm) {
		(0, _classCallCheck3.default)(this, BoundFunction);

		var _this = (0, _possibleConstructorReturn3.default)(this, (BoundFunction.__proto__ || (0, _getPrototypeOf2.default)(BoundFunction)).call(this, realm));

		_this.setPrototype(realm.FunctionPrototype);
		_this.func = func;
		_this.boundArgs = [];
		return _this;
	}

	(0, _createClass3.default)(BoundFunction, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, s, ext) {
			var tt, asConstructor, rargs;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							tt = thiz;
							asConstructor = ext && ext.asConstructor;


							if (!asConstructor) {
								tt = this.boundThis;
							}

							rargs = [].concat(this.boundArgs, args);
							return _context.delegateYield(this.func.call(tt, rargs, s, ext), 't0', 5);

						case 5:
							return _context.abrupt('return', _context.t0);

						case 6:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'constructorOf',
		value: /*#__PURE__*/_regenerator2.default.mark(function constructorOf(other, realm) {
			return _regenerator2.default.wrap(function constructorOf$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.delegateYield(this.func.constructorOf(other, realm), 't0', 1);

						case 1:
							return _context2.abrupt('return', _context2.t0);

						case 2:
						case 'end':
							return _context2.stop();
					}
				}
			}, constructorOf, this);
		})
	}, {
		key: 'makeThisForNew',
		value: /*#__PURE__*/_regenerator2.default.mark(function makeThisForNew(realm) {
			return _regenerator2.default.wrap(function makeThisForNew$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.delegateYield(this.func.makeThisForNew(realm), 't0', 1);

						case 1:
							return _context3.abrupt('return', _context3.t0);

						case 2:
						case 'end':
							return _context3.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}]);
	return BoundFunction;
}(ObjectValue);

var FunctionPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(FunctionPrototype, _EasyObjectValue);

	function FunctionPrototype() {
		(0, _classCallCheck3.default)(this, FunctionPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (FunctionPrototype.__proto__ || (0, _getPrototypeOf2.default)(FunctionPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(FunctionPrototype, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, s) {
			return _regenerator2.default.wrap(function call$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', EasyObjectValue.undef);

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, call, this);
		})
	}], [{
		key: 'apply',
		value: /*#__PURE__*/_regenerator2.default.mark(function apply(thiz, args, s) {
			var vthis, arga, arr, length, i;
			return _regenerator2.default.wrap(function apply$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							vthis = args[0];
							arga = [];

							if (!(args.length > 1)) {
								_context5.next = 15;
								break;
							}

							arr = args[1];
							return _context5.delegateYield(arr.get('length'), 't0', 5);

						case 5:
							length = _context5.t0;
							return _context5.delegateYield(length.toNumberValue(), 't1', 7);

						case 7:
							length = _context5.t1.toNative();
							i = 0;

						case 9:
							if (!(i < length)) {
								_context5.next = 15;
								break;
							}

							return _context5.delegateYield(arr.get(i), 't2', 11);

						case 11:
							arga[i] = _context5.t2;

						case 12:
							++i;
							_context5.next = 9;
							break;

						case 15:
							return _context5.delegateYield(thiz.call(vthis, arga, s), 't3', 16);

						case 16:
							return _context5.abrupt('return', _context5.t3);

						case 17:
						case 'end':
							return _context5.stop();
					}
				}
			}, apply, this);
		})
	}, {
		key: 'bind',
		value: /*#__PURE__*/_regenerator2.default.mark(function bind(thiz, args, s) {
			var bthis, out, newlen;
			return _regenerator2.default.wrap(function bind$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							bthis = s.realm.globalScope.object; //TODO: is this actually null in scrict mode?

							if (args.length > 0) {
								if (args[0].jsTypeName !== 'undefined') bthis = args[0];
							}
							out = new BoundFunction(thiz, s.realm);

							if (args.length > 1) out.boundArgs = args.slice(1);
							out.boundThis = bthis;

							if (thiz.properties['length']) {
								newlen = thiz.properties['length'].value.toNative() - out.boundArgs.length;

								out.properties['length'] = new PropertyDescriptor(this.fromNative(newlen));
							}
							return _context6.abrupt('return', out);

						case 7:
						case 'end':
							return _context6.stop();
					}
				}
			}, bind, this);
		})
	}, {
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, s) {
			var vthis;
			return _regenerator2.default.wrap(function call$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							vthis = Value.undef;

							if (args.length > 0) vthis = args.shift();
							return _context7.delegateYield(thiz.call(vthis, args, s), 't0', 3);

						case 3:
							return _context7.abrupt('return', _context7.t0);

						case 4:
						case 'end':
							return _context7.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'toString',
		value: /*#__PURE__*/_regenerator2.default.mark(function toString(thiz, args, s) {
			var astsrc;
			return _regenerator2.default.wrap(function toString$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							if (!(thiz instanceof ClosureValue)) {
								_context8.next = 7;
								break;
							}

							astsrc = thiz.funcSourceAST.source();

							if (!astsrc) {
								_context8.next = 4;
								break;
							}

							return _context8.abrupt('return', this.fromNative(astsrc));

						case 4:
							return _context8.abrupt('return', this.fromNative('function() { [AST] }'));

						case 7:
							if (!(thiz instanceof BoundFunction)) {
								_context8.next = 11;
								break;
							}

							return _context8.abrupt('return', this.fromNative('function() { [bound function] }'));

						case 11:
							if (!(thiz instanceof EasyObjectValue.EasyNativeFunction)) {
								_context8.next = 15;
								break;
							}

							return _context8.abrupt('return', this.fromNative('function() { [native code] }'));

						case 15:
							if (!(thiz instanceof EasyObjectValue && thiz.call)) {
								_context8.next = 17;
								break;
							}

							return _context8.abrupt('return', this.fromNative('function() { [native code] }'));

						case 17:
							return _context8.abrupt('return', CompletionRecord.makeTypeError(s.realm, 'Function.prototype.toString is not generic'));

						case 18:
						case 'end':
							return _context8.stop();
					}
				}
			}, toString, this);
		})
	}, {
		key: 'caller$cew',
		get: function get() {
			return null;
		}
	}, {
		key: 'length$ew',
		get: function get() {
			return '?';
		}
	}, {
		key: 'name$ew',
		get: function get() {
			return '';
		}
	}]);
	return FunctionPrototype;
}(EasyObjectValue);

FunctionPrototype.prototype.wellKnownName = '%FunctionPrototype%';

module.exports = FunctionPrototype;

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getOwnPropertyNames = __webpack_require__(244);

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _keys = __webpack_require__(148);

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = __webpack_require__(68);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/_regenerator2.default.mark(defObjectProperty),
    _marked2 = /*#__PURE__*/_regenerator2.default.mark(getDescriptor),
    _marked3 = /*#__PURE__*/_regenerator2.default.mark(objOrThrow);

var EasyObjectValue = __webpack_require__(243);
var ObjectValue = __webpack_require__(197);
var ArrayValue = __webpack_require__(225);
var CompletionRecord = __webpack_require__(192);
var Value = __webpack_require__(152);
var PropertyDescriptor = __webpack_require__(210);
var EmptyValue = __webpack_require__(221);
var BridgeValue = __webpack_require__(222);
var LinkValue = __webpack_require__(233);

function defObjectProperty(obj, name, desc, realm) {
	var value, v, enu, wri, conf, get, set;
	return _regenerator2.default.wrap(function defObjectProperty$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (!(name instanceof Value)) {
						_context.next = 3;
						break;
					}

					return _context.delegateYield(name.toStringNative(), 't0', 2);

				case 2:
					name = _context.t0;

				case 3:
					return _context.delegateYield(desc.get('value', realm), 't1', 4);

				case 4:
					value = _context.t1;
					v = new PropertyDescriptor(value);

					if (!desc.has('enumerable')) {
						_context.next = 12;
						break;
					}

					return _context.delegateYield(desc.get('enumerable', realm), 't2', 8);

				case 8:
					enu = _context.t2;

					if (!(enu instanceof EmptyValue)) {
						v.enumerable = enu.truthy;
					}
					_context.next = 13;
					break;

				case 12:
					v.enumerable = false;

				case 13:
					if (!desc.has('writable')) {
						_context.next = 19;
						break;
					}

					return _context.delegateYield(desc.get('writable', realm), 't3', 15);

				case 15:
					wri = _context.t3;

					if (!(wri instanceof EmptyValue)) {
						v.writable = wri.truthy;
					}
					_context.next = 20;
					break;

				case 19:
					v.writable = false;

				case 20:
					if (!desc.has('configurable')) {
						_context.next = 26;
						break;
					}

					return _context.delegateYield(desc.get('configurable', realm), 't4', 22);

				case 22:
					conf = _context.t4;

					if (!(conf instanceof EmptyValue)) {
						v.writable = conf.truthy;
					}
					_context.next = 27;
					break;

				case 26:
					v.writable = false;

				case 27:
					if (!desc.has('get')) {
						_context.next = 31;
						break;
					}

					return _context.delegateYield(desc.get('get', realm), 't5', 29);

				case 29:
					get = _context.t5;

					if (!(get instanceof EmptyValue)) {
						v.getter = get;
					}

				case 31:
					if (!desc.has('set')) {
						_context.next = 35;
						break;
					}

					return _context.delegateYield(desc.get('set', realm), 't6', 33);

				case 33:
					set = _context.t6;

					if (!(set instanceof EmptyValue)) {
						v.setter = set;
					}

				case 35:

					obj.rawSetProperty(name, v);
					return _context.abrupt('return', true);

				case 37:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

function getDescriptor(target, name, realm) {
	var pdesc, out;
	return _regenerator2.default.wrap(function getDescriptor$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					if (Object.hasOwnProperty.call(target.properties, name)) {
						_context2.next = 2;
						break;
					}

					return _context2.abrupt('return', Value.undef);

				case 2:
					pdesc = target.properties[name];
					out = new ObjectValue(realm);

					if (!pdesc.value) {
						_context2.next = 6;
						break;
					}

					return _context2.delegateYield(out.set('value', pdesc.value), 't0', 6);

				case 6:
					if (!pdesc.getter) {
						_context2.next = 8;
						break;
					}

					return _context2.delegateYield(out.set('get', pdesc.getter), 't1', 8);

				case 8:
					if (!pdesc.setter) {
						_context2.next = 10;
						break;
					}

					return _context2.delegateYield(out.set('set', pdesc.setter), 't2', 10);

				case 10:
					return _context2.delegateYield(out.set('writable', Value.fromNative(pdesc.writable)), 't3', 11);

				case 11:
					return _context2.delegateYield(out.set('enumerable', Value.fromNative(pdesc.enumerable)), 't4', 12);

				case 12:
					return _context2.delegateYield(out.set('configurable', Value.fromNative(pdesc.configurable)), 't5', 13);

				case 13:
					return _context2.abrupt('return', out);

				case 14:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

function objOrThrow(i, realm) {
	var val;
	return _regenerator2.default.wrap(function objOrThrow$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					val = i ? i : Value.undef;

					if (!(val instanceof EmptyValue)) {
						_context3.next = 5;
						break;
					}

					_context3.next = 4;
					return CompletionRecord.makeTypeError(realm, 'Cannot convert undefined or null to object');

				case 4:
					return _context3.abrupt('return', _context3.sent);

				case 5:
					if (val instanceof ObjectValue) {
						_context3.next = 9;
						break;
					}

					_context3.next = 8;
					return CompletionRecord.makeTypeError(realm, 'Need an object');

				case 8:
					return _context3.abrupt('return', _context3.sent);

				case 9:
					return _context3.abrupt('return', val);

				case 10:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this);
}

var ObjectObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(ObjectObject, _EasyObjectValue);

	function ObjectObject() {
		(0, _classCallCheck3.default)(this, ObjectObject);
		return (0, _possibleConstructorReturn3.default)(this, (ObjectObject.__proto__ || (0, _getPrototypeOf2.default)(ObjectObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(ObjectObject, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, s, ext) {
			var asConstructor;
			return _regenerator2.default.wrap(function call$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							asConstructor = ext && ext.asConstructor;

							if (!asConstructor) {
								_context4.next = 3;
								break;
							}

							return _context4.abrupt('return', new ObjectValue(s.realm));

						case 3:
						case 'end':
							return _context4.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.ObjectPrototype;
		}
		//objPrototype(realm) { return realm.Function; }

	}, {
		key: 'toNativeCounterpart',
		value: function toNativeCounterpart() {
			return Object;
		}
	}], [{
		key: 'create$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function create$e(thiz, args, s) {
			var v, p, propsobj, _iterator, _isArray, _i, _ref, _p, strval, podesc;

			return _regenerator2.default.wrap(function create$e$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							v = new ObjectValue(s.realm);
							p = Value.undef;

							if (args.length > 0) {
								p = args[0];
							}

							if (!(p.jsTypeName !== 'object' && p.jsTypeName !== 'function')) {
								_context5.next = 7;
								break;
							}

							_context5.next = 6;
							return CompletionRecord.makeTypeError(s.realm, 'Object prototype may only be an Object or null');

						case 6:
							return _context5.abrupt('return', _context5.sent);

						case 7:

							v.setPrototype(p);

							if (!(args.length > 1)) {
								_context5.next = 28;
								break;
							}

							propsobj = args[1];
							_iterator = propsobj.observableProperties(s.realm), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

						case 11:
							if (!_isArray) {
								_context5.next = 17;
								break;
							}

							if (!(_i >= _iterator.length)) {
								_context5.next = 14;
								break;
							}

							return _context5.abrupt('break', 28);

						case 14:
							_ref = _iterator[_i++];
							_context5.next = 21;
							break;

						case 17:
							_i = _iterator.next();

							if (!_i.done) {
								_context5.next = 20;
								break;
							}

							return _context5.abrupt('break', 28);

						case 20:
							_ref = _i.value;

						case 21:
							_p = _ref;
							strval = _p.native;
							return _context5.delegateYield(propsobj.get(strval, s.realm), 't0', 24);

						case 24:
							podesc = _context5.t0;
							return _context5.delegateYield(defObjectProperty(v, _p, podesc, s.realm), 't1', 26);

						case 26:
							_context5.next = 11;
							break;

						case 28:
							return _context5.abrupt('return', v);

						case 29:
						case 'end':
							return _context5.stop();
					}
				}
			}, create$e, this);
		})
	}, {
		key: 'defineProperty',
		value: /*#__PURE__*/_regenerator2.default.mark(function defineProperty(thiz, args, s) {
			var target, name, desc;
			return _regenerator2.default.wrap(function defineProperty$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context6.t0;
							return _context6.delegateYield(args[1].toStringNative(), 't1', 3);

						case 3:
							name = _context6.t1;
							desc = args[2];
							return _context6.delegateYield(defObjectProperty(target, name, desc, s.realm), 't2', 6);

						case 6:
							return _context6.abrupt('return', Value.true);

						case 7:
						case 'end':
							return _context6.stop();
					}
				}
			}, defineProperty, this);
		})
	}, {
		key: 'defineProperties',
		value: /*#__PURE__*/_regenerator2.default.mark(function defineProperties(thiz, args, s) {
			var target, propsobj, _iterator2, _isArray2, _i2, _ref2, p, strval, podesc;

			return _regenerator2.default.wrap(function defineProperties$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context7.t0;
							return _context7.delegateYield(objOrThrow(args[1], s.realm), 't1', 3);

						case 3:
							propsobj = _context7.t1;
							_iterator2 = propsobj.observableProperties(s.realm), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);

						case 5:
							if (!_isArray2) {
								_context7.next = 11;
								break;
							}

							if (!(_i2 >= _iterator2.length)) {
								_context7.next = 8;
								break;
							}

							return _context7.abrupt('break', 22);

						case 8:
							_ref2 = _iterator2[_i2++];
							_context7.next = 15;
							break;

						case 11:
							_i2 = _iterator2.next();

							if (!_i2.done) {
								_context7.next = 14;
								break;
							}

							return _context7.abrupt('break', 22);

						case 14:
							_ref2 = _i2.value;

						case 15:
							p = _ref2;
							strval = p.native;
							return _context7.delegateYield(propsobj.get(strval, s.realm), 't2', 18);

						case 18:
							podesc = _context7.t2;
							return _context7.delegateYield(defObjectProperty(target, p, podesc, s.realm), 't3', 20);

						case 20:
							_context7.next = 5;
							break;

						case 22:
							return _context7.abrupt('return', Value.true);

						case 23:
						case 'end':
							return _context7.stop();
					}
				}
			}, defineProperties, this);
		})
	}, {
		key: 'seal$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function seal$e(thiz, args, s) {
			var target, _iterator3, _isArray3, _i3, _ref3, p;

			return _regenerator2.default.wrap(function seal$e$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							return _context8.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context8.t0;


							target.extensable = false;
							_iterator3 = (0, _keys2.default)(target.properties), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);

						case 4:
							if (!_isArray3) {
								_context8.next = 10;
								break;
							}

							if (!(_i3 >= _iterator3.length)) {
								_context8.next = 7;
								break;
							}

							return _context8.abrupt('break', 18);

						case 7:
							_ref3 = _iterator3[_i3++];
							_context8.next = 14;
							break;

						case 10:
							_i3 = _iterator3.next();

							if (!_i3.done) {
								_context8.next = 13;
								break;
							}

							return _context8.abrupt('break', 18);

						case 13:
							_ref3 = _i3.value;

						case 14:
							p = _ref3;

							target.properties[p].configurable = false;

						case 16:
							_context8.next = 4;
							break;

						case 18:
							return _context8.abrupt('return', target);

						case 19:
						case 'end':
							return _context8.stop();
					}
				}
			}, seal$e, this);
		})
	}, {
		key: 'isSealed',
		value: /*#__PURE__*/_regenerator2.default.mark(function isSealed(thiz, args, s) {
			var target, _iterator4, _isArray4, _i4, _ref4, p, ps;

			return _regenerator2.default.wrap(function isSealed$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							return _context9.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context9.t0;

							if (!target.extensable) {
								_context9.next = 4;
								break;
							}

							return _context9.abrupt('return', Value.false);

						case 4:
							_iterator4 = (0, _keys2.default)(target.properties), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);

						case 5:
							if (!_isArray4) {
								_context9.next = 11;
								break;
							}

							if (!(_i4 >= _iterator4.length)) {
								_context9.next = 8;
								break;
							}

							return _context9.abrupt('break', 21);

						case 8:
							_ref4 = _iterator4[_i4++];
							_context9.next = 15;
							break;

						case 11:
							_i4 = _iterator4.next();

							if (!_i4.done) {
								_context9.next = 14;
								break;
							}

							return _context9.abrupt('break', 21);

						case 14:
							_ref4 = _i4.value;

						case 15:
							p = _ref4;
							ps = target.properties[p];

							if (!ps.configurable) {
								_context9.next = 19;
								break;
							}

							return _context9.abrupt('return', Value.false);

						case 19:
							_context9.next = 5;
							break;

						case 21:
							return _context9.abrupt('return', Value.true);

						case 22:
						case 'end':
							return _context9.stop();
					}
				}
			}, isSealed, this);
		})
	}, {
		key: 'freeze$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function freeze$e(thiz, args, s) {
			var target, p;
			return _regenerator2.default.wrap(function freeze$e$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							return _context10.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context10.t0;

							target.extensable = false;
							_context10.t1 = _regenerator2.default.keys(target.properties);

						case 4:
							if ((_context10.t2 = _context10.t1()).done) {
								_context10.next = 12;
								break;
							}

							p = _context10.t2.value;

							if (Object.prototype.hasOwnProperty.call(target.properties, p)) {
								_context10.next = 8;
								break;
							}

							return _context10.abrupt('continue', 4);

						case 8:
							target.properties[p].configurable = false;
							target.properties[p].writable = false;
							_context10.next = 4;
							break;

						case 12:
							return _context10.abrupt('return', target);

						case 13:
						case 'end':
							return _context10.stop();
					}
				}
			}, freeze$e, this);
		})
	}, {
		key: 'isFrozen',
		value: /*#__PURE__*/_regenerator2.default.mark(function isFrozen(thiz, args, s) {
			var target, _iterator5, _isArray5, _i5, _ref5, p, ps;

			return _regenerator2.default.wrap(function isFrozen$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context11.t0;

							if (!target.extensable) {
								_context11.next = 4;
								break;
							}

							return _context11.abrupt('return', Value.false);

						case 4:
							_iterator5 = (0, _keys2.default)(target.properties), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);

						case 5:
							if (!_isArray5) {
								_context11.next = 11;
								break;
							}

							if (!(_i5 >= _iterator5.length)) {
								_context11.next = 8;
								break;
							}

							return _context11.abrupt('break', 23);

						case 8:
							_ref5 = _iterator5[_i5++];
							_context11.next = 15;
							break;

						case 11:
							_i5 = _iterator5.next();

							if (!_i5.done) {
								_context11.next = 14;
								break;
							}

							return _context11.abrupt('break', 23);

						case 14:
							_ref5 = _i5.value;

						case 15:
							p = _ref5;
							ps = target.properties[p];

							if (!ps.configurable) {
								_context11.next = 19;
								break;
							}

							return _context11.abrupt('return', Value.false);

						case 19:
							if (!ps.writable) {
								_context11.next = 21;
								break;
							}

							return _context11.abrupt('return', Value.false);

						case 21:
							_context11.next = 5;
							break;

						case 23:
							return _context11.abrupt('return', Value.true);

						case 24:
						case 'end':
							return _context11.stop();
					}
				}
			}, isFrozen, this);
		})
	}, {
		key: 'preventExtensions$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function preventExtensions$e(thiz, args, s) {
			var target;
			return _regenerator2.default.wrap(function preventExtensions$e$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							return _context12.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context12.t0;

							target.extensable = false;
							return _context12.abrupt('return', target);

						case 4:
						case 'end':
							return _context12.stop();
					}
				}
			}, preventExtensions$e, this);
		})
	}, {
		key: 'isExtensible$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function isExtensible$e(thiz, args, s) {
			var target;
			return _regenerator2.default.wrap(function isExtensible$e$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							return _context13.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context13.t0;
							return _context13.abrupt('return', this.fromNative(target.extensable));

						case 3:
						case 'end':
							return _context13.stop();
					}
				}
			}, isExtensible$e, this);
		})
	}, {
		key: 'keys$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function keys$e(thiz, args, s) {
			var keys, _iterator6, _isArray6, _i6, _ref6, o, target, result, _iterator7, _isArray7, _i7, _ref7, p;

			return _regenerator2.default.wrap(function keys$e$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							if (!(args[0] instanceof BridgeValue)) {
								_context14.next = 2;
								break;
							}

							return _context14.abrupt('return', ArrayValue.make((0, _keys2.default)(args[0].native), s.realm));

						case 2:
							if (!(args[0] instanceof LinkValue)) {
								_context14.next = 20;
								break;
							}

							keys = [];
							_iterator6 = args[0].observableProperties(), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);

						case 5:
							if (!_isArray6) {
								_context14.next = 11;
								break;
							}

							if (!(_i6 >= _iterator6.length)) {
								_context14.next = 8;
								break;
							}

							return _context14.abrupt('break', 19);

						case 8:
							_ref6 = _iterator6[_i6++];
							_context14.next = 15;
							break;

						case 11:
							_i6 = _iterator6.next();

							if (!_i6.done) {
								_context14.next = 14;
								break;
							}

							return _context14.abrupt('break', 19);

						case 14:
							_ref6 = _i6.value;

						case 15:
							o = _ref6;
							keys.push(o);

						case 17:
							_context14.next = 5;
							break;

						case 19:
							return _context14.abrupt('return', ArrayValue.make(keys, s.realm));

						case 20:
							return _context14.delegateYield(objOrThrow(args[0], s.realm), 't0', 21);

						case 21:
							target = _context14.t0;
							result = [];
							_iterator7 = (0, _keys2.default)(target.properties), _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);

						case 24:
							if (!_isArray7) {
								_context14.next = 30;
								break;
							}

							if (!(_i7 >= _iterator7.length)) {
								_context14.next = 27;
								break;
							}

							return _context14.abrupt('break', 40);

						case 27:
							_ref7 = _iterator7[_i7++];
							_context14.next = 34;
							break;

						case 30:
							_i7 = _iterator7.next();

							if (!_i7.done) {
								_context14.next = 33;
								break;
							}

							return _context14.abrupt('break', 40);

						case 33:
							_ref7 = _i7.value;

						case 34:
							p = _ref7;

							if (target.properties[p].enumerable) {
								_context14.next = 37;
								break;
							}

							return _context14.abrupt('continue', 38);

						case 37:
							result.push(p);

						case 38:
							_context14.next = 24;
							break;

						case 40:
							return _context14.abrupt('return', ArrayValue.make(result, s.realm));

						case 41:
						case 'end':
							return _context14.stop();
					}
				}
			}, keys$e, this);
		})
	}, {
		key: 'getOwnPropertyNames$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function getOwnPropertyNames$e(thiz, args, s) {
			var target;
			return _regenerator2.default.wrap(function getOwnPropertyNames$e$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							return _context15.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context15.t0;
							return _context15.abrupt('return', ArrayValue.make((0, _getOwnPropertyNames2.default)(target.properties), s.realm));

						case 3:
						case 'end':
							return _context15.stop();
					}
				}
			}, getOwnPropertyNames$e, this);
		})
	}, {
		key: 'getOwnPropertyDescriptor',
		value: /*#__PURE__*/_regenerator2.default.mark(function getOwnPropertyDescriptor(thiz, args, s) {
			var target, name;
			return _regenerator2.default.wrap(function getOwnPropertyDescriptor$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							return _context16.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context16.t0;
							return _context16.delegateYield(args[1].toStringNative(), 't1', 3);

						case 3:
							name = _context16.t1;
							return _context16.delegateYield(getDescriptor(target, name, s.realm), 't2', 5);

						case 5:
							return _context16.abrupt('return', _context16.t2);

						case 6:
						case 'end':
							return _context16.stop();
					}
				}
			}, getOwnPropertyDescriptor, this);
		})
	}, {
		key: 'getPrototypeOf',
		value: /*#__PURE__*/_regenerator2.default.mark(function getPrototypeOf(thiz, args, s) {
			var target, proto;
			return _regenerator2.default.wrap(function getPrototypeOf$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							target = EasyObjectValue.undef;

							if (args.length > 0) target = args[0];

							if (target.getPrototype) {
								_context17.next = 6;
								break;
							}

							_context17.next = 5;
							return CompletionRecord.makeTypeError(s.realm, 'No prototype.');

						case 5:
							return _context17.abrupt('return', _context17.sent);

						case 6:
							proto = target.getPrototype(s.realm);

							if (!proto) {
								_context17.next = 9;
								break;
							}

							return _context17.abrupt('return', proto);

						case 9:
							return _context17.abrupt('return', EasyObjectValue.null);

						case 10:
						case 'end':
							return _context17.stop();
					}
				}
			}, getPrototypeOf, this);
		})
	}]);
	return ObjectObject;
}(EasyObjectValue);

ObjectObject.prototype.wellKnownName = '%Object%';

module.exports = ObjectObject;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(215);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(243);
var ClosureValue = __webpack_require__(224);
var CompletionRecord = __webpack_require__(192);
var ASTPreprocessor = __webpack_require__(240);
var PropertyDescriptor = __webpack_require__(210);

var FunctionObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(FunctionObject, _EasyObjectValue);

	function FunctionObject() {
		(0, _classCallCheck3.default)(this, FunctionObject);
		return (0, _possibleConstructorReturn3.default)(this, (FunctionObject.__proto__ || (0, _getPrototypeOf2.default)(FunctionObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(FunctionObject, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope) {
			var an, i, code, ast, oast, fn;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							an = new Array(args.length - 1);
							i = 0;

						case 2:
							if (!(i < args.length - 1)) {
								_context.next = 8;
								break;
							}

							return _context.delegateYield(args[i].toStringValue(), 't0', 4);

						case 4:
							an[i] = _context.t0.toNative();

						case 5:
							++i;
							_context.next = 2;
							break;

						case 8:
							code = 'function name(' + an.join(', ') + ') {\n' + args[args.length - 1].toNative().toString() + '\n}';
							ast = void 0;
							_context.prev = 10;
							oast = scope.realm.parser(code, { loc: true });

							ast = ASTPreprocessor.process(oast);
							_context.next = 18;
							break;

						case 15:
							_context.prev = 15;
							_context.t1 = _context['catch'](10);
							return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, _context.t1));

						case 18:
							fn = new ClosureValue(ast.body[0], scope.global);

							fn.boundScope = scope.global;
							return _context.abrupt('return', fn);

						case 21:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this, [[10, 15]]);
		})
	}, {
		key: '_init',
		value: function _init(realm) {
			(0, _get3.default)(FunctionObject.prototype.__proto__ || (0, _getPrototypeOf2.default)(FunctionObject.prototype), '_init', this).call(this, realm);
			var cs = new PropertyDescriptor(this);
			cs.configurable = false;
			cs.enumerable = false;
			this.properties['constructor'] = cs;
		}
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.FunctionPrototype;
		}
	}, {
		key: 'callLength',
		get: function get() {
			return 1;
		}
		//objPrototype(realm) { return realm.Function; }

	}]);
	return FunctionObject;
}(EasyObjectValue);

module.exports = FunctionObject;

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(243);

var NumberPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(NumberPrototype, _EasyObjectValue);

	function NumberPrototype() {
		(0, _classCallCheck3.default)(this, NumberPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (NumberPrototype.__proto__ || (0, _getPrototypeOf2.default)(NumberPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(NumberPrototype, null, [{
		key: 'valueOf$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function valueOf$e(thiz) {
			var pv;
			return _regenerator2.default.wrap(function valueOf$e$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (!(thiz.specTypeName === 'number')) {
								_context.next = 2;
								break;
							}

							return _context.abrupt('return', thiz);

						case 2:
							if (!(thiz.specTypeName === 'object')) {
								_context.next = 6;
								break;
							}

							pv = thiz.primativeValue;

							if (!(pv.specTypeName === 'number')) {
								_context.next = 6;
								break;
							}

							return _context.abrupt('return', pv);

						case 6:
							throw new TypeError('Couldnt get there.');

						case 7:
						case 'end':
							return _context.stop();
					}
				}
			}, valueOf$e, this);
		})
	}, {
		key: 'toExponential$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function toExponential$e(thiz, argz) {
			var a, num;
			return _regenerator2.default.wrap(function toExponential$e$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							a = void 0;

							if (!(argz.length > 0)) {
								_context2.next = 4;
								break;
							}

							return _context2.delegateYield(argz[0].toNumberNative(), 't0', 3);

						case 3:
							a = _context2.t0;

						case 4:
							return _context2.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

						case 5:
							num = _context2.t1;
							return _context2.abrupt('return', this.fromNative(num.toExponential(a)));

						case 7:
						case 'end':
							return _context2.stop();
					}
				}
			}, toExponential$e, this);
		})
	}, {
		key: 'toFixed$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function toFixed$e(thiz, argz) {
			var a, num;
			return _regenerator2.default.wrap(function toFixed$e$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							a = void 0;

							if (!(argz.length > 0)) {
								_context3.next = 4;
								break;
							}

							return _context3.delegateYield(argz[0].toNumberNative(), 't0', 3);

						case 3:
							a = _context3.t0;

						case 4:
							return _context3.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

						case 5:
							num = _context3.t1;
							return _context3.abrupt('return', this.fromNative(num.toFixed(a)));

						case 7:
						case 'end':
							return _context3.stop();
					}
				}
			}, toFixed$e, this);
		})
	}, {
		key: 'toPrecision$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function toPrecision$e(thiz, argz) {
			var a, num;
			return _regenerator2.default.wrap(function toPrecision$e$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							a = void 0;

							if (!(argz.length > 0)) {
								_context4.next = 4;
								break;
							}

							return _context4.delegateYield(argz[0].toNumberNative(), 't0', 3);

						case 3:
							a = _context4.t0;

						case 4:
							return _context4.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

						case 5:
							num = _context4.t1;
							return _context4.abrupt('return', this.fromNative(num.toPrecision(a)));

						case 7:
						case 'end':
							return _context4.stop();
					}
				}
			}, toPrecision$e, this);
		})
	}, {
		key: 'toString$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function toString$e(thiz, argz) {
			var a, num;
			return _regenerator2.default.wrap(function toString$e$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							a = void 0;

							if (!(argz.length > 0)) {
								_context5.next = 4;
								break;
							}

							return _context5.delegateYield(argz[0].toNumberNative(), 't0', 3);

						case 3:
							a = _context5.t0;

						case 4:
							return _context5.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

						case 5:
							num = _context5.t1;
							return _context5.abrupt('return', this.fromNative(num.toString(a)));

						case 7:
						case 'end':
							return _context5.stop();
					}
				}
			}, toString$e, this);
		})
	}]);
	return NumberPrototype;
}(EasyObjectValue);

NumberPrototype.prototype.wellKnownName = '%NumberPrototype%';
module.exports = NumberPrototype;

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(243);
var CompletionRecord = __webpack_require__(192);
var EmptyValue = __webpack_require__(221);
var ArrayValue = __webpack_require__(225);
var _g = __webpack_require__(193);

function wrapStringPrototype(name) {
	var fx = String.prototype[name];
	var genfx = /*#__PURE__*/_regenerator2.default.mark(function genfx(thiz, args, s) {
		var sv, argz, i, result, vals, _i, nv;

		return _regenerator2.default.wrap(function genfx$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						if (!(thiz instanceof EmptyValue)) {
							_context.next = 4;
							break;
						}

						_context.next = 3;
						return CompletionRecord.makeTypeError(s.realm, 'called String function on null or undefined?');

					case 3:
						return _context.abrupt('return', _context.sent);

					case 4:
						return _context.delegateYield(thiz.toStringValue(s.realm), 't0', 5);

					case 5:
						sv = _context.t0;
						argz = new Array(args.length);

						for (i = 0; i < args.length; ++i) {
							argz[i] = args[i].toNative();
						}

						result = fx.apply(sv.toNative(), argz);

						if (!Array.isArray(result)) {
							_context.next = 15;
							break;
						}

						vals = new Array(result.length);

						for (_i = 0; _i < vals.length; ++_i) {
							vals[_i] = s.realm.fromNative(result[_i]);
						}
						return _context.abrupt('return', ArrayValue.make(vals, s.realm));

					case 15:
						nv = s.realm.fromNative(result);
						return _context.abrupt('return', nv);

					case 17:
					case 'end':
						return _context.stop();
				}
			}
		}, genfx, this);
	});
	genfx.esperLength = fx.length;
	return genfx;
}

var StringPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(StringPrototype, _EasyObjectValue);

	function StringPrototype() {
		(0, _classCallCheck3.default)(this, StringPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (StringPrototype.__proto__ || (0, _getPrototypeOf2.default)(StringPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(StringPrototype, null, [{
		key: 'valueOf$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function valueOf$e(thiz) {
			var pv;
			return _regenerator2.default.wrap(function valueOf$e$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(thiz.specTypeName === 'string')) {
								_context2.next = 2;
								break;
							}

							return _context2.abrupt('return', thiz);

						case 2:
							if (!(thiz.specTypeName === 'object')) {
								_context2.next = 6;
								break;
							}

							pv = thiz.primativeValue;

							if (!(pv.specTypeName == 'string')) {
								_context2.next = 6;
								break;
							}

							return _context2.abrupt('return', pv);

						case 6:
							throw new TypeError('Couldnt get there.');

						case 7:
						case 'end':
							return _context2.stop();
					}
				}
			}, valueOf$e, this);
		})
	}, {
		key: 'concat$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function concat$e(thiz, args, realm) {
			var base, realArgs, out;
			return _regenerator2.default.wrap(function concat$e$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.delegateYield(thiz.toStringNative(), 't0', 1);

						case 1:
							base = _context4.t0;
							return _context4.delegateYield(_g.map(args, /*#__PURE__*/_regenerator2.default.mark(function _callee(v) {
								return _regenerator2.default.wrap(function _callee$(_context3) {
									while (1) {
										switch (_context3.prev = _context3.next) {
											case 0:
												return _context3.delegateYield(v.toStringNative(), 't0', 1);

											case 1:
												return _context3.abrupt('return', _context3.t0);

											case 2:
											case 'end':
												return _context3.stop();
										}
									}
								}, _callee, this);
							})), 't1', 3);

						case 3:
							realArgs = _context4.t1;
							out = String.prototype.concat.apply(base, realArgs);
							return _context4.abrupt('return', realm.fromNative(out));

						case 6:
						case 'end':
							return _context4.stop();
					}
				}
			}, concat$e, this);
		})

		//TODO: Replacement arg can be a regex.

	}, {
		key: 'replace$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function replace$e(thiz, args, realm) {
			var base, realArgs, out;
			return _regenerator2.default.wrap(function replace$e$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(thiz.toStringNative(), 't0', 1);

						case 1:
							base = _context6.t0;
							return _context6.delegateYield(_g.map(args, /*#__PURE__*/_regenerator2.default.mark(function _callee2(v) {
								return _regenerator2.default.wrap(function _callee2$(_context5) {
									while (1) {
										switch (_context5.prev = _context5.next) {
											case 0:
												return _context5.delegateYield(v.toStringNative(), 't0', 1);

											case 1:
												return _context5.abrupt('return', _context5.t0);

											case 2:
											case 'end':
												return _context5.stop();
										}
									}
								}, _callee2, this);
							})), 't1', 3);

						case 3:
							realArgs = _context6.t1;
							out = String.prototype.replace.apply(base, realArgs);
							return _context6.abrupt('return', realm.fromNative(out));

						case 6:
						case 'end':
							return _context6.stop();
					}
				}
			}, replace$e, this);
		})
	}, {
		key: 'padEnd$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function padEnd$e(thiz, args, realm) {
			var base, length, hasPad, pad;
			return _regenerator2.default.wrap(function padEnd$e$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.delegateYield(thiz.toStringNative(), 't0', 1);

						case 1:
							base = _context7.t0;

							if (!(args.length < 1)) {
								_context7.next = 4;
								break;
							}

							return _context7.abrupt('return', thiz);

						case 4:
							return _context7.delegateYield(args[0].toIntNative(), 't1', 5);

						case 5:
							length = _context7.t1;
							hasPad = args.length > 1 && args[1].jsTypeName != 'undefined';

							if (!hasPad) {
								_context7.next = 12;
								break;
							}

							return _context7.delegateYield(args[1].toStringNative(), 't3', 9);

						case 9:
							_context7.t2 = _context7.t3;
							_context7.next = 13;
							break;

						case 12:
							_context7.t2 = ' ';

						case 13:
							pad = _context7.t2;
							return _context7.abrupt('return', realm.fromNative(strPad(base, length, pad, false)));

						case 15:
						case 'end':
							return _context7.stop();
					}
				}
			}, padEnd$e, this);
		})
	}, {
		key: 'padStart$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function padStart$e(thiz, args, realm) {
			var base, length, hasPad, pad;
			return _regenerator2.default.wrap(function padStart$e$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							return _context8.delegateYield(thiz.toStringNative(), 't0', 1);

						case 1:
							base = _context8.t0;

							if (!(args.length < 1)) {
								_context8.next = 4;
								break;
							}

							return _context8.abrupt('return', thiz);

						case 4:
							return _context8.delegateYield(args[0].toIntNative(), 't1', 5);

						case 5:
							length = _context8.t1;
							hasPad = args.length > 1 && args[1].jsTypeName != 'undefined';

							if (!hasPad) {
								_context8.next = 12;
								break;
							}

							return _context8.delegateYield(args[1].toStringNative(), 't3', 9);

						case 9:
							_context8.t2 = _context8.t3;
							_context8.next = 13;
							break;

						case 12:
							_context8.t2 = ' ';

						case 13:
							pad = _context8.t2;
							return _context8.abrupt('return', realm.fromNative(strPad(base, length, pad, true)));

						case 15:
						case 'end':
							return _context8.stop();
					}
				}
			}, padStart$e, this);
		})
	}, {
		key: 'toString$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function toString$e(thiz) {
			return _regenerator2.default.wrap(function toString$e$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							return _context9.delegateYield(StringPrototype.valueOf$e(thiz), 't0', 1);

						case 1:
							return _context9.abrupt('return', _context9.t0);

						case 2:
						case 'end':
							return _context9.stop();
					}
				}
			}, toString$e, this);
		})
	}, {
		key: 'length$cew',
		get: function get() {
			return StringPrototype.fromNative(0);
		}
	}]);
	return StringPrototype;
}(EasyObjectValue);

function strPad(base, length, pad, left) {
	if (length <= base.length) return base;
	var extra = length - base.length;
	var padding = new Array(1 + Math.ceil(extra / pad.length)).join(pad).substr(0, extra);
	return left ? padding + base : base + padding;
}

StringPrototype.prototype.wellKnownName = '%StringProtoype%';
StringPrototype.prototype.clazz = 'String';

StringPrototype.charAt$e = wrapStringPrototype('charAt');
StringPrototype.charCodeAt$e = wrapStringPrototype('charCodeAt');
StringPrototype.substring$e = wrapStringPrototype('substring');
StringPrototype.substr$e = wrapStringPrototype('substr');
StringPrototype.split$e = wrapStringPrototype('split');
StringPrototype.slice$e = wrapStringPrototype('slice');
StringPrototype.lastIndexOf$e = wrapStringPrototype('lastIndexOf');
StringPrototype.indexOf$e = wrapStringPrototype('indexOf');
StringPrototype.search$e = wrapStringPrototype('search');
StringPrototype.trim$e = wrapStringPrototype('trim');
StringPrototype.toUpperCase$e = wrapStringPrototype('toUpperCase');
StringPrototype.toLocaleUpperCase$e = wrapStringPrototype('toLocaleUpperCase');
StringPrototype.toLowerCase$e = wrapStringPrototype('toLowerCase');
StringPrototype.toLocaleLowerCase$e = wrapStringPrototype('toLocaleLowerCase');
StringPrototype.localeCompare$e = wrapStringPrototype('localeCompare');

module.exports = StringPrototype;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getIterator2 = __webpack_require__(68);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/_regenerator2.default.mark(forceArrayness),
    _marked2 = /*#__PURE__*/_regenerator2.default.mark(getLength),
    _marked3 = /*#__PURE__*/_regenerator2.default.mark(shiftRight),
    _marked4 = /*#__PURE__*/_regenerator2.default.mark(shiftLeft);

var EasyObjectValue = __webpack_require__(243);
var ObjectValue = __webpack_require__(197);
var ArrayValue = __webpack_require__(225);
var PrimitiveValue = __webpack_require__(211);
var CompletionRecord = __webpack_require__(192);
var Value = __webpack_require__(152);
var _g = __webpack_require__(193);

function forceArrayness(v) {
	return _regenerator2.default.wrap(function forceArrayness$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (v.has('length')) {
						_context.next = 2;
						break;
					}

					return _context.delegateYield(v.set('length', Value.zero), 't0', 2);

				case 2:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

function getLength(v) {
	var m;
	return _regenerator2.default.wrap(function getLength$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					return _context2.delegateYield(v.get('length'), 't0', 1);

				case 1:
					m = _context2.t0;
					return _context2.delegateYield(m.toUIntNative(), 't1', 3);

				case 3:
					return _context2.abrupt('return', _context2.t1);

				case 4:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

var defaultSeperator = Value.fromNative(',');

function shiftRight(arr, start, amt) {
	var len, i, cur;
	return _regenerator2.default.wrap(function shiftRight$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					amt = amt || 1;
					return _context3.delegateYield(getLength(arr), 't0', 2);

				case 2:
					len = _context3.t0;
					i = len - 1;

				case 4:
					if (!(i >= start)) {
						_context3.next = 11;
						break;
					}

					return _context3.delegateYield(arr.get(i), 't1', 6);

				case 6:
					cur = _context3.t1;
					return _context3.delegateYield(arr.set(i + amt, cur), 't2', 8);

				case 8:
					--i;
					_context3.next = 4;
					break;

				case 11:
					return _context3.delegateYield(arr.set(start, Value.undef), 't3', 12);

				case 12:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this);
}

function shiftLeft(arr, start, amt) {
	var len, i, cur, _i;

	return _regenerator2.default.wrap(function shiftLeft$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					return _context4.delegateYield(getLength(arr), 't0', 1);

				case 1:
					len = _context4.t0;
					i = start;

				case 3:
					if (!(i < len)) {
						_context4.next = 10;
						break;
					}

					return _context4.delegateYield(arr.get(i), 't1', 5);

				case 5:
					cur = _context4.t1;
					return _context4.delegateYield(arr.set(i - amt, cur), 't2', 7);

				case 7:
					++i;
					_context4.next = 3;
					break;

				case 10:
					for (_i = len - amt; _i < len; ++_i) {
						delete arr.properties[_i];
					}
					return _context4.delegateYield(arr.set('length', Value.fromNative(len - amt)), 't3', 12);

				case 12:
				case 'end':
					return _context4.stop();
			}
		}
	}, _marked4, this);
}

var ArrayPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(ArrayPrototype, _EasyObjectValue);

	function ArrayPrototype() {
		(0, _classCallCheck3.default)(this, ArrayPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (ArrayPrototype.__proto__ || (0, _getPrototypeOf2.default)(ArrayPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(ArrayPrototype, null, [{
		key: 'concat$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function concat$e(thiz, args, s) {
			var fx, targ, out, toCopy, idx, _iterator, _isArray, _i2, _ref, arr, l, i, tv;

			return _regenerator2.default.wrap(function concat$e$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];
							if (args.length > 1) targ = args[1];

							out = [];
							toCopy = [thiz].concat(args);
							idx = 0;
							_iterator = toCopy, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

						case 8:
							if (!_isArray) {
								_context5.next = 14;
								break;
							}

							if (!(_i2 >= _iterator.length)) {
								_context5.next = 11;
								break;
							}

							return _context5.abrupt('break', 39);

						case 11:
							_ref = _iterator[_i2++];
							_context5.next = 18;
							break;

						case 14:
							_i2 = _iterator.next();

							if (!_i2.done) {
								_context5.next = 17;
								break;
							}

							return _context5.abrupt('break', 39);

						case 17:
							_ref = _i2.value;

						case 18:
							arr = _ref;

							if (!(arr instanceof PrimitiveValue)) {
								_context5.next = 23;
								break;
							}

							out[idx++] = arr;
							_context5.next = 37;
							break;

						case 23:
							if (arr.has('length')) {
								_context5.next = 27;
								break;
							}

							out[idx++] = arr;
							_context5.next = 37;
							break;

						case 27:
							return _context5.delegateYield(getLength(arr), 't0', 28);

						case 28:
							l = _context5.t0;
							i = 0;

						case 30:
							if (!(i < l)) {
								_context5.next = 37;
								break;
							}

							return _context5.delegateYield(arr.get(i, s.realm), 't1', 32);

						case 32:
							tv = _context5.t1;

							out[idx++] = tv;

						case 34:
							++i;
							_context5.next = 30;
							break;

						case 37:
							_context5.next = 8;
							break;

						case 39:
							return _context5.abrupt('return', ArrayValue.make(out, s.realm));

						case 40:
						case 'end':
							return _context5.stop();
					}
				}
			}, concat$e, this);
		})
	}, {
		key: 'filter$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function filter$e(thiz, args, s) {
			var fx, targ, test, out, l, i, tv, tru;
			return _regenerator2.default.wrap(function filter$e$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];
							if (args.length > 1) targ = args[1];

							test = /*#__PURE__*/_regenerator2.default.mark(function test(v, i) {
								var res;
								return _regenerator2.default.wrap(function test$(_context6) {
									while (1) {
										switch (_context6.prev = _context6.next) {
											case 0:
												return _context6.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't0', 1);

											case 1:
												res = _context6.t0;
												return _context6.abrupt('return', res.truthy);

											case 3:
											case 'end':
												return _context6.stop();
										}
									}
								}, test, this);
							});
							out = [];
							return _context7.delegateYield(getLength(thiz), 't0', 7);

						case 7:
							l = _context7.t0;
							i = 0;

						case 9:
							if (!(i < l)) {
								_context7.next = 18;
								break;
							}

							return _context7.delegateYield(thiz.get(i), 't1', 11);

						case 11:
							tv = _context7.t1;
							return _context7.delegateYield(test(tv, i), 't2', 13);

						case 13:
							tru = _context7.t2;

							if (tru) out.push(tv);

						case 15:
							++i;
							_context7.next = 9;
							break;

						case 18:
							return _context7.abrupt('return', ArrayValue.make(out, s.realm));

						case 19:
						case 'end':
							return _context7.stop();
					}
				}
			}, filter$e, this);
		})
	}, {
		key: 'every$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function every$e(thiz, args, s) {
			var fx, targ, test, l, i, tv, tru;
			return _regenerator2.default.wrap(function every$e$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];
							if (args.length > 1) targ = args[1];

							test = /*#__PURE__*/_regenerator2.default.mark(function test(v, i) {
								var res;
								return _regenerator2.default.wrap(function test$(_context8) {
									while (1) {
										switch (_context8.prev = _context8.next) {
											case 0:
												return _context8.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't0', 1);

											case 1:
												res = _context8.t0;
												return _context8.abrupt('return', res.truthy);

											case 3:
											case 'end':
												return _context8.stop();
										}
									}
								}, test, this);
							});
							return _context9.delegateYield(getLength(thiz), 't0', 6);

						case 6:
							l = _context9.t0;
							i = 0;

						case 8:
							if (!(i < l)) {
								_context9.next = 18;
								break;
							}

							return _context9.delegateYield(thiz.get(i), 't1', 10);

						case 10:
							tv = _context9.t1;
							return _context9.delegateYield(test(tv, i), 't2', 12);

						case 12:
							tru = _context9.t2;

							if (tru) {
								_context9.next = 15;
								break;
							}

							return _context9.abrupt('return', Value.false);

						case 15:
							++i;
							_context9.next = 8;
							break;

						case 18:
							return _context9.abrupt('return', Value.true);

						case 19:
						case 'end':
							return _context9.stop();
					}
				}
			}, every$e, this);
		})
	}, {
		key: 'some$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function some$e(thiz, args, s) {
			var fx, targ, test, l, i, tv, tru;
			return _regenerator2.default.wrap(function some$e$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];
							if (args.length > 1) targ = args[1];

							test = /*#__PURE__*/_regenerator2.default.mark(function test(v, i) {
								var res;
								return _regenerator2.default.wrap(function test$(_context10) {
									while (1) {
										switch (_context10.prev = _context10.next) {
											case 0:
												return _context10.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't0', 1);

											case 1:
												res = _context10.t0;
												return _context10.abrupt('return', res.truthy);

											case 3:
											case 'end':
												return _context10.stop();
										}
									}
								}, test, this);
							});
							return _context11.delegateYield(getLength(thiz), 't0', 6);

						case 6:
							l = _context11.t0;
							i = 0;

						case 8:
							if (!(i < l)) {
								_context11.next = 18;
								break;
							}

							return _context11.delegateYield(thiz.get(i), 't1', 10);

						case 10:
							tv = _context11.t1;
							return _context11.delegateYield(test(tv, i), 't2', 12);

						case 12:
							tru = _context11.t2;

							if (!tru) {
								_context11.next = 15;
								break;
							}

							return _context11.abrupt('return', Value.true);

						case 15:
							++i;
							_context11.next = 8;
							break;

						case 18:
							return _context11.abrupt('return', Value.false);

						case 19:
						case 'end':
							return _context11.stop();
					}
				}
			}, some$e, this);
		})
	}, {
		key: 'find$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function find$e(thiz, args, s) {
			var fx, targ, test, l, i, tv, tru;
			return _regenerator2.default.wrap(function find$e$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];
							if (args.length > 1) targ = args[1];

							test = /*#__PURE__*/_regenerator2.default.mark(function test(v, i) {
								var res;
								return _regenerator2.default.wrap(function test$(_context12) {
									while (1) {
										switch (_context12.prev = _context12.next) {
											case 0:
												return _context12.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't0', 1);

											case 1:
												res = _context12.t0;
												return _context12.abrupt('return', res.truthy);

											case 3:
											case 'end':
												return _context12.stop();
										}
									}
								}, test, this);
							});
							return _context13.delegateYield(getLength(thiz), 't0', 6);

						case 6:
							l = _context13.t0;
							i = 0;

						case 8:
							if (!(i < l)) {
								_context13.next = 18;
								break;
							}

							return _context13.delegateYield(thiz.get(i), 't1', 10);

						case 10:
							tv = _context13.t1;
							return _context13.delegateYield(test(tv, i), 't2', 12);

						case 12:
							tru = _context13.t2;

							if (!tru) {
								_context13.next = 15;
								break;
							}

							return _context13.abrupt('return', tv);

						case 15:
							++i;
							_context13.next = 8;
							break;

						case 18:
							return _context13.abrupt('return', Value.undef);

						case 19:
						case 'end':
							return _context13.stop();
					}
				}
			}, find$e, this);
		})
	}, {
		key: 'map$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function map$e(thiz, args, s) {
			var fx, targ, l, out, i, tv, v;
			return _regenerator2.default.wrap(function map$e$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];

							if (fx.isCallable) {
								_context14.next = 7;
								break;
							}

							_context14.next = 6;
							return CompletionRecord.makeTypeError(s.realm, 'Arg2 not calalble.');

						case 6:
							return _context14.abrupt('return', _context14.sent);

						case 7:

							if (args.length > 1) targ = args[1];

							return _context14.delegateYield(getLength(thiz), 't0', 9);

						case 9:
							l = _context14.t0;
							out = new Array(l);
							i = 0;

						case 12:
							if (!(i < l)) {
								_context14.next = 25;
								break;
							}

							if (thiz.has(i)) {
								_context14.next = 15;
								break;
							}

							return _context14.abrupt('continue', 22);

						case 15:
							return _context14.delegateYield(thiz.get(i), 't1', 16);

						case 16:
							tv = _context14.t1;
							return _context14.delegateYield(fx.call(targ, [tv, Value.fromNative(i), thiz], s), 't2', 18);

						case 18:
							_context14.next = 20;
							return _context14.t2;

						case 20:
							v = _context14.sent;

							out[i] = v;

						case 22:
							++i;
							_context14.next = 12;
							break;

						case 25:
							return _context14.abrupt('return', ArrayValue.make(out, s.realm));

						case 26:
						case 'end':
							return _context14.stop();
					}
				}
			}, map$e, this);
		})
	}, {
		key: 'forEach$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function forEach$e(thiz, args, s) {
			var fx, targ, l, i, v, res;
			return _regenerator2.default.wrap(function forEach$e$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];
							if (args.length > 1) targ = args[1];

							return _context15.delegateYield(getLength(thiz), 't0', 5);

						case 5:
							l = _context15.t0;
							i = 0;

						case 7:
							if (!(i < l)) {
								_context15.next = 17;
								break;
							}

							if (thiz.has(i)) {
								_context15.next = 10;
								break;
							}

							return _context15.abrupt('continue', 14);

						case 10:
							return _context15.delegateYield(thiz.get(i), 't1', 11);

						case 11:
							v = _context15.t1;
							return _context15.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't2', 13);

						case 13:
							res = _context15.t2;

						case 14:
							++i;
							_context15.next = 7;
							break;

						case 17:
							return _context15.abrupt('return', Value.undef);

						case 18:
						case 'end':
							return _context15.stop();
					}
				}
			}, forEach$e, this);
		})
	}, {
		key: 'indexOf$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function indexOf$e(thiz, args) {
			var l, match, start, startn, i, v;
			return _regenerator2.default.wrap(function indexOf$e$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							return _context16.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context16.t0;
							match = args[0] || Value.undef;
							start = args[1] || Value.zero;
							return _context16.delegateYield(start.toNumberValue(), 't1', 5);

						case 5:
							startn = _context16.t1.native;


							if (isNaN(startn)) startn = 0;else if (startn < 0) startn = 0;

							if (!(l > startn)) {
								_context16.next = 19;
								break;
							}

							i = startn;

						case 9:
							if (!(i < l)) {
								_context16.next = 19;
								break;
							}

							return _context16.delegateYield(thiz.get(i), 't2', 11);

						case 11:
							v = _context16.t2;

							if (!v) v = Value.undef;
							return _context16.delegateYield(v.tripleEquals(match), 't3', 14);

						case 14:
							if (!_context16.t3.truthy) {
								_context16.next = 16;
								break;
							}

							return _context16.abrupt('return', Value.fromNative(i));

						case 16:
							++i;
							_context16.next = 9;
							break;

						case 19:
							return _context16.abrupt('return', Value.fromNative(-1));

						case 20:
						case 'end':
							return _context16.stop();
					}
				}
			}, indexOf$e, this);
		})
	}, {
		key: 'lastIndexOf$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function lastIndexOf$e(thiz, args) {
			var l, match, startn, i, v;
			return _regenerator2.default.wrap(function lastIndexOf$e$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							return _context17.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context17.t0;
							match = args[0] || Value.undef;
							startn = l - 1;

							if (!(args.length > 1)) {
								_context17.next = 7;
								break;
							}

							return _context17.delegateYield(args[1].toIntNative(), 't1', 6);

						case 6:
							startn = _context17.t1;

						case 7:
							if (isNaN(startn)) startn = 0;
							if (startn < 0) startn += l;
							if (startn > l) startn = l;

							if (!(startn < 0)) {
								_context17.next = 12;
								break;
							}

							return _context17.abrupt('return', Value.fromNative(-1));

						case 12:
							i = startn;

						case 13:
							if (!(i >= 0)) {
								_context17.next = 25;
								break;
							}

							if (thiz.has(i)) {
								_context17.next = 16;
								break;
							}

							return _context17.abrupt('continue', 22);

						case 16:
							return _context17.delegateYield(thiz.get(i), 't2', 17);

						case 17:
							v = _context17.t2;

							if (!v) v = Value.undef;
							return _context17.delegateYield(v.tripleEquals(match), 't3', 20);

						case 20:
							if (!_context17.t3.truthy) {
								_context17.next = 22;
								break;
							}

							return _context17.abrupt('return', Value.fromNative(i));

						case 22:
							--i;
							_context17.next = 13;
							break;

						case 25:
							return _context17.abrupt('return', Value.fromNative(-1));

						case 26:
						case 'end':
							return _context17.stop();
					}
				}
			}, lastIndexOf$e, this);
		})
	}, {
		key: 'join$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function join$e(thiz, args) {
			var l, seperator, sepstr, strings, i, v, sv;
			return _regenerator2.default.wrap(function join$e$(_context18) {
				while (1) {
					switch (_context18.prev = _context18.next) {
						case 0:
							return _context18.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context18.t0;
							seperator = args[0] || defaultSeperator;
							return _context18.delegateYield(seperator.toStringValue(), 't1', 4);

						case 4:
							sepstr = _context18.t1.native;
							strings = new Array(l);
							i = 0;

						case 7:
							if (!(i < l)) {
								_context18.next = 24;
								break;
							}

							if (thiz.has(i)) {
								_context18.next = 10;
								break;
							}

							return _context18.abrupt('continue', 21);

						case 10:
							return _context18.delegateYield(thiz.get(i), 't2', 11);

						case 11:
							v = _context18.t2;

							if (v) {
								_context18.next = 16;
								break;
							}

							strings[i] = '';
							_context18.next = 21;
							break;

						case 16:
							if (!(v.specTypeName == 'undefined' || v.specTypeName == 'null')) {
								_context18.next = 18;
								break;
							}

							return _context18.abrupt('continue', 21);

						case 18:
							return _context18.delegateYield(v.toStringValue(), 't3', 19);

						case 19:
							sv = _context18.t3;

							if (sv) strings[i] = sv.native;else strings[i] = undefined; //TODO: THROW HERE?

						case 21:
							++i;
							_context18.next = 7;
							break;

						case 24:
							return _context18.abrupt('return', Value.fromNative(strings.join(sepstr)));

						case 25:
						case 'end':
							return _context18.stop();
					}
				}
			}, join$e, this);
		})
	}, {
		key: 'push$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function push$e(thiz, args) {
			var l, i, nl;
			return _regenerator2.default.wrap(function push$e$(_context19) {
				while (1) {
					switch (_context19.prev = _context19.next) {
						case 0:
							return _context19.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context19.t0;
							i = 0;

						case 3:
							if (!(i < args.length)) {
								_context19.next = 8;
								break;
							}

							return _context19.delegateYield(thiz.set(l + i, args[i]), 't1', 5);

						case 5:
							++i;
							_context19.next = 3;
							break;

						case 8:
							nl = Value.fromNative(l + args.length);
							return _context19.delegateYield(thiz.set('length', nl), 't2', 10);

						case 10:
							return _context19.abrupt('return', Value.fromNative(l + args.length));

						case 11:
						case 'end':
							return _context19.stop();
					}
				}
			}, push$e, this);
		})
	}, {
		key: 'pop$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function pop$e(thiz, args) {
			var l, val;
			return _regenerator2.default.wrap(function pop$e$(_context20) {
				while (1) {
					switch (_context20.prev = _context20.next) {
						case 0:
							return _context20.delegateYield(forceArrayness(thiz), 't0', 1);

						case 1:
							return _context20.delegateYield(getLength(thiz), 't1', 2);

						case 2:
							l = _context20.t1;

							if (!(l < 1)) {
								_context20.next = 5;
								break;
							}

							return _context20.abrupt('return', Value.undef);

						case 5:
							return _context20.delegateYield(thiz.get(l - 1), 't2', 6);

						case 6:
							val = _context20.t2;
							return _context20.delegateYield(thiz.set('length', Value.fromNative(l - 1)), 't3', 8);

						case 8:
							return _context20.abrupt('return', val);

						case 9:
						case 'end':
							return _context20.stop();
					}
				}
			}, pop$e, this);
		})
	}, {
		key: 'reverse$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function reverse$e(thiz, args, s) {
			var l, i, lv, rv;
			return _regenerator2.default.wrap(function reverse$e$(_context21) {
				while (1) {
					switch (_context21.prev = _context21.next) {
						case 0:
							return _context21.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context21.t0;
							i = 0;

						case 3:
							if (!(i < Math.floor(l / 2))) {
								_context21.next = 13;
								break;
							}

							return _context21.delegateYield(thiz.get(i), 't1', 5);

						case 5:
							lv = _context21.t1;
							return _context21.delegateYield(thiz.get(l - i - 1), 't2', 7);

						case 7:
							rv = _context21.t2;
							return _context21.delegateYield(thiz.set(l - i - 1, lv, s), 't3', 9);

						case 9:
							return _context21.delegateYield(thiz.set(i, rv, s), 't4', 10);

						case 10:
							++i;
							_context21.next = 3;
							break;

						case 13:
							return _context21.abrupt('return', thiz);

						case 14:
						case 'end':
							return _context21.stop();
					}
				}
			}, reverse$e, this);
		})
	}, {
		key: 'reduce$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function reduce$e(thiz, args, s) {
			var l, acc, fx, i, lv;
			return _regenerator2.default.wrap(function reduce$e$(_context22) {
				while (1) {
					switch (_context22.prev = _context22.next) {
						case 0:
							return _context22.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context22.t0;
							acc = void 0;
							fx = args[0];

							if (!(args.length < 1 || !fx.isCallable)) {
								_context22.next = 8;
								break;
							}

							_context22.next = 7;
							return CompletionRecord.makeTypeError(s.realm, 'First argument to reduce must be a function.');

						case 7:
							return _context22.abrupt('return', _context22.sent);

						case 8:

							if (args.length > 1) {
								acc = args[1];
							}

							i = 0;

						case 10:
							if (!(i < l)) {
								_context22.next = 23;
								break;
							}

							if (thiz.has(i)) {
								_context22.next = 13;
								break;
							}

							return _context22.abrupt('continue', 20);

						case 13:
							return _context22.delegateYield(thiz.get(i), 't1', 14);

						case 14:
							lv = _context22.t1;

							if (acc) {
								_context22.next = 18;
								break;
							}

							acc = lv;
							return _context22.abrupt('continue', 20);

						case 18:
							return _context22.delegateYield(fx.call(thiz, [acc, lv], s), 't2', 19);

						case 19:
							acc = _context22.t2;

						case 20:
							++i;
							_context22.next = 10;
							break;

						case 23:
							if (acc) {
								_context22.next = 27;
								break;
							}

							_context22.next = 26;
							return CompletionRecord.makeTypeError(s.realm, 'Reduce an empty array with no initial value.');

						case 26:
							return _context22.abrupt('return', _context22.sent);

						case 27:
							return _context22.abrupt('return', acc);

						case 28:
						case 'end':
							return _context22.stop();
					}
				}
			}, reduce$e, this);
		})

		//TODO: Factor some stuff out of reduce and reduce right into a common function.

	}, {
		key: 'reduceRight$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function reduceRight$e(thiz, args, s) {
			var l, acc, fx, i, lv;
			return _regenerator2.default.wrap(function reduceRight$e$(_context23) {
				while (1) {
					switch (_context23.prev = _context23.next) {
						case 0:
							return _context23.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context23.t0;
							acc = void 0;
							fx = args[0];

							if (!(args.length < 1 || !fx.isCallable)) {
								_context23.next = 8;
								break;
							}

							_context23.next = 7;
							return CompletionRecord.makeTypeError(s.realm, 'First argument to reduceRight must be a function.');

						case 7:
							return _context23.abrupt('return', _context23.sent);

						case 8:

							if (args.length > 1) {
								acc = args[1];
							}

							i = l - 1;

						case 10:
							if (!(i >= 0)) {
								_context23.next = 23;
								break;
							}

							if (thiz.has(i)) {
								_context23.next = 13;
								break;
							}

							return _context23.abrupt('continue', 20);

						case 13:
							return _context23.delegateYield(thiz.get(i), 't1', 14);

						case 14:
							lv = _context23.t1;

							if (acc) {
								_context23.next = 18;
								break;
							}

							acc = lv;
							return _context23.abrupt('continue', 20);

						case 18:
							return _context23.delegateYield(fx.call(thiz, [acc, lv], s), 't2', 19);

						case 19:
							acc = _context23.t2;

						case 20:
							--i;
							_context23.next = 10;
							break;

						case 23:
							if (acc) {
								_context23.next = 27;
								break;
							}

							_context23.next = 26;
							return CompletionRecord.makeTypeError(s.realm, 'Reduce an empty array with no initial value.');

						case 26:
							return _context23.abrupt('return', _context23.sent);

						case 27:
							return _context23.abrupt('return', acc);

						case 28:
						case 'end':
							return _context23.stop();
					}
				}
			}, reduceRight$e, this);
		})
	}, {
		key: 'shift$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function shift$e(thiz, args) {
			var l, val;
			return _regenerator2.default.wrap(function shift$e$(_context24) {
				while (1) {
					switch (_context24.prev = _context24.next) {
						case 0:
							return _context24.delegateYield(forceArrayness(thiz), 't0', 1);

						case 1:
							return _context24.delegateYield(getLength(thiz), 't1', 2);

						case 2:
							l = _context24.t1;

							if (!(l < 1)) {
								_context24.next = 5;
								break;
							}

							return _context24.abrupt('return', Value.undef);

						case 5:
							return _context24.delegateYield(thiz.get(0), 't2', 6);

						case 6:
							val = _context24.t2;
							return _context24.delegateYield(shiftLeft(thiz, 1, 1), 't3', 8);

						case 8:
							return _context24.abrupt('return', val);

						case 9:
						case 'end':
							return _context24.stop();
					}
				}
			}, shift$e, this);
		})
	}, {
		key: 'slice$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function slice$e(thiz, args, s) {
			var length, result, start, end, i;
			return _regenerator2.default.wrap(function slice$e$(_context25) {
				while (1) {
					switch (_context25.prev = _context25.next) {
						case 0:
							return _context25.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							length = _context25.t0;
							result = [];
							start = 0;
							end = length;

							if (!(args.length > 0)) {
								_context25.next = 8;
								break;
							}

							return _context25.delegateYield(args[0].toIntNative(), 't1', 7);

						case 7:
							start = _context25.t1;

						case 8:
							if (!(args.length > 1)) {
								_context25.next = 11;
								break;
							}

							return _context25.delegateYield(args[1].toIntNative(), 't2', 10);

						case 10:
							end = _context25.t2;

						case 11:

							if (start < 0) start = length + start;
							if (end < 0) end = length + end;

							if (end > length) end = length;
							if (start < 0) start = 0;

							i = start;

						case 16:
							if (!(i < end)) {
								_context25.next = 24;
								break;
							}

							_context25.t3 = result;
							return _context25.delegateYield(thiz.get('' + i), 't4', 19);

						case 19:
							_context25.t5 = _context25.t4;

							_context25.t3.push.call(_context25.t3, _context25.t5);

						case 21:
							++i;
							_context25.next = 16;
							break;

						case 24:
							return _context25.abrupt('return', ArrayValue.make(result, s.realm));

						case 25:
						case 'end':
							return _context25.stop();
					}
				}
			}, slice$e, this);
		})
	}, {
		key: 'splice$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function splice$e(thiz, args, s) {
			var result, deleteCount, len, start, deleted, toAdd, delta, i, _i3;

			return _regenerator2.default.wrap(function splice$e$(_context26) {
				while (1) {
					switch (_context26.prev = _context26.next) {
						case 0:
							//TODO: Call ToObject() on thisz;


							result = [];
							deleteCount = void 0;
							return _context26.delegateYield(getLength(thiz), 't0', 3);

						case 3:
							len = _context26.t0;
							start = len;

							if (!isNaN(len)) {
								_context26.next = 7;
								break;
							}

							return _context26.abrupt('return', thiz);

						case 7:
							if (!(args.length > 0)) {
								_context26.next = 10;
								break;
							}

							return _context26.delegateYield(args[0].toIntNative(), 't1', 9);

						case 9:
							start = _context26.t1;

						case 10:

							if (start > len) start = len;else if (start < 0) start = len + start;

							if (!(args.length > 1)) {
								_context26.next = 16;
								break;
							}

							return _context26.delegateYield(args[1].toIntNative(), 't2', 13);

						case 13:
							deleteCount = _context26.t2;
							_context26.next = 17;
							break;

						case 16:
							deleteCount = len - start;

						case 17:
							if (deleteCount > len - start) deleteCount = len - start;
							if (deleteCount < 0) deleteCount = 0;

							deleted = [];
							toAdd = args.slice(2);
							delta = toAdd.length - deleteCount;
							i = start;

						case 23:
							if (!(i < start + deleteCount)) {
								_context26.next = 31;
								break;
							}

							_context26.t3 = deleted;
							return _context26.delegateYield(thiz.get(i), 't4', 26);

						case 26:
							_context26.t5 = _context26.t4;

							_context26.t3.push.call(_context26.t3, _context26.t5);

						case 28:
							++i;
							_context26.next = 23;
							break;

						case 31:
							if (!(delta > 0)) {
								_context26.next = 33;
								break;
							}

							return _context26.delegateYield(shiftRight(thiz, start, delta), 't6', 33);

						case 33:
							if (!(delta < 0)) {
								_context26.next = 35;
								break;
							}

							return _context26.delegateYield(shiftLeft(thiz, start - delta, -delta), 't7', 35);

						case 35:
							_i3 = 0;

						case 36:
							if (!(_i3 < toAdd.length)) {
								_context26.next = 41;
								break;
							}

							return _context26.delegateYield(thiz.set(start + _i3, toAdd[_i3]), 't8', 38);

						case 38:
							++_i3;
							_context26.next = 36;
							break;

						case 41:
							return _context26.delegateYield(thiz.set('length', Value.fromNative(len + delta)), 't9', 42);

						case 42:
							return _context26.abrupt('return', ArrayValue.make(deleted, s.realm));

						case 43:
						case 'end':
							return _context26.stop();
					}
				}
			}, splice$e, this);
		})
	}, {
		key: 'sort$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function sort$e(thiz, args, s) {
			var length, vals, i, comp, fx, nue, _i4;

			return _regenerator2.default.wrap(function sort$e$(_context29) {
				while (1) {
					switch (_context29.prev = _context29.next) {
						case 0:
							return _context29.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							length = _context29.t0;
							vals = new Array(length);
							i = 0;

						case 4:
							if (!(i < length)) {
								_context29.next = 10;
								break;
							}

							return _context29.delegateYield(thiz.get(i), 't1', 6);

						case 6:
							vals[i] = _context29.t1;

						case 7:
							++i;
							_context29.next = 4;
							break;

						case 10:
							comp = /*#__PURE__*/_regenerator2.default.mark(function comp(left, right) {
								var l, r;
								return _regenerator2.default.wrap(function comp$(_context27) {
									while (1) {
										switch (_context27.prev = _context27.next) {
											case 0:
												return _context27.delegateYield(left.toStringValue(), 't0', 1);

											case 1:
												l = _context27.t0;

												if (l) {
													_context27.next = 4;
													break;
												}

												return _context27.abrupt('return', false);

											case 4:
												return _context27.delegateYield(right.toStringValue(), 't1', 5);

											case 5:
												r = _context27.t1;

												if (r) {
													_context27.next = 8;
													break;
												}

												return _context27.abrupt('return', true);

											case 8:
												return _context27.delegateYield(l.lt(r), 't2', 9);

											case 9:
												return _context27.abrupt('return', _context27.t2.truthy);

											case 10:
											case 'end':
												return _context27.stop();
										}
									}
								}, comp, this);
							});

							if (!(args.length > 0)) {
								_context29.next = 18;
								break;
							}

							fx = args[0];

							if (fx.isCallable) {
								_context29.next = 17;
								break;
							}

							_context29.next = 16;
							return CompletionRecord.makeTypeError(s.realm, 'Arg2 not calalble.');

						case 16:
							return _context29.abrupt('return', _context29.sent);

						case 17:
							comp = /*#__PURE__*/_regenerator2.default.mark(function comp(left, right) {
								var res;
								return _regenerator2.default.wrap(function comp$(_context28) {
									while (1) {
										switch (_context28.prev = _context28.next) {
											case 0:
												return _context28.delegateYield(fx.call(Value.undef, [left, right], s), 't0', 1);

											case 1:
												res = _context28.t0;
												return _context28.delegateYield(res.lt(Value.fromNative(0)), 't1', 3);

											case 3:
												return _context28.abrupt('return', _context28.t1.truthy);

											case 4:
											case 'end':
												return _context28.stop();
										}
									}
								}, comp, this);
							});

						case 18:
							return _context29.delegateYield(_g.sort(vals, comp), 't2', 19);

						case 19:
							nue = _context29.t2;
							_i4 = 0;

						case 21:
							if (!(_i4 < length)) {
								_context29.next = 26;
								break;
							}

							return _context29.delegateYield(thiz.set(_i4, nue[_i4]), 't3', 23);

						case 23:
							++_i4;
							_context29.next = 21;
							break;

						case 26:
							return _context29.abrupt('return', thiz);

						case 27:
						case 'end':
							return _context29.stop();
					}
				}
			}, sort$e, this);
		})
	}, {
		key: 'toString$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function toString$e(thiz, args, s) {
			var joinfn, ots;
			return _regenerator2.default.wrap(function toString$e$(_context30) {
				while (1) {
					switch (_context30.prev = _context30.next) {
						case 0:
							return _context30.delegateYield(thiz.get('join'), 't0', 1);

						case 1:
							joinfn = _context30.t0;

							if (!(!joinfn || !joinfn.isCallable)) {
								_context30.next = 9;
								break;
							}

							return _context30.delegateYield(s.realm.ObjectPrototype.get('toString'), 't1', 4);

						case 4:
							ots = _context30.t1;
							return _context30.delegateYield(ots.call(thiz, []), 't2', 6);

						case 6:
							return _context30.abrupt('return', _context30.t2);

						case 9:
							return _context30.delegateYield(joinfn.call(thiz, [defaultSeperator]), 't3', 10);

						case 10:
							return _context30.abrupt('return', _context30.t3);

						case 11:
						case 'end':
							return _context30.stop();
					}
				}
			}, toString$e, this);
		})
	}, {
		key: 'unshift$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function unshift$e(thiz, args, s) {
			var amt, len, i, nl;
			return _regenerator2.default.wrap(function unshift$e$(_context31) {
				while (1) {
					switch (_context31.prev = _context31.next) {
						case 0:
							amt = args.length;
							return _context31.delegateYield(getLength(thiz), 't0', 2);

						case 2:
							len = _context31.t0;

							if (isNaN(len)) len = 0;
							return _context31.delegateYield(shiftRight(thiz, 0, amt), 't1', 5);

						case 5:
							i = 0;

						case 6:
							if (!(i < amt)) {
								_context31.next = 11;
								break;
							}

							return _context31.delegateYield(thiz.set(i, args[i]), 't2', 8);

						case 8:
							++i;
							_context31.next = 6;
							break;

						case 11:
							nl = Value.fromNative(len + amt);
							return _context31.delegateYield(thiz.set('length', nl, s), 't3', 13);

						case 13:
							return _context31.abrupt('return', nl);

						case 14:
						case 'end':
							return _context31.stop();
					}
				}
			}, unshift$e, this);
		})
	}, {
		key: 'fill$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function fill$e(thiz, args, s) {
			var l, value, start, startn, end, endn, i;
			return _regenerator2.default.wrap(function fill$e$(_context32) {
				while (1) {
					switch (_context32.prev = _context32.next) {
						case 0:
							return _context32.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context32.t0;
							value = args[0] || Value.undef;
							start = args[1] || Value.zero;
							return _context32.delegateYield(start.toNumberValue(), 't1', 5);

						case 5:
							startn = _context32.t1.native;
							end = args[2] || Value.fromNative(l);
							return _context32.delegateYield(end.toNumberValue(), 't2', 8);

						case 8:
							endn = _context32.t2.native;


							if (isNaN(startn)) startn = 0;else if (startn < 0) startn = l + startn;

							if (isNaN(endn)) endn = 0;else if (endn < 0) endn = l + endn;

							if (!(l > startn)) {
								_context32.next = 18;
								break;
							}

							i = startn;

						case 13:
							if (!(i < endn)) {
								_context32.next = 18;
								break;
							}

							return _context32.delegateYield(thiz.set(i, value, s), 't3', 15);

						case 15:
							++i;
							_context32.next = 13;
							break;

						case 18:
							return _context32.abrupt('return', thiz);

						case 19:
						case 'end':
							return _context32.stop();
					}
				}
			}, fill$e, this);
		})
	}]);
	return ArrayPrototype;
}(EasyObjectValue);

ArrayPrototype.prototype.wellKnownName = '%ArrayPrototype%';

module.exports = ArrayPrototype;

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(243);
var ObjectValue = __webpack_require__(197);
var ArrayValue = __webpack_require__(225);
var CompletionRecord = __webpack_require__(192);

var ArrayObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(ArrayObject, _EasyObjectValue);

	function ArrayObject() {
		(0, _classCallCheck3.default)(this, ArrayObject);
		return (0, _possibleConstructorReturn3.default)(this, (ArrayObject.__proto__ || (0, _getPrototypeOf2.default)(ArrayObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(ArrayObject, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, s) {
			var len, result;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (!(args.length === 1 && args[0].jsTypeName === 'number')) {
								_context.next = 9;
								break;
							}

							len = args[0].toNative();

							if (!(len != len >> 0)) {
								_context.next = 6;
								break;
							}

							_context.next = 5;
							return CompletionRecord.makeRangeError(this.realm, "Invalid array length");

						case 5:
							return _context.abrupt('return', _context.sent);

						case 6:
							result = ArrayValue.make([], s.realm);
							return _context.delegateYield(result.set('length', args[0]), 't0', 8);

						case 8:
							return _context.abrupt('return', result);

						case 9:
							return _context.abrupt('return', ArrayValue.make(args, s.realm));

						case 10:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.ArrayPrototype;
		}
	}, {
		key: 'constructorFor',
		value: function constructorFor(realm) {
			return realm.ArrayPrototype;
		}
		//objPrototype(realm) { return realm.Function; }


	}], [{
		key: 'isArray',
		value: /*#__PURE__*/_regenerator2.default.mark(function isArray(thiz, args) {
			return _regenerator2.default.wrap(function isArray$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(args.length < 1)) {
								_context2.next = 2;
								break;
							}

							return _context2.abrupt('return', EasyObjectValue.false);

						case 2:
							return _context2.abrupt('return', EasyObjectValue.fromNative(args[0] instanceof ArrayValue));

						case 3:
						case 'end':
							return _context2.stop();
					}
				}
			}, isArray, this);
		})
	}]);
	return ArrayObject;
}(EasyObjectValue);

module.exports = ArrayObject;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(243);
var CompletionRecord = __webpack_require__(192);
var PropertyDescriptor = __webpack_require__(210);

var StringObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(StringObject, _EasyObjectValue);

	function StringObject() {
		(0, _classCallCheck3.default)(this, StringObject);
		return (0, _possibleConstructorReturn3.default)(this, (StringObject.__proto__ || (0, _getPrototypeOf2.default)(StringObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(StringObject, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var asConstructor, len, pv, plen;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							asConstructor = ext && ext.asConstructor;

							if (asConstructor) {
								_context.next = 6;
								break;
							}

							if (!(args.length == 0)) {
								_context.next = 4;
								break;
							}

							return _context.abrupt('return', scope.realm.fromNative(''));

						case 4:
							return _context.delegateYield(args[0].toStringValue(), 't0', 5);

						case 5:
							return _context.abrupt('return', _context.t0);

						case 6:
							len = 0;

							if (!(args.length > 0)) {
								_context.next = 14;
								break;
							}

							return _context.delegateYield(args[0].toStringValue(), 't1', 9);

						case 9:
							pv = _context.t1;

							len = pv.native.length;
							thiz.primativeValue = pv;
							_context.next = 15;
							break;

						case 14:
							thiz.primativeValue = EasyObjectValue.emptyString;

						case 15:
							plen = new PropertyDescriptor(scope.realm.fromNative(len));

							plen.enumerable = false;
							plen.configurable = false;
							plen.writable = false;
							thiz.rawSetProperty('length', plen);
							return _context.abrupt('return', thiz);

						case 21:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.StringPrototype;
		}
	}, {
		key: 'constructorFor',
		value: function constructorFor(realm) {
			return realm.StringPrototype;
		}
	}], [{
		key: 'fromCharCode',
		value: /*#__PURE__*/_regenerator2.default.mark(function fromCharCode(thiz, args) {
			var argz, i;
			return _regenerator2.default.wrap(function fromCharCode$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							argz = new Array(args.length);
							i = 0;

						case 2:
							if (!(i < args.length)) {
								_context2.next = 8;
								break;
							}

							return _context2.delegateYield(args[i].toNumberValue(), 't0', 4);

						case 4:
							argz[i] = _context2.t0.toNative();

						case 5:
							++i;
							_context2.next = 2;
							break;

						case 8:
							return _context2.abrupt('return', this.fromNative(String.fromCharCode.apply(String, argz)));

						case 9:
						case 'end':
							return _context2.stop();
					}
				}
			}, fromCharCode, this);
		})
	}, {
		key: 'raw',
		value: /*#__PURE__*/_regenerator2.default.mark(function raw(thiz, args) {
			var raw, result, i;
			return _regenerator2.default.wrap(function raw$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.delegateYield(args[0].get('raw'), 't0', 1);

						case 1:
							raw = _context3.t0;
							return _context3.delegateYield(raw.get(0), 't1', 3);

						case 3:
							result = _context3.t1;
							i = 1;

						case 5:
							if (!(i < args.length)) {
								_context3.next = 16;
								break;
							}

							return _context3.delegateYield(result.add(args[i]), 't2', 7);

						case 7:
							result = _context3.t2;
							_context3.t3 = result;
							return _context3.delegateYield(raw.get(i), 't4', 10);

						case 10:
							_context3.t5 = _context3.t4;
							return _context3.delegateYield(_context3.t3.add.call(_context3.t3, _context3.t5), 't6', 12);

						case 12:
							result = _context3.t6;

						case 13:
							++i;
							_context3.next = 5;
							break;

						case 16:
							return _context3.abrupt('return', result);

						case 17:
						case 'end':
							return _context3.stop();
					}
				}
			}, raw, this);
		})
	}]);
	return StringObject;
}(EasyObjectValue);

module.exports = StringObject;

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(243);
var CompletionRecord = __webpack_require__(192);

var NumberObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(NumberObject, _EasyObjectValue);

	function NumberObject() {
		(0, _classCallCheck3.default)(this, NumberObject);
		return (0, _possibleConstructorReturn3.default)(this, (NumberObject.__proto__ || (0, _getPrototypeOf2.default)(NumberObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(NumberObject, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var asConstructor, pv;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							asConstructor = ext && ext.asConstructor;

							if (asConstructor) {
								_context.next = 6;
								break;
							}

							if (!(args.length < 1)) {
								_context.next = 4;
								break;
							}

							return _context.abrupt('return', EasyObjectValue.zero);

						case 4:
							return _context.delegateYield(args[0].toNumberValue(), 't0', 5);

						case 5:
							return _context.abrupt('return', _context.t0);

						case 6:
							pv = EasyObjectValue.zero;

							if (!(args.length > 0)) {
								_context.next = 10;
								break;
							}

							return _context.delegateYield(args[0].toNumberValue(), 't1', 9);

						case 9:
							pv = _context.t1;

						case 10:
							thiz.primativeValue = pv;

						case 11:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.NumberPrototype;
		}
	}, {
		key: 'constructorFor',
		value: function constructorFor(realm) {
			return realm.NumberPrototype;
		}
	}], [{
		key: 'MAX_VALUE$cew',
		get: function get() {
			return Number.MAX_VALUE;
		}
	}, {
		key: 'MIN_VALUE$cew',
		get: function get() {
			return Number.MIN_VALUE;
		}
	}, {
		key: 'POSITIVE_INFINITY$cew',
		get: function get() {
			return Number.POSITIVE_INFINITY;
		}
	}, {
		key: 'NEGATIVE_INFINITY$cew',
		get: function get() {
			return Number.NEGATIVE_INFINITY;
		}
	}, {
		key: 'NaN$cew',
		get: function get() {
			return EasyObjectValue.nan;
		}
	}]);
	return NumberObject;
}(EasyObjectValue);

NumberObject.prototype.wellKnownName = '%Number%';
module.exports = NumberObject;

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(211);
var EasyObjectValue = __webpack_require__(243);
var Value = __webpack_require__(152);

var BooleanPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(BooleanPrototype, _EasyObjectValue);

	function BooleanPrototype() {
		(0, _classCallCheck3.default)(this, BooleanPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (BooleanPrototype.__proto__ || (0, _getPrototypeOf2.default)(BooleanPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(BooleanPrototype, null, [{
		key: 'toString$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function toString$e(thiz, argz) {
			var pv;
			return _regenerator2.default.wrap(function toString$e$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							pv = thiz;

							if (thiz.specTypeName !== 'boolean') {
								pv = thiz.primativeValue;
							}

							if (!pv.truthy) {
								_context.next = 6;
								break;
							}

							return _context.abrupt('return', Value.fromNative('true'));

						case 6:
							return _context.abrupt('return', Value.fromNative('false'));

						case 7:
						case 'end':
							return _context.stop();
					}
				}
			}, toString$e, this);
		})
	}, {
		key: 'valueOf$e',
		value: /*#__PURE__*/_regenerator2.default.mark(function valueOf$e(thiz) {
			var pv;
			return _regenerator2.default.wrap(function valueOf$e$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(thiz.specTypeName === 'boolean')) {
								_context2.next = 2;
								break;
							}

							return _context2.abrupt('return', thiz);

						case 2:
							if (!(thiz.specTypeName === 'object')) {
								_context2.next = 6;
								break;
							}

							pv = thiz.primativeValue;

							if (!(pv.specTypeName === 'boolean')) {
								_context2.next = 6;
								break;
							}

							return _context2.abrupt('return', pv);

						case 6:
							throw new TypeError('Couldnt get there.');

						case 7:
						case 'end':
							return _context2.stop();
					}
				}
			}, valueOf$e, this);
		})
	}]);
	return BooleanPrototype;
}(EasyObjectValue);

module.exports = BooleanPrototype;

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var EasyObjectValue = __webpack_require__(243);

var Boolean = function (_EasyObjectValue) {
	(0, _inherits3.default)(Boolean, _EasyObjectValue);

	function Boolean() {
		(0, _classCallCheck3.default)(this, Boolean);
		return (0, _possibleConstructorReturn3.default)(this, (Boolean.__proto__ || (0, _getPrototypeOf2.default)(Boolean)).apply(this, arguments));
	}

	(0, _createClass3.default)(Boolean, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var asConstructor, pv;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							asConstructor = ext && ext.asConstructor;

							if (asConstructor) {
								_context.next = 5;
								break;
							}

							if (!(args.length < 1)) {
								_context.next = 4;
								break;
							}

							return _context.abrupt('return', Value.false);

						case 4:
							return _context.abrupt('return', args[0].truthy ? Value.true : Value.false);

						case 5:
							if (args.length > 0) {
								pv = args[0].truthy ? Value.true : Value.false;

								thiz.primativeValue = pv;
							} else {
								thiz.primativeValue = false;
							}

						case 6:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.BooleanPrototype;
		}
	}, {
		key: 'constructorFor',
		value: function constructorFor(realm) {
			return realm.BooleanPrototype;
		}
	}]);
	return Boolean;
}(EasyObjectValue);

module.exports = Boolean;

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/_regenerator2.default.mark(toRegexp);

var Value = __webpack_require__(152);
var ArrayValue = __webpack_require__(225);

var CompletionRecord = __webpack_require__(192);

var EasyObjectValue = __webpack_require__(243);
var _g = __webpack_require__(193);

function toRegexp(x, realm) {
	return _regenerator2.default.wrap(function toRegexp$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (x.regexp) {
						_context.next = 4;
						break;
					}

					_context.next = 3;
					return CompletionRecord.makeTypeError(realm, 'Calling regex method on non regex.');

				case 3:
					return _context.abrupt('return', _context.sent);

				case 4:
					return _context.abrupt('return', x.regexp);

				case 5:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

var RegExpProtoype = function (_EasyObjectValue) {
	(0, _inherits3.default)(RegExpProtoype, _EasyObjectValue);

	function RegExpProtoype(realm) {
		(0, _classCallCheck3.default)(this, RegExpProtoype);

		var _this = (0, _possibleConstructorReturn3.default)(this, (RegExpProtoype.__proto__ || (0, _getPrototypeOf2.default)(RegExpProtoype)).call(this, realm));

		_this.regexp = new RegExp();
		return _this;
	}

	(0, _createClass3.default)(RegExpProtoype, null, [{
		key: 'test',
		value: /*#__PURE__*/_regenerator2.default.mark(function test(thiz, args, s) {
			var rx, str;
			return _regenerator2.default.wrap(function test$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

						case 1:
							rx = _context2.t0;
							str = undefined;

							if (!(args.length > 0)) {
								_context2.next = 6;
								break;
							}

							return _context2.delegateYield(args[0].toStringNative(), 't1', 5);

						case 5:
							str = _context2.t1;

						case 6:
							return _context2.abrupt('return', this.fromNative(rx.test(str)));

						case 7:
						case 'end':
							return _context2.stop();
					}
				}
			}, test, this);
		})
	}, {
		key: 'exec',
		value: /*#__PURE__*/_regenerator2.default.mark(function exec(thiz, args, s) {
			var rx, li, str, result, wraped, out;
			return _regenerator2.default.wrap(function exec$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

						case 1:
							rx = _context4.t0;
							return _context4.delegateYield(thiz.get('lastIndex'), 't1', 3);

						case 3:
							li = _context4.t1;
							return _context4.delegateYield(li.toIntNative(), 't2', 5);

						case 5:
							li = _context4.t2;

							if (li < 0) li = 0; //Work around incorrect V8 behavior.
							rx.lastIndex = li;
							str = undefined;

							if (!(args.length > 0)) {
								_context4.next = 12;
								break;
							}

							return _context4.delegateYield(args[0].toStringNative(), 't3', 11);

						case 11:
							str = _context4.t3;

						case 12:
							result = rx.exec(str);
							return _context4.delegateYield(thiz.set('lastIndex', Value.fromNative(rx.lastIndex)), 't4', 14);

						case 14:
							if (!(result === null)) {
								_context4.next = 16;
								break;
							}

							return _context4.abrupt('return', Value.null);

						case 16:
							return _context4.delegateYield(_g.map(result, /*#__PURE__*/_regenerator2.default.mark(function _callee(c) {
								return _regenerator2.default.wrap(function _callee$(_context3) {
									while (1) {
										switch (_context3.prev = _context3.next) {
											case 0:
												return _context3.abrupt('return', Value.fromNative(c, s.realm));

											case 1:
											case 'end':
												return _context3.stop();
										}
									}
								}, _callee, this);
							})), 't5', 17);

						case 17:
							wraped = _context4.t5;
							out = ArrayValue.make(wraped, s.realm);
							return _context4.delegateYield(out.set('index', Value.fromNative(result.index)), 't6', 20);

						case 20:
							return _context4.delegateYield(out.set('input', Value.fromNative(result.input)), 't7', 21);

						case 21:
							return _context4.abrupt('return', out);

						case 22:
						case 'end':
							return _context4.stop();
					}
				}
			}, exec, this);
		})
	}, {
		key: 'compile',
		value: /*#__PURE__*/_regenerator2.default.mark(function compile(thiz, args, s) {
			var rv, regexp;
			return _regenerator2.default.wrap(function compile$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

						case 1:
							return _context5.delegateYield(s.realm.RegExp.call(Value.null, args, s), 't1', 2);

						case 2:
							rv = _context5.t1;
							regexp = rv.regexp;

							thiz.regexp = regexp;
							return _context5.delegateYield(thiz.set('source', Value.fromNative(regexp.source)), 't2', 6);

						case 6:
							return _context5.delegateYield(thiz.set('global', Value.fromNative(regexp.global)), 't3', 7);

						case 7:
							return _context5.delegateYield(thiz.set('ignoreCase', Value.fromNative(regexp.ignoreCase)), 't4', 8);

						case 8:
							return _context5.delegateYield(thiz.set('multiline', Value.fromNative(regexp.multiline)), 't5', 9);

						case 9:
							return _context5.delegateYield(thiz.set('lastIndex', Value.zero), 't6', 10);

						case 10:
							return _context5.abrupt('return', Value.undef);

						case 11:
						case 'end':
							return _context5.stop();
					}
				}
			}, compile, this);
		})
	}, {
		key: 'toString',
		value: /*#__PURE__*/_regenerator2.default.mark(function toString(thiz, args, s) {
			var rx;
			return _regenerator2.default.wrap(function toString$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

						case 1:
							rx = _context6.t0;
							return _context6.abrupt('return', Value.fromNative(rx.toString()));

						case 3:
						case 'end':
							return _context6.stop();
					}
				}
			}, toString, this);
		})
	}, {
		key: 'source$cw',
		get: function get() {
			return Value.fromNative('(?:)');
		}
	}, {
		key: 'global$cw',
		get: function get() {
			return Value.fromNative(false);
		}
	}, {
		key: 'ignoreCase$cw',
		get: function get() {
			return Value.fromNative(false);
		}
	}, {
		key: 'multiline$cw',
		get: function get() {
			return Value.fromNative(false);
		}
	}, {
		key: 'lastIndex',
		get: function get() {
			return Value.fromNative(0);
		}
	}]);
	return RegExpProtoype;
}(EasyObjectValue);

RegExpProtoype.prototype.wellKnownName = '%RegExpProtoype%';
RegExpProtoype.prototype.clazz = 'RegExp';

module.exports = RegExpProtoype;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var CompletionRecord = __webpack_require__(192);

var EasyObjectValue = __webpack_require__(243);
var RegExpValue = __webpack_require__(228);

var RegExpObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(RegExpObject, _EasyObjectValue);

	function RegExpObject() {
		(0, _classCallCheck3.default)(this, RegExpObject);
		return (0, _possibleConstructorReturn3.default)(this, (RegExpObject.__proto__ || (0, _getPrototypeOf2.default)(RegExpObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(RegExpObject, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, s) {
			var pattern, flags, rx;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							pattern = '';
							flags = '';

							if (!(args.length > 0 && args[0] instanceof RegExpValue)) {
								_context.next = 8;
								break;
							}

							if (!(args.length > 1 && args[1].truthy)) {
								_context.next = 7;
								break;
							}

							_context.next = 6;
							return CompletionRecord.makeTypeError(s.realm, 'Cannot supply flags when constructing one RegExp from another');

						case 6:
							return _context.abrupt('return', _context.sent);

						case 7:
							return _context.abrupt('return', RegExpValue.make(new RegExp(args[0].regexp), s.realm));

						case 8:
							if (!(args.length > 0 && args[0].jsTypeName !== 'undefined')) {
								_context.next = 11;
								break;
							}

							return _context.delegateYield(args[0].toStringNative(), 't0', 10);

						case 10:
							pattern = _context.t0;

						case 11:
							if (!(args.length > 1 && args[1].jsTypeName !== 'undefined')) {
								_context.next = 14;
								break;
							}

							return _context.delegateYield(args[1].toStringNative(), 't1', 13);

						case 13:
							flags = _context.t1;

						case 14:
							rx = void 0;
							_context.prev = 15;

							rx = new RegExp(pattern, flags);
							_context.next = 24;
							break;

						case 19:
							_context.prev = 19;
							_context.t2 = _context['catch'](15);
							_context.next = 23;
							return new CompletionRecord(CompletionRecord.THROW, Value.fromNative(_context.t2, s.realm));

						case 23:
							return _context.abrupt('return', _context.sent);

						case 24:
							return _context.abrupt('return', RegExpValue.make(rx, s.realm));

						case 25:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this, [[15, 19]]);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.RegExpPrototype;
		}
	}, {
		key: 'callLength',
		get: function get() {
			return 2;
		}
	}]);
	return RegExpObject;
}(EasyObjectValue);

RegExpObject.prototype.wellKnownName = '%RegExp%';

module.exports = RegExpObject;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(243);
var EasyNativeFunction = __webpack_require__(241);
var Value = __webpack_require__(152);

var EsperObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(EsperObject, _EasyObjectValue);

	function EsperObject() {
		(0, _classCallCheck3.default)(this, EsperObject);
		return (0, _possibleConstructorReturn3.default)(this, (EsperObject.__proto__ || (0, _getPrototypeOf2.default)(EsperObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(EsperObject, null, [{
		key: 'dump$cew',
		value: /*#__PURE__*/_regenerator2.default.mark(function dump$cew(thiz, args) {
			return _regenerator2.default.wrap(function dump$cew$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							console.log('Esper#dump:', args);
							if (typeof window !== 'undefined') window.dumped = args[0];
							return _context.abrupt('return', Value.undef);

						case 3:
						case 'end':
							return _context.stop();
					}
				}
			}, dump$cew, this);
		})
	}, {
		key: 'str$cew',
		value: /*#__PURE__*/_regenerator2.default.mark(function str$cew(thiz, args) {
			var t;
			return _regenerator2.default.wrap(function str$cew$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							t = Value.undef;

							if (args.length > 0) t = args[0];
							return _context2.abrupt('return', this.fromNative(t.debugString));

						case 3:
						case 'end':
							return _context2.stop();
					}
				}
			}, str$cew, this);
		})
	}, {
		key: 'stack$cew',
		value: /*#__PURE__*/_regenerator2.default.mark(function stack$cew(thiz, args, scope, extra) {
			return _regenerator2.default.wrap(function stack$cew$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return', Value.fromNative(extra.evaluator.buildStacktrace().join('\n')));

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, stack$cew, this);
		})
	}, {
		key: 'globals$cew',
		value: /*#__PURE__*/_regenerator2.default.mark(function globals$cew(thiz, args, scope, extra) {
			return _regenerator2.default.wrap(function globals$cew$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', scope.global.object);

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, globals$cew, this);
		})
	}, {
		key: 'scope$cew',
		value: /*#__PURE__*/_regenerator2.default.mark(function scope$cew(thiz, args, scope, extra) {
			return _regenerator2.default.wrap(function scope$cew$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', scope.object);

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, scope$cew, this);
		})
	}]);
	return EsperObject;
}(EasyObjectValue);

module.exports = EsperObject;

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(243);
var ObjectValue = __webpack_require__(197);
var ArrayValue = __webpack_require__(225);
var PrimitiveValue = __webpack_require__(211);
var CompletionRecord = __webpack_require__(192);
var Value = __webpack_require__(152);

var ErrorPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(ErrorPrototype, _EasyObjectValue);

	function ErrorPrototype() {
		(0, _classCallCheck3.default)(this, ErrorPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (ErrorPrototype.__proto__ || (0, _getPrototypeOf2.default)(ErrorPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(ErrorPrototype, null, [{
		key: 'toString',
		value: /*#__PURE__*/_regenerator2.default.mark(function toString(thiz, argz, s) {
			var name, message;
			return _regenerator2.default.wrap(function toString$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.delegateYield(thiz.get('name'), 't0', 1);

						case 1:
							return _context.delegateYield(_context.t0.toStringNative(), 't1', 2);

						case 2:
							name = _context.t1;
							return _context.delegateYield(thiz.get('message'), 't2', 4);

						case 4:
							return _context.delegateYield(_context.t2.toStringNative(), 't3', 5);

						case 5:
							message = _context.t3;

							if (!(name && message)) {
								_context.next = 10;
								break;
							}

							return _context.abrupt('return', Value.fromNative(name + ': ' + message));

						case 10:
							if (!message) {
								_context.next = 14;
								break;
							}

							return _context.abrupt('return', Value.fromNative(message));

						case 14:
							return _context.abrupt('return', Value.fromNative(name));

						case 15:
						case 'end':
							return _context.stop();
					}
				}
			}, toString, this);
		})
	}, {
		key: 'message',
		get: function get() {
			return Value.emptyString;
		}
	}, {
		key: 'name$',
		get: function get() {
			return Value.fromNative('Error');
		}
	}]);
	return ErrorPrototype;
}(EasyObjectValue);

ErrorPrototype.prototype.wellKnownName = '%ErrorPrototype%';

module.exports = ErrorPrototype;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(243);
var ObjectValue = __webpack_require__(197);
var ArrayValue = __webpack_require__(225);
var PrimitiveValue = __webpack_require__(211);
var EmptyValue = __webpack_require__(221);
var ErrorValue = __webpack_require__(229);
var CompletionRecord = __webpack_require__(192);
var PropertyDescriptor = __webpack_require__(210);
var Value = __webpack_require__(152);

var ErrorObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(ErrorObject, _EasyObjectValue);

	function ErrorObject(realm) {
		(0, _classCallCheck3.default)(this, ErrorObject);

		var _this = (0, _possibleConstructorReturn3.default)(this, (ErrorObject.__proto__ || (0, _getPrototypeOf2.default)(ErrorObject)).call(this, realm));

		_this.realm = realm;
		return _this;
	}

	(0, _createClass3.default)(ErrorObject, [{
		key: 'makeOne',
		value: function makeOne() {
			var nue = new ErrorValue(this.realm);
			var p = this.properties['prototype'];
			if (p) nue.setPrototype(p.value);
			return nue;
		}
	}, {
		key: 'make',
		value: function make(message, name) {
			var nue = this.makeOne();
			if (message) {
				nue.setImmediate('message', Value.fromNative(message));
				nue.properties['message'].enumerable = false;
				nue.createNativeAnalog().message = message;
			}

			if (name) {
				nue.setImmediate('name', Value.fromNative(name));
				nue.properties['name'].enumerable = false;
				nue.createNativeAnalog().name = name;
			}

			return nue;
		}
	}, {
		key: 'makeFrom',
		value: function makeFrom(err) {
			var nue = this.makeOne();
			if (err.message) nue.setImmediate('message', Value.fromNative(err.message));
			if (err.name) nue.setImmediate('name', Value.fromNative(err.name));
			err.native = err;
			return nue;
		}
	}, {
		key: 'makeThisForNew',
		value: /*#__PURE__*/_regenerator2.default.mark(function makeThisForNew() {
			return _regenerator2.default.wrap(function makeThisForNew$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.abrupt('return', this.makeOne());

						case 1:
						case 'end':
							return _context.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}, {
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, s, ext) {
			var asConstructor;
			return _regenerator2.default.wrap(function call$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							asConstructor = ext && ext.asConstructor;

							if (!asConstructor) {
								thiz = this.makeOne();
							}

							if (!(args.length > 0)) {
								_context2.next = 4;
								break;
							}

							return _context2.delegateYield(thiz.set('message', args[0], s, { enumerable: false }), 't0', 4);

						case 4:
							if (!(args.length > 1)) {
								_context2.next = 6;
								break;
							}

							return _context2.delegateYield(thiz.set('fileName', args[1], s, { enumerable: false }), 't1', 6);

						case 6:
							if (!(args.length > 2)) {
								_context2.next = 8;
								break;
							}

							return _context2.delegateYield(thiz.set('lineNumber', args[2], s, { enumerable: false }), 't2', 8);

						case 8:
							return _context2.abrupt('return', thiz);

						case 9:
						case 'end':
							return _context2.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'makeErrorType',
		value: function makeErrorType(type) {
			var proto = new ObjectValue(this.realm);
			proto.setPrototype(this.realm.ErrorPrototype);
			proto.setImmediate('name', Value.fromNative(type.name));
			proto.properties.name.enumerable = false;
			proto.wellKnownName = '%' + type.name + 'Prototype%';
			proto.nativeClass = type;

			var obj = new ErrorObject(this.realm);
			obj.setPrototype(proto);
			obj.properties.prototype.value = proto;
			obj.wellKnownName = '%' + type.name + '%';
			proto.rawSetProperty('constructor', new PropertyDescriptor(obj, false));
			return obj;
		}
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.ErrorPrototype;
		}
	}]);
	return ErrorObject;
}(EasyObjectValue);

ErrorObject.prototype.wellKnownName = '%Error%';

module.exports = ErrorObject;

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var CompletionRecord = __webpack_require__(192);

var ObjectValue = __webpack_require__(197);

var AssertFunction = function (_ObjectValue) {
	(0, _inherits3.default)(AssertFunction, _ObjectValue);

	function AssertFunction() {
		(0, _classCallCheck3.default)(this, AssertFunction);
		return (0, _possibleConstructorReturn3.default)(this, (AssertFunction.__proto__ || (0, _getPrototypeOf2.default)(AssertFunction)).apply(this, arguments));
	}

	(0, _createClass3.default)(AssertFunction, [{
		key: 'rawCall',
		value: /*#__PURE__*/_regenerator2.default.mark(function rawCall(n, evalu, scope) {
			var args, why, check, left, right, i, err;
			return _regenerator2.default.wrap(function rawCall$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (!(n.arguments.length == 0)) {
								_context.next = 2;
								break;
							}

							return _context.abrupt('return', Value.undef);

						case 2:
							args = new Array(n.arguments.length);
							why = '';
							check = n.arguments[0];
							_context.t0 = check.type;
							_context.next = _context.t0 === 'BinaryExpression' ? 8 : 16;
							break;

						case 8:
							return _context.delegateYield(evalu.branch(check.left, scope), 't1', 9);

						case 9:
							left = _context.t1;
							return _context.delegateYield(evalu.branch(check.right, scope), 't2', 11);

						case 11:
							right = _context.t2;
							return _context.delegateYield(evalu.doBinaryEvaluation(check.operator, left, right, scope), 't3', 13);

						case 13:
							args[0] = _context.t3;

							why = n.arguments[0].srcName + ' (' + left.debugString + ' ' + check.operator + ' ' + right.debugString + ')';
							return _context.abrupt('break', 19);

						case 16:
							why = n.arguments[0].srcName || '???';
							return _context.delegateYield(evalu.branch(n.arguments[0], scope), 't4', 18);

						case 18:
							args[0] = _context.t4;

						case 19:
							i = 1;

						case 20:
							if (!(i < args.length)) {
								_context.next = 26;
								break;
							}

							return _context.delegateYield(evalu.branch(n.arguments[i], scope), 't5', 22);

						case 22:
							args[i] = _context.t5;

						case 23:
							++i;
							_context.next = 20;
							break;

						case 26:
							if (!args[0].truthy) {
								_context.next = 28;
								break;
							}

							return _context.abrupt('return', Value.undef);

						case 28:
							if (!(args.length > 1)) {
								_context.next = 31;
								break;
							}

							return _context.delegateYield(args[1].toStringNative(), 't6', 30);

						case 30:
							why = _context.t6;

						case 31:
							err = scope.realm.Error.make(why, 'AssertionError');
							return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, err));

						case 33:
						case 'end':
							return _context.stop();
					}
				}
			}, rawCall, this);
		})
	}, {
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var val, reason, err;
			return _regenerator2.default.wrap(function call$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							val = Value.undef;

							if (!(args.length > 0)) {
								_context2.next = 3;
								break;
							}

							return _context2.abrupt('return', Value.undef);

						case 3:
							if (!val.truthy) {
								_context2.next = 5;
								break;
							}

							return _context2.abrupt('return', Value.undef);

						case 5:
							reason = '';

							if (!(args.length > 1)) {
								_context2.next = 11;
								break;
							}

							return _context2.delegateYield(args[1].toStringValue(), 't0', 8);

						case 8:
							reason = _context2.t0.toNative();
							_context2.next = 12;
							break;

						case 11:
							if (ext.callNode && ext.callNode.arguments[0]) {
								reason = ext.callNode.arguments[0].srcName || '???';
							}

						case 12:
							err = scope.realm.Error.make(reason, 'AssertionError');
							return _context2.abrupt('return', new CompletionRecord(CompletionRecord.THROW, err));

						case 14:
						case 'end':
							return _context2.stop();
					}
				}
			}, call, this);
		})
	}]);
	return AssertFunction;
}(ObjectValue);

module.exports = AssertFunction;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(243);
var Value = __webpack_require__(152);

function makeNumber(num) {
	return 0 + num.toNative();
}

function wrapMathFunction(name) {
	var fn = Math[name];
	return (/*#__PURE__*/_regenerator2.default.mark(function _callee(thiz, args, realm) {
			var length, argz, i, result;
			return _regenerator2.default.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							length = args.length;
							argz = new Array(length);

							for (i = 0; i < length; ++i) {
								if (i < args.length) argz[i] = args[i].toNative();else argz[i] = undefined;
							}

							result = fn.apply(Math, argz);
							return _context.abrupt('return', Value.fromPrimativeNative(result));

						case 5:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, this);
		})
	);
}

var MathObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(MathObject, _EasyObjectValue);

	function MathObject() {
		(0, _classCallCheck3.default)(this, MathObject);
		return (0, _possibleConstructorReturn3.default)(this, (MathObject.__proto__ || (0, _getPrototypeOf2.default)(MathObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(MathObject, null, [{
		key: 'E$cew',
		get: function get() {
			return Math.E;
		}
	}, {
		key: 'LN10$cew',
		get: function get() {
			return Math.LN10;
		}
	}, {
		key: 'LN2$cew',
		get: function get() {
			return Math.LN2;
		}
	}, {
		key: 'LOG10E$cew',
		get: function get() {
			return Math.LOG10E;
		}
	}, {
		key: 'LOG2E$cew',
		get: function get() {
			return Math.LOG2E;
		}
	}, {
		key: 'PI$cew',
		get: function get() {
			return Math.PI;
		}
	}, {
		key: 'SQRT1_2$cew',
		get: function get() {
			return Math.SQRT1_2;
		}
	}, {
		key: 'SQRT2$cew',
		get: function get() {
			return Math.SQRT2;
		}
	}]);
	return MathObject;
}(EasyObjectValue);

MathObject.sqrt = wrapMathFunction('sqrt');
MathObject.atanh = wrapMathFunction('atanh');
MathObject.log2 = wrapMathFunction('log2');
MathObject.asinh = wrapMathFunction('asinh');
MathObject.log = wrapMathFunction('log');
MathObject.trunc = wrapMathFunction('trunc');
MathObject.max = wrapMathFunction('max');
MathObject.log10 = wrapMathFunction('log10');
MathObject.atan2 = wrapMathFunction('atan2');
MathObject.round = wrapMathFunction('round');
MathObject.exp = wrapMathFunction('exp');
MathObject.tan = wrapMathFunction('tan');
MathObject.floor = wrapMathFunction('floor');
MathObject.sign = wrapMathFunction('sign');
MathObject.fround = wrapMathFunction('fround');
MathObject.sin = wrapMathFunction('sin');
MathObject.tanh = wrapMathFunction('tanh');
MathObject.expm1 = wrapMathFunction('expm1');
MathObject.cbrt = wrapMathFunction('cbrt');
MathObject.cos = wrapMathFunction('cos');
MathObject.abs = wrapMathFunction('abs');
MathObject.acosh = wrapMathFunction('acosh');
MathObject.asin = wrapMathFunction('asin');
MathObject.ceil = wrapMathFunction('ceil');
MathObject.atan = wrapMathFunction('atan');
MathObject.cosh = wrapMathFunction('cosh');
MathObject.random = wrapMathFunction('random');
MathObject.log1p = wrapMathFunction('log1p');
MathObject.imul = wrapMathFunction('imul');
MathObject.hypot = wrapMathFunction('hypot');
MathObject.pow = wrapMathFunction('pow');
MathObject.sinh = wrapMathFunction('sinh');
MathObject.acos = wrapMathFunction('acos');
MathObject.min = wrapMathFunction('min');
MathObject.max = wrapMathFunction('max');

MathObject.prototype.clazz = 'Math';

module.exports = MathObject;

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/_regenerator2.default.mark(proxy);

var Value = __webpack_require__(152);
var CompletionRecord = __webpack_require__(192);

var EasyObjectValue = __webpack_require__(243);

function proxy(op, thiz, args, s) {
	var realm, printer, strings, i;
	return _regenerator2.default.wrap(function proxy$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					realm = s.realm;
					printer = realm.print;
					strings = new Array(args.length);
					i = 0;

				case 4:
					if (!(i < args.length)) {
						_context.next = 10;
						break;
					}

					return _context.delegateYield(args[i].toStringNative(), 't0', 6);

				case 6:
					strings[i] = _context.t0;

				case 7:
					++i;
					_context.next = 4;
					break;

				case 10:
					//console[op].apply(console, strings);
					printer.apply(realm, strings);
					return _context.abrupt('return', Value.undef);

				case 12:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

var Console = function (_EasyObjectValue) {
	(0, _inherits3.default)(Console, _EasyObjectValue);

	function Console() {
		(0, _classCallCheck3.default)(this, Console);
		return (0, _possibleConstructorReturn3.default)(this, (Console.__proto__ || (0, _getPrototypeOf2.default)(Console)).apply(this, arguments));
	}

	(0, _createClass3.default)(Console, null, [{
		key: 'log',
		value: /*#__PURE__*/_regenerator2.default.mark(function log(thiz, argz, s) {
			return _regenerator2.default.wrap(function log$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.delegateYield(proxy('log', thiz, argz, s), 't0', 1);

						case 1:
							return _context2.abrupt('return', _context2.t0);

						case 2:
						case 'end':
							return _context2.stop();
					}
				}
			}, log, this);
		})
	}, {
		key: 'info',
		value: /*#__PURE__*/_regenerator2.default.mark(function info(thiz, argz, s) {
			return _regenerator2.default.wrap(function info$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.delegateYield(proxy('info', thiz, argz, s), 't0', 1);

						case 1:
							return _context3.abrupt('return', _context3.t0);

						case 2:
						case 'end':
							return _context3.stop();
					}
				}
			}, info, this);
		})
	}, {
		key: 'warn',
		value: /*#__PURE__*/_regenerator2.default.mark(function warn(thiz, argz, s) {
			return _regenerator2.default.wrap(function warn$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.delegateYield(proxy('warn', thiz, argz, s), 't0', 1);

						case 1:
							return _context4.abrupt('return', _context4.t0);

						case 2:
						case 'end':
							return _context4.stop();
					}
				}
			}, warn, this);
		})
	}, {
		key: 'error',
		value: /*#__PURE__*/_regenerator2.default.mark(function error(thiz, argz, s) {
			return _regenerator2.default.wrap(function error$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.delegateYield(proxy('error', thiz, argz, s), 't0', 1);

						case 1:
							return _context5.abrupt('return', _context5.t0);

						case 2:
						case 'end':
							return _context5.stop();
					}
				}
			}, error, this);
		})
	}, {
		key: 'trace',
		value: /*#__PURE__*/_regenerator2.default.mark(function trace(thiz, argz, s) {
			return _regenerator2.default.wrap(function trace$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(proxy('trace', thiz, argz, s), 't0', 1);

						case 1:
							return _context6.abrupt('return', _context6.t0);

						case 2:
						case 'end':
							return _context6.stop();
					}
				}
			}, trace, this);
		})
	}]);
	return Console;
}(EasyObjectValue);

module.exports = Console;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _weakMap = __webpack_require__(178);

var _weakMap2 = _interopRequireDefault(_weakMap);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = __webpack_require__(68);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = __webpack_require__(148);

var _keys2 = _interopRequireDefault(_keys);

var _stringify = __webpack_require__(212);

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var EasyObjectValue = __webpack_require__(243);
var ObjectValue = __webpack_require__(197);
var PrimitiveValue = __webpack_require__(211);
var ArrayValue = __webpack_require__(225);
var CompletionRecord = __webpack_require__(192);

var JSONUtils = function () {
	function JSONUtils() {
		(0, _classCallCheck3.default)(this, JSONUtils);
	}

	(0, _createClass3.default)(JSONUtils, null, [{
		key: 'genJSONTokens',
		value: /*#__PURE__*/_regenerator2.default.mark(function genJSONTokens(arr, o, map, str, strincr) {
			var str2, length, i, m, first, _iterator, _isArray, _i, _ref, p, po, v;

			return _regenerator2.default.wrap(function genJSONTokens$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							str2 = str !== undefined ? str + strincr : undefined;

							if (!(o instanceof PrimitiveValue)) {
								_context.next = 3;
								break;
							}

							return _context.abrupt('return', arr.push((0, _stringify2.default)(o.native)));

						case 3:
							if (!map.has(o)) {
								_context.next = 5;
								break;
							}

							return _context.abrupt('return', arr.push('[Circular]'));

						case 5:
							map.set(o, true);

							if (!(o instanceof ArrayValue)) {
								_context.next = 31;
								break;
							}

							arr.push('[');
							return _context.delegateYield(o.get('length'), 't0', 9);

						case 9:
							return _context.delegateYield(_context.t0.toIntNative(), 't1', 10);

						case 10:
							length = _context.t1;
							i = 0;

						case 12:
							if (!(i < length)) {
								_context.next = 27;
								break;
							}

							if (i > 0) arr.push(',');
							if (str !== undefined) arr.push('\n');
							return _context.delegateYield(o.get(i), 't2', 16);

						case 16:
							m = _context.t2;

							if (str !== undefined) arr.push(str2);

							if (!m) {
								_context.next = 24;
								break;
							}

							if (!(m.jsTypeName == 'undefined')) {
								_context.next = 23;
								break;
							}

							arr.push('null');
							_context.next = 24;
							break;

						case 23:
							return _context.delegateYield(JSONUtils.genJSONTokens(arr, m, map, str2, strincr), 't3', 24);

						case 24:
							++i;
							_context.next = 12;
							break;

						case 27:
							if (str !== undefined) arr.push('\n');
							if (str !== undefined) arr.push(str);
							arr.push(']');
							return _context.abrupt('return');

						case 31:

							arr.push('{');

							first = true;
							_iterator = (0, _keys2.default)(o.properties), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

						case 34:
							if (!_isArray) {
								_context.next = 40;
								break;
							}

							if (!(_i >= _iterator.length)) {
								_context.next = 37;
								break;
							}

							return _context.abrupt('break', 59);

						case 37:
							_ref = _iterator[_i++];
							_context.next = 44;
							break;

						case 40:
							_i = _iterator.next();

							if (!_i.done) {
								_context.next = 43;
								break;
							}

							return _context.abrupt('break', 59);

						case 43:
							_ref = _i.value;

						case 44:
							p = _ref;
							po = o.properties[p];

							if (po.enumerable) {
								_context.next = 48;
								break;
							}

							return _context.abrupt('continue', 57);

						case 48:
							return _context.delegateYield(o.get(p), 't4', 49);

						case 49:
							v = _context.t4;

							if (!(v.jsTypeName === 'function')) {
								_context.next = 52;
								break;
							}

							return _context.abrupt('continue', 57);

						case 52:

							if (first) first = false;else arr.push(',');
							if (str !== undefined) arr.push('\n', str2);

							arr.push((0, _stringify2.default)(p), ':');
							if (str !== undefined) arr.push(' ');
							return _context.delegateYield(JSONUtils.genJSONTokens(arr, v, map, str2, strincr), 't5', 57);

						case 57:
							_context.next = 34;
							break;

						case 59:
							if (str !== undefined) arr.push('\n');
							arr.push('}');

						case 61:
						case 'end':
							return _context.stop();
					}
				}
			}, genJSONTokens, this);
		})
	}]);
	return JSONUtils;
}();

var JSONObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(JSONObject, _EasyObjectValue);

	function JSONObject() {
		(0, _classCallCheck3.default)(this, JSONObject);
		return (0, _possibleConstructorReturn3.default)(this, (JSONObject.__proto__ || (0, _getPrototypeOf2.default)(JSONObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(JSONObject, null, [{
		key: 'parse',
		value: /*#__PURE__*/_regenerator2.default.mark(function parse(thiz, args, s) {
			var str, out;
			return _regenerator2.default.wrap(function parse$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							str = Value.emptyString;

							if (!(args.length > 0)) {
								_context2.next = 4;
								break;
							}

							return _context2.delegateYield(args[0].toStringNative(), 't0', 3);

						case 3:
							str = _context2.t0;

						case 4:
							_context2.prev = 4;
							out = JSON.parse(str, function (k, o) {
								if (o === undefined) return Value.undef;
								if (o === null) return Value.null;

								var prim = Value.fromPrimativeNative(o);
								if (prim) return prim;

								if (Array.isArray(o)) {
									return ArrayValue.make(o, s.realm);
								}

								var v = new ObjectValue(s.realm);
								for (var p in o) {
									v.setImmediate(p, o[p]);
								}
								return v;
							});
							return _context2.abrupt('return', out);

						case 9:
							_context2.prev = 9;
							_context2.t1 = _context2['catch'](4);
							_context2.next = 13;
							return new CompletionRecord(CompletionRecord.THROW, Value.fromNative(_context2.t1, s.realm));

						case 13:
						case 'end':
							return _context2.stop();
					}
				}
			}, parse, this, [[4, 9]]);
		})
	}, {
		key: 'stringify',
		value: /*#__PURE__*/_regenerator2.default.mark(function stringify(thiz, args, s) {
			var arr, v, replacer, str, strincr, len;
			return _regenerator2.default.wrap(function stringify$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							arr = [];
							v = Value.undef;
							replacer = null;
							str = void 0;
							strincr = void 0;


							if (args.length > 0) v = args[0];
							if (args.length > 1) replacer = args[1];

							if (!(args.length > 2)) {
								_context3.next = 17;
								break;
							}

							str = '';

							if (!(args[2].jsTypeName === 'number')) {
								_context3.next = 15;
								break;
							}

							return _context3.delegateYield(args[2].toIntNative(), 't0', 11);

						case 11:
							len = _context3.t0;

							strincr = new Array(1 + len).join(' ');
							_context3.next = 17;
							break;

						case 15:
							return _context3.delegateYield(args[2].toStringNative(), 't1', 16);

						case 16:
							strincr = _context3.t1;

						case 17:
							if (!(v.jsTypeName === 'undefined')) {
								_context3.next = 19;
								break;
							}

							return _context3.abrupt('return', Value.undef);

						case 19:
							return _context3.delegateYield(JSONUtils.genJSONTokens(arr, v, new _weakMap2.default(), str, strincr), 't2', 20);

						case 20:
							return _context3.abrupt('return', Value.fromNative(arr.join('')));

						case 21:
						case 'end':
							return _context3.stop();
					}
				}
			}, stringify, this);
		})
	}]);
	return JSONObject;
}(EasyObjectValue);

module.exports = JSONObject;

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(152);
var ObjectValue = __webpack_require__(197);
var EasyObjectValue = __webpack_require__(243);
var CompletionRecord = __webpack_require__(192);

var ProxyClass = function (_ObjectValue) {
	(0, _inherits3.default)(ProxyClass, _ObjectValue);

	function ProxyClass() {
		(0, _classCallCheck3.default)(this, ProxyClass);
		return (0, _possibleConstructorReturn3.default)(this, (ProxyClass.__proto__ || (0, _getPrototypeOf2.default)(ProxyClass)).apply(this, arguments));
	}

	(0, _createClass3.default)(ProxyClass, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var asConstructor;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							asConstructor = ext && ext.asConstructor;

							if (asConstructor) {
								_context.next = 3;
								break;
							}

							return _context.abrupt('return', Value.fromNative(0));

						case 3:
							thiz.target = args[0];
							thiz.handler = args[1];
							thiz.realm = scope.realm;

						case 6:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'makeThisForNew',
		value: /*#__PURE__*/_regenerator2.default.mark(function makeThisForNew(realm) {
			return _regenerator2.default.wrap(function makeThisForNew$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.abrupt('return', new ProxyValue(realm));

						case 1:
						case 'end':
							return _context2.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}]);
	return ProxyClass;
}(ObjectValue);

var ProxyValue = function (_Value) {
	(0, _inherits3.default)(ProxyValue, _Value);

	function ProxyValue() {
		(0, _classCallCheck3.default)(this, ProxyValue);
		return (0, _possibleConstructorReturn3.default)(this, (ProxyValue.__proto__ || (0, _getPrototypeOf2.default)(ProxyValue)).apply(this, arguments));
	}

	(0, _createClass3.default)(ProxyValue, [{
		key: 'handlerImplemented',
		value: /*#__PURE__*/_regenerator2.default.mark(function handlerImplemented(w) {
			var en;
			return _regenerator2.default.wrap(function handlerImplemented$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.delegateYield(this.handler.inOperator(Value.fromNative(w)), 't0', 1);

						case 1:
							en = _context3.t0.toNative();
							return _context3.abrupt('return', !!en);

						case 3:
						case 'end':
							return _context3.stop();
					}
				}
			}, handlerImplemented, this);
		})
	}, {
		key: 'ref',
		value: function ref(name, ctxthis) {
			var _this3 = this;

			return {
				name: name,
				object: this,
				isVariable: false,
				del: function del() {
					return false;
				}, //Doesnt support being a generator yet.
				getValue: function getValue() {
					return _this3.get(name, s);
				},
				setValue: function setValue(to, s) {
					return this.object.set(this.name, to, s);
				}
			};
		}
	}, {
		key: 'invokeHandler',
		value: /*#__PURE__*/_regenerator2.default.mark(function invokeHandler(w, args) {
			var _this4 = this;

			var fn;
			return _regenerator2.default.wrap(function invokeHandler$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.delegateYield(this.handler.get(w), 't0', 1);

						case 1:
							fn = _context4.t0;
							return _context4.delegateYield(fn.call(Value.under, args.map(function (x) {
								return _this4.realm.fromNative(x);
							}), this.realm.globalScope), 't1', 3);

						case 3:
							return _context4.abrupt('return', _context4.t1);

						case 4:
						case 'end':
							return _context4.stop();
					}
				}
			}, invokeHandler, this);
		})
	}, {
		key: 'get',
		value: /*#__PURE__*/_regenerator2.default.mark(function get(name, realm, ctx) {
			return _regenerator2.default.wrap(function get$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.delegateYield(this.handlerImplemented('get'), 't0', 1);

						case 1:
							if (!_context5.t0) {
								_context5.next = 4;
								break;
							}

							return _context5.delegateYield(this.invokeHandler('get', [name]), 't1', 3);

						case 3:
							return _context5.abrupt('return', _context5.t1);

						case 4:
							return _context5.delegateYield(this.target.get(name, realm, ctx), 't2', 5);

						case 5:
							return _context5.abrupt('return', _context5.t2);

						case 6:
						case 'end':
							return _context5.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'set',
		value: /*#__PURE__*/_regenerator2.default.mark(function set(name, value, realm, ctx) {
			return _regenerator2.default.wrap(function set$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(this.handlerImplemented('set'), 't0', 1);

						case 1:
							if (!_context6.t0) {
								_context6.next = 4;
								break;
							}

							return _context6.delegateYield(this.invokeHandler('set', [name, value]), 't1', 3);

						case 3:
							return _context6.abrupt('return', _context6.t1);

						case 4:
							return _context6.delegateYield(this.target.set(name, value, realm, ctx), 't2', 5);

						case 5:
							return _context6.abrupt('return', _context6.t2);

						case 6:
						case 'end':
							return _context6.stop();
					}
				}
			}, set, this);
		})
	}, {
		key: 'inOperator',
		value: /*#__PURE__*/_regenerator2.default.mark(function inOperator(other) {
			return _regenerator2.default.wrap(function inOperator$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.delegateYield(this.handlerImplemented('has'), 't0', 1);

						case 1:
							if (!_context7.t0) {
								_context7.next = 4;
								break;
							}

							return _context7.delegateYield(this.invokeHandler('has', [other]), 't1', 3);

						case 3:
							return _context7.abrupt('return', _context7.t1);

						case 4:
							return _context7.delegateYield(this.target.inOperator(other, realm, ctx), 't2', 5);

						case 5:
							return _context7.abrupt('return', _context7.t2);

						case 6:
						case 'end':
							return _context7.stop();
					}
				}
			}, inOperator, this);
		})
	}, {
		key: 'delete',
		value: /*#__PURE__*/_regenerator2.default.mark(function _delete(name) {
			return _regenerator2.default.wrap(function _delete$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							return _context8.delegateYield(this.handlerImplemented('delete'), 't0', 1);

						case 1:
							if (!_context8.t0) {
								_context8.next = 4;
								break;
							}

							return _context8.delegateYield(this.invokeHandler('delete', [other]), 't1', 3);

						case 3:
							return _context8.abrupt('return', _context8.t1);

						case 4:
							return _context8.delegateYield(this.target.delete(other, realm, ctx), 't2', 5);

						case 5:
							return _context8.abrupt('return', _context8.t2);

						case 6:
						case 'end':
							return _context8.stop();
					}
				}
			}, _delete, this);
		})
	}, {
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var asConstructor, key;
			return _regenerator2.default.wrap(function call$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							asConstructor = ext && ext.asConstructor;
							key = 'apply';

							if (asConstructor) key = 'construct';
							return _context9.delegateYield(this.handlerImplemented(key), 't0', 4);

						case 4:
							if (!_context9.t0) {
								_context9.next = 7;
								break;
							}

							return _context9.delegateYield(this.invokeHandler(key, args), 't1', 6);

						case 6:
							return _context9.abrupt('return', _context9.t1);

						case 7:
							if (this.target.call) {
								_context9.next = 11;
								break;
							}

							return _context9.abrupt('return', CompletionRecord.makeTypeError(scope.realm, "Base object not invokeable."));

						case 11:
							return _context9.delegateYield(this.target.call(thiz, args, scope, ext), 't2', 12);

						case 12:
							return _context9.abrupt('return', _context9.t2);

						case 13:
						case 'end':
							return _context9.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'makeThisForNew',
		value: /*#__PURE__*/_regenerator2.default.mark(function makeThisForNew(realm) {
			return _regenerator2.default.wrap(function makeThisForNew$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							return _context10.abrupt('return', this.target.makeThisForNew(realm));

						case 1:
						case 'end':
							return _context10.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}, {
		key: 'toNative',
		value: function toNative() {
			return "[Proxy]";
		}
	}]);
	return ProxyValue;
}(Value);

module.exports = ProxyClass;

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _promise = __webpack_require__(121);

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EvaluatorInstruction = __webpack_require__(226);

var DefaultRuntime = function () {
	function DefaultRuntime() {
		(0, _classCallCheck3.default)(this, DefaultRuntime);
	}

	(0, _createClass3.default)(DefaultRuntime, [{
		key: 'time',
		value: /*#__PURE__*/_regenerator2.default.mark(function time() {
			return _regenerator2.default.wrap(function time$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.abrupt('return', Date());

						case 1:
						case 'end':
							return _context.stop();
					}
				}
			}, time, this);
		})
	}, {
		key: 'wait',
		value: /*#__PURE__*/_regenerator2.default.mark(function wait(time) {
			var ev;
			return _regenerator2.default.wrap(function wait$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							_context2.next = 2;
							return EvaluatorInstruction.getEvaluator;

						case 2:
							ev = _context2.sent;

							if (!ev.dispose) ev.dispose = [];
							return _context2.abrupt('return', new _promise2.default(function (res, rej) {
								var id = setTimeout(function () {
									return res();
								}, time);
								ev.dispose.push(function () {
									clearTimeout(id);
								});
							}));

						case 5:
						case 'end':
							return _context2.stop();
					}
				}
			}, wait, this);
		})
	}]);
	return DefaultRuntime;
}();

module.exports = DefaultRuntime;

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var esprima = __webpack_require__(60);

module.exports = {
	name: 'lang-javascript',
	esprima: esprima,
	parser: function parser(code, options) {
		options = options || {};
		var opts = { loc: true, range: true };
		if (options.inFunctionBody) {
			opts.tolerant = true;
			opts.allowReturnOutsideFunction = true;
		}

		var ast = esprima.parse(code, opts);
		var errors = [];
		if (ast.errors) {
			errors = ast.errors.filter(function (x) {
				if (options.inFunctionBody && x.message === 'Illegal return statement') return false;
			});
		}
		delete ast.errors;
		if (errors.length > 0) throw errors[0];
		return ast;
	}
};

/***/ }),
/* 270 */
/***/ (function(module) {

module.exports = {"name":"esper.js","version":"0.3.0-dev","description":"Esper javascript interperter.","main":"src/index.js","scripts":{"doc":"esdoc -c esdoc.json","lint":"jshint src --show-non-errors","test":"mocha","repl":"node contrib/cli.js -i","webpack":"webpack","demo":"esdoc -c esdoc.json && node contrib/examine-corpus.js && webpack && webpack --env.test && webpack --env.test --env.profile=modern && node contrib/ui.js","cover":"./node_modules/istanbul/lib/cli.js cover node_modules/.bin/_mocha -- --reporter dot","dev-server":"webpack-dev-server src/index.js --content-base contrib/ui","preinstall":"node contrib/install-plugin-deps.js","prepublish":"node contrib/build.js","style":"jscs src plugins/*/*.js test/*.js"},"bin":{"esper":"./contrib/cli.js"},"repository":{"type":"git","url":"git+ssh://git@github.com/codecombat/esper.js.git"},"keywords":["esper","javascript","interperter","ast","eval"],"author":"Rob Blanckaert","license":"MIT","bugs":{"url":"https://github.com/codecombat/esper.js/issues"},"homepage":"https://github.com/codecombat/esper.js#readme","files":["dist/esper.js","dist/esper.min.js","dist/esper.modern.js","src","plugins","contrib/cli.js","contrib/install-plugin-deps.js","plugin-list.js"],"devDependencies":{"babel-core":"^6.24.1","babel-loader":"^7.1.4","babel-plugin-check-es2015-constants":"^6.22.0","babel-plugin-transform-es2015-arrow-functions":"^6.22.0","babel-plugin-transform-es2015-block-scoped-functions":"^6.22.0","babel-plugin-transform-es2015-block-scoping":"^6.24.1","babel-plugin-transform-es2015-classes":"^6.24.1","babel-plugin-transform-es2015-computed-properties":"^6.24.1","babel-plugin-transform-es2015-destructuring":"^6.23.0","babel-plugin-transform-es2015-for-of":"^6.23.0","babel-plugin-transform-es2015-function-name":"^6.24.1","babel-plugin-transform-es2015-literals":"^6.22.0","babel-plugin-transform-es2015-modules-commonjs":"^6.24.1","babel-plugin-transform-es2015-object-super":"^6.24.1","babel-plugin-transform-es2015-parameters":"^6.24.1","babel-plugin-transform-es2015-shorthand-properties":"^6.24.1","babel-plugin-transform-es2015-spread":"^6.22.0","babel-plugin-transform-es2015-sticky-regex":"^6.24.1","babel-plugin-transform-es2015-template-literals":"^6.22.0","babel-plugin-transform-es2015-typeof-symbol":"^6.23.0","babel-plugin-transform-es2015-unicode-regex":"^6.24.1","babel-plugin-transform-regenerator":"^6.24.1","babel-plugin-transform-runtime":"^6.23.0","babel-polyfill":"^6.23.0","babel-regenerator-runtime":"^6.5.0","babel-register":"^6.24.1","babel-runtime":"^6.23.0","chai":"^3.5.0","core-js":"^2.4.1","esdoc":"^0.5.2","istanbul":"^1.0.0-alpha.2","jscs":"^3.0.7","lodash":"^4.17.4","lua2js":"^0.0.11","mocha":"^6.1.2","mocha-loader":"^2.0.1","raw-loader":"^0.5.1","webpack":"^4.12.0","webpack-cli":"^3.0.8","webpack-dev-server":"^3.1.4"},"dependencies":{"commander":"^2.9.0","esprima":"^3.1.3"}};

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./ast-css/index.js": 272,
	"./lang-coffeescript/index.js": 274,
	"./lang-lua/index.js": 285,
	"./lang-python/index.js": 291,
	"./pointers/index.js": 295
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 271;

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _stringify = __webpack_require__(212);

var _stringify2 = _interopRequireDefault(_stringify);

var _getIterator2 = __webpack_require__(68);

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var esper = __webpack_require__(63);
var csswhat = __webpack_require__(273);
var ASTNode = esper.ASTPreprocessor.ASTNode;

var debug = function debug() {};
//const debug = console.log.bind(console);


function tag(name) {
	switch (name.toLowerCase()) {
		case 'array':
		case 'arrayexpression':
			return 'ArrayExpression';
		case 'break':
		case 'breakstatement':
			return 'BreakStatement';
		case 'continue':
		case 'continuestatement':
			return 'ContinueStatement';
		case 'arrow':
		case 'arrowfunction':
			return 'ArrowFunctionExpression';
		case 'assign':
		case 'assignment':
		case 'assignmentexpression':
			return 'AssignmentExpression';
		case 'binop':
		case 'binary':
		case 'binaryexpression':
			return 'BinaryExpression';
		case 'block':
		case 'blockstatement':
			return 'BlockStatement';
		case 'call':
		case 'callexpression':
			return 'CallExpression';
		case 'class':
		case 'classdeclaration':
			return 'ClassDeclaration';
		case 'classex':
		case 'classexpression':
			return 'ClassExpression';
		case 'conditional':
		case 'conditionalexpression':
			return 'ConditionalExpression';
		case 'debugger':
		case 'debuggerstatement':
			return 'DebuggerStatement';
		case 'dowhile':
		case 'dowhilestatement':
			return 'DoWhileStatement';
		case 'empty':
		case 'emptystatement':
			return 'EmptyStatement';
		case 'expression':
		case 'exp':
		case 'expressionstatement':
			return 'ExpressionStatement';
		case 'for':
		case 'forstatement':
			return 'ForStatement';
		case 'forin':
		case 'forinstatement':
			return 'ForInStatement';
		case 'forof':
		case 'forofstatement':
			return 'ForOfStatement';
		case 'functiondeclaration':
			return 'FunctionDeclaration';
		case 'functionexpression':
			return 'FunctionExpression';
		case 'identifier':
			return 'Identifier';
		case 'if':
		case 'ifstatement':
			return 'IfStatement';
		case 'labeledstatement':
			return 'LabeledStatement';
		case 'literal':
		case 'value':
			return 'Literal';
		case 'logicalexpression':
			return 'LogicalExpression';
		case 'memberexpression':
		case 'member':
			return 'MemberExpression';
		case 'new':
		case 'newexpression':
			return 'NewExpression';
		case 'object':
		case 'objectexpression':
			return 'ObjectExpression';
		case 'program':
			return 'Program';
		case 'return':
		case 'returnstatement':
			return 'ReturnStatement';
		case 'sequence':
		case 'sequenceexpression':
			return 'SequenceExpression';
		case 'switch':
		case 'switchstatement':
			return 'SwitchStatement';
		case 'this':
		case 'thisexpression':
			return 'ThisExpression';
		case 'throw':
		case 'throwstatement':
			return 'ThrowStatement';
		case 'try':
		case 'trystatement':
			return 'TryStatement';
		case 'unaryexpression':
			return 'UnaryExpression';
		case 'updateexpression':
			return 'UpdateExpression';
		case 'variabledeclaration':
			return 'VariableDeclaration';
		case 'whilestatement':
		case 'while':
			return 'WhileStatement';
		case 'with':
		case 'withstatement':
			return 'WithStatement';
	}
}

function find(ast, selector, root) {
	var list;
	debug(selector);
	if (typeof selector === 'string') {
		list = csswhat(selector, { xmlMode: true });
		debug(list);
	} else {
		list = selector;
	}
	var matchers = list.map(compileRTL);
	var found = [];
	var cbs = {
		exit: function exit(n) {
			//console.log("EVAL", n);
			for (var i = 0; i < matchers.length; ++i) {
				var result = matchers[i](n, root);
				if (result !== false) found.push([n, result]);
			}
		}
	};
	var gen = esper.ASTPreprocessor.walker(ast, cbs);
	for (var _iterator = gen, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
		var _ref;

		if (_isArray) {
			if (_i >= _iterator.length) break;
			_ref = _iterator[_i++];
		} else {
			_i = _iterator.next();
			if (_i.done) break;
			_ref = _i.value;
		}

		var x = _ref;
	}
	return found;
}

function matches(m, selector, root) {

	var matches = find(m, selector, root);
	for (var i = 0; i < matches.length; ++i) {
		if (matches[i][1].indexOf(m) !== -1) {
			return true;
		}
	}
	return false;
}

function tagNames(n) {
	switch (n.toLowerCase()) {
		case 'loop':
			return ['WhileStatement', 'DoWhileStatement', 'ForStatement'];
		case 'breakable':
			return ['SwitchStatement', 'WhileStatement', 'DoWhileStatement', 'ForStatement'];
		case 'if':
			return ['IfStatement'];
		case 'function':
			return ['FunctionDeclaration', 'FunctionExpression', 'ArrowFunctionExpression'];
	}
	return [tag(n)];
}

function compileRTL(opts) {
	return function match(input, root) {
		var canidates = [{ n: input }];
		for (var i = opts.length - 1; i >= 0; --i) {
			var o = opts[i];
			//debug(canidates.map((m) => m ? m.type : 'F').join(','), "vs", o);
			var siblings;
			var adjlist;
			var list;

			(function () {
				switch (o.type) {
					case 'universal':
						break;
					case 'pseudo':
						if (o.name === 'downto') {
							var _list = tagNames(o.data);
							var _parents = [];
							canidates.map(function (c) {
								var m = c.n;
								while (m !== root && m.parent) {
									m = m.parent;
									if (_list.indexOf(m.type) !== -1) break;
									_parents.push({ n: m });
								}
							});
							canidates = _parents;
							debug('NT', _list);
							debug('DT!', canidates.map(function (s) {
								return s.n.type + '#' + s.n.loc.start.line;
							}));
							break;
						} else if (o.name == 'matches') {
							canidates = canidates.filter(function (c) {
								return matches(c.n, o.data, root);
							});
							break;
						} else if (o.name == 'has') {
							canidates = canidates.filter(function (c) {
								var matches = match(c.n, o.data, root);
								return matches.length > 0;
							});
							break;
						} else if (o.name == 'not') {
							canidates = canidates.filter(function (c) {
								return !matches(c.n, o.data, root);
							});
							break;
						} else {
							throw new Error('Unknown psudo selector:' + o.name);
						}
						break;
					case 'descendant':
						var parents = [];
						canidates.map(function (c) {
							var m = c.n;
							while (m !== root && m.parent) {
								m = m.parent;
								parents.push({ n: m, p: c.n });
							}
						});
						canidates = parents;
						break;
					case 'child':
						canidates = canidates.filter(function (c) {
							return c.n !== root && c.n.parent;
						}).map(function (c) {
							return { n: c.n.parent, p: c.n };
						});
						break;
					case 'parent':
						var parents2 = [];
						canidates.map(function (c) {
							var m = c.n;
							for (var k in m) {
								if (k === 'type') continue;
								if (k === 'parent') continue;
								if (k === 'visits') continue;
								if (k === 'dispatch') continue;
								if (k === 'loc') continue;
								if (k === 'range') continue;
								if (k === 'nodeID') continue;
								if (k === 'srcName') continue;

								if (m[k] instanceof ASTNode) {
									parents2.push({ n: m[k], p: m });
								}
							}
						});
						debug(canidates, parents2);
						canidates = parents2;
						break;
					case 'sibling':
						siblings = [];

						canidates.filter(function (c) {
							var m = c.n;
							var parent = m.parent;
							for (var key in parent) {
								if (!Array.isArray(parent[key])) continue;
								var idx = parent[key].indexOf(m);
								if (idx === -1) continue;
								for (var i = 0; i < idx; ++i) {
									if (parent[key][i] !== m) siblings.push({ n: parent[key][i] });
								}
								return;
							}
						});
						canidates = siblings;
						break;
					case 'adjacent':
						adjlist = [];

						canidates.filter(function (c) {
							var m = c.n;
							var parent = m.parent;
							for (var key in parent) {
								if (!Array.isArray(parent[key])) continue;
								var idx = parent[key].indexOf(m);
								if (idx == -1) continue;
								if (idx > 0) adjlist.push({ n: parent[key][idx - 1] });
								return;
							}
						});
						canidates = adjlist;
						break;
					case 'tag':
						list = tagNames(o.name);

						canidates = canidates.filter(function (c) {
							return list.indexOf(c.n.type) !== -1;
						});
						break;
					case 'attribute':
						if (o.name === 'class') {
							canidates = canidates.filter(function (c) {
								var test = c.n[o.value];
								if (!c.p) return !!test;
								if (Array.isArray(test)) return test.indexOf(c.p) !== -1;
								return test == c.p;
							});
							break;
						}
						canidates = canidates.filter(function (c) {
							var m = c.n;
							if (!(o.name in m)) return;
							var val = m[o.name];
							if (val.type && val.type === 'Identifier') val = val.name;else if (val.type && val.type === 'Literal') val = (0, _stringify2.default)(val.value);
							return o.value == val.toString();
						});
						break;
					default:
						throw new Error('Unknown CSS Selector Type: ' + o.type);
				}
			})();

			if (canidates.length > 0) {
				debug('MATCH@' + (0, _stringify2.default)(o));
				debug(canidates);
			} else {
				if (i < opts.length - 1) debug('FAIL@' + (0, _stringify2.default)(o));
				return false;
			}
		}
		debug('OK!', canidates.map(function (s) {
			return s.n.type + '#' + (s.n.loc ? s.n.loc.start.line : '?');
		}));
		return canidates.map(function (s) {
			return s.n;
		});
	};
}

function init(esper) {
	esper.ASTPreprocessor.prototype.find = function (sel) {
		return find(this.ast, sel).map(function (x) {
			return x[0];
		});
	};
	esper.ASTPreprocessor.ASTNode.prototype.find = function (sel) {
		return find(this, sel, null).map(function (x) {
			return x[0];
		});
	};
	esper.ASTPreprocessor.ASTNode.prototype.matches = function (sel) {
		return matches(this, sel, null);
	};
}

var plugin = module.exports = {
	name: 'ast-css',
	find: find,
	init: init
};

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = parse;

var re_name = /^(?:\\.|[\w\-\u00b0-\uFFFF])+/,
    re_escape = /\\([\da-f]{1,6}\s?|(\s)|.)/ig,
    //modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87
    re_attr = /^\s*((?:\\.|[\w\u00b0-\uFFFF\-])+)\s*(?:(\S?)=\s*(?:(['"])([^]*?)\3|(#?(?:\\.|[\w\u00b0-\uFFFF\-])*)|)|)\s*(i)?\]/;

var actionTypes = {
	__proto__: null,
	"undefined": "exists",
	"":  "equals",
	"~": "element",
	"^": "start",
	"$": "end",
	"*": "any",
	"!": "not",
	"|": "hyphen"
};

var simpleSelectors = {
	__proto__: null,
	">": "child",
	"<": "parent",
	"~": "sibling",
	"+": "adjacent"
};

var attribSelectors = {
	__proto__: null,
	"#": ["id", "equals"],
	".": ["class", "element"]
};

//pseudos, whose data-property is parsed as well
var unpackPseudos = {
	__proto__: null,
	"has": true,
	"not": true,
	"matches": true
};

var stripQuotesFromPseudos = {
	__proto__: null,
	"contains": true,
	"icontains": true
};

var quotes = {
	__proto__: null,
	"\"": true,
	"'": true
};

//unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L139
function funescape( _, escaped, escapedWhitespace ) {
	var high = "0x" + escaped - 0x10000;
	// NaN means non-codepoint
	// Support: Firefox
	// Workaround erroneous numeric interpretation of +"0x"
	return high !== high || escapedWhitespace ?
		escaped :
		// BMP codepoint
		high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
}

function unescapeCSS(str){
	return str.replace(re_escape, funescape);
}

function isWhitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function parse(selector, options){
	var subselects = [];

	selector = parseSelector(subselects, selector + "", options);

	if(selector !== ""){
		throw new SyntaxError("Unmatched selector: " + selector);
	}

	return subselects;
}

function parseSelector(subselects, selector, options){
	var tokens = [],
		sawWS = false,
		data, firstChar, name, quot;

	function getName(){
		var sub = selector.match(re_name)[0];
		selector = selector.substr(sub.length);
		return unescapeCSS(sub);
	}

	function stripWhitespace(start){
		while(isWhitespace(selector.charAt(start))) start++;
		selector = selector.substr(start);
	}

	function isEscaped(pos) {
		var slashCount = 0;

		while (selector.charAt(--pos) === "\\") slashCount++;
		return (slashCount & 1) === 1;
	}

	stripWhitespace(0);

	while(selector !== ""){
		firstChar = selector.charAt(0);

		if(isWhitespace(firstChar)){
			sawWS = true;
			stripWhitespace(1);
		} else if(firstChar in simpleSelectors){
			tokens.push({type: simpleSelectors[firstChar]});
			sawWS = false;

			stripWhitespace(1);
		} else if(firstChar === ","){
			if(tokens.length === 0){
				throw new SyntaxError("empty sub-selector");
			}
			subselects.push(tokens);
			tokens = [];
			sawWS = false;
			stripWhitespace(1);
		} else {
			if(sawWS){
				if(tokens.length > 0){
					tokens.push({type: "descendant"});
				}
				sawWS = false;
			}

			if(firstChar === "*"){
				selector = selector.substr(1);
				tokens.push({type: "universal"});
			} else if(firstChar in attribSelectors){
				selector = selector.substr(1);
				tokens.push({
					type: "attribute",
					name: attribSelectors[firstChar][0],
					action: attribSelectors[firstChar][1],
					value: getName(),
					ignoreCase: false
				});
			} else if(firstChar === "["){
				selector = selector.substr(1);
				data = selector.match(re_attr);
				if(!data){
					throw new SyntaxError("Malformed attribute selector: " + selector);
				}
				selector = selector.substr(data[0].length);
				name = unescapeCSS(data[1]);

				if(
					!options || (
						"lowerCaseAttributeNames" in options ?
							options.lowerCaseAttributeNames :
							!options.xmlMode
					)
				){
					name = name.toLowerCase();
				}

				tokens.push({
					type: "attribute",
					name: name,
					action: actionTypes[data[2]],
					value: unescapeCSS(data[4] || data[5] || ""),
					ignoreCase: !!data[6]
				});

			} else if(firstChar === ":"){
				if(selector.charAt(1) === ":"){
					selector = selector.substr(2);
					tokens.push({type: "pseudo-element", name: getName().toLowerCase()});
					continue;
				}

				selector = selector.substr(1);

				name = getName().toLowerCase();
				data = null;

				if(selector.charAt(0) === "("){
					if(name in unpackPseudos){
						quot = selector.charAt(1);
						var quoted = quot in quotes;

						selector = selector.substr(quoted + 1);

						data = [];
						selector = parseSelector(data, selector, options);

						if(quoted){
							if(selector.charAt(0) !== quot){
								throw new SyntaxError("unmatched quotes in :" + name);
							} else {
								selector = selector.substr(1);
							}
						}

						if(selector.charAt(0) !== ")"){
							throw new SyntaxError("missing closing parenthesis in :" + name + " " + selector);
						}

						selector = selector.substr(1);
					} else {
						var pos = 1, counter = 1;

						for(; counter > 0 && pos < selector.length; pos++){
							if(selector.charAt(pos) === "(" && !isEscaped(pos)) counter++;
							else if(selector.charAt(pos) === ")" && !isEscaped(pos)) counter--;
						}

						if(counter){
							throw new SyntaxError("parenthesis not matched");
						}

						data = selector.substr(1, pos - 2);
						selector = selector.substr(pos);

						if(name in stripQuotesFromPseudos){
							quot = data.charAt(0);

							if(quot === data.slice(-1) && quot in quotes){
								data = data.slice(1, -1);
							}

							data = unescapeCSS(data);
						}
					}
				}

				tokens.push({type: "pseudo", name: name, data: data});
			} else if(re_name.test(selector)){
				name = getName();

				if(!options || ("lowerCaseTags" in options ? options.lowerCaseTags : !options.xmlMode)){
					name = name.toLowerCase();
				}

				tokens.push({type: "tag", name: name});
			} else {
				if(tokens.length && tokens[tokens.length - 1].type === "descendant"){
					tokens.pop();
				}
				addToken(subselects, tokens);
				return selector;
			}
		}
	}

	addToken(subselects, tokens);

	return selector;
}

function addToken(subselects, tokens){
	if(subselects.length > 0 && tokens.length === 0){
		throw new SyntaxError("empty sub-selector");
	}

	subselects.push(tokens);
}


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Preprocessor = __webpack_require__(275).Preprocessor;
var Parser = __webpack_require__(281);
var Compiler = __webpack_require__(283).Compiler;
var CS = __webpack_require__(278);

function formatParserError(preprocessed, e) {
	var result = new SyntaxError('Syntax error on line ' + e.line + ' column ' + e.column + ': unexpected \'' + e.found + '\'');
	return result;
}

function cparse(coffee, opts) {
	var parsed, preprocessed;
	try {
		preprocessed = Preprocessor.process(coffee, { literate: false });
		parsed = Parser.parse(preprocessed, {
			raw: true,
			inputSource: coffee,
			startRule: opts.inFunctionBody ? 'block' : 'program'
		});
		return parsed;
	} catch (e) {
		if (!(e instanceof Parser.SyntaxError)) throw e;
		throw formatParserError(preprocessed, e);
	}
}

function ccompile(csAst, options) {
	return Compiler.compile(csAst, options).toBasicObject();
}

function parser(code, options) {
	options = options || {};
	var opts = { locations: true, ranges: true };
	var csast = cparse(code, options);
	if (options.inFunctionBody) {
		//Gota fake being inside a function to trigger return rewriting.
		csast = new CS.Program(new CS.Function([], csast));
	}
	//console.log(JSON.stringify(csast,null, ' '));
	var ast = ccompile(csast, { bare: true });
	//console.log(JSON.stringify(ast,null, ' '))
	if (options.inFunctionBody) {
		ast = ast.body[0].expression.body;
	}
	return ast;
}

var plugin = module.exports = {
	name: 'lang-coffeescript',
	parser: parser,
	init: function init(esper) {
		esper.languages.coffeescript = plugin;
	}
};

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 2.0.0-beta9-dev
var DEDENT, INDENT, pointToErrorLocation, Preprocessor, StringScanner, TERM, ws;
pointToErrorLocation = __webpack_require__(276).pointToErrorLocation;
StringScanner = __webpack_require__(280);
this.Preprocessor = Preprocessor = function () {
  ws = '\\t\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000\\uFEFF';
  INDENT = '\uEFEF';
  DEDENT = '\uEFFE';
  TERM = '\uEFFF';
  function Preprocessor(param$) {
    if (null == param$)
      param$ = {};
    this.options = param$;
    this.preprocessed = '';
    this.base = null;
    this.indents = [];
    this.context = [];
  }
  Preprocessor.process = function (input, options) {
    if (null == options)
      options = {};
    return new Preprocessor(options).process(input);
  };
  Preprocessor.prototype.err = function (c) {
    var columns, context, lines, token;
    token = function () {
      switch (c) {
      case INDENT:
        return 'INDENT';
      case DEDENT:
        return 'DEDENT';
      case TERM:
        return 'TERM';
      default:
        return '"' + c.replace(/"/g, '\\"') + '"';
      }
    }.call(this);
    lines = this.ss.str.substr(0, this.ss.pos).split(/\n/) || [''];
    columns = null != lines[lines.length - 1] ? lines[lines.length - 1].length : 0;
    context = pointToErrorLocation(this.ss.str, lines.length, columns);
    throw new Error('Unexpected ' + token + '\n' + context);
  };
  Preprocessor.prototype.peek = function () {
    if (this.context.length) {
      return this.context[this.context.length - 1];
    } else {
      return null;
    }
  };
  Preprocessor.prototype.observe = function (c) {
    var top;
    top = this.peek();
    switch (c) {
    case '"""':
    case "'''":
    case '"':
    case "'":
    case '###':
    case '`':
    case '///':
    case '/':
      if (top === c) {
        this.context.pop();
      } else {
        this.context.push(c);
      }
      break;
    case INDENT:
    case '#':
    case '#{':
    case '[':
    case '(':
    case '{':
    case '\\':
    case 'regexp-[':
    case 'regexp-(':
    case 'regexp-{':
    case 'heregexp-#':
    case 'heregexp-[':
    case 'heregexp-(':
    case 'heregexp-{':
      this.context.push(c);
      break;
    case DEDENT:
      if (!(top === INDENT))
        this.err(c);
      this.indents.pop();
      this.context.pop();
      break;
    case '\n':
      if (!(top === '#' || top === 'heregexp-#'))
        this.err(c);
      this.context.pop();
      break;
    case ']':
      if (!(top === '[' || top === 'regexp-[' || top === 'heregexp-['))
        this.err(c);
      this.context.pop();
      break;
    case ')':
      if (!(top === '(' || top === 'regexp-(' || top === 'heregexp-('))
        this.err(c);
      this.context.pop();
      break;
    case '}':
      if (!(top === '#{' || top === '{' || top === 'regexp-{' || top === 'heregexp-{'))
        this.err(c);
      this.context.pop();
      break;
    case 'end-\\':
      if (!(top === '\\'))
        this.err(c);
      this.context.pop();
      break;
    default:
      throw new Error('undefined token observed: ' + c);
    }
    return this.context;
  };
  Preprocessor.prototype.p = function (s) {
    if (null != s)
      this.preprocessed = '' + this.preprocessed + s;
    return s;
  };
  Preprocessor.prototype.scan = function (r) {
    return this.p(this.ss.scan(r));
  };
  Preprocessor.prototype.consumeIndentation = function () {
    var context, indent, indentIndex, lineLen, lines, message;
    if (this.ss.bol() || this.scan(new RegExp('(?:[' + ws + ']*\\n)+'))) {
      this.scan(new RegExp('(?:[' + ws + ']*(\\#\\#?(?!\\#)[^\\n]*)?\\n)+'));
      if (null != this.base) {
        if (!(this.ss.eos() || null != this.scan(this.base))) {
          throw new Error('inconsistent base indentation');
        }
      } else {
        this.base = new RegExp('' + this.scan(new RegExp('[' + ws + ']*')) + '');
      }
      indentIndex = 0;
      while (indentIndex < this.indents.length) {
        indent = this.indents[indentIndex];
        if (this.ss.check(new RegExp('' + indent + ''))) {
          this.scan(new RegExp('' + indent + ''));
        } else if (this.ss.eos() || this.ss.check(new RegExp('[^' + ws + ']'))) {
          --indentIndex;
          this.p('' + DEDENT + TERM);
          this.observe(DEDENT);
        } else {
          lines = this.ss.str.substr(0, this.ss.pos).split(/\n/) || [''];
          message = 'Syntax error on line ' + lines.length + ': indentation is ambiguous';
          lineLen = this.indents.reduce(function (l, r) {
            return l + r.length;
          }, 0);
          context = pointToErrorLocation(this.ss.str, lines.length, lineLen);
          throw new Error('' + message + '\n' + context);
        }
        ++indentIndex;
      }
      if (this.ss.check(new RegExp('[' + ws + ']+[^' + ws + '#]'))) {
        this.indents.push(this.scan(new RegExp('[' + ws + ']+')));
        this.p(INDENT);
        return this.observe(INDENT);
      }
    }
  };
  Preprocessor.prototype.introduceContext = function () {
    var impliedRegexp, lastChar, pos, spaceBefore, tok;
    if (tok = this.scan(/"""|'''|\/\/\/|###|["'`#[({\\]/)) {
      return this.observe(tok);
    } else if (tok = this.scan(/\//)) {
      pos = this.ss.position();
      if (pos > 1) {
        lastChar = this.ss.string()[pos - 2];
        spaceBefore = new RegExp('[' + ws + ']').test(lastChar);
        impliedRegexp = /[;,=><*%^&|[(+!~-]/.test(lastChar);
      }
      if (pos === 1 || impliedRegexp || spaceBefore && !this.ss.check(new RegExp('[' + ws + '=]')) && this.ss.check(/[^\r\n]*\//))
        return this.observe('/');
    }
  };
  Preprocessor.prototype.process = function (input) {
    var tok;
    if (this.options.literate)
      input = input.replace(/^( {0,3}\S)/gm, '    #$1');
    this.ss = new StringScanner(input);
    while (!this.ss.eos()) {
      switch (this.peek()) {
      case null:
      case INDENT:
        this.consumeIndentation();
        this.scan(/[^\n'"\\\/#`[(){}\]]+/);
        if (this.ss.check(/[})\]]/)) {
          while (this.peek() === INDENT) {
            this.p('' + DEDENT + TERM);
            this.observe(DEDENT);
          }
          this.observe(this.scan(/[})\]]/));
        } else {
          this.introduceContext();
        }
        break;
      case '#{':
      case '{':
        this.scan(/[^\n'"\\\/#`[({}]+/);
        if (tok = this.scan(/\}/)) {
          this.observe(tok);
        } else {
          this.consumeIndentation();
          this.introduceContext();
        }
        break;
      case '[':
        this.scan(/[^\n'"\\\/#`[({\]]+/);
        if (tok = this.scan(/\]/)) {
          this.observe(tok);
        } else {
          this.consumeIndentation();
          this.introduceContext();
        }
        break;
      case '(':
        this.scan(/[^\n'"\\\/#`[({)]+/);
        if (tok = this.scan(/\)/)) {
          this.observe(tok);
        } else {
          this.consumeIndentation();
          this.introduceContext();
        }
        break;
      case '\\':
        if (this.scan(/[\s\S]/))
          this.observe('end-\\');
        break;
      case '"""':
        this.scan(/(?:[^"#\\]+|""?(?!")|#(?!{)|\\.)+/);
        this.ss.scan(/\\\n/);
        if (tok = this.scan(/#{|"""/)) {
          this.observe(tok);
        } else if (tok = this.scan(/#{|"""/)) {
          this.observe(tok);
        }
        break;
      case '"':
        this.scan(/(?:[^"#\\]+|#(?!{)|\\.)+/);
        this.ss.scan(/\\\n/);
        if (tok = this.scan(/#{|"/))
          this.observe(tok);
        break;
      case "'''":
        this.scan(/(?:[^'\\]+|''?(?!')|\\.)+/);
        this.ss.scan(/\\\n/);
        if (tok = this.scan(/'''/))
          this.observe(tok);
        break;
      case "'":
        this.scan(/(?:[^'\\]+|\\.)+/);
        this.ss.scan(/\\\n/);
        if (tok = this.scan(/'/))
          this.observe(tok);
        break;
      case '###':
        this.scan(/(?:[^#]+|##?(?!#))+/);
        if (tok = this.scan(/###/))
          this.observe(tok);
        break;
      case '#':
        this.scan(/[^\n]+/);
        if (tok = this.scan(/\n/))
          this.observe(tok);
        break;
      case '`':
        this.scan(/[^`]+/);
        if (tok = this.scan(/`/))
          this.observe(tok);
        break;
      case '///':
        this.scan(/(?:[^[/#\\]+|\/\/?(?!\/)|\\.)+/);
        if (tok = this.scan(/#{|\/\/\/|\\/)) {
          this.observe(tok);
        } else if (this.ss.scan(/#/)) {
          this.observe('heregexp-#');
        } else if (tok = this.scan(/[\[]/)) {
          this.observe('heregexp-' + tok);
        }
        break;
      case 'heregexp-[':
        this.scan(/(?:[^\]\/\\]+|\/\/?(?!\/))+/);
        if (tok = this.scan(/[\]\\]|#{|\/\/\//))
          this.observe(tok);
        break;
      case 'heregexp-#':
        this.ss.scan(/(?:[^\n/]+|\/\/?(?!\/))+/);
        if (tok = this.scan(/\n|\/\/\//))
          this.observe(tok);
        break;
      case '/':
        this.scan(/[^[/\\]+/);
        if (tok = this.scan(/[\/\\]/)) {
          this.observe(tok);
        } else if (tok = this.scan(/\[/)) {
          this.observe('regexp-' + tok);
        }
        break;
      case 'regexp-[':
        this.scan(/[^\]\\]+/);
        if (tok = this.scan(/[\]\\]/))
          this.observe(tok);
      }
    }
    this.scan(new RegExp('[' + ws + '\\n]*$'));
    while (this.context.length) {
      switch (this.peek()) {
      case INDENT:
        this.p('' + DEDENT + TERM);
        this.observe(DEDENT);
        break;
      case '#':
        this.p('\n');
        this.observe('\n');
        break;
      default:
        throw new Error('Unclosed "' + this.peek().replace(/"/g, '\\"') + '" at EOF');
      }
    }
    return this.preprocessed;
  };
  return Preprocessor;
}();


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 2.0.0-beta9-dev
var beingDeclared, cache$, cleanMarkers, colourise, COLOURS, concat, concatMap, CS, difference, envEnrichments, envEnrichments_, foldl, humanReadable, map, nub, numberLines, pointToErrorLocation, SUPPORTS_COLOUR, usedAsExpression, usedAsExpression_;
cache$ = __webpack_require__(277);
concat = cache$.concat;
concatMap = cache$.concatMap;
difference = cache$.difference;
foldl = cache$.foldl;
map = cache$.map;
nub = cache$.nub;
CS = __webpack_require__(278);
COLOURS = {
  red: '\x1B[31m',
  green: '\x1B[32m',
  yellow: '\x1B[33m',
  blue: '\x1B[34m',
  magenta: '\x1B[35m',
  cyan: '\x1B[36m'
};
SUPPORTS_COLOUR = ('undefined' !== typeof process && null != process && null != process.stderr ? process.stderr.isTTY : void 0) && !process.env.NODE_DISABLE_COLORS;
colourise = function (colour, str) {
  if (SUPPORTS_COLOUR) {
    return '' + COLOURS[colour] + str + '\x1B[39m';
  } else {
    return str;
  }
};
this.numberLines = numberLines = function (input, startLine) {
  var currLine, i, line, lines, numbered, pad, padSize;
  if (null == startLine)
    startLine = 1;
  lines = input.split('\n');
  padSize = ('' + (lines.length + startLine - 1)).length;
  numbered = function (accum$) {
    for (var i$ = 0, length$ = lines.length; i$ < length$; ++i$) {
      line = lines[i$];
      i = i$;
      currLine = '' + (i + startLine);
      pad = Array(padSize + 1).join('0').slice(currLine.length);
      accum$.push('' + pad + currLine + ' : ' + lines[i]);
    }
    return accum$;
  }.call(this, []);
  return numbered.join('\n');
};
cleanMarkers = function (str) {
  return str.replace(/[\uEFEF\uEFFE\uEFFF]/g, '');
};
this.humanReadable = humanReadable = function (str) {
  return str.replace(/\uEFEF/g, '(INDENT)').replace(/\uEFFE/g, '(DEDENT)').replace(/\uEFFF/g, '(TERM)');
};
this.formatParserError = function (input, e) {
  var found, message, realColumn, unicode;
  realColumn = cleanMarkers(('' + input.split('\n')[e.line - 1] + '\n').slice(0, e.column)).length;
  if (!(null != e.found))
    return 'Syntax error on line ' + e.line + ', column ' + realColumn + ': unexpected end of input';
  found = JSON.stringify(humanReadable(e.found));
  found = found.replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"');
  unicode = e.found.charCodeAt(0).toString(16).toUpperCase();
  unicode = '\\u' + '0000'.slice(unicode.length) + unicode;
  message = 'Syntax error on line ' + e.line + ', column ' + realColumn + ": unexpected '" + found + "' (" + unicode + ')';
  return '' + message + '\n' + pointToErrorLocation(input, e.line, realColumn);
};
this.pointToErrorLocation = pointToErrorLocation = function (source, line, column, numLinesOfContext) {
  var currentLineOffset, lines, numberedLines, padSize, postLines, preLines, startLine;
  if (null == numLinesOfContext)
    numLinesOfContext = 3;
  lines = source.split('\n');
  if (!lines[lines.length - 1])
    lines.pop();
  currentLineOffset = line - 1;
  startLine = currentLineOffset - numLinesOfContext;
  if (startLine < 0)
    startLine = 0;
  preLines = lines.slice(startLine, +currentLineOffset + 1 || 9e9);
  preLines[preLines.length - 1] = colourise('yellow', preLines[preLines.length - 1]);
  postLines = lines.slice(currentLineOffset + 1, +(currentLineOffset + numLinesOfContext) + 1 || 9e9);
  numberedLines = numberLines(cleanMarkers([].slice.call(preLines).concat([].slice.call(postLines)).join('\n')), startLine + 1).split('\n');
  preLines = numberedLines.slice(0, preLines.length);
  postLines = numberedLines.slice(preLines.length);
  column = cleanMarkers(('' + lines[currentLineOffset] + '\n').slice(0, column)).length;
  padSize = (currentLineOffset + 1 + postLines.length).toString(10).length;
  return [].slice.call(preLines).concat(['' + colourise('red', Array(padSize + 1).join('^')) + ' : ' + Array(column).join(' ') + colourise('red', '^')], [].slice.call(postLines)).join('\n');
};
this.beingDeclared = beingDeclared = function (assignment) {
  switch (false) {
  case !!(null != assignment):
    return [];
  case !assignment['instanceof'](CS.Identifiers):
    return [assignment.data];
  case !assignment['instanceof'](CS.Rest):
    return beingDeclared(assignment.expression);
  case !assignment['instanceof'](CS.MemberAccessOps):
    return [];
  case !assignment['instanceof'](CS.DefaultParam):
    return beingDeclared(assignment.param);
  case !assignment['instanceof'](CS.ArrayInitialiser):
    return concatMap(assignment.members, beingDeclared);
  case !assignment['instanceof'](CS.ObjectInitialiser):
    return concatMap(assignment.vals(), beingDeclared);
  default:
    throw new Error('beingDeclared: Non-exhaustive patterns in case: ' + assignment.className);
  }
};
this.declarationsFor = function (node, inScope) {
  var vars;
  vars = envEnrichments(node, inScope);
  return foldl(new CS.Undefined().g(), vars, function (expr, v) {
    return new CS.AssignOp(new CS.Identifier(v).g(), expr).g();
  });
};
usedAsExpression_ = function (ancestors) {
  var grandparent, parent;
  parent = ancestors[0];
  grandparent = ancestors[1];
  switch (false) {
  case !!(null != parent):
    return true;
  case !parent['instanceof'](CS.Program, CS.Class):
    return false;
  case !parent['instanceof'](CS.SeqOp):
    return this === parent.right && usedAsExpression(parent, ancestors.slice(1));
  case !(parent['instanceof'](CS.Block) && parent.statements.indexOf(this) !== parent.statements.length - 1):
    return false;
  case !(parent['instanceof'](CS.Functions) && parent.body === this && null != grandparent && grandparent['instanceof'](CS.Constructor)):
    return false;
  default:
    return true;
  }
};
this.usedAsExpression = usedAsExpression = function (node, ancestors) {
  return usedAsExpression_.call(node, ancestors);
};
envEnrichments_ = function (inScope) {
  var possibilities;
  if (null == inScope)
    inScope = [];
  possibilities = nub(function () {
    switch (false) {
    case !this['instanceof'](CS.AssignOp):
      return concat([
        beingDeclared(this.assignee),
        envEnrichments(this.expression)
      ]);
    case !this['instanceof'](CS.Class):
      return concat([
        beingDeclared(this.nameAssignee),
        envEnrichments(this.parent)
      ]);
    case !this['instanceof'](CS.ForIn, CS.ForOf):
      return concat([
        beingDeclared(this.keyAssignee),
        beingDeclared(this.valAssignee),
        envEnrichments(this.target),
        envEnrichments(this.step),
        envEnrichments(this.filter),
        envEnrichments(this.body)
      ]);
    case !this['instanceof'](CS.Try):
      return concat([
        beingDeclared(this.catchAssignee),
        envEnrichments(this.body),
        envEnrichments(this.catchBody),
        envEnrichments(this.finallyBody)
      ]);
    case !this['instanceof'](CS.Functions):
      return [];
    default:
      return concatMap(this.childNodes, function (this$) {
        return function (child) {
          if (in$(child, this$.listMembers)) {
            return concatMap(this$[child], function (m) {
              return envEnrichments(m, inScope);
            });
          } else {
            return envEnrichments(this$[child], inScope);
          }
        };
      }(this));
    }
  }.call(this));
  return difference(possibilities, inScope);
};
this.envEnrichments = envEnrichments = function (node) {
  var args;
  args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
  if (null != node) {
    return envEnrichments_.apply(node, args);
  } else {
    return [];
  }
};
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(14)))

/***/ }),
/* 277 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 2.0.0-beta9-dev
var concat, foldl, map, nub, span;
this.any = function (list, fn) {
  var e;
  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
    e = list[i$];
    if (fn(e))
      return true;
  }
  return false;
};
this.all = function (list, fn) {
  var e;
  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
    e = list[i$];
    if (!fn(e))
      return false;
  }
  return true;
};
this.foldl = foldl = function (memo, list, fn) {
  var i;
  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
    i = list[i$];
    memo = fn(memo, i);
  }
  return memo;
};
this.foldl1 = function (list, fn) {
  return foldl(list[0], list.slice(1), fn);
};
this.map = map = function (list, fn) {
  var e;
  return function (accum$) {
    for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
      e = list[i$];
      accum$.push(fn(e));
    }
    return accum$;
  }.call(this, []);
};
this.concat = concat = function (list) {
  var cache$;
  return (cache$ = []).concat.apply(cache$, [].slice.call(list));
};
this.concatMap = function (list, fn) {
  return concat(map(list, fn));
};
this.intersect = function (listA, listB) {
  var a;
  return function (accum$) {
    for (var i$ = 0, length$ = listA.length; i$ < length$; ++i$) {
      a = listA[i$];
      if (!in$(a, listB))
        continue;
      accum$.push(a);
    }
    return accum$;
  }.call(this, []);
};
this.difference = function (listA, listB) {
  var a;
  return function (accum$) {
    for (var i$ = 0, length$ = listA.length; i$ < length$; ++i$) {
      a = listA[i$];
      if (!!in$(a, listB))
        continue;
      accum$.push(a);
    }
    return accum$;
  }.call(this, []);
};
this.nub = nub = function (list) {
  var i, result;
  result = [];
  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
    i = list[i$];
    if (!!in$(i, result))
      continue;
    result.push(i);
  }
  return result;
};
this.union = function (listA, listB) {
  var b;
  return listA.concat(function (accum$) {
    for (var cache$ = nub(listB), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
      b = cache$[i$];
      if (!!in$(b, listA))
        continue;
      accum$.push(b);
    }
    return accum$;
  }.call(this, []));
};
this.flip = function (fn) {
  return function (b, a) {
    return fn.call(this, a, b);
  };
};
this.owns = function (hop) {
  return function (a, b) {
    return hop.call(a, b);
  };
}({}.hasOwnProperty);
this.span = span = function (list, f) {
  var cache$, ys, zs;
  if (list.length === 0) {
    return [
      [],
      []
    ];
  } else if (f(list[0])) {
    cache$ = span(list.slice(1), f);
    ys = cache$[0];
    zs = cache$[1];
    return [
      [list[0]].concat([].slice.call(ys)),
      zs
    ];
  } else {
    return [
      [],
      list
    ];
  }
};
this.divMod = function (a, b) {
  var c, div, mod;
  c = a % b;
  mod = c < 0 ? c + b : c;
  div = Math.floor(a / b);
  return [
    div,
    mod
  ];
};
this.partition = function (list, fn) {
  var item, result;
  result = [
    [],
    []
  ];
  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
    item = list[i$];
    result[+!fn(item)].push(item);
  }
  return result;
};
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {// Generated by CoffeeScript 2.0.0-beta9-dev
var ArrayInitialiser, Block, Bool, cache$, cache$1, Class, CompoundAssignOp, concat, concatMap, Conditional, createNodes, difference, exports, ForOf, FunctionApplications, Functions, GenSym, handleLists, handlePrimitives, HeregExp, Identifier, Identifiers, map, NegatedConditional, NewOp, Nodes, nub, ObjectInitialiser, Primitives, Range, RegExp, RegExps, Slice, StaticMemberAccessOps, Super, Switch, SwitchCase, union, While;
cache$ = __webpack_require__(277);
map = cache$.map;
concat = cache$.concat;
concatMap = cache$.concatMap;
difference = cache$.difference;
nub = cache$.nub;
union = cache$.union;
exports = null != ( true && null != module ? module.exports : void 0) ?  true && null != module ? module.exports : void 0 : this;
createNodes = function (subclasses, superclasses) {
  var className, specs;
  if (null == superclasses)
    superclasses = [];
  for (className in subclasses) {
    if (!isOwn$(subclasses, className))
      continue;
    specs = subclasses[className];
    (function (className) {
      var externalCtor$, isCategory, klass, params, superclass;
      superclass = null != superclasses[0] ? superclasses[0] : function () {
      };
      isCategory = 'undefined' !== typeof specs && null != specs && specs.length === 2;
      params = 'undefined' !== typeof specs && null != specs ? function () {
        switch (specs.length) {
        case 0:
          return [];
        case 1:
        case 2:
          return specs[0];
        }
      }.call(this) : null;
      if (null != params)
        params;
      else
        params = null != superclass.prototype.childNodes ? superclass.prototype.childNodes : [];
      klass = function (super$) {
        extends$(class$, super$);
        externalCtor$ = isCategory ? function () {
        } : function () {
          var i, param;
          for (var i$ = 0, length$ = params.length; i$ < length$; ++i$) {
            param = params[i$];
            i = i$;
            this[param] = arguments[i];
          }
          if (null != this.initialise)
            this.initialise.apply(this, arguments);
          return this;
        };
        function class$() {
          return externalCtor$.apply(this, arguments);
        }
        class$.prototype.className = className;
        class$.superclasses = superclasses;
        return class$;
      }(superclass);
      if (null != ('undefined' !== typeof specs && null != specs ? specs[0] : void 0))
        klass.prototype.childNodes = specs[0];
      if (isCategory)
        createNodes(specs[1], [klass].concat([].slice.call(superclasses)));
      return exports[className] = klass;
    }(className));
  }
};
createNodes({
  Nodes: [
    [],
    {
      BinOps: [
        [
          'left',
          'right'
        ],
        {
          AssignOps: [
            [
              'assignee',
              'expression'
            ],
            {
              AssignOp: null,
              ClassProtoAssignOp: null,
              CompoundAssignOp: [[
                  'op',
                  'assignee',
                  'expression'
                ]]
            }
          ],
          BitOps: [
            null,
            {
              BitAndOp: null,
              BitOrOp: null,
              BitXorOp: null,
              LeftShiftOp: null,
              SignedRightShiftOp: null,
              UnsignedRightShiftOp: null
            }
          ],
          ComparisonOps: [
            null,
            {
              EQOp: null,
              GTEOp: null,
              GTOp: null,
              LTEOp: null,
              LTOp: null,
              NEQOp: null
            }
          ],
          ConcatOp: null,
          ExistsOp: null,
          ExtendsOp: null,
          InOp: null,
          InstanceofOp: null,
          LogicalOps: [
            null,
            {
              LogicalAndOp: null,
              LogicalOrOp: null
            }
          ],
          MathsOps: [
            null,
            {
              ExpOp: null,
              DivideOp: null,
              MultiplyOp: null,
              RemOp: null,
              SubtractOp: null
            }
          ],
          OfOp: null,
          PlusOp: null,
          Range: [[
              'isInclusive',
              'left',
              'right'
            ]],
          SeqOp: null
        }
      ],
      Statements: [
        [],
        {
          Break: null,
          Continue: null,
          Debugger: null,
          Return: [['expression']],
          Throw: [['expression']]
        }
      ],
      UnaryOps: [
        ['expression'],
        {
          BitNotOp: null,
          DeleteOp: null,
          DoOp: null,
          LogicalNotOp: null,
          NewOp: [[
              'ctor',
              'arguments'
            ]],
          PreDecrementOp: null,
          PreIncrementOp: null,
          PostDecrementOp: null,
          PostIncrementOp: null,
          TypeofOp: null,
          UnaryExistsOp: null,
          UnaryNegateOp: null,
          UnaryPlusOp: null
        }
      ],
      MemberAccessOps: [
        null,
        {
          StaticMemberAccessOps: [
            [
              'expression',
              'memberName'
            ],
            {
              MemberAccessOp: null,
              ProtoMemberAccessOp: null,
              SoakedMemberAccessOp: null,
              SoakedProtoMemberAccessOp: null
            }
          ],
          DynamicMemberAccessOps: [
            [
              'expression',
              'indexingExpr'
            ],
            {
              DynamicMemberAccessOp: null,
              DynamicProtoMemberAccessOp: null,
              SoakedDynamicMemberAccessOp: null,
              SoakedDynamicProtoMemberAccessOp: null
            }
          ]
        }
      ],
      ChainedComparisonOp: [['expression']],
      FunctionApplications: [
        [
          'function',
          'arguments'
        ],
        {
          FunctionApplication: null,
          SoakedFunctionApplication: null
        }
      ],
      Super: [['arguments']],
      Program: [['body']],
      Block: [['statements']],
      Conditional: [[
          'condition',
          'consequent',
          'alternate'
        ]],
      ForIn: [[
          'valAssignee',
          'keyAssignee',
          'target',
          'step',
          'filter',
          'body'
        ]],
      ForOf: [[
          'isOwn',
          'keyAssignee',
          'valAssignee',
          'target',
          'filter',
          'body'
        ]],
      Switch: [[
          'expression',
          'cases',
          'alternate'
        ]],
      SwitchCase: [[
          'conditions',
          'consequent'
        ]],
      Try: [[
          'body',
          'catchAssignee',
          'catchBody',
          'finallyBody'
        ]],
      While: [[
          'condition',
          'body'
        ]],
      ArrayInitialiser: [['members']],
      ObjectInitialiser: [['members']],
      ObjectInitialiserMember: [[
          'key',
          'expression'
        ]],
      Class: [[
          'nameAssignee',
          'parent',
          'ctor',
          'body',
          'boundMembers'
        ]],
      Constructor: [['expression']],
      Functions: [
        [
          'parameters',
          'body'
        ],
        {
          Function: null,
          BoundFunction: null
        }
      ],
      DefaultParam: [[
          'param',
          'default'
        ]],
      Identifiers: [
        ['data'],
        {
          Identifier: null,
          GenSym: null
        }
      ],
      Null: null,
      Primitives: [
        ['data'],
        {
          Bool: null,
          JavaScript: null,
          Numbers: [
            null,
            {
              Int: null,
              Float: null
            }
          ],
          String: null
        }
      ],
      RegExps: [
        null,
        {
          RegExp: [[
              'data',
              'flags'
            ]],
          HeregExp: [[
              'expression',
              'flags'
            ]]
        }
      ],
      This: null,
      Undefined: null,
      Slice: [[
          'expression',
          'isInclusive',
          'left',
          'right'
        ]],
      Rest: [['expression']],
      Spread: [['expression']]
    }
  ]
});
cache$1 = exports;
Nodes = cache$1.Nodes;
Primitives = cache$1.Primitives;
CompoundAssignOp = cache$1.CompoundAssignOp;
StaticMemberAccessOps = cache$1.StaticMemberAccessOps;
Range = cache$1.Range;
ArrayInitialiser = cache$1.ArrayInitialiser;
ObjectInitialiser = cache$1.ObjectInitialiser;
NegatedConditional = cache$1.NegatedConditional;
Conditional = cache$1.Conditional;
Identifier = cache$1.Identifier;
ForOf = cache$1.ForOf;
Functions = cache$1.Functions;
While = cache$1.While;
Class = cache$1.Class;
Block = cache$1.Block;
NewOp = cache$1.NewOp;
Bool = cache$1.Bool;
FunctionApplications = cache$1.FunctionApplications;
RegExps = cache$1.RegExps;
RegExp = cache$1.RegExp;
HeregExp = cache$1.HeregExp;
Super = cache$1.Super;
Slice = cache$1.Slice;
Switch = cache$1.Switch;
Identifiers = cache$1.Identifiers;
SwitchCase = cache$1.SwitchCase;
GenSym = cache$1.GenSym;
Nodes.fromBasicObject = function (obj) {
  return exports[obj.type].fromBasicObject(obj);
};
Nodes.prototype.listMembers = [];
Nodes.prototype.toBasicObject = function () {
  var child, obj, p;
  obj = { type: this.className };
  if (null != this.line)
    obj.line = this.line;
  if (null != this.column)
    obj.column = this.column;
  if (null != this.raw) {
    obj.raw = this.raw;
    if (null != this.offset)
      obj.range = [
        this.offset,
        this.offset + this.raw.length
      ];
  }
  for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {
    child = this.childNodes[i$];
    if (in$(child, this.listMembers)) {
      obj[child] = function (accum$) {
        for (var i$1 = 0, length$1 = this[child].length; i$1 < length$1; ++i$1) {
          p = this[child][i$1];
          accum$.push(p.toBasicObject());
        }
        return accum$;
      }.call(this, []);
    } else {
      obj[child] = null != this[child] ? this[child].toBasicObject() : void 0;
    }
  }
  return obj;
};
Nodes.prototype.fold = function (memo, fn) {
  var child, p;
  for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {
    child = this.childNodes[i$];
    if (in$(child, this.listMembers)) {
      memo = function (accum$) {
        for (var i$1 = 0, length$1 = this[child].length; i$1 < length$1; ++i$1) {
          p = this[child][i$1];
          accum$.push(p.fold(memo, fn));
        }
        return accum$;
      }.call(this, []);
    } else {
      memo = this[child].fold(memo, fn);
    }
  }
  return fn(memo, this);
};
Nodes.prototype.clone = function () {
  var ctor, k, n, v;
  ctor = function () {
  };
  ctor.prototype = this.constructor.prototype;
  n = new ctor;
  for (k in this) {
    if (!isOwn$(this, k))
      continue;
    v = this[k];
    n[k] = v;
  }
  return n;
};
Nodes.prototype['instanceof'] = function () {
  var ctor, ctors, superclasses;
  ctors = arguments.length > 0 ? [].slice.call(arguments, 0) : [];
  superclasses = map(this.constructor.superclasses, function (c) {
    return c.prototype.className;
  });
  for (var i$ = 0, length$ = ctors.length; i$ < length$; ++i$) {
    ctor = ctors[i$];
    if (!in$(ctor.prototype.className, [this.className].concat([].slice.call(superclasses))))
      continue;
    return true;
  }
  return false;
};
Nodes.prototype.r = function (param$) {
  this.raw = param$;
  return this;
};
Nodes.prototype.p = function (param$, param$1, param$2) {
  this.line = param$;
  this.column = param$1;
  this.offset = param$2;
  return this;
};
Nodes.prototype.generated = false;
Nodes.prototype.g = function () {
  this.generated = true;
  return this;
};
handlePrimitives = function (ctor) {
  var primitives;
  primitives = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
  ctor.prototype.childNodes = difference(ctor.prototype.childNodes, primitives);
  return ctor.prototype.toBasicObject = function () {
    var obj, primitive;
    obj = Nodes.prototype.toBasicObject.call(this);
    for (var i$ = 0, length$ = primitives.length; i$ < length$; ++i$) {
      primitive = primitives[i$];
      obj[primitive] = this[primitive];
    }
    return obj;
  };
};
handlePrimitives(Class, 'boundMembers');
handlePrimitives(CompoundAssignOp, 'op');
handlePrimitives(ForOf, 'isOwn');
handlePrimitives(HeregExp, 'flags');
handlePrimitives(Identifiers, 'data');
handlePrimitives(Primitives, 'data');
handlePrimitives(Range, 'isInclusive');
handlePrimitives(RegExp, 'data', 'flags');
handlePrimitives(Slice, 'isInclusive');
handlePrimitives(StaticMemberAccessOps, 'memberName');
handleLists = function (ctor) {
  var listProps;
  listProps = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
  return ctor.prototype.listMembers = listProps;
};
handleLists(ArrayInitialiser, 'members');
handleLists(Block, 'statements');
handleLists(Functions, 'parameters');
handleLists(FunctionApplications, 'arguments');
handleLists(NewOp, 'arguments');
handleLists(ObjectInitialiser, 'members');
handleLists(Super, 'arguments');
handleLists(Switch, 'cases');
handleLists(SwitchCase, 'conditions');
Block.wrap = function (s) {
  return new Block(null != s ? [s] : []).r(s.raw).p(s.line, s.column);
};
Class.prototype.initialise = function () {
  if (null != this.boundMembers)
    this.boundMembers;
  else
    this.boundMembers = [];
  this.name = new GenSym('class');
  if (null != this.nameAssignee)
    return this.name = function () {
      switch (false) {
      case !this.nameAssignee['instanceof'](Identifier):
        return new Identifier(this.nameAssignee.data);
      case !this.nameAssignee['instanceof'](StaticMemberAccessOps):
        return new Identifier(this.nameAssignee.memberName);
      default:
        return this.name;
      }
    }.call(this);
};
Class.prototype.childNodes.push('name');
ObjectInitialiser.prototype.keys = function () {
  return map(this.members, function (m) {
    return m.key;
  });
};
ObjectInitialiser.prototype.vals = function () {
  return map(this.members, function (m) {
    return m.expression;
  });
};
RegExps.prototype.initialise = function (_, flags) {
  var flag;
  this.flags = {};
  for (var cache$2 = [
        'g',
        'i',
        'm',
        'y'
      ], i$ = 0, length$ = cache$2.length; i$ < length$; ++i$) {
    flag = cache$2[i$];
    this.flags[flag] = in$(flag, flags);
  }
};
exports.NegatedConditional = function (super$) {
  extends$(NegatedConditional, super$);
  function NegatedConditional() {
    Conditional.apply(this, arguments);
  }
  return NegatedConditional;
}(Conditional);
exports.NegatedWhile = function (super$1) {
  extends$(NegatedWhile, super$1);
  function NegatedWhile() {
    While.apply(this, arguments);
  }
  return NegatedWhile;
}(While);
exports.Loop = function (super$2) {
  extends$(Loop, super$2);
  function Loop(body) {
    While.call(this, new Bool(true).g(), body);
  }
  return Loop;
}(While);
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
  for (var key in parent)
    if (isOwn$(parent, key))
      child[key] = parent[key];
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(279)(module)))

/***/ }),
/* 279 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 280 */
/***/ (function(module, exports) {

(function() {
  var StringScanner;
  StringScanner = (function() {
    function StringScanner(str) {
      this.str = str != null ? str : '';
      this.str = '' + this.str;
      this.pos = 0;
      this.lastMatch = {
        reset: function() {
          this.str = null;
          this.captures = [];
          return this;
        }
      }.reset();
      this;
    }
    StringScanner.prototype.bol = function() {
      return this.pos <= 0 || (this.str[this.pos - 1] === "\n");
    };
    StringScanner.prototype.captures = function() {
      return this.lastMatch.captures;
    };
    StringScanner.prototype.check = function(pattern) {
      var matches;
      if (this.str.substr(this.pos).search(pattern) !== 0) {
        this.lastMatch.reset();
        return null;
      }
      matches = this.str.substr(this.pos).match(pattern);
      this.lastMatch.str = matches[0];
      this.lastMatch.captures = matches.slice(1);
      return this.lastMatch.str;
    };
    StringScanner.prototype.checkUntil = function(pattern) {
      var matches, patternPos;
      patternPos = this.str.substr(this.pos).search(pattern);
      if (patternPos < 0) {
        this.lastMatch.reset();
        return null;
      }
      matches = this.str.substr(this.pos + patternPos).match(pattern);
      this.lastMatch.captures = matches.slice(1);
      return this.lastMatch.str = this.str.substr(this.pos, patternPos) + matches[0];
    };
    StringScanner.prototype.clone = function() {
      var clone, prop, value, _ref;
      clone = new this.constructor(this.str);
      clone.pos = this.pos;
      clone.lastMatch = {};
      _ref = this.lastMatch;
      for (prop in _ref) {
        value = _ref[prop];
        clone.lastMatch[prop] = value;
      }
      return clone;
    };
    StringScanner.prototype.concat = function(str) {
      this.str += str;
      return this;
    };
    StringScanner.prototype.eos = function() {
      return this.pos === this.str.length;
    };
    StringScanner.prototype.exists = function(pattern) {
      var matches, patternPos;
      patternPos = this.str.substr(this.pos).search(pattern);
      if (patternPos < 0) {
        this.lastMatch.reset();
        return null;
      }
      matches = this.str.substr(this.pos + patternPos).match(pattern);
      this.lastMatch.str = matches[0];
      this.lastMatch.captures = matches.slice(1);
      return patternPos;
    };
    StringScanner.prototype.getch = function() {
      return this.scan(/./);
    };
    StringScanner.prototype.match = function() {
      return this.lastMatch.str;
    };
    StringScanner.prototype.matches = function(pattern) {
      this.check(pattern);
      return this.matchSize();
    };
    StringScanner.prototype.matched = function() {
      return this.lastMatch.str != null;
    };
    StringScanner.prototype.matchSize = function() {
      if (this.matched()) {
        return this.match().length;
      } else {
        return null;
      }
    };
    StringScanner.prototype.peek = function(len) {
      return this.str.substr(this.pos, len);
    };
    StringScanner.prototype.pointer = function() {
      return this.pos;
    };
    StringScanner.prototype.setPointer = function(pos) {
      pos = +pos;
      if (pos < 0) {
        pos = 0;
      }
      if (pos > this.str.length) {
        pos = this.str.length;
      }
      return this.pos = pos;
    };
    StringScanner.prototype.reset = function() {
      this.lastMatch.reset();
      this.pos = 0;
      return this;
    };
    StringScanner.prototype.rest = function() {
      return this.str.substr(this.pos);
    };
    StringScanner.prototype.scan = function(pattern) {
      var chk;
      chk = this.check(pattern);
      if (chk != null) {
        this.pos += chk.length;
      }
      return chk;
    };
    StringScanner.prototype.scanUntil = function(pattern) {
      var chk;
      chk = this.checkUntil(pattern);
      if (chk != null) {
        this.pos += chk.length;
      }
      return chk;
    };
    StringScanner.prototype.skip = function(pattern) {
      this.scan(pattern);
      return this.matchSize();
    };
    StringScanner.prototype.skipUntil = function(pattern) {
      this.scanUntil(pattern);
      return this.matchSize();
    };
    StringScanner.prototype.string = function() {
      return this.str;
    };
    StringScanner.prototype.terminate = function() {
      this.pos = this.str.length;
      this.lastMatch.reset();
      return this;
    };
    StringScanner.prototype.toString = function() {
      return "#<StringScanner " + (this.eos() ? 'fin' : "" + this.pos + "/" + this.str.length + " @ " + (this.str.length > 8 ? "" + (this.str.substr(0, 5)) + "..." : this.str)) + ">";
    };
    return StringScanner;
  })();
  StringScanner.prototype.beginningOfLine = StringScanner.prototype.bol;
  StringScanner.prototype.clear = StringScanner.prototype.terminate;
  StringScanner.prototype.dup = StringScanner.prototype.clone;
  StringScanner.prototype.endOfString = StringScanner.prototype.eos;
  StringScanner.prototype.exist = StringScanner.prototype.exists;
  StringScanner.prototype.getChar = StringScanner.prototype.getch;
  StringScanner.prototype.position = StringScanner.prototype.pointer;
  StringScanner.StringScanner = StringScanner;
  module.exports = StringScanner;
}).call(this);


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { program: peg$parseprogram, block: peg$parseblock, statement: peg$parsestatement },
        peg$startRuleFunction  = peg$parseprogram,

        peg$c0 = peg$FAILED,
        peg$c1 = null,
        peg$c2 = function(leader, b) {return rp(new CS.Program(b));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c3 = [],
        peg$c4 = function(s) {return s;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c5 = function(s, ss) {return rp(new CS.Block([s].concat([].slice.call(ss))));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c6 = void 0,
        peg$c7 = ";",
        peg$c8 = { type: "literal", value: ";", description: "\";\"" },
        peg$c9 = function(e) {return e;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c10 = function(left, right) {if (!right)
          return left;
        return rp(new CS.SeqOp(left, right));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c11 = function(expr, postfixes) {return foldl(function (expr, postfixContainer) {
          var indicator, postfix;
          postfix = postfixContainer[1];
          indicator = postfix.type;
          switch (indicator) {
          case 'if':
            return rp(new CS.Conditional(postfix.cond, expr, null));
          case 'unless':
            return rp(new CS.NegatedConditional(new CS.LogicalNotOp(postfix.cond).g(), expr, null));
          case 'while':
            return rp(new CS.While(postfix.cond, expr));
          case 'until':
            return rp(new CS.NegatedWhile(new CS.LogicalNotOp(postfix.cond).g(), expr));
          case 'for-in':
            return rp(new CS.ForIn(postfix.val, postfix.key, postfix.list, postfix.step, postfix.filter, expr));
          case 'for-of':
            return rp(new CS.ForOf(postfix.own, postfix.key, postfix.val, postfix.obj, postfix.filter, expr));
          }
        }, expr, postfixes);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c12 = function(kw, e) {return {
          type: kw,
          cond: e
        };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c13 = ",",
        peg$c14 = { type: "literal", value: ",", description: "\",\"" },
        peg$c15 = function(a) {return a;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c16 = function(val, key) {return [
          val,
          key
        ];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c17 = function(valKey, list, step, filter) {var cache$, key, val;
        cache$ = null != valKey ? valKey : [
          null,
          null
        ];
        val = cache$[0];
        key = cache$[1];
        if (null != step)
          step;
        else
          step = new CS.Int(1).r('1').g();
        return {
          type: 'for-in',
          val: val,
          key: key,
          list: list,
          step: step,
          filter: filter
        };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c18 = function(own, key, val, obj, filter) {return {
          type: 'for-of',
          own: Boolean(own),
          key: key,
          val: val,
          obj: obj,
          filter: filter
        };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c19 = "=",
        peg$c20 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c21 = function(left, right) {return rp(new CS.AssignOp(left, right));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c22 = "?",
        peg$c23 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c24 = function(left, op, right) {return rp(new CS.CompoundAssignOp(constructorLookup[op].prototype.className, left, right));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c25 = "&&",
        peg$c26 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c27 = "||",
        peg$c28 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c29 = "**",
        peg$c30 = { type: "literal", value: "**", description: "\"**\"" },
        peg$c31 = /^[?&\^|*\/%]/,
        peg$c32 = { type: "class", value: "[?&\\^|*\\/%]", description: "[?&\\^|*\\/%]" },
        peg$c33 = "+",
        peg$c34 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c35 = "-",
        peg$c36 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c37 = "<<",
        peg$c38 = { type: "literal", value: "<<", description: "\"<<\"" },
        peg$c39 = ">>>",
        peg$c40 = { type: "literal", value: ">>>", description: "\">>>\"" },
        peg$c41 = ">>",
        peg$c42 = { type: "literal", value: ">>", description: "\">>\"" },
        peg$c43 = "?=",
        peg$c44 = { type: "literal", value: "?=", description: "\"?=\"" },
        peg$c45 = function(left, right) {return rp(new CS.CompoundAssignOp(constructorLookup['?'].prototype.className, left, right));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c46 = function(o, e) {return [
          o,
          e
        ];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c47 = function(left, rights) {var cache$, cache$1, expr, op;
        switch (rights.length) {
        case 0:
          return left;
        case 1:
          cache$ = rights[0];
          op = cache$[0];
          expr = cache$[1];
          return rp(new constructorLookup[op](left, expr));
        default:
          return rp(foldBinaryExpr((cache$1 = [left]).concat.apply(cache$1, [].slice.call(rights))));
        }
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c48 = "<=",
        peg$c49 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c50 = ">=",
        peg$c51 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c52 = "<",
        peg$c53 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c54 = ">",
        peg$c55 = { type: "literal", value: ">", description: "\">\"" },
        peg$c56 = "==",
        peg$c57 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c58 = "!=",
        peg$c59 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c60 = function(op) {return 'not ' + op;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c61 = function(e) {return rp(new CS.DoOp(e));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c62 = function(o) {return o;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c63 = function(ops, e) {return rp(foldr(function (e, op) {
          return new prefixConstructorLookup[op](e);
        }, e, ops));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c64 = "++",
        peg$c65 = { type: "literal", value: "++", description: "\"++\"" },
        peg$c66 = "--",
        peg$c67 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c68 = "!",
        peg$c69 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c70 = "~",
        peg$c71 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c72 = function(a, f) {return rp(new CS.AssignOp(a, f));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c73 = function(e, ops) {return rp(foldl(function (e, op) {
          return new postfixConstructorLookup[op](e);
        }, e, ops));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c74 = "[..]",
        peg$c75 = { type: "literal", value: "[..]", description: "\"[..]\"" },
        peg$c76 = "(",
        peg$c77 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c78 = ")",
        peg$c79 = { type: "literal", value: ")", description: "\")\"" },
        peg$c80 = function(soaked, a) {return rp({
          op: soaked ? CS.SoakedFunctionApplication : CS.FunctionApplication,
          operands: [null != a ? a : []]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c81 = function(e, es) {return [e].concat([].slice.call(es));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c82 = /^[+-\/]/,
        peg$c83 = { type: "class", value: "[+-\\/]", description: "[+-\\/]" },
        peg$c84 = function(e, es, obj) {es.unshift(e);
        if (null != obj)
          es.push(obj);
        return es;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c85 = function(o) {return [o];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c86 = function(fn, accesses, secondaryArgs) {var cache$, list, secondaryCtor, soaked;
        if (null != accesses)
          fn = createMemberExpression(fn, accesses);
        if (null != secondaryArgs) {
          cache$ = secondaryArgs;
          soaked = cache$[0];
          list = cache$[1];
          secondaryCtor = soaked ? CS.SoakedFunctionApplication : CS.FunctionApplication;
          fn = rp(new secondaryCtor(fn, list));
        }
        return fn;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c87 = function(as) {return as;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c88 = function(as, bs) {return [].slice.call(as).concat([].slice.call(null != bs ? bs : []));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c89 = function(e) {return rp(new CS.NewOp(e, []));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c90 = function(e, args) {return rp(new CS.NewOp(e, args.operands[0]));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c91 = function(e, accesses) {return createMemberExpression(e, accesses);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c92 = function(e, args) {return rp(new CS.NewOp(e, args));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c93 = function(e, accesses) {var acc;
        acc = foldl(function (memo, a) {
          return memo.concat(a);
        }, [], accesses);
        return createMemberExpression(e, acc);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c94 = ".",
        peg$c95 = { type: "literal", value: ".", description: "\".\"" },
        peg$c96 = function(e) {return rp({
          op: CS.MemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c97 = "?.",
        peg$c98 = { type: "literal", value: "?.", description: "\"?.\"" },
        peg$c99 = function(e) {return rp({
          op: CS.SoakedMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c100 = "[",
        peg$c101 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c102 = "]",
        peg$c103 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c104 = function(e) {return rp({
          op: CS.DynamicMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c105 = "?[",
        peg$c106 = { type: "literal", value: "?[", description: "\"?[\"" },
        peg$c107 = function(e) {return rp({
          op: CS.SoakedDynamicMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c108 = "::",
        peg$c109 = { type: "literal", value: "::", description: "\"::\"" },
        peg$c110 = function(e) {return rp({
          op: CS.ProtoMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c111 = "::[",
        peg$c112 = { type: "literal", value: "::[", description: "\"::[\"" },
        peg$c113 = function(e) {return rp({
          op: CS.DynamicProtoMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c114 = "?::",
        peg$c115 = { type: "literal", value: "?::", description: "\"?::\"" },
        peg$c116 = function(e) {return rp({
          op: CS.SoakedProtoMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c117 = "?::[",
        peg$c118 = { type: "literal", value: "?::[", description: "\"?::[\"" },
        peg$c119 = function(e) {return rp({
          op: CS.SoakedDynamicProtoMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c120 = "..",
        peg$c121 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c122 = function(left, exclusive, right) {return rp({
          op: CS.Slice,
          operands: [
            !exclusive,
            left,
            right
          ]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c123 = "@",
        peg$c124 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c125 = function() {return rp(new CS.This);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c126 = function(e) {return r(e.clone());
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c127 = function(a, m) {return rp(new CS.MemberAccessOp(a, m));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c128 = "`",
        peg$c129 = { type: "literal", value: "`", description: "\"`\"" },
        peg$c130 = /^[^`]/,
        peg$c131 = { type: "class", value: "[^`]", description: "[^`]" },
        peg$c132 = function(d) {return rp(new CS.JavaScript(d));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c133 = "...",
        peg$c134 = { type: "literal", value: "...", description: "\"...\"" },
        peg$c135 = function(e) {return rp(new CS.Spread(e));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c136 = function(kw, cond, body, elseClause) {switch (kw) {
        case 'if':
          return rp(new CS.Conditional(cond, body.block, elseClause));
        case 'unless':
          return rp(new CS.NegatedConditional(new CS.LogicalNotOp(cond).g(), body.block, elseClause));
        }
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c137 = function(b) {return { block: b };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c138 = function(s) {return { block: s };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c139 = function() {return { block: null };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c140 = function(b) {return b;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c141 = function(kw, cond, body) {switch (kw) {
        case 'while':
          return rp(new CS.While(cond, body.block));
        case 'until':
          return rp(new CS.NegatedWhile(new CS.LogicalNotOp(cond).g(), body.block));
        }
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c142 = function(body) {return rp(new CS.Loop(body.block));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c143 = function(body, c, f) {return rp(new CS.Try(body.block, null != (null != c ? c.assignee : void 0) ? null != c ? c.assignee : void 0 : null, null != (null != c ? c.block : void 0) ? null != c ? c.block : void 0 : null, null != (null != f ? f.block : void 0) ? null != f ? f.block : void 0 : null));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c144 = function(e, body) {return r({
          block: null != body ? body.block : new CS.Block([]),
          assignee: e
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c145 = function(body) {return r({ block: null != (null != body ? body.block : void 0) ? null != body ? body.block : void 0 : null });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c146 = function(name, parent, body) {var boundMembers, ctor, m, stmts;
        ctor = null;
        boundMembers = [];
        stmts = null != body ? null != body.statements ? body.statements : [body] : [];
        for (var i$ = 0, length$ = stmts.length; i$ < length$; ++i$) {
          m = stmts[i$];
          if (m['instanceof'](CS.Constructor)) {
            ctor = m;
          } else if (m['instanceof'](CS.ClassProtoAssignOp) && m.expression['instanceof'](CS.BoundFunction)) {
            boundMembers.push(m);
          }
        }
        return rp(new CS.Class(name, parent, ctor, body, boundMembers));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c147 = function(key) {return key['instanceof'](CS.String, CS.Identifier) && key.data === 'constructor';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c148 = ":",
        peg$c149 = { type: "literal", value: ":", description: "\":\"" },
        peg$c150 = function(key, fn) {if (fn['instanceof'](CS.BoundFunction))
          fn = c(new CS.Function(fn.parameters, fn.body).r(fn.raw), fn);
        return rp(new CS.Constructor(fn));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c151 = function(e) {return r({ expr: e });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c152 = function(key, e) {return rp(new CS.AssignOp(key, e.expr));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c153 = function(key, e) {return rp(new CS.ClassProtoAssignOp(key, e.expr));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c154 = function(own, key, val, obj, filter, body) {return rp(new CS.ForOf(Boolean(own), key, val, obj, filter, body.block));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c155 = function(valKey, list, step, filter, body) {var cache$, key, val;
        cache$ = null != valKey ? valKey : [
          null,
          null
        ];
        val = cache$[0];
        key = cache$[1];
        if (null != step)
          step;
        else
          step = new CS.Int(1).r('1').g();
        return rp(new CS.ForIn(val, key, list, step, filter, body.block));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c156 = function(e, body) {return rp(new CS.Switch(e, body.cases, null != body['else'] ? body['else'] : null));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c157 = function(b) {return r({
          cases: b.cases,
          'else': b['else']
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c158 = function(c) {return r({ cases: [c] });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c159 = function() {return r({ cases: [] });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c160 = function(c) {return c;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c161 = function(c, cs, elseClause) {return r({
          cases: [c].concat([].slice.call(cs)),
          'else': elseClause
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c162 = function(conditions, body) {return rp(new CS.SwitchCase(conditions, body.block));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c163 = function(c, cs) {return [c].concat([].slice.call(cs));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c164 = function(p) {return p;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c165 = "->",
        peg$c166 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c167 = "=>",
        peg$c168 = { type: "literal", value: "=>", description: "\"=>\"" },
        peg$c169 = function(params, arrow, body) {var constructor;
        constructor = function () {
          switch (arrow) {
          case '->':
            return CS.Function;
          case '=>':
            return CS.BoundFunction;
          }
        }.call(this);
        return rp(new constructor(null != params ? params : [], body));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c170 = function(param, default_) {return rp(new CS.DefaultParam(param, default_));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c171 = function(a, rest) {return rp(null != rest ? new CS.Rest(a) : a);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c172 = function(left, exclusiveDot, right) {var inclusive;
        inclusive = !exclusiveDot;
        return rp(new CS.Range(inclusive, left, right));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c173 = function(members) {return rp(new CS.ArrayInitialiser(members));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c174 = function(members) {return members;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c175 = function(members) {return null != members ? members : [];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c176 = "{",
        peg$c177 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c178 = "}",
        peg$c179 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c180 = function(members) {return rp(new CS.ObjectInitialiser(members));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c181 = function(v) {var key;
        key = p(new CS.String(v.memberName).g());
        return rp(new CS.ObjectInitialiserMember(key, v));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c182 = function(v) {return rp(new CS.ObjectInitialiserMember(v, v));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c183 = function(i) {return rp(new CS.Identifier(i));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c184 = function(key, val) {return rp(new CS.ObjectInitialiserMember(key, val));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c185 = "__LINE__",
        peg$c186 = { type: "literal", value: "__LINE__", description: "\"__LINE__\"" },
        peg$c187 = function() {return rp(new CS.Int(line()));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c188 = "__FILENAME__",
        peg$c189 = { type: "literal", value: "__FILENAME__", description: "\"__FILENAME__\"" },
        peg$c190 = function() {return rp(new CS.String(null != options.inputSource ? options.inputSource : ''));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c191 = "__DATE__",
        peg$c192 = { type: "literal", value: "__DATE__", description: "\"__DATE__\"" },
        peg$c193 = function() {return rp(new CS.String(new Date().toDateString().slice(4)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c194 = "__TIME__",
        peg$c195 = { type: "literal", value: "__TIME__", description: "\"__TIME__\"" },
        peg$c196 = function() {return rp(new CS.String(new Date().toTimeString().slice(0, 8)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c197 = "__DATETIMEMS__",
        peg$c198 = { type: "literal", value: "__DATETIMEMS__", description: "\"__DATETIMEMS__\"" },
        peg$c199 = function() {return rp(new CS.Int(+new Date));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c200 = "__COFFEE_VERSION__",
        peg$c201 = { type: "literal", value: "__COFFEE_VERSION__", description: "\"__COFFEE_VERSION__\"" },
        peg$c202 = function() {return rp(new CS.String(__webpack_require__(282).version));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c203 = function() {return rp(new CS.Bool(true));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c204 = function() {return rp(new CS.Bool(false));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c205 = "0b",
        peg$c206 = { type: "literal", value: "0b", description: "\"0b\"" },
        peg$c207 = function(bs) {return rp(new CS.Int(parseInt(bs, 2)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c208 = "0o",
        peg$c209 = { type: "literal", value: "0o", description: "\"0o\"" },
        peg$c210 = function(os) {return rp(new CS.Int(parseInt(os, 8)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c211 = "0x",
        peg$c212 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c213 = function(hs) {return rp(new CS.Int(parseInt(hs, 16)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c214 = /^[eE]/,
        peg$c215 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c216 = /^[+\-]/,
        peg$c217 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
        peg$c218 = function(base, e, sign, exponent) {return rp(new CS.Float(parseFloat('' + base.data + e + (null != sign ? sign : '') + exponent.data)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c219 = function(integral, fractional) {if (fractional) {
          return rp(new CS.Float(parseFloat(integral + fractional)));
        } else {
          return rp(new CS.Int(+integral));
        }
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c220 = "0",
        peg$c221 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c222 = /^[1-9]/,
        peg$c223 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c224 = /^[0-9]/,
        peg$c225 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c226 = /^[0-9a-fA-F]/,
        peg$c227 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c228 = /^[0-7]/,
        peg$c229 = { type: "class", value: "[0-7]", description: "[0-7]" },
        peg$c230 = /^[01]/,
        peg$c231 = { type: "class", value: "[01]", description: "[01]" },
        peg$c232 = "\"\"\"",
        peg$c233 = { type: "literal", value: "\"\"\"", description: "\"\\\"\\\"\\\"\"" },
        peg$c234 = "'",
        peg$c235 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c236 = "\"",
        peg$c237 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c238 = function(d) {return rp(new CS.String(stripLeadingWhitespace(d.join(''))));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c239 = "'''",
        peg$c240 = { type: "literal", value: "'''", description: "\"'''\"" },
        peg$c241 = "#",
        peg$c242 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c243 = function(d) {return rp(new CS.String(d.join('')));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c244 = /^[^"'\\#]/,
        peg$c245 = { type: "class", value: "[^\"'\\\\#]", description: "[^\"'\\\\#]" },
        peg$c246 = "\\x",
        peg$c247 = { type: "literal", value: "\\x", description: "\"\\\\x\"" },
        peg$c248 = function(h) {return String.fromCharCode(parseInt(h, 16));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c249 = "\\0",
        peg$c250 = { type: "literal", value: "\\0", description: "\"\\\\0\"" },
        peg$c251 = function() {return '\0';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c252 = function() {throw new SyntaxError(['string data'], 'octal escape sequence', offset(), line(), column());
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c253 = "\\b",
        peg$c254 = { type: "literal", value: "\\b", description: "\"\\\\b\"" },
        peg$c255 = function() {return '\b';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c256 = "\\t",
        peg$c257 = { type: "literal", value: "\\t", description: "\"\\\\t\"" },
        peg$c258 = function() {return '\t';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c259 = "\\n",
        peg$c260 = { type: "literal", value: "\\n", description: "\"\\\\n\"" },
        peg$c261 = function() {return '\n';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c262 = "\\v",
        peg$c263 = { type: "literal", value: "\\v", description: "\"\\\\v\"" },
        peg$c264 = function() {return '\x0B';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c265 = "\\f",
        peg$c266 = { type: "literal", value: "\\f", description: "\"\\\\f\"" },
        peg$c267 = function() {return '\f';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c268 = "\\r",
        peg$c269 = { type: "literal", value: "\\r", description: "\"\\\\r\"" },
        peg$c270 = function() {return '\r';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c271 = "\\",
        peg$c272 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c273 = { type: "any", description: "any character" },
        peg$c274 = "#{",
        peg$c275 = { type: "literal", value: "#{", description: "\"#{\"" },
        peg$c276 = function(es) {return rp(createInterpolation(stripLeadingWhitespaceInterpolation(es)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c277 = function(es) {return rp(createInterpolation(es));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c278 = "///",
        peg$c279 = { type: "literal", value: "///", description: "\"///\"" },
        peg$c280 = /^[ \r\n]/,
        peg$c281 = { type: "class", value: "[ \\r\\n]", description: "[ \\r\\n]" },
        peg$c282 = function() {return [rp(new CS.String('').g())];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c283 = /^[^\\\/#[ \r\n]/,
        peg$c284 = { type: "class", value: "[^\\\\\\/#[ \\r\\n]", description: "[^\\\\\\/#[ \\r\\n]" },
        peg$c285 = function(s) {return [rp(new CS.String(s).g())];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c286 = /^[gimy]/,
        peg$c287 = { type: "class", value: "[gimy]", description: "[gimy]" },
        peg$c288 = function(es, flags) {var interp;
        if (!isValidRegExpFlags(flags))
          throw new SyntaxError(['regular expression flags'], 'regular expression flags', offset(), line(), column());
        interp = createInterpolation(foldl(function (memo, e) {
          return memo.concat(e);
        }, [], es));
        if (interp instanceof CS.String)
          return p(new CS.RegExp(interp.data, flags));
        return rp(new CS.HeregExp(interp, flags));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c289 = "/",
        peg$c290 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c291 = /^[^\/\\[\n]/,
        peg$c292 = { type: "class", value: "[^\\/\\\\[\\n]", description: "[^\\/\\\\[\\n]" },
        peg$c293 = function(d, flags) {if (!isValidRegExpFlags(flags))
          throw new SyntaxError(['regular expression flags'], 'regular expression flags', offset(), line(), column());
        return rp(new CS.RegExp(d, flags));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c294 = /^[^\\\]\n]/,
        peg$c295 = { type: "class", value: "[^\\\\\\]\\n]", description: "[^\\\\\\]\\n]" },
        peg$c296 = function(h) {return h[0];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c297 = /^[^\\\/\]]/,
        peg$c298 = { type: "class", value: "[^\\\\\\/\\]]", description: "[^\\\\\\/\\]]" },
        peg$c299 = function(s) {return p(new CS.String(s));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c300 = function(d) {return [p(new CS.String('['))].concat([].slice.call(d), [p(new CS.String(']'))]);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c301 = function(d) {return [rp(new CS.String(d))];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c302 = function(s) {return [rp(new CS.String(s))];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c303 = function(c) {return [rp(new CS.String(c))];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c304 = function(e) {return [e];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c305 = function(e) {return rp(new CS.Throw(e));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c306 = function(e) {return rp(new CS.Return(e));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c307 = function() {return rp(new CS.Continue);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c308 = function() {return rp(new CS.Break);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c309 = function() {return rp(new CS.Debugger);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c310 = function() {return rp(new CS.Undefined);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c311 = function() {return rp(new CS.Null);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c312 = "arguments",
        peg$c313 = { type: "literal", value: "arguments", description: "\"arguments\"" },
        peg$c314 = "eval",
        peg$c315 = { type: "literal", value: "eval", description: "\"eval\"" },
        peg$c316 = function(i) {return i;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c317 = function(v) {var key;
        key = rp(new CS.String(v.memberName));
        return rp(new CS.ObjectInitialiserMember(key, v));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c318 = function(i) {return rp(new CS.ObjectInitialiserMember(i, i));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c319 = /^[$_]/,
        peg$c320 = { type: "class", value: "[$_]", description: "[$_]" },
        peg$c321 = "###",
        peg$c322 = { type: "literal", value: "###", description: "\"###\"" },
        peg$c323 = /^[^#]/,
        peg$c324 = { type: "class", value: "[^#]", description: "[^#]" },
        peg$c325 = /^[\t\x0B\f \xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/,
        peg$c326 = { type: "class", value: "[\\t\\x0B\\f \\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]", description: "[\\t\\x0B\\f \\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]" },
        peg$c327 = "\r",
        peg$c328 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c329 = "\n",
        peg$c330 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c331 = "\uEFEF",
        peg$c332 = { type: "literal", value: "\uEFEF", description: "\"\\uEFEF\"" },
        peg$c333 = function(ws) {return ws;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c334 = "\uEFFE",
        peg$c335 = { type: "literal", value: "\uEFFE", description: "\"\\uEFFE\"" },
        peg$c336 = "\uEFFF",
        peg$c337 = { type: "literal", value: "\uEFFF", description: "\"\\uEFFF\"" },
        peg$c338 = function() {return '';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c339 = "and",
        peg$c340 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c341 = "break",
        peg$c342 = { type: "literal", value: "break", description: "\"break\"" },
        peg$c343 = "by",
        peg$c344 = { type: "literal", value: "by", description: "\"by\"" },
        peg$c345 = "catch",
        peg$c346 = { type: "literal", value: "catch", description: "\"catch\"" },
        peg$c347 = "continue",
        peg$c348 = { type: "literal", value: "continue", description: "\"continue\"" },
        peg$c349 = "class",
        peg$c350 = { type: "literal", value: "class", description: "\"class\"" },
        peg$c351 = "delete",
        peg$c352 = { type: "literal", value: "delete", description: "\"delete\"" },
        peg$c353 = "debugger",
        peg$c354 = { type: "literal", value: "debugger", description: "\"debugger\"" },
        peg$c355 = "do",
        peg$c356 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c357 = "else",
        peg$c358 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c359 = "extends",
        peg$c360 = { type: "literal", value: "extends", description: "\"extends\"" },
        peg$c361 = "false",
        peg$c362 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c363 = "finally",
        peg$c364 = { type: "literal", value: "finally", description: "\"finally\"" },
        peg$c365 = "for",
        peg$c366 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c367 = "if",
        peg$c368 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c369 = "in",
        peg$c370 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c371 = "instanceof",
        peg$c372 = { type: "literal", value: "instanceof", description: "\"instanceof\"" },
        peg$c373 = "is",
        peg$c374 = { type: "literal", value: "is", description: "\"is\"" },
        peg$c375 = "isnt",
        peg$c376 = { type: "literal", value: "isnt", description: "\"isnt\"" },
        peg$c377 = "loop",
        peg$c378 = { type: "literal", value: "loop", description: "\"loop\"" },
        peg$c379 = "new",
        peg$c380 = { type: "literal", value: "new", description: "\"new\"" },
        peg$c381 = "no",
        peg$c382 = { type: "literal", value: "no", description: "\"no\"" },
        peg$c383 = "not",
        peg$c384 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c385 = "null",
        peg$c386 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c387 = "of",
        peg$c388 = { type: "literal", value: "of", description: "\"of\"" },
        peg$c389 = "off",
        peg$c390 = { type: "literal", value: "off", description: "\"off\"" },
        peg$c391 = "on",
        peg$c392 = { type: "literal", value: "on", description: "\"on\"" },
        peg$c393 = "or",
        peg$c394 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c395 = "own",
        peg$c396 = { type: "literal", value: "own", description: "\"own\"" },
        peg$c397 = "return",
        peg$c398 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c399 = "switch",
        peg$c400 = { type: "literal", value: "switch", description: "\"switch\"" },
        peg$c401 = "then",
        peg$c402 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c403 = "this",
        peg$c404 = { type: "literal", value: "this", description: "\"this\"" },
        peg$c405 = "throw",
        peg$c406 = { type: "literal", value: "throw", description: "\"throw\"" },
        peg$c407 = "true",
        peg$c408 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c409 = "try",
        peg$c410 = { type: "literal", value: "try", description: "\"try\"" },
        peg$c411 = "typeof",
        peg$c412 = { type: "literal", value: "typeof", description: "\"typeof\"" },
        peg$c413 = "undefined",
        peg$c414 = { type: "literal", value: "undefined", description: "\"undefined\"" },
        peg$c415 = "unless",
        peg$c416 = { type: "literal", value: "unless", description: "\"unless\"" },
        peg$c417 = "until",
        peg$c418 = { type: "literal", value: "until", description: "\"until\"" },
        peg$c419 = "when",
        peg$c420 = { type: "literal", value: "when", description: "\"when\"" },
        peg$c421 = "while",
        peg$c422 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c423 = "yes",
        peg$c424 = { type: "literal", value: "yes", description: "\"yes\"" },
        peg$c425 = "super",
        peg$c426 = { type: "literal", value: "super", description: "\"super\"" },
        peg$c427 = "case",
        peg$c428 = { type: "literal", value: "case", description: "\"case\"" },
        peg$c429 = "default",
        peg$c430 = { type: "literal", value: "default", description: "\"default\"" },
        peg$c431 = "function",
        peg$c432 = { type: "literal", value: "function", description: "\"function\"" },
        peg$c433 = "var",
        peg$c434 = { type: "literal", value: "var", description: "\"var\"" },
        peg$c435 = "void",
        peg$c436 = { type: "literal", value: "void", description: "\"void\"" },
        peg$c437 = "with",
        peg$c438 = { type: "literal", value: "with", description: "\"with\"" },
        peg$c439 = "const",
        peg$c440 = { type: "literal", value: "const", description: "\"const\"" },
        peg$c441 = "let",
        peg$c442 = { type: "literal", value: "let", description: "\"let\"" },
        peg$c443 = "enum",
        peg$c444 = { type: "literal", value: "enum", description: "\"enum\"" },
        peg$c445 = "export",
        peg$c446 = { type: "literal", value: "export", description: "\"export\"" },
        peg$c447 = "import",
        peg$c448 = { type: "literal", value: "import", description: "\"import\"" },
        peg$c449 = "native",
        peg$c450 = { type: "literal", value: "native", description: "\"native\"" },
        peg$c451 = "implements",
        peg$c452 = { type: "literal", value: "implements", description: "\"implements\"" },
        peg$c453 = "interface",
        peg$c454 = { type: "literal", value: "interface", description: "\"interface\"" },
        peg$c455 = "package",
        peg$c456 = { type: "literal", value: "package", description: "\"package\"" },
        peg$c457 = "private",
        peg$c458 = { type: "literal", value: "private", description: "\"private\"" },
        peg$c459 = "protected",
        peg$c460 = { type: "literal", value: "protected", description: "\"protected\"" },
        peg$c461 = "public",
        peg$c462 = { type: "literal", value: "public", description: "\"public\"" },
        peg$c463 = "static",
        peg$c464 = { type: "literal", value: "static", description: "\"static\"" },
        peg$c465 = "yield",
        peg$c466 = { type: "literal", value: "yield", description: "\"yield\"" },
        peg$c467 = "\\u",
        peg$c468 = { type: "literal", value: "\\u", description: "\"\\\\u\"" },
        peg$c469 = function(h0, h1, h2, h3) {return String.fromCharCode(parseInt(h0 + h1 + h2 + h3, 16));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c470 = /^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0531-\u0556\u10A0-\u10C5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uFF21-\uFF3Aa-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0561-\u0587\u1D00-\u1D2B\u1D62-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7C\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2D00-\u2D25\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7FA\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D61\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA717-\uA71F\uA770\uA788\uA9CF\uAA70\uAADD\uFF70\uFF9E\uFF9F\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC\u0EDD\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BC0-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u2135-\u2138\u2D30-\u2D65\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400\u4DB5\u4E00\u9FCB\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA2D\uFA30-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/,
        peg$c471 = { type: "class", value: "[A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0531-\\u0556\\u10A0-\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uFF21-\\uFF3Aa-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D62-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2D00-\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7FA\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D61\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA717-\\uA71F\\uA770\\uA788\\uA9CF\\uAA70\\uAADD\\uFF70\\uFF9E\\uFF9F\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BC0-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u2135-\\u2138\\u2D30-\\u2D65\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FCB\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA2D\\uFA30-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]", description: "[A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0531-\\u0556\\u10A0-\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uFF21-\\uFF3Aa-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D62-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2D00-\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7FA\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D61\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA717-\\uA71F\\uA770\\uA788\\uA9CF\\uAA70\\uAADD\\uFF70\\uFF9E\\uFF9F\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BC0-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u2135-\\u2138\\u2D30-\\u2D65\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FCB\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA2D\\uFA30-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]" },
        peg$c472 = "\uD82C",
        peg$c473 = { type: "literal", value: "\uD82C", description: "\"\\uD82C\"" },
        peg$c474 = /^[\uDC00\uDC01]/,
        peg$c475 = { type: "class", value: "[\\uDC00\\uDC01]", description: "[\\uDC00\\uDC01]" },
        peg$c476 = "\uD808",
        peg$c477 = { type: "literal", value: "\uD808", description: "\"\\uD808\"" },
        peg$c478 = /^[\uDC00-\uDF6E]/,
        peg$c479 = { type: "class", value: "[\\uDC00-\\uDF6E]", description: "[\\uDC00-\\uDF6E]" },
        peg$c480 = "\uD869",
        peg$c481 = { type: "literal", value: "\uD869", description: "\"\\uD869\"" },
        peg$c482 = /^[\uDED6\uDF00]/,
        peg$c483 = { type: "class", value: "[\\uDED6\\uDF00]", description: "[\\uDED6\\uDF00]" },
        peg$c484 = "\uD809",
        peg$c485 = { type: "literal", value: "\uD809", description: "\"\\uD809\"" },
        peg$c486 = /^[\uDC00-\uDC62]/,
        peg$c487 = { type: "class", value: "[\\uDC00-\\uDC62]", description: "[\\uDC00-\\uDC62]" },
        peg$c488 = "\uD835",
        peg$c489 = { type: "literal", value: "\uD835", description: "\"\\uD835\"" },
        peg$c490 = /^[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]/,
        peg$c491 = { type: "class", value: "[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]", description: "[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]" },
        peg$c492 = "\uD804",
        peg$c493 = { type: "literal", value: "\uD804", description: "\"\\uD804\"" },
        peg$c494 = /^[\uDC03-\uDC37\uDC83-\uDCAF]/,
        peg$c495 = { type: "class", value: "[\\uDC03-\\uDC37\\uDC83-\\uDCAF]", description: "[\\uDC03-\\uDC37\\uDC83-\\uDCAF]" },
        peg$c496 = "\uD800",
        peg$c497 = { type: "literal", value: "\uD800", description: "\"\\uD800\"" },
        peg$c498 = /^[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1E\uDF30-\uDF40\uDF42-\uDF49\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]/,
        peg$c499 = { type: "class", value: "[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1E\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]", description: "[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1E\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]" },
        peg$c500 = "\uD80C",
        peg$c501 = { type: "literal", value: "\uD80C", description: "\"\\uD80C\"" },
        peg$c502 = /^[\uDC00-\uDFFF]/,
        peg$c503 = { type: "class", value: "[\\uDC00-\\uDFFF]", description: "[\\uDC00-\\uDFFF]" },
        peg$c504 = "\uD801",
        peg$c505 = { type: "literal", value: "\uD801", description: "\"\\uD801\"" },
        peg$c506 = /^[\uDC00-\uDC9D]/,
        peg$c507 = { type: "class", value: "[\\uDC00-\\uDC9D]", description: "[\\uDC00-\\uDC9D]" },
        peg$c508 = "\uD86E",
        peg$c509 = { type: "literal", value: "\uD86E", description: "\"\\uD86E\"" },
        peg$c510 = /^[\uDC1D]/,
        peg$c511 = { type: "class", value: "[\\uDC1D]", description: "[\\uDC1D]" },
        peg$c512 = "\uD803",
        peg$c513 = { type: "literal", value: "\uD803", description: "\"\\uD803\"" },
        peg$c514 = /^[\uDC00-\uDC48]/,
        peg$c515 = { type: "class", value: "[\\uDC00-\\uDC48]", description: "[\\uDC00-\\uDC48]" },
        peg$c516 = "\uD840",
        peg$c517 = { type: "literal", value: "\uD840", description: "\"\\uD840\"" },
        peg$c518 = /^[\uDC00]/,
        peg$c519 = { type: "class", value: "[\\uDC00]", description: "[\\uDC00]" },
        peg$c520 = "\uD87E",
        peg$c521 = { type: "literal", value: "\uD87E", description: "\"\\uD87E\"" },
        peg$c522 = /^[\uDC00-\uDE1D]/,
        peg$c523 = { type: "class", value: "[\\uDC00-\\uDE1D]", description: "[\\uDC00-\\uDE1D]" },
        peg$c524 = "\uD86D",
        peg$c525 = { type: "literal", value: "\uD86D", description: "\"\\uD86D\"" },
        peg$c526 = /^[\uDF34\uDF40]/,
        peg$c527 = { type: "class", value: "[\\uDF34\\uDF40]", description: "[\\uDF34\\uDF40]" },
        peg$c528 = "\uD81A",
        peg$c529 = { type: "literal", value: "\uD81A", description: "\"\\uD81A\"" },
        peg$c530 = /^[\uDC00-\uDE38]/,
        peg$c531 = { type: "class", value: "[\\uDC00-\\uDE38]", description: "[\\uDC00-\\uDE38]" },
        peg$c532 = "\uD802",
        peg$c533 = { type: "literal", value: "\uD802", description: "\"\\uD802\"" },
        peg$c534 = /^[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDD00-\uDD15\uDD20-\uDD39\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72]/,
        peg$c535 = { type: "class", value: "[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72]", description: "[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72]" },
        peg$c536 = "\uD80D",
        peg$c537 = { type: "literal", value: "\uD80D", description: "\"\\uD80D\"" },
        peg$c538 = /^[\uDC00-\uDC2E]/,
        peg$c539 = { type: "class", value: "[\\uDC00-\\uDC2E]", description: "[\\uDC00-\\uDC2E]" },
        peg$c540 = /^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0900-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1DC0-\u1DE6\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F\uA67C\uA67D\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE26\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u19B0-\u19C0\u19C8\u19C9\u1A19-\u1A1B\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF2\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BD-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC]/,
        peg$c541 = { type: "class", value: "[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]", description: "[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]" },
        peg$c542 = "\uDB40",
        peg$c543 = { type: "literal", value: "\uDB40", description: "\"\\uDB40\"" },
        peg$c544 = /^[\uDD00-\uDDEF]/,
        peg$c545 = { type: "class", value: "[\\uDD00-\\uDDEF]", description: "[\\uDD00-\\uDDEF]" },
        peg$c546 = "\uD834",
        peg$c547 = { type: "literal", value: "\uD834", description: "\"\\uD834\"" },
        peg$c548 = /^[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44\uDD65\uDD66\uDD6D-\uDD72]/,
        peg$c549 = { type: "class", value: "[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDD65\\uDD66\\uDD6D-\\uDD72]", description: "[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDD65\\uDD66\\uDD6D-\\uDD72]" },
        peg$c550 = /^[\uDC01\uDC38-\uDC46\uDC80\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8]/,
        peg$c551 = { type: "class", value: "[\\uDC01\\uDC38-\\uDC46\\uDC80\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8]", description: "[\\uDC01\\uDC38-\\uDC46\\uDC80\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8]" },
        peg$c552 = /^[\uDDFD]/,
        peg$c553 = { type: "class", value: "[\\uDDFD]", description: "[\\uDDFD]" },
        peg$c554 = /^[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F]/,
        peg$c555 = { type: "class", value: "[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F]", description: "[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F]" },
        peg$c556 = /^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/,
        peg$c557 = { type: "class", value: "[0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]", description: "[0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]" },
        peg$c558 = /^[\uDFCE-\uDFFF]/,
        peg$c559 = { type: "class", value: "[\\uDFCE-\\uDFFF]", description: "[\\uDFCE-\\uDFFF]" },
        peg$c560 = /^[\uDC66-\uDC6F]/,
        peg$c561 = { type: "class", value: "[\\uDC66-\\uDC6F]", description: "[\\uDC66-\\uDC6F]" },
        peg$c562 = /^[\uDCA0-\uDCA9]/,
        peg$c563 = { type: "class", value: "[\\uDCA0-\\uDCA9]", description: "[\\uDCA0-\\uDCA9]" },
        peg$c564 = /^[_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F]/,
        peg$c565 = { type: "class", value: "[_\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F]", description: "[_\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F]" },
        peg$c566 = "\u200C",
        peg$c567 = { type: "literal", value: "\u200C", description: "\"\\u200C\"" },
        peg$c568 = "\u200D",
        peg$c569 = { type: "literal", value: "\u200D", description: "\"\\u200D\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseprogram() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 0,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINATOR();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetoplevelBlock();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c2(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsetoplevelBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 1,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsetoplevelStatement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTERMINATOR();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetoplevelStatement();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c4(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetoplevelStatement();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c4(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsetoplevelStatement() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 2,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsereturn();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecontinue();
        if (s2 === peg$FAILED) {
          s2 = peg$parsebreak();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c6;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestatement();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c4(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseblock() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 3,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsestatement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTERMINATOR();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestatement();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c4(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsestatement();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c4(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsestatement() {
      var s0;

      var key    = peg$currPos * 204 + 4,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseexpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereturn();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecontinue();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebreak();
            if (s0 === peg$FAILED) {
              s0 = peg$parsethrow();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedebugger();
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexpression() {
      var s0;

      var key    = peg$currPos * 204 + 5,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseexpressionworthy();
      if (s0 === peg$FAILED) {
        s0 = peg$parseseqExpression();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryStatement() {
      var s0;

      var key    = peg$currPos * 204 + 6,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsesecondaryExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereturn();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecontinue();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebreak();
            if (s0 === peg$FAILED) {
              s0 = peg$parsethrow();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedebugger();
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryExpression() {
      var s0;

      var key    = peg$currPos * 204 + 7,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseexpressionworthy();
      if (s0 === peg$FAILED) {
        s0 = peg$parseassignmentExpression();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryExpressionNoImplicitObjectCall() {
      var s0;

      var key    = peg$currPos * 204 + 8,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseexpressionworthy();
      if (s0 === peg$FAILED) {
        s0 = peg$parseassignmentExpressionNoImplicitObjectCall();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexpressionworthy() {
      var s0;

      var key    = peg$currPos * 204 + 9,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsefunctionLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseconditional();
        if (s0 === peg$FAILED) {
          s0 = peg$parsewhile();
          if (s0 === peg$FAILED) {
            s0 = peg$parseloop();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetry();
              if (s0 === peg$FAILED) {
                s0 = peg$parseforOf();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseforIn();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseswitch();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseimplicitObjectLiteral();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseclass();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseseqExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 10,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsepostfixControlFlowExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s4 = peg$c7;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s2;
                  s3 = peg$c9(s7);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c10(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepostfixControlFlowExpression() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 11,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsesecondaryStatement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsepostfixControlFlowOp();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepostfixControlFlowOp();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c11(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepostfixControlFlowOp() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      var key    = peg$currPos * 204 + 12,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseIF();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNLESS();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseassignmentExpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c12(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseWHILE();
        if (s1 === peg$FAILED) {
          s1 = peg$parseUNTIL();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseassignmentExpression();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c12(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFOR();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseAssignable();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s7 = peg$c13;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c14); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseAssignable();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s6;
                          s7 = peg$c15(s9);
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c16(s4, s6);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseIN();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseassignmentExpression();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$currPos;
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseBY();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse_();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseassignmentExpression();
                            if (s11 !== peg$FAILED) {
                              peg$reportedPos = s7;
                              s8 = peg$c15(s11);
                              s7 = s8;
                            } else {
                              peg$currPos = s7;
                              s7 = peg$c0;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$c0;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$c0;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                      if (s7 === peg$FAILED) {
                        s7 = peg$c1;
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$currPos;
                        s9 = peg$parse_();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseWHEN();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parse_();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parseassignmentExpression();
                              if (s12 !== peg$FAILED) {
                                peg$reportedPos = s8;
                                s9 = peg$c15(s12);
                                s8 = s9;
                              } else {
                                peg$currPos = s8;
                                s8 = peg$c0;
                              }
                            } else {
                              peg$currPos = s8;
                              s8 = peg$c0;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$c0;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c0;
                        }
                        if (s8 === peg$FAILED) {
                          s8 = peg$c1;
                        }
                        if (s8 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c17(s3, s6, s7, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseFOR();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseOWN();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseAssignable();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse_();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s7 = peg$c13;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c14); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseAssignable();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse_();
                            if (s10 !== peg$FAILED) {
                              peg$reportedPos = s6;
                              s7 = peg$c15(s9);
                              s6 = s7;
                            } else {
                              peg$currPos = s6;
                              s6 = peg$c0;
                            }
                          } else {
                            peg$currPos = s6;
                            s6 = peg$c0;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                      if (s6 === peg$FAILED) {
                        s6 = peg$c1;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseOF();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parse_();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseassignmentExpression();
                            if (s9 !== peg$FAILED) {
                              s10 = peg$currPos;
                              s11 = peg$parse_();
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parseWHEN();
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parse_();
                                  if (s13 !== peg$FAILED) {
                                    s14 = peg$parseassignmentExpression();
                                    if (s14 !== peg$FAILED) {
                                      peg$reportedPos = s10;
                                      s11 = peg$c15(s14);
                                      s10 = s11;
                                    } else {
                                      peg$currPos = s10;
                                      s10 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$c0;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$c0;
                              }
                              if (s10 === peg$FAILED) {
                                s10 = peg$c1;
                              }
                              if (s10 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c18(s3, s4, s6, s9, s10);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseassignmentExpression() {
      var s0;

      var key    = peg$currPos * 204 + 13,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseassignmentOp();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecompoundAssignmentOp();
        if (s0 === peg$FAILED) {
          s0 = peg$parseexistsAssignmentOp();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebinaryExpression();
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseassignmentOp() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 14,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c19;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 61) {
              s5 = peg$c19;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c6;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesecondaryExpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c9(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesecondaryExpression();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c9(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c21(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecompoundAssignmentOp() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 204 + 15,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCompoundAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c22;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c6;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCompoundAssignmentOperators();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c19;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseTERMINDENT();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsesecondaryExpression();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseDEDENT();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s6;
                      s7 = peg$c9(s8);
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parseTERMINATOR();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsesecondaryExpression();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s6;
                        s7 = peg$c9(s9);
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c24(s1, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCompoundAssignmentOperators() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 16,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseAND();
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c27) {
            s1 = peg$c27;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$parseOR();
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c29) {
                s1 = peg$c29;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c30); }
              }
              if (s1 === peg$FAILED) {
                if (peg$c31.test(input.charAt(peg$currPos))) {
                  s1 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c32); }
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 43) {
                    s2 = peg$c33;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c34); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 43) {
                      s4 = peg$c33;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c34); }
                    }
                    peg$silentFails--;
                    if (s4 === peg$FAILED) {
                      s3 = peg$c6;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                    if (s3 !== peg$FAILED) {
                      s2 = [s2, s3];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c0;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                  }
                  if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s2 = peg$c35;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c36); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$currPos;
                      peg$silentFails++;
                      if (input.charCodeAt(peg$currPos) === 45) {
                        s4 = peg$c35;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c36); }
                      }
                      peg$silentFails--;
                      if (s4 === peg$FAILED) {
                        s3 = peg$c6;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                      if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c0;
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c37) {
                        s1 = peg$c37;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c38); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c39) {
                          s1 = peg$c39;
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c40); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c41) {
                            s1 = peg$c41;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c42); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexistsAssignmentOp() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 17,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCompoundAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c43) {
            s3 = peg$c43;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesecondaryExpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c9(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesecondaryExpression();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c9(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c45(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseassignmentExpressionNoImplicitObjectCall() {
      var s0;

      var key    = peg$currPos * 204 + 18,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseassignmentOpNoImplicitObjectCall();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecompoundAssignmentOpNoImplicitObjectCall();
        if (s0 === peg$FAILED) {
          s0 = peg$parseexistsAssignmentOpNoImplicitObjectCall();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebinaryExpressionNoImplicitObjectCall();
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseassignmentOpNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 19,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c19;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 61) {
              s5 = peg$c19;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c6;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c9(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c9(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c21(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecompoundAssignmentOpNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 204 + 20,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCompoundAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c22;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c6;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCompoundAssignmentOperators();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c19;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseTERMINDENT();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseDEDENT();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s6;
                      s7 = peg$c9(s8);
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parseTERMINATOR();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s6;
                        s7 = peg$c9(s9);
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c24(s1, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexistsAssignmentOpNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 21,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCompoundAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c43) {
            s3 = peg$c43;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c9(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c9(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c45(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebinaryExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 22,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseprefixExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebinaryOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseTERMINATOR();
            if (s6 === peg$FAILED) {
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseexpressionworthy();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseprefixExpression();
                }
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c46(s5, s8);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebinaryOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseTERMINATOR();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseexpressionworthy();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseprefixExpression();
                  }
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c46(s5, s8);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c47(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebinaryOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 23,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCompoundAssignmentOperators();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c19;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c48) {
          s0 = peg$c48;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c50) {
            s0 = peg$c50;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 60) {
              s0 = peg$c52;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s0 = peg$c54;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c56) {
                  s0 = peg$c56;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parseIS();
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c58) {
                      s0 = peg$c58;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c59); }
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseISNT();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseEXTENDS();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseINSTANCEOF();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseIN();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseOF();
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseNOT();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parse_();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseINSTANCEOF();
                                    if (s3 === peg$FAILED) {
                                      s3 = peg$parseIN();
                                      if (s3 === peg$FAILED) {
                                        s3 = peg$parseOF();
                                      }
                                    }
                                    if (s3 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c60(s3);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebinaryExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 24,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseprefixExpressionNoImplicitObjectCall();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebinaryOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseTERMINATOR();
            if (s6 === peg$FAILED) {
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseexpressionworthy();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseprefixExpressionNoImplicitObjectCall();
                }
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c46(s5, s8);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebinaryOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseTERMINATOR();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseexpressionworthy();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseprefixExpressionNoImplicitObjectCall();
                  }
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c46(s5, s8);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c47(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseprefixExpression() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 25,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsepostfixExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDO();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenfe();
            if (s3 === peg$FAILED) {
              s3 = peg$parseexpressionworthy();
              if (s3 === peg$FAILED) {
                s3 = peg$parseprefixExpression();
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c61(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$currPos;
          s3 = peg$parsePrefixOperators();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c62(s3);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$currPos;
              s3 = peg$parsePrefixOperators();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s2;
                  s3 = peg$c62(s3);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpressionworthy();
            if (s2 === peg$FAILED) {
              s2 = peg$parseprefixExpression();
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c63(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePrefixOperators() {
      var s0;

      var key    = peg$currPos * 204 + 26,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (input.substr(peg$currPos, 2) === peg$c64) {
        s0 = peg$c64;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c66) {
          s0 = peg$c66;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s0 = peg$c33;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s0 = peg$c35;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 33) {
                s0 = peg$c68;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c69); }
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parseNOT();
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 126) {
                    s0 = peg$c70;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c71); }
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseDO();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseTYPEOF();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseDELETE();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenfe() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 27,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseunassignable();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c6;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAssignable();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c19;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsefunctionLiteral();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c72(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseprefixExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 28,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsepostfixExpressionNoImplicitObjectCall();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDO();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenfe();
            if (s3 === peg$FAILED) {
              s3 = peg$parseexpressionworthy();
              if (s3 === peg$FAILED) {
                s3 = peg$parseprefixExpressionNoImplicitObjectCall();
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c61(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$currPos;
          s3 = peg$parsePrefixOperators();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c62(s3);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$currPos;
              s3 = peg$parsePrefixOperators();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s2;
                  s3 = peg$c62(s3);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpressionworthy();
            if (s2 === peg$FAILED) {
              s2 = peg$parseprefixExpressionNoImplicitObjectCall();
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c63(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepostfixExpression() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 29,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseleftHandSideExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsePostfixOperators();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsePostfixOperators();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePostfixOperators() {
      var s0;

      var key    = peg$currPos * 204 + 30,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 63) {
        s0 = peg$c22;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c74) {
          s0 = peg$c74;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s0 = peg$c64;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c66) {
              s0 = peg$c66;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepostfixExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 31,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseleftHandSideExpressionNoImplicitObjectCall();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsePostfixOperators();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsePostfixOperators();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseleftHandSideExpression() {
      var s0;

      var key    = peg$currPos * 204 + 32,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsecallExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenewExpression();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseargumentList() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 33,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c22;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c76;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseargumentListContents();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c78;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c79); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c80(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseargumentListContents() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 34,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseargument();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseTERMINATOR();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseargument();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c15(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parseTERMINATOR();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseargument();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c15(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c13;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseTERMINATOR();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c81(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTERMINDENT();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseargumentListContents();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDEDENT();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseTERMINATOR();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c15(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseargument() {
      var s0;

      var key    = peg$currPos * 204 + 35,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsespread();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpression();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryArgumentList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      var key    = peg$currPos * 204 + 36,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        if (peg$c82.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesecondaryArgument();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c13;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseTERMINATOR();
                  if (s9 === peg$FAILED) {
                    s9 = peg$c1;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse_();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsesecondaryArgument();
                      if (s11 !== peg$FAILED) {
                        peg$reportedPos = s5;
                        s6 = peg$c15(s11);
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c13;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseTERMINATOR();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsesecondaryArgument();
                        if (s11 !== peg$FAILED) {
                          peg$reportedPos = s5;
                          s6 = peg$c15(s11);
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c13;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseTERMINDENT();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseimplicitObjectLiteral();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseDEDENT();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c62(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c84(s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTERMINDENT();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseimplicitObjectLiteral();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDEDENT();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c85(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryArgument() {
      var s0;

      var key    = peg$currPos * 204 + 37,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsespread();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesingleLineImplicitObjectLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesecondaryExpression();
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseleftHandSideExpressionNoImplicitObjectCall() {
      var s0;

      var key    = peg$currPos * 204 + 38,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsecallExpressionNoImplicitObjectCall();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenewExpressionNoImplicitObjectCall();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryArgumentListNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      var key    = peg$currPos * 204 + 39,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        if (peg$c82.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesecondaryArgumentNoImplicitObjectCall();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c13;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseTERMINATOR();
                  if (s9 === peg$FAILED) {
                    s9 = peg$c1;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse_();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsesecondaryArgumentNoImplicitObjectCall();
                      if (s11 !== peg$FAILED) {
                        peg$reportedPos = s5;
                        s6 = peg$c9(s11);
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c13;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseTERMINATOR();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsesecondaryArgumentNoImplicitObjectCall();
                        if (s11 !== peg$FAILED) {
                          peg$reportedPos = s5;
                          s6 = peg$c9(s11);
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c81(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryArgumentNoImplicitObjectCall() {
      var s0;

      var key    = peg$currPos * 204 + 40,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsespreadNoImplicitObjectCall();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesecondaryExpressionNoImplicitObjectCall();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecallExpression() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 41,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsememberExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecallExpressionAccesses();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c22;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesecondaryArgumentList();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c86(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecallExpressionAccesses() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 42,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecallExpressionAccesses();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEDENT();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c87(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseargumentList();
        if (s2 === peg$FAILED) {
          s2 = peg$parseMemberAccessOps();
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseargumentList();
            if (s2 === peg$FAILED) {
              s2 = peg$parseMemberAccessOps();
            }
          }
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsecallExpressionAccesses();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c88(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecallExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 43,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsememberExpressionNoImplicitObjectCall();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseargumentList();
        if (s3 === peg$FAILED) {
          s3 = peg$parseMemberAccessOps();
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseargumentList();
          if (s3 === peg$FAILED) {
            s3 = peg$parseMemberAccessOps();
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c22;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesecondaryArgumentListNoImplicitObjectCall();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c86(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenewExpression() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 44,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsememberExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNEW();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpressionworthy();
            if (s3 === peg$FAILED) {
              s3 = peg$parsenewExpression();
              if (s3 === peg$FAILED) {
                s3 = peg$parseprefixExpression();
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c89(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenewExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 45,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsememberExpressionNoImplicitObjectCall();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNEW();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpressionworthy();
            if (s3 === peg$FAILED) {
              s3 = peg$parsenewExpressionNoImplicitObjectCall();
              if (s3 === peg$FAILED) {
                s3 = peg$parseprefixExpressionNoImplicitObjectCall();
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c89(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsememberExpression() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 46,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseprimaryExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseNEW();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsememberExpression();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseargumentList();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s1;
                s2 = peg$c90(s4, s5);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseMemberAccessOps();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseMemberAccessOps();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c91(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNEW();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsememberExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesecondaryArgumentList();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c92(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsememberAccess() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 47,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseprimaryExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseNEW();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsememberExpression();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseargumentList();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s1;
                s2 = peg$c90(s4, s5);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseargumentList();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseMemberAccessOps();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parseMemberAccessOps();
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parseargumentList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseMemberAccessOps();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseMemberAccessOps();
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c93(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsecontextVar();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseMemberAccessOps() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 204 + 48,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c94;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifierName();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseMemberAccessOps();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseMemberAccessOps();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseDEDENT();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c96(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTERMINATOR();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c94;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c95); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseTERMINATOR();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseidentifierName();
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c96(s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c97) {
            s1 = peg$c97;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c98); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifierName();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c99(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c100;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c101); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseexpression();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s5 = peg$c102;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c103); }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c104(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c105) {
                s1 = peg$c105;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c106); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseexpression();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s5 = peg$c102;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c103); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c107(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c108) {
                  s1 = peg$c108;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseidentifierName();
                    if (s3 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c110(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c111) {
                    s1 = peg$c111;
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c112); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseexpression();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 93) {
                            s5 = peg$c102;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c103); }
                          }
                          if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c113(s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c114) {
                      s1 = peg$c114;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c115); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse_();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseidentifierName();
                        if (s3 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c116(s3);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 4) === peg$c117) {
                        s1 = peg$c117;
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c118); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseexpression();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 93) {
                                s5 = peg$c102;
                                peg$currPos++;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c103); }
                              }
                              if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c119(s3);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 91) {
                          s1 = peg$c100;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c101); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse_();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseassignmentExpression();
                            if (s3 === peg$FAILED) {
                              s3 = peg$c1;
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parse_();
                              if (s4 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c120) {
                                  s5 = peg$c120;
                                  peg$currPos += 2;
                                } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c121); }
                                }
                                if (s5 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 46) {
                                    s6 = peg$c94;
                                    peg$currPos++;
                                  } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                  }
                                  if (s6 === peg$FAILED) {
                                    s6 = peg$c1;
                                  }
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parse_();
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parseassignmentExpression();
                                      if (s8 === peg$FAILED) {
                                        s8 = peg$c1;
                                      }
                                      if (s8 !== peg$FAILED) {
                                        s9 = peg$parse_();
                                        if (s9 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 93) {
                                            s10 = peg$c102;
                                            peg$currPos++;
                                          } else {
                                            s10 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c103); }
                                          }
                                          if (s10 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c122(s3, s6, s8);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsememberExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 49,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseprimaryExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseNEW();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsememberExpressionNoImplicitObjectCall();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseargumentList();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s1;
                s2 = peg$c90(s4, s5);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseMemberAccessOps();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseMemberAccessOps();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c91(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNEW();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsememberExpressionNoImplicitObjectCall();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesecondaryArgumentListNoImplicitObjectCall();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c92(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseprimaryExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 50,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsemacro();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumbers();
        if (s0 === peg$FAILED) {
          s0 = peg$parsebool();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenull();
            if (s0 === peg$FAILED) {
              s0 = peg$parseundefined();
              if (s0 === peg$FAILED) {
                s0 = peg$parsecontextVar();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseTHIS();
                  if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 64) {
                      s1 = peg$c123;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c124); }
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c125();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseidentifier();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parserange();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsearrayLiteral();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseobjectLiteral();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseinterpolation();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseJSLiteral();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsestring();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseregexp();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 40) {
                                      s1 = peg$c76;
                                      peg$currPos++;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c77); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseTERMINDENT();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parseexpression();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parseDEDENT();
                                          if (s4 !== peg$FAILED) {
                                            s5 = peg$parseTERMINATOR();
                                            if (s5 === peg$FAILED) {
                                              s5 = peg$c1;
                                            }
                                            if (s5 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 41) {
                                                s6 = peg$c78;
                                                peg$currPos++;
                                              } else {
                                                s6 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                              }
                                              if (s6 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c126(s3);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 40) {
                                        s1 = peg$c76;
                                        peg$currPos++;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c77); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parse_();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parseexpression();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parse_();
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parseTERMINATOR();
                                              if (s5 === peg$FAILED) {
                                                s5 = peg$c1;
                                              }
                                              if (s5 !== peg$FAILED) {
                                                s6 = peg$parse_();
                                                if (s6 !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 41) {
                                                    s7 = peg$c78;
                                                    peg$currPos++;
                                                  } else {
                                                    s7 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                                  }
                                                  if (s7 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c126(s3);
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecontextVar() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 51,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s2 = peg$c123;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c124); }
      }
      if (s2 !== peg$FAILED) {
        peg$reportedPos = s1;
        s2 = peg$c125();
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifierName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c127(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseJSLiteral() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 52,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 96) {
        s1 = peg$c128;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c130.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c130.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c131); }
          }
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 96) {
            s3 = peg$c128;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c129); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c132(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsespread() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 53,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsepostfixExpression();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c133) {
          s2 = peg$c133;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c134); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c135(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsespreadNoImplicitObjectCall() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 54,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsepostfixExpressionNoImplicitObjectCall();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c133) {
          s2 = peg$c133;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c134); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c135(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseconditional() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 55,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseIF();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNLESS();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseassignmentExpressionNoImplicitObjectCall();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseconditionalBody();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseelseClause();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c136(s1, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseconditionalBody() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 56,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTERMINDENT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseblock();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDEDENT();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c137(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTERMINATOR();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseTHEN();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsestatement();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c138(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTHEN();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c139();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseelseClause() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 57,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTERMINATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseELSE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefunctionBody();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c140(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsewhile() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 58,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseWHILE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNTIL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseassignmentExpressionNoImplicitObjectCall();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseconditionalBody();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c141(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseloop() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 59,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseLOOP();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseconditionalBody();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c142(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsetry() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 60,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTRY();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetryBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecatchClause();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsefinallyClause();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c143(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsetryBody() {
      var s0, s1;

      var key    = peg$currPos * 204 + 61,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsefunctionBody();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c137(s1);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecatchClause() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 62,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINATOR();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCATCH();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAssignable();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseconditionalBody();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c144(s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefinallyClause() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 63,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINATOR();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFINALLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetryBody();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c145(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseclass() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 64,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCLASS();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAssignable();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c15(s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEXTENDS();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c9(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseclassBody();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c146(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseclassBody() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 65,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTERMINDENT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseclassBlock();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDEDENT();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c140(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTHEN();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseclassStatement();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c4(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTHEN();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$c1;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseclassBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 66,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseclassStatement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTERMINATOR();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseclassStatement();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c4(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseclassStatement();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c4(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseclassStatement() {
      var s0;

      var key    = peg$currPos * 204 + 67,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseconstructor();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclassProtoAssignment();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestaticAssignment();
          if (s0 === peg$FAILED) {
            s0 = peg$parseexpression();
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseconstructor() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 68,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseObjectInitialiserKeys();
      if (s2 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s3 = peg$c147(s2);
        if (s3) {
          s3 = peg$c6;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c148;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c9(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseexpression();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c9(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c150(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsestaticAssignment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 69,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsecontextVar();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c148;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c151(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseexpression();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c151(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c152(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseclassProtoAssignment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 70,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseObjectInitialiserKeys();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c148;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c151(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parsesingleLineImplicitObjectLiteral();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c151(s6);
                }
                s5 = s6;
                if (s5 === peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseTERMINATOR();
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsesecondaryExpression();
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s5;
                        s6 = peg$c151(s8);
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c153(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseforOf() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

      var key    = peg$currPos * 204 + 71,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseFOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseOWN();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseAssignable();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c13;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseAssignable();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        peg$reportedPos = s6;
                        s7 = peg$c15(s9);
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseOF();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseassignmentExpressionNoImplicitObjectCall();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$currPos;
                          s12 = peg$parseWHEN();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parse_();
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parseassignmentExpressionNoImplicitObjectCall();
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parse_();
                                if (s15 !== peg$FAILED) {
                                  peg$reportedPos = s11;
                                  s12 = peg$c9(s14);
                                  s11 = s12;
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$c0;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$c0;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$c0;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$c0;
                          }
                          if (s11 === peg$FAILED) {
                            s11 = peg$c1;
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseconditionalBody();
                            if (s12 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c154(s3, s4, s6, s9, s11, s12);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseforIn() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 204 + 72,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseFOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseAssignable();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c13;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseAssignable();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse_();
                    if (s10 !== peg$FAILED) {
                      peg$reportedPos = s6;
                      s7 = peg$c15(s9);
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c16(s4, s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIN();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseassignmentExpressionNoImplicitObjectCall();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parseBY();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseassignmentExpressionNoImplicitObjectCall();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parse_();
                          if (s12 !== peg$FAILED) {
                            peg$reportedPos = s8;
                            s9 = peg$c9(s11);
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$c0;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c0;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c0;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parseWHEN();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseassignmentExpressionNoImplicitObjectCall();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parse_();
                            if (s13 !== peg$FAILED) {
                              peg$reportedPos = s9;
                              s10 = peg$c9(s12);
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$c0;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$c0;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseconditionalBody();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c155(s3, s6, s8, s9, s10);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseswitch() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 73,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseSWITCH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpressionworthy();
          if (s3 === peg$FAILED) {
            s3 = peg$parseassignmentExpression();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseswitchBody();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c156(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseswitchBody() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 74,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTERMINDENT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseswitchBlock();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDEDENT();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c157(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTHEN();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecase();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c158(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTHEN();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c159();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseswitchBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 75,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsecase();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTERMINATOR();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecase();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c160(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecase();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c160(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseelseClause();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c9(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTERMINATOR();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c161(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecase() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 76,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseWHEN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecaseConditions();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseconditionalBody();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c162(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecaseConditions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 77,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseassignmentExpressionNoImplicitObjectCall();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseassignmentExpressionNoImplicitObjectCall();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c160(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseassignmentExpressionNoImplicitObjectCall();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c160(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c163(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefunctionLiteral() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 78,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c76;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseTERMINDENT();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseparameterList();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseDEDENT();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseTERMINATOR();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c164(s6);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$parseparameterList();
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c78;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c79); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s1;
                  s2 = peg$c164(s4);
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c165) {
          s2 = peg$c165;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c166); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c167) {
            s2 = peg$c167;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c168); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefunctionBody();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c169(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefunctionBody() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 79,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTERMINDENT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseblock();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDEDENT();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c140(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestatement();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c4(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseparameter() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 80,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c19;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesecondaryExpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c170(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parserest();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parserest() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 81,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAssignable();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c133) {
          s2 = peg$c133;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c134); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c171(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseparameterList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 82,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseparameter();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c13;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseTERMINATOR();
            if (s7 === peg$FAILED) {
              s7 = peg$c1;
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$c0;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseTERMINATOR();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseparameter();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c9(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c13;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseTERMINATOR();
              if (s7 === peg$FAILED) {
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parseTERMINATOR();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseparameter();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c9(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parserange() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 204 + 83,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesecondaryExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c120) {
                s5 = peg$c120;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s6 = peg$c94;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c95); }
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesecondaryExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                          s10 = peg$c102;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c103); }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c172(s3, s6, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearrayLiteral() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 84,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsearrayLiteralBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c102;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c103); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c173(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearrayLiteralBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 85,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsearrayLiteralMemberList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEDENT();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c174(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsearrayLiteralMemberList();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c175(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearrayLiteralMemberList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 86,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsearrayLiteralMember();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsearrayLiteralMemberSeparator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsearrayLiteralMember();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c9(s7);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsearrayLiteralMemberSeparator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsearrayLiteralMember();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c9(s7);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsearrayLiteralMemberSeparator();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c81(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearrayLiteralMember() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 87,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsespread();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpression();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTERMINDENT();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseimplicitObjectLiteral();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseDEDENT();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c62(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearrayLiteralMemberSeparator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 88,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseTERMINATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c13;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c13;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s1 = input.substring(s0, peg$currPos);
        }
        s0 = s1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseobjectLiteral() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 89,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c176;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseobjectLiteralBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c178;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c179); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c180(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseobjectLiteralBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 90,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseobjectLiteralMemberList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEDENT();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c174(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseobjectLiteralMemberList();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c175(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseobjectLiteralMemberList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 91,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseobjectLiteralMember();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsearrayLiteralMemberSeparator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseobjectLiteralMember();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c9(s7);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsearrayLiteralMemberSeparator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseobjectLiteralMember();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c9(s7);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c13;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c81(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseobjectLiteralMember() {
      var s0, s1;

      var key    = peg$currPos * 204 + 92,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseimplicitObjectLiteralMember();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecontextVar();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c181(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseObjectInitialiserKeys();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c182(s1);
          }
          s0 = s1;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseObjectInitialiserKeys() {
      var s0, s1;

      var key    = peg$currPos * 204 + 93,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseidentifierName();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c183(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumbers();
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseimplicitObjectLiteral() {
      var s0, s1;

      var key    = peg$currPos * 204 + 94,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseimplicitObjectLiteralMemberList();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c180(s1);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseimplicitObjectLiteralMemberList() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 95,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseimplicitObjectLiteralMember();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseimplicitObjectLiteralMemberSeparator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseimplicitObjectLiteralMember();
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c9(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseimplicitObjectLiteralMemberSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseimplicitObjectLiteralMember();
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c9(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseimplicitObjectLiteralMemberSeparator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 96,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINATOR();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c13;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c13;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseTERMINATOR();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseimplicitObjectLiteralMember() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 97,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseObjectInitialiserKeys();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c148;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseimplicitObjectLiteralMemberValue();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c184(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseimplicitObjectLiteralMemberValue() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 98,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsesingleLineImplicitObjectLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpression();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTERMINDENT();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpression();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseDEDENT();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c62(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesingleLineImplicitObjectLiteral() {
      var s0, s1;

      var key    = peg$currPos * 204 + 99,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsesingleLineImplicitObjectLiteralMemberList();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c180(s1);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesingleLineImplicitObjectLiteralMemberList() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 100,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseimplicitObjectLiteralMember();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsesingleLineImplicitObjectLiteralMemberSeparator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseimplicitObjectLiteralMember();
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c9(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsesingleLineImplicitObjectLiteralMemberSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseimplicitObjectLiteralMember();
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c9(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesingleLineImplicitObjectLiteralMemberSeparator() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 101,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c13;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsemacro() {
      var s0, s1;

      var key    = peg$currPos * 204 + 102,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c185) {
        s1 = peg$c185;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c187();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 12) === peg$c188) {
          s1 = peg$c188;
          peg$currPos += 12;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c190();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c191) {
            s1 = peg$c191;
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c192); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c193();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 8) === peg$c194) {
              s1 = peg$c194;
              peg$currPos += 8;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c195); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c196();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 14) === peg$c197) {
                s1 = peg$c197;
                peg$currPos += 14;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c198); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c199();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 18) === peg$c200) {
                  s1 = peg$c200;
                  peg$currPos += 18;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c201); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c202();
                }
                s0 = s1;
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebool() {
      var s0, s1;

      var key    = peg$currPos * 204 + 103,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTRUE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseYES();
        if (s1 === peg$FAILED) {
          s1 = peg$parseON();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c203();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseFALSE();
        if (s1 === peg$FAILED) {
          s1 = peg$parseNO();
          if (s1 === peg$FAILED) {
            s1 = peg$parseOFF();
          }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c204();
        }
        s0 = s1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNumbers() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 104,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c205) {
        s1 = peg$c205;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c206); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parsebit();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsebit();
          }
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c207(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c208) {
          s1 = peg$c208;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parseoctalDigit();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseoctalDigit();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s3 = input.substring(s2, peg$currPos);
          }
          s2 = s3;
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c210(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c211) {
            s1 = peg$c211;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c212); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsehexDigit();
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsehexDigit();
              }
            } else {
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              s3 = input.substring(s2, peg$currPos);
            }
            s2 = s3;
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c213(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsedecimal();
            if (s1 !== peg$FAILED) {
              if (peg$c214.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c215); }
              }
              if (s2 !== peg$FAILED) {
                if (peg$c216.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c217); }
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsedecimal();
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c218(s1, s2, s3, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsedecimal();
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsedecimal() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 105,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseinteger();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c94;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsedecimalDigit();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsedecimalDigit();
            }
          } else {
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c219(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 106,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c220;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c221); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (peg$c222.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c223); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsedecimalDigit();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsedecimalDigit();
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s1 = input.substring(s0, peg$currPos);
        }
        s0 = s1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsedecimalDigit() {
      var s0;

      var key    = peg$currPos * 204 + 107,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c224.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsehexDigit() {
      var s0;

      var key    = peg$currPos * 204 + 108,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c226.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c227); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseoctalDigit() {
      var s0;

      var key    = peg$currPos * 204 + 109,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c228.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c229); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebit() {
      var s0;

      var key    = peg$currPos * 204 + 110,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c230.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c231); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 111,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c232) {
        s1 = peg$c232;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c233); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsestringData();
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c234;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c235); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s5 = peg$c236;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s6 = peg$c236;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c237); }
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s8 = peg$c236;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = peg$c6;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s4 = input.substring(s3, peg$currPos);
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsestringData();
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c234;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c235); }
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s5 = peg$c236;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s6 = peg$c236;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c237); }
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s8 = peg$c236;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c237); }
                    }
                    peg$silentFails--;
                    if (s8 === peg$FAILED) {
                      s7 = peg$c6;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                    if (s7 !== peg$FAILED) {
                      s5 = [s5, s6, s7];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
                if (s4 !== peg$FAILED) {
                  s4 = input.substring(s3, peg$currPos);
                }
                s3 = s4;
              }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c232) {
            s3 = peg$c232;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c233); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c238(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c239) {
          s1 = peg$c239;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c240); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsestringData();
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c236;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 35) {
                s3 = peg$c241;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c242); }
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                  s5 = peg$c234;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c235); }
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s6 = peg$c234;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c235); }
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s8 = peg$c234;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c235); }
                    }
                    peg$silentFails--;
                    if (s8 === peg$FAILED) {
                      s7 = peg$c6;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                    if (s7 !== peg$FAILED) {
                      s5 = [s5, s6, s7];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
                if (s4 !== peg$FAILED) {
                  s4 = input.substring(s3, peg$currPos);
                }
                s3 = s4;
              }
            }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsestringData();
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s3 = peg$c236;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 35) {
                    s3 = peg$c241;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c242); }
                  }
                  if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s5 = peg$c234;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c235); }
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s6 = peg$c234;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c235); }
                      }
                      if (s6 === peg$FAILED) {
                        s6 = peg$c1;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s8 = peg$c234;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c235); }
                        }
                        peg$silentFails--;
                        if (s8 === peg$FAILED) {
                          s7 = peg$c6;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$c0;
                        }
                        if (s7 !== peg$FAILED) {
                          s5 = [s5, s6, s7];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$c0;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                    if (s4 !== peg$FAILED) {
                      s4 = input.substring(s3, peg$currPos);
                    }
                    s3 = s4;
                  }
                }
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c239) {
              s3 = peg$c239;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c240); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c238(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c236;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c237); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsestringData();
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c234;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c235); }
              }
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsestringData();
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s3 = peg$c234;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c235); }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c236;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c237); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c243(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
              s1 = peg$c234;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c235); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsestringData();
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s3 = peg$c236;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 35) {
                    s3 = peg$c241;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c242); }
                  }
                }
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsestringData();
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s3 = peg$c236;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c237); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 35) {
                      s3 = peg$c241;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c242); }
                    }
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s3 = peg$c234;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c235); }
                }
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c243(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsestringData() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 112,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c244.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c245); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnicodeEscapeSequence();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c246) {
            s1 = peg$c246;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c247); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$currPos;
            s4 = peg$parsehexDigit();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsehexDigit();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              s3 = input.substring(s2, peg$currPos);
            }
            s2 = s3;
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c248(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c249) {
              s1 = peg$c249;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c250); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              s3 = peg$parsedecimalDigit();
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = peg$c6;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c251();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c249) {
                s1 = peg$c249;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c250); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parsedecimalDigit();
                peg$silentFails--;
                if (s3 !== peg$FAILED) {
                  peg$currPos = s2;
                  s2 = peg$c6;
                } else {
                  s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c252();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c253) {
                  s1 = peg$c253;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c254); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c255();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c256) {
                    s1 = peg$c256;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c257); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c258();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c259) {
                      s1 = peg$c259;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c260); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c261();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c262) {
                        s1 = peg$c262;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c263); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c264();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c265) {
                          s1 = peg$c265;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c266); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c267();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c268) {
                            s1 = peg$c268;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c269); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c270();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 92) {
                              s1 = peg$c271;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c272); }
                            }
                            if (s1 !== peg$FAILED) {
                              if (input.length > peg$currPos) {
                                s2 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c273); }
                              }
                              if (s2 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c160(s2);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 35) {
                                s1 = peg$c241;
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c242); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$currPos;
                                peg$silentFails++;
                                if (input.charCodeAt(peg$currPos) === 123) {
                                  s3 = peg$c176;
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c177); }
                                }
                                peg$silentFails--;
                                if (s3 === peg$FAILED) {
                                  s2 = peg$c6;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                if (s2 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c160(s1);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseinterpolation() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 204 + 113,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c232) {
        s1 = peg$c232;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c233); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parsestringData();
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s5 = peg$c234;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c235); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s7 = peg$c236;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s8 = peg$c236;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c237); }
              }
              if (s8 === peg$FAILED) {
                s8 = peg$c1;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s10 = peg$c236;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                peg$silentFails--;
                if (s10 === peg$FAILED) {
                  s9 = peg$c6;
                } else {
                  peg$currPos = s9;
                  s9 = peg$c0;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            if (s6 !== peg$FAILED) {
              s6 = input.substring(s5, peg$currPos);
            }
            s5 = s6;
          }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsestringData();
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s5 = peg$c234;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c235); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s7 = peg$c236;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s8 = peg$c236;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c237); }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s10 = peg$c236;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c237); }
                    }
                    peg$silentFails--;
                    if (s10 === peg$FAILED) {
                      s9 = peg$c6;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 !== peg$FAILED) {
                  s6 = input.substring(s5, peg$currPos);
                }
                s5 = s6;
              }
            }
          }
        } else {
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s3;
          s4 = peg$c243(s4);
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c274) {
            s4 = peg$c274;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c275); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpression();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c178;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c9(s6);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parsestringData();
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s5 = peg$c234;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c235); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s7 = peg$c236;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s8 = peg$c236;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c237); }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s10 = peg$c236;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c237); }
                    }
                    peg$silentFails--;
                    if (s10 === peg$FAILED) {
                      s9 = peg$c6;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 !== peg$FAILED) {
                  s6 = input.substring(s5, peg$currPos);
                }
                s5 = s6;
              }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsestringData();
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s5 = peg$c234;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c235); }
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$currPos;
                    s6 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s7 = peg$c236;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c237); }
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s8 = peg$c236;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c237); }
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$c1;
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s10 = peg$c236;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c237); }
                        }
                        peg$silentFails--;
                        if (s10 === peg$FAILED) {
                          s9 = peg$c6;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                        if (s9 !== peg$FAILED) {
                          s7 = [s7, s8, s9];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                    if (s6 !== peg$FAILED) {
                      s6 = input.substring(s5, peg$currPos);
                    }
                    s5 = s6;
                  }
                }
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c243(s4);
            }
            s3 = s4;
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c274) {
                s4 = peg$c274;
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c275); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseexpression();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s8 = peg$c178;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c179); }
                      }
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s3;
                        s4 = peg$c9(s6);
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c232) {
            s3 = peg$c232;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c233); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c276(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c236;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c237); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parsestringData();
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s5 = peg$c234;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c235); }
            }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsestringData();
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s5 = peg$c234;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c235); }
                }
              }
            }
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c243(s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c274) {
              s4 = peg$c274;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c275); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpression();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c178;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c179); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s3;
                      s4 = peg$c9(s6);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = [];
              s5 = peg$parsestringData();
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s5 = peg$c234;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c235); }
                }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsestringData();
                  if (s5 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s5 = peg$c234;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c235); }
                    }
                  }
                }
              } else {
                s4 = peg$c0;
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c243(s4);
              }
              s3 = s4;
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c274) {
                  s4 = peg$c274;
                  peg$currPos += 2;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c275); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseexpression();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (s7 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s8 = peg$c178;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c179); }
                        }
                        if (s8 !== peg$FAILED) {
                          peg$reportedPos = s3;
                          s4 = peg$c9(s6);
                          s3 = s4;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c0;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c236;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c277(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseregexp() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 114,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c278) {
        s1 = peg$c278;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c279); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        if (peg$c280.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c281); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c280.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c281); }
            }
          }
        } else {
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s3;
          s4 = peg$c282();
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = [];
          if (peg$c283.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c284); }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c283.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c284); }
              }
            }
          } else {
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            s5 = input.substring(s4, peg$currPos);
          }
          s4 = s5;
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c285(s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$parsehereregexpData();
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = [];
            if (peg$c280.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c281); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c280.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c281); }
                }
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c282();
            }
            s3 = s4;
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$currPos;
              s5 = [];
              if (peg$c283.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c284); }
              }
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (peg$c283.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c284); }
                  }
                }
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                s5 = input.substring(s4, peg$currPos);
              }
              s4 = s5;
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c285(s4);
              }
              s3 = s4;
              if (s3 === peg$FAILED) {
                s3 = peg$parsehereregexpData();
              }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c278) {
            s3 = peg$c278;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c279); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c286.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c287); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c286.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c287); }
              }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c288(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s1 = peg$c289;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c290); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parseregexpData();
          if (s4 === peg$FAILED) {
            s4 = [];
            if (peg$c291.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c292); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c291.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c292); }
                }
              }
            } else {
              s4 = peg$c0;
            }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseregexpData();
            if (s4 === peg$FAILED) {
              s4 = [];
              if (peg$c291.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c292); }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c291.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c292); }
                  }
                }
              } else {
                s4 = peg$c0;
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s3 = input.substring(s2, peg$currPos);
          }
          s2 = s3;
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s3 = peg$c289;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c290); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              if (peg$c286.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c287); }
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c286.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c287); }
                }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c293(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseregexpData() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 115,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c294.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c295); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parseregexpData();
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c294.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c295); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseregexpData();
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c102;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c271;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c272); }
        }
        if (s1 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c273); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsehereregexpData() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 116,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsehereregexpData();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s3;
          s4 = peg$c296(s4);
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (peg$c297.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c298); }
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c299(s4);
          }
          s3 = s4;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsehereregexpData();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c296(s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (peg$c297.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c298); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c299(s4);
            }
            s3 = s4;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c102;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c300(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s3 = peg$c271;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c272); }
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c273); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s2 = input.substring(s1, peg$currPos);
        }
        s1 = s2;
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c301(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c289;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c290); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s4 = peg$c289;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c290); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c289;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c290); }
              }
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = peg$c6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s2 = input.substring(s1, peg$currPos);
          }
          s1 = s2;
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c302(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
              s1 = peg$c241;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c242); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 123) {
                s3 = peg$c176;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c177); }
              }
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = peg$c6;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c303(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c274) {
                s1 = peg$c274;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c275); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseexpression();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s5 = peg$c178;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c179); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c304(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsethrow() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 117,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTHROW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesecondaryExpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c305(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsereturn() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 118,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseRETURN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesecondaryExpression();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c306(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecontinue() {
      var s0, s1;

      var key    = peg$currPos * 204 + 119,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCONTINUE();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c307();
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebreak() {
      var s0, s1;

      var key    = peg$currPos * 204 + 120,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseBREAK();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c308();
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsedebugger() {
      var s0, s1;

      var key    = peg$currPos * 204 + 121,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseDEBUGGER();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c309();
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseundefined() {
      var s0, s1;

      var key    = peg$currPos * 204 + 122,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseUNDEFINED();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c310();
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenull() {
      var s0, s1;

      var key    = peg$currPos * 204 + 123,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseNULL();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c311();
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseunassignable() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 124,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c312) {
        s1 = peg$c312;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c313); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c314) {
          s1 = peg$c314;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c315); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCompoundAssignable() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 125,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsememberAccess();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = peg$parseunassignable();
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = peg$c6;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c316(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAssignable() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 126,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsememberAccess();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = peg$parseunassignable();
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = peg$c6;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c316(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsepositionalDestructuring();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenamedDestructuring();
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepositionalDestructuring() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 127,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepositionalDestructuringBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c102;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c103); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c173(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepositionalDestructuringBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 128,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepositionalDestructuringMemberList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEDENT();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c174(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepositionalDestructuringMemberList();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c175(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepositionalDestructuringMemberList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 129,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsepositionalDestructuringMember();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsepositionalDestructuringMember();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c9(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsepositionalDestructuringMember();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c9(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepositionalDestructuringMember() {
      var s0;

      var key    = peg$currPos * 204 + 130,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parserest();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAssignable();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenamedDestructuring() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 131,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c176;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenamedDestructuringBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c178;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c179); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c180(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenamedDestructuringBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 132,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenamedDestructuringMemberList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEDENT();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c174(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenamedDestructuringMemberList();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c175(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenamedDestructuringMemberList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 204 + 133,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsenamedDestructuringMember();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseTERMINATOR();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c13;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s6 === peg$FAILED) {
              s6 = peg$parseTERMINATOR();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseTERMINATOR();
              if (s7 === peg$FAILED) {
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsenamedDestructuringMember();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c9(s9);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseTERMINATOR();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c13;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s6 === peg$FAILED) {
                s6 = peg$parseTERMINATOR();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseTERMINATOR();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsenamedDestructuringMember();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s3;
                      s4 = peg$c9(s9);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenamedDestructuringMember() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 134,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseObjectInitialiserKeys();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c148;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAssignable();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c184(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecontextVar();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c317(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          peg$silentFails++;
          s2 = peg$parseunassignable();
          peg$silentFails--;
          if (s2 === peg$FAILED) {
            s1 = peg$c6;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseidentifier();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c318(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 135,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsereserved();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c6;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifierName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c183(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseidentifierName() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 136,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseidentifierStart();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseidentifierPart();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseidentifierPart();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseidentifierStart() {
      var s0;

      var key    = peg$currPos * 204 + 137,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseUnicodeLetter();
      if (s0 === peg$FAILED) {
        if (peg$c319.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c320); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseUnicodeEscapeSequence();
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseidentifierPart() {
      var s0;

      var key    = peg$currPos * 204 + 138,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseidentifierStart();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnicodeCombiningMark();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUnicodeDigit();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUnicodeConnectorPunctuation();
            if (s0 === peg$FAILED) {
              s0 = peg$parseZWNJ();
              if (s0 === peg$FAILED) {
                s0 = peg$parseZWJ();
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parse__() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 139,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseblockComment();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsewhitespace();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsewhitespace();
            }
          } else {
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parse_() {
      var s0;

      var key    = peg$currPos * 204 + 140,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parse__();
      if (s0 === peg$FAILED) {
        s0 = peg$c1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecomment() {
      var s0;

      var key    = peg$currPos * 204 + 141,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseblockComment();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesingleLineComment();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesingleLineComment() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 142,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c241;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c242); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseTERM();
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = peg$c6;
        } else {
          peg$currPos = s5;
          s5 = peg$c0;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c273); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseTERM();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = peg$c6;
          } else {
            peg$currPos = s5;
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c273); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseblockComment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 204 + 143,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c321) {
        s2 = peg$c321;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c322); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c323.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c324); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c323.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c324); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
              s6 = peg$c241;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c242); }
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 35) {
                s7 = peg$c241;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c242); }
              }
              if (s7 === peg$FAILED) {
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 35) {
                  s9 = peg$c241;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c242); }
                }
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = peg$c6;
                } else {
                  peg$currPos = s8;
                  s8 = peg$c0;
                }
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c323.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c324); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 35) {
                s6 = peg$c241;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c242); }
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 35) {
                  s7 = peg$c241;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c242); }
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 35) {
                    s9 = peg$c241;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c242); }
                  }
                  peg$silentFails--;
                  if (s9 === peg$FAILED) {
                    s8 = peg$c6;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c321) {
              s5 = peg$c321;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c322); }
            }
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsewhitespace() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 144,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c325.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c326); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c327;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c328); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s2 = peg$c271;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c272); }
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 13) {
              s3 = peg$c327;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c328); }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 10) {
                s4 = peg$c329;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c330); }
              }
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s1 = input.substring(s0, peg$currPos);
          }
          s0 = s1;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseINDENT() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 145,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61423) {
          s2 = peg$c331;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c332); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c333(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDEDENT() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 146,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseTERMINATOR();
      if (s3 === peg$FAILED) {
        s3 = peg$c1;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61438) {
          s2 = peg$c334;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c335); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c333(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTERM() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 147,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 13) {
        s2 = peg$c327;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c328); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s3 = peg$c329;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c330); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 61439) {
          s1 = peg$c336;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c337); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c338();
        }
        s0 = s1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTERMINATOR() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 148,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsecomment();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTERM();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseblockComment();
            if (s6 === peg$FAILED) {
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecomment();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseTERM();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseblockComment();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTERMINDENT() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 149,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseTERMINATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseINDENT();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAND() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 150,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c339) {
        s2 = peg$c339;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c340); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBREAK() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 151,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c341) {
        s2 = peg$c341;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c342); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBY() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 152,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c343) {
        s2 = peg$c343;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c344); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCATCH() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 153,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c345) {
        s2 = peg$c345;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c346); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCONTINUE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 154,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c347) {
        s2 = peg$c347;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c348); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCLASS() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 155,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c349) {
        s2 = peg$c349;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c350); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDELETE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 156,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c351) {
        s2 = peg$c351;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c352); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDEBUGGER() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 157,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c353) {
        s2 = peg$c353;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c354); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDO() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 158,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c355) {
        s2 = peg$c355;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c356); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseELSE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 159,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c357) {
        s2 = peg$c357;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c358); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEXTENDS() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 160,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c359) {
        s2 = peg$c359;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFALSE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 161,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c361) {
        s2 = peg$c361;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c362); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFINALLY() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 162,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c363) {
        s2 = peg$c363;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c364); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFOR() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 163,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c365) {
        s2 = peg$c365;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c366); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseIF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 164,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c367) {
        s2 = peg$c367;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c368); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseIN() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 165,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c369) {
        s2 = peg$c369;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c370); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseINSTANCEOF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 166,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c371) {
        s2 = peg$c371;
        peg$currPos += 10;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c372); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseIS() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 167,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c373) {
        s2 = peg$c373;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c374); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseISNT() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 168,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c375) {
        s2 = peg$c375;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c376); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseLOOP() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 169,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c377) {
        s2 = peg$c377;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c378); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNEW() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 170,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c379) {
        s2 = peg$c379;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c380); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNO() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 171,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c381) {
        s2 = peg$c381;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c382); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNOT() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 172,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c383) {
        s2 = peg$c383;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c384); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNULL() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 173,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c385) {
        s2 = peg$c385;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c386); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 174,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c387) {
        s2 = peg$c387;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c388); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOFF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 175,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c389) {
        s2 = peg$c389;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c390); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseON() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 176,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c391) {
        s2 = peg$c391;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c392); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOR() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 177,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c393) {
        s2 = peg$c393;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c394); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOWN() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 178,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c395) {
        s2 = peg$c395;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c396); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseRETURN() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 179,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c397) {
        s2 = peg$c397;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c398); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSWITCH() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 180,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c399) {
        s2 = peg$c399;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c400); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTHEN() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 181,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c401) {
        s2 = peg$c401;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c402); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTHIS() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 182,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c403) {
        s2 = peg$c403;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c404); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTHROW() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 183,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c405) {
        s2 = peg$c405;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c406); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTRUE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 184,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c407) {
        s2 = peg$c407;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c408); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTRY() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 185,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c409) {
        s2 = peg$c409;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c410); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTYPEOF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 186,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c411) {
        s2 = peg$c411;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c412); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUNDEFINED() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 187,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c413) {
        s2 = peg$c413;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c414); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUNLESS() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 188,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c415) {
        s2 = peg$c415;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c416); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUNTIL() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 189,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c417) {
        s2 = peg$c417;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c418); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseWHEN() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 190,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c419) {
        s2 = peg$c419;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c420); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseWHILE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 191,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c421) {
        s2 = peg$c421;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c422); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseYES() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 192,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c423) {
        s2 = peg$c423;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c424); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSharedKeywords() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 193,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c407) {
        s1 = peg$c407;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c408); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c361) {
          s1 = peg$c361;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c362); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c385) {
            s1 = peg$c385;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c386); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c403) {
              s1 = peg$c403;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c404); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c379) {
                s1 = peg$c379;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c380); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c351) {
                  s1 = peg$c351;
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c352); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c411) {
                    s1 = peg$c411;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c412); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 10) === peg$c371) {
                      s1 = peg$c371;
                      peg$currPos += 10;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c372); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c369) {
                        s1 = peg$c369;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c370); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c397) {
                          s1 = peg$c397;
                          peg$currPos += 6;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c398); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c405) {
                            s1 = peg$c405;
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c406); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c341) {
                              s1 = peg$c341;
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c342); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 8) === peg$c347) {
                                s1 = peg$c347;
                                peg$currPos += 8;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c348); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 8) === peg$c353) {
                                  s1 = peg$c353;
                                  peg$currPos += 8;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c354); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c367) {
                                    s1 = peg$c367;
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c368); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c357) {
                                      s1 = peg$c357;
                                      peg$currPos += 4;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c358); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 6) === peg$c399) {
                                        s1 = peg$c399;
                                        peg$currPos += 6;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c400); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c365) {
                                          s1 = peg$c365;
                                          peg$currPos += 3;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c366); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 5) === peg$c421) {
                                            s1 = peg$c421;
                                            peg$currPos += 5;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c422); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c355) {
                                              s1 = peg$c355;
                                              peg$currPos += 2;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c356); }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 3) === peg$c409) {
                                                s1 = peg$c409;
                                                peg$currPos += 3;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c410); }
                                              }
                                              if (s1 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 5) === peg$c345) {
                                                  s1 = peg$c345;
                                                  peg$currPos += 5;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c346); }
                                                }
                                                if (s1 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 7) === peg$c363) {
                                                    s1 = peg$c363;
                                                    peg$currPos += 7;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c364); }
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 5) === peg$c349) {
                                                      s1 = peg$c349;
                                                      peg$currPos += 5;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c350); }
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 7) === peg$c359) {
                                                        s1 = peg$c359;
                                                        peg$currPos += 7;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c360); }
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5) === peg$c425) {
                                                          s1 = peg$c425;
                                                          peg$currPos += 5;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c426); }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseJSKeywords() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 194,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c427) {
        s1 = peg$c427;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c428); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c429) {
          s1 = peg$c429;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c430); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c431) {
            s1 = peg$c431;
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c432); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c433) {
              s1 = peg$c433;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c434); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c435) {
                s1 = peg$c435;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c436); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c437) {
                  s1 = peg$c437;
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c438); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c439) {
                    s1 = peg$c439;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c440); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c441) {
                      s1 = peg$c441;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c442); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c443) {
                        s1 = peg$c443;
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c444); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c445) {
                          s1 = peg$c445;
                          peg$currPos += 6;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c446); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c447) {
                            s1 = peg$c447;
                            peg$currPos += 6;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c448); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c449) {
                              s1 = peg$c449;
                              peg$currPos += 6;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c450); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 10) === peg$c451) {
                                s1 = peg$c451;
                                peg$currPos += 10;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c452); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 9) === peg$c453) {
                                  s1 = peg$c453;
                                  peg$currPos += 9;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c454); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 7) === peg$c455) {
                                    s1 = peg$c455;
                                    peg$currPos += 7;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c456); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 7) === peg$c457) {
                                      s1 = peg$c457;
                                      peg$currPos += 7;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c458); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 9) === peg$c459) {
                                        s1 = peg$c459;
                                        peg$currPos += 9;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c460); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 6) === peg$c461) {
                                          s1 = peg$c461;
                                          peg$currPos += 6;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c462); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 6) === peg$c463) {
                                            s1 = peg$c463;
                                            peg$currPos += 6;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c464); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 5) === peg$c465) {
                                              s1 = peg$c465;
                                              peg$currPos += 5;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c466); }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCSKeywords() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 195,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c413) {
        s1 = peg$c413;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c414); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c401) {
          s1 = peg$c401;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c402); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c415) {
            s1 = peg$c415;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c416); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c417) {
              s1 = peg$c417;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c418); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c377) {
                s1 = peg$c377;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c378); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c389) {
                  s1 = peg$c389;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c390); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c343) {
                    s1 = peg$c343;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c344); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c419) {
                      s1 = peg$c419;
                      peg$currPos += 4;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c420); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c339) {
                        s1 = peg$c339;
                        peg$currPos += 3;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c340); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c393) {
                          s1 = peg$c393;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c394); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c375) {
                            s1 = peg$c375;
                            peg$currPos += 4;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c376); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c373) {
                              s1 = peg$c373;
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c374); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c383) {
                                s1 = peg$c383;
                                peg$currPos += 3;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c384); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c423) {
                                  s1 = peg$c423;
                                  peg$currPos += 3;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c424); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c381) {
                                    s1 = peg$c381;
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c382); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c391) {
                                      s1 = peg$c391;
                                      peg$currPos += 2;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c392); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 2) === peg$c387) {
                                        s1 = peg$c387;
                                        peg$currPos += 2;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c388); }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsereserved() {
      var s0, s1;

      var key    = peg$currPos * 204 + 196,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsemacro();
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseSharedKeywords();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCSKeywords();
          if (s0 === peg$FAILED) {
            s0 = peg$parseJSKeywords();
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeEscapeSequence() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 197,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c467) {
        s1 = peg$c467;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c468); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsehexDigit();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsehexDigit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsehexDigit();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsehexDigit();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c469(s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeLetter() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 198,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c470.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c471); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 55340) {
          s1 = peg$c472;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c473); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c474.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c475); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 55304) {
            s1 = peg$c476;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c477); }
          }
          if (s1 !== peg$FAILED) {
            if (peg$c478.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c479); }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 55401) {
              s1 = peg$c480;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c481); }
            }
            if (s1 !== peg$FAILED) {
              if (peg$c482.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c483); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 55305) {
                s1 = peg$c484;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c485); }
              }
              if (s1 !== peg$FAILED) {
                if (peg$c486.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c487); }
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 55349) {
                  s1 = peg$c488;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c489); }
                }
                if (s1 !== peg$FAILED) {
                  if (peg$c490.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c491); }
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 55300) {
                    s1 = peg$c492;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c493); }
                  }
                  if (s1 !== peg$FAILED) {
                    if (peg$c494.test(input.charAt(peg$currPos))) {
                      s2 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c495); }
                    }
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 55296) {
                      s1 = peg$c496;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c497); }
                    }
                    if (s1 !== peg$FAILED) {
                      if (peg$c498.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c499); }
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 55308) {
                        s1 = peg$c500;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c501); }
                      }
                      if (s1 !== peg$FAILED) {
                        if (peg$c502.test(input.charAt(peg$currPos))) {
                          s2 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c503); }
                        }
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 55297) {
                          s1 = peg$c504;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c505); }
                        }
                        if (s1 !== peg$FAILED) {
                          if (peg$c506.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c507); }
                          }
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 55406) {
                            s1 = peg$c508;
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c509); }
                          }
                          if (s1 !== peg$FAILED) {
                            if (peg$c510.test(input.charAt(peg$currPos))) {
                              s2 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c511); }
                            }
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 55299) {
                              s1 = peg$c512;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c513); }
                            }
                            if (s1 !== peg$FAILED) {
                              if (peg$c514.test(input.charAt(peg$currPos))) {
                                s2 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c515); }
                              }
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 55360) {
                                s1 = peg$c516;
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c517); }
                              }
                              if (s1 !== peg$FAILED) {
                                if (peg$c518.test(input.charAt(peg$currPos))) {
                                  s2 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c519); }
                                }
                                if (s2 !== peg$FAILED) {
                                  s1 = [s1, s2];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 55422) {
                                  s1 = peg$c520;
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c521); }
                                }
                                if (s1 !== peg$FAILED) {
                                  if (peg$c522.test(input.charAt(peg$currPos))) {
                                    s2 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c523); }
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s1 = [s1, s2];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 55405) {
                                    s1 = peg$c524;
                                    peg$currPos++;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c525); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    if (peg$c526.test(input.charAt(peg$currPos))) {
                                      s2 = input.charAt(peg$currPos);
                                      peg$currPos++;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c527); }
                                    }
                                    if (s2 !== peg$FAILED) {
                                      s1 = [s1, s2];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 55322) {
                                      s1 = peg$c528;
                                      peg$currPos++;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c529); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      if (peg$c530.test(input.charAt(peg$currPos))) {
                                        s2 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c531); }
                                      }
                                      if (s2 !== peg$FAILED) {
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 55298) {
                                        s1 = peg$c532;
                                        peg$currPos++;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c533); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        if (peg$c534.test(input.charAt(peg$currPos))) {
                                          s2 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c535); }
                                        }
                                        if (s2 !== peg$FAILED) {
                                          s1 = [s1, s2];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 55309) {
                                          s1 = peg$c536;
                                          peg$currPos++;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c537); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          if (peg$c538.test(input.charAt(peg$currPos))) {
                                            s2 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c539); }
                                          }
                                          if (s2 !== peg$FAILED) {
                                            s1 = [s1, s2];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeCombiningMark() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 199,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c540.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c541); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 56128) {
          s1 = peg$c542;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c543); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c544.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c545); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 55348) {
            s1 = peg$c546;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c547); }
          }
          if (s1 !== peg$FAILED) {
            if (peg$c548.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c549); }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 55300) {
              s1 = peg$c492;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c493); }
            }
            if (s1 !== peg$FAILED) {
              if (peg$c550.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c551); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 55296) {
                s1 = peg$c496;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c497); }
              }
              if (s1 !== peg$FAILED) {
                if (peg$c552.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c553); }
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 55298) {
                  s1 = peg$c532;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c533); }
                }
                if (s1 !== peg$FAILED) {
                  if (peg$c554.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c555); }
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeDigit() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 200,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c556.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c557); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 55349) {
          s1 = peg$c488;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c489); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c558.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c559); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 55300) {
            s1 = peg$c492;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c493); }
          }
          if (s1 !== peg$FAILED) {
            if (peg$c560.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c561); }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 55297) {
              s1 = peg$c504;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c505); }
            }
            if (s1 !== peg$FAILED) {
              if (peg$c562.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c563); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeConnectorPunctuation() {
      var s0;

      var key    = peg$currPos * 204 + 201,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c564.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c565); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseZWNJ() {
      var s0;

      var key    = peg$currPos * 204 + 202,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 8204) {
        s0 = peg$c566;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c567); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseZWJ() {
      var s0;

      var key    = peg$currPos * 204 + 203,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 8205) {
        s0 = peg$c568;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c569); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    // Generated by CoffeeScript 2.0.0-beta9-dev
    var associativities, c, chainableComparisonOps, constructorLookup, createInterpolation, createMemberExpression, CS, foldBinaryExpr, foldl, foldr, id, isValidRegExpFlags, LEFT_ASSOCIATIVE, negatableOps, op, p, postfixConstructorLookup, precedenceHierarchy, precedenceTable, prefixConstructorLookup, r, RIGHT_ASSOCIATIVE, rightAssocOps, rp, stripLeadingWhitespace, stripLeadingWhitespaceInterpolation;
    CS = __webpack_require__(278);
    constructorLookup = {
      '||': CS.LogicalOrOp,
      or: CS.LogicalOrOp,
      '&&': CS.LogicalAndOp,
      and: CS.LogicalAndOp,
      '|': CS.BitOrOp,
      '^': CS.BitXorOp,
      '&': CS.BitAndOp,
      '?': CS.ExistsOp,
      '==': CS.EQOp,
      is: CS.EQOp,
      '!=': CS.NEQOp,
      isnt: CS.NEQOp,
      '<=': CS.LTEOp,
      '>=': CS.GTEOp,
      '<': CS.LTOp,
      '>': CS.GTOp,
      'extends': CS.ExtendsOp,
      'instanceof': CS.InstanceofOp,
      'in': CS.InOp,
      of: CS.OfOp,
      '<<': CS.LeftShiftOp,
      '>>': CS.SignedRightShiftOp,
      '>>>': CS.UnsignedRightShiftOp,
      '+': CS.PlusOp,
      '-': CS.SubtractOp,
      '*': CS.MultiplyOp,
      '/': CS.DivideOp,
      '%': CS.RemOp,
      '**': CS.ExpOp
    };
    negatableOps = [
      'instanceof',
      'in',
      'of'
    ];
    chainableComparisonOps = [
      '<=',
      '>=',
      '<',
      '>',
      '==',
      'is',
      '!=',
      'isnt'
    ];
    rightAssocOps = [
      ';',
      '=',
      '?',
      '**'
    ];
    precedenceHierarchy = [
      [
        'or',
        '||'
      ],
      [
        'and',
        '&&'
      ],
      ['|'],
      ['^'],
      ['&'],
      ['?'],
      [
        'is',
        '==',
        'isnt',
        '!='
      ],
      [
        'instanceof',
        'in',
        'of',
        '<=',
        '>=',
        '<',
        '>'
      ],
      [
        '<<',
        '>>',
        '>>>'
      ],
      [
        '+',
        '-'
      ],
      [
        '*',
        '/',
        '%'
      ],
      ['**']
    ];
    precedenceTable = function () {
      var level, op, ops, table;
      table = {};
      for (var i$ = 0, length$ = precedenceHierarchy.length; i$ < length$; ++i$) {
        ops = precedenceHierarchy[i$];
        level = i$;
        for (var i$1 = 0, length$1 = ops.length; i$1 < length$1; ++i$1) {
          op = ops[i$1];
          table[op] = level;
        }
      }
      return table;
    }();
    RIGHT_ASSOCIATIVE = {};
    LEFT_ASSOCIATIVE = {};
    associativities = function () {
      var op, result, rightAssocOp;
      result = {};
      for (op in precedenceTable) {
        if (!isOwn$(precedenceTable, op))
          continue;
        result[op] = LEFT_ASSOCIATIVE;
      }
      for (var i$ = 0, length$ = rightAssocOps.length; i$ < length$; ++i$) {
        rightAssocOp = rightAssocOps[i$];
        result[rightAssocOp] = RIGHT_ASSOCIATIVE;
      }
      return result;
    }();
    for (var i$ = 0, length$ = negatableOps.length; i$ < length$; ++i$) {
      op = negatableOps[i$];
      (function (op) {
        var fn, negatedOp;
        fn = function (a, b) {
          return new CS.LogicalNotOp(new constructorLookup[op](a, b));
        };
        fn.prototype = constructorLookup[op].prototype;
        negatedOp = 'not ' + op;
        constructorLookup[negatedOp] = fn;
        precedenceTable[negatedOp] = precedenceTable[op];
        return associativities[negatedOp] = associativities[op];
      }(op));
    }
    prefixConstructorLookup = {
      '++': CS.PreIncrementOp,
      '--': CS.PreDecrementOp,
      '+': CS.UnaryPlusOp,
      '-': CS.UnaryNegateOp,
      '!': CS.LogicalNotOp,
      not: CS.LogicalNotOp,
      '~': CS.BitNotOp,
      'do': CS.DoOp,
      'typeof': CS.TypeofOp,
      'delete': CS.DeleteOp
    };
    postfixConstructorLookup = {
      '?': CS.UnaryExistsOp,
      '[..]': CS.ShallowCopyArray,
      '++': CS.PostIncrementOp,
      '--': CS.PostDecrementOp
    };
    foldl = function (fn, memo, list) {
      var item;
      for (var i$1 = 0, length$1 = list.length; i$1 < length$1; ++i$1) {
        item = list[i$1];
        memo = fn(memo, item);
      }
      return memo;
    };
    foldr = function (fn, memo, list) {
      var i, item;
      i = list.length;
      while (i--) {
        item = list[i];
        memo = fn(memo, item);
      }
      return memo;
    };
    foldBinaryExpr = function (parts, ignoreChains) {
      var chainStack, expr, leftOperand, nextOp, nextPrec, operator, prec, rightOperand, stack;
      if (parts.length < 3)
        return parts[0];
      stack = [].slice.call(parts, 0, 3);
      parts = [].slice.call(parts, 3);
      while (parts.length > 0) {
        nextOp = parts[0];
        if (!ignoreChains && stack.length > 2) {
          operator = stack[stack.length - 2];
          if (in$(operator, chainableComparisonOps) && in$(nextOp, chainableComparisonOps)) {
            chainStack = stack.slice(-3);
            stack = stack.slice(0, stack.length - 3);
            while (true) {
              operator = nextOp;
              chainStack.push(parts.shift(), parts.shift());
              nextOp = parts[0];
              if (nextOp) {
                nextPrec = precedenceTable[nextOp];
                prec = precedenceTable[operator];
              }
              if (!(null != nextOp && (nextPrec > prec || in$(nextOp, chainableComparisonOps))))
                break;
            }
            stack.push(new CS.ChainedComparisonOp(foldBinaryExpr(chainStack, true)));
            continue;
          }
        }
        while (stack.length > 2 && (operator = stack[stack.length - 2], (prec = precedenceTable[operator], (nextPrec = precedenceTable[nextOp], nextPrec < prec || in$(operator, chainableComparisonOps) && in$(nextOp, chainableComparisonOps) || nextPrec === prec && associativities[operator] === LEFT_ASSOCIATIVE)))) {
          rightOperand = stack.pop();
          stack.pop();
          leftOperand = stack.pop();
          stack.push(new constructorLookup[operator](leftOperand, rightOperand));
        }
        stack.push(parts.shift());
        stack.push(parts.shift());
      }
      expr = stack.pop();
      while (stack.length > 0) {
        expr = new constructorLookup[(stack.pop())](stack.pop(), expr);
      }
      return expr;
    };
    createInterpolation = function (es) {
      var init;
      init = new CS.String('').g().r('');
      return foldl(function (memo, s) {
        var left;
        if (s instanceof CS.String) {
          left = memo;
          while (left) {
            if (left instanceof CS.String) {
              if (left === init) {
                c(left, s);
                left.raw = s.raw;
                delete left.generated;
              }
              left.data = '' + left.data + s.data;
              return memo;
            } else if (left instanceof CS.ConcatOp) {
              left = left.right;
            } else {
              break;
            }
          }
        }
        return new CS.ConcatOp(memo, s);
      }, init, es);
    };
    createMemberExpression = function (e, accesses) {
      return foldl(function (left, access) {
        var F, o;
        F = function () {
        };
        F.prototype = access.op.prototype;
        o = new F;
        access.op.call.apply(access.op, [
          o,
          left
        ].concat([].slice.call(access.operands)));
        return c(o.r(left.raw + access.raw), e);
      }, e, accesses);
    };
    isValidRegExpFlags = function (flags) {
      var f, flag;
      if (!flags)
        return true;
      if (flags.length > 4)
        return false;
      flags.sort();
      flag = null;
      for (var i$1 = 0, length$1 = flags.length; i$1 < length$1; ++i$1) {
        f = flags[i$1];
        if (flag === f)
          return false;
        flag = f;
      }
      return true;
    };
    stripLeadingWhitespace = function (str) {
      var attempt, cache$, indent, match, matchStr, wholeMatch;
      str = str.trimRight();
      matchStr = str;
      indent = null;
      while (match = /\n+([^\n\S]*)/.exec(matchStr)) {
        cache$ = match;
        wholeMatch = cache$[0];
        attempt = cache$[1];
        matchStr = matchStr.slice(match.index + wholeMatch.length);
        if (!(null != indent) || 0 < attempt.length && attempt.length < indent.length)
          indent = attempt;
      }
      if (indent)
        str = str.replace(new RegExp('\\n' + indent, 'g'), '\n');
      str = str.replace(/^\n/, '');
      return str;
    };
    stripLeadingWhitespaceInterpolation = function (pieces) {
      var attempt, cache$, indent, index, match, matchStr, piece, wholeMatch;
      indent = null;
      for (var i$1 = 0, length$1 = pieces.length; i$1 < length$1; ++i$1) {
        piece = pieces[i$1];
        index = i$1;
        if (piece instanceof CS.String) {
          if (index === pieces.length - 1)
            piece.data = piece.data.replace(/\s+$/, '');
          matchStr = piece.data;
          while (match = /\n+([^\n\S]*)/.exec(matchStr)) {
            cache$ = match;
            wholeMatch = cache$[0];
            attempt = cache$[1];
            matchStr = matchStr.slice(match.index + wholeMatch.length);
            if (!(null != indent) || 0 < attempt.length && attempt.length < indent.length)
              indent = attempt;
          }
        }
      }
      if (indent)
        for (var i$2 = 0, length$2 = pieces.length; i$2 < length$2; ++i$2) {
          piece = pieces[i$2];
          index = i$2;
          if (piece instanceof CS.String) {
            piece.data = piece.data.replace(new RegExp('\\n' + indent, 'g'), '\n');
            if (index === pieces.length - 1)
              piece.data = piece.data.replace(/(\n\s*)+$/, '');
            if (index === 0)
              piece.data = piece.data.replace(/^\n/, '');
          }
        }
      return pieces;
    };
    r = function (node) {
      node.raw = text().replace(/[\uEFEF\uEFFE\uEFFF]/g, '');
      return node;
    };
    p = function (node) {
      node.line = line();
      node.column = column();
      node.offset = offset();
      return node;
    };
    rp = function (node) {
      return r(p(node));
    };
    c = function (to, from) {
      to.line = from.line;
      to.column = from.column;
      to.offset = from.offset;
      return to;
    };
    id = function (x) {
      return x;
    };
    if (!options.raw)
      r = p = rp = id;
    eval('\n  // XXX: The functions below override the default code generated by PEGjs.\n  // CoffeeScriptRedux has a preprocessor that adds control characters to\n  // mark indents/outdents/etc for PEGjs. These characters cause the line,\n  // column, and offset values to differ from the original input source code,\n  // so this section exists to properly hide those control characters when\n  // reporting location information. See #117 & #335.\n\n  var csr$controlCharacterCount = 0;\n\n  function offset() {\n    return peg$reportedPos - csr$controlCharacterCount;\n  }\n\n  function peg$computePosDetails(pos) {\n    function advance(details, startPos, endPos) {\n      var p, ch;\n\n      for (p = startPos; p < endPos; p++) {\n        ch = input.charAt(p);\n        if (ch === "\\n") {\n          if (!details.seenCR) { details.line++; }\n          details.column = 1;\n          details.seenCR = false;\n        } else if (ch === "\\r" || ch === "\\u2028" || ch === "\\u2029") {\n          details.line++;\n          details.column = 1;\n          details.seenCR = true;\n        } else if(!/[\\uEFEF\\uEFFE\\uEFFF]/.test(ch)) {\n          details.column++;\n          details.seenCR = false;\n        } else {\n          csr$controlCharacterCount++;\n        }\n      }\n    }\n\n    if (peg$cachedPos !== pos) {\n      if (peg$cachedPos > pos) {\n        csr$controlCharacterCount = 0;\n        peg$cachedPos = 0;\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n      }\n      advance(peg$cachedPosDetails, peg$cachedPos, pos);\n      peg$cachedPos = pos;\n    }\n\n    return peg$cachedPosDetails;\n  }\n  ');
    function isOwn$(o, p) {
      return {}.hasOwnProperty.call(o, p);
    }
    function in$(member, list) {
      for (var i = 0, length = list.length; i < length; ++i)
        if (i in list && list[i] === member)
          return true;
      return false;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();


/***/ }),
/* 282 */
/***/ (function(module) {

module.exports = {"_from":"git://github.com/basicer/CoffeeScriptRedux.git","_id":"coffee-script-redux@2.0.0-beta9-dev","_inBundle":false,"_integrity":"","_location":"/coffee-script-redux","_phantomChildren":{},"_requested":{"type":"git","raw":"coffee-script-redux@git://github.com/basicer/CoffeeScriptRedux.git","name":"coffee-script-redux","escapedName":"coffee-script-redux","rawSpec":"git://github.com/basicer/CoffeeScriptRedux.git","saveSpec":"git://github.com/basicer/CoffeeScriptRedux.git","fetchSpec":"git://github.com/basicer/CoffeeScriptRedux.git","gitCommittish":null},"_requiredBy":["/"],"_resolved":"git://github.com/basicer/CoffeeScriptRedux.git#b1c747564a576f3c9d5e414e450d82c6b7bcbad6","_spec":"coffee-script-redux@git://github.com/basicer/CoffeeScriptRedux.git","_where":"/Users/basicer/code/esper-master/plugins/lang-coffeescript","author":{"name":"Michael Ficarra"},"bin":{"coffee":"./bin/coffee"},"bugs":{"url":"https://github.com/michaelficarra/CoffeeScriptRedux/issues"},"bundleDependencies":false,"dependencies":{"StringScanner":"~0.0.3","cscodegen":"git+https://github.com/michaelficarra/cscodegen.git#73fd7202ac086c26f18c9d56f025b18b3c6f5383","escodegen":"~1.2.0","esmangle":"~1.0.0","nopt":"~2.1.2","source-map":"0.1.x"},"deprecated":false,"description":"Unfancy JavaScript","devDependencies":{"cluster":"~0.7.7","commonjs-everywhere":"~0.9.0","mocha":"~1.12.0","pegjs":"~0.8.0","pegjs-each-code":"~0.2.0","semver":"~2.1.0"},"engines":{"node":"0.8.x || 0.10.x"},"homepage":"https://github.com/michaelficarra/CoffeeScriptRedux","keywords":["coffeescript","javascript","language","compiler"],"license":"3-clause BSD","licenses":[{"type":"3-clause BSD","url":"https://raw.github.com/michaelficarra/CoffeeScriptRedux/master/LICENSE"}],"main":"./lib/module","name":"coffee-script-redux","optionalDependencies":{"cscodegen":"git+https://github.com/michaelficarra/cscodegen.git#73fd7202ac086c26f18c9d56f025b18b3c6f5383","escodegen":"~1.2.0","esmangle":"~1.0.0","source-map":"0.1.x"},"repository":{"type":"git","url":"git://github.com/michaelficarra/CoffeeScriptRedux.git"},"scripts":{"build":"make -j build","test":"make -j test"},"version":"2.0.0-beta9-dev","warnings":[{"code":"ENOTSUP","required":{"node":"0.8.x || 0.10.x"},"pkgid":"coffee-script-redux@2.0.0-beta9-dev"}]};

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {// Generated by CoffeeScript 2.0.0-beta9-dev
var any, assignment, beingDeclared, cache$, cache$1, collectIdentifiers, concat, concatMap, CS, declarationsNeeded, declarationsNeededRecursive, defaultRules, difference, divMod, dynamicMemberAccess, enabledHelpers, envEnrichments, exports, expr, extractNumber, extractStaticRange, fn, foldl, foldl1, forceBlock, generateMutatingWalker, generateSoak, genSym, h, hasSoak, helperNames, helpers, inlineHelpers, intersect, isIdentifierName, isScopeBoundary, JS, jsReserved, makeReturn, makeVarDeclaration, map, mapChildNodes, memberAccess, needsCaching, nub, owns, partition, span, stmt, union, usedAsExpression, variableDeclarations;
cache$ = __webpack_require__(277);
any = cache$.any;
concat = cache$.concat;
concatMap = cache$.concatMap;
difference = cache$.difference;
divMod = cache$.divMod;
foldl = cache$.foldl;
foldl1 = cache$.foldl1;
intersect = cache$.intersect;
map = cache$.map;
nub = cache$.nub;
owns = cache$.owns;
partition = cache$.partition;
span = cache$.span;
union = cache$.union;
cache$1 = __webpack_require__(276);
beingDeclared = cache$1.beingDeclared;
usedAsExpression = cache$1.usedAsExpression;
envEnrichments = cache$1.envEnrichments;
CS = __webpack_require__(278);
JS = __webpack_require__(284);
exports = null != ( true && null != module ? module.exports : void 0) ?  true && null != module ? module.exports : void 0 : this;
jsReserved = [
  'break',
  'case',
  'catch',
  'class',
  'const',
  'continue',
  'debugger',
  'default',
  'delete',
  'do',
  'else',
  'enum',
  'export',
  'extends',
  'false',
  'finally',
  'for',
  'function',
  'if',
  'implements',
  'import',
  'in',
  'instanceof',
  'interface',
  'let',
  'native',
  'new',
  'null',
  'package',
  'private',
  'protected',
  'public',
  'return',
  'static',
  'super',
  'switch',
  'this',
  'throw',
  'true',
  'try',
  'typeof',
  'var',
  'void',
  'while',
  'with',
  'yield',
  'arguments',
  'eval'
];
mapChildNodes = function (node, mapper, reducer, identity, opts) {
  var child, childName;
  if (null == opts)
    opts = {};
  if (null != opts.listReducer)
    opts.listReducer;
  else
    opts.listReducer = reducer;
  if (null != opts.listIdentity)
    opts.listIdentity;
  else
    opts.listIdentity = identity;
  return foldl(identity, function (accum$) {
    for (var i$ = 0, length$ = node.childNodes.length; i$ < length$; ++i$) {
      childName = node.childNodes[i$];
      if (!(null != node[childName]))
        continue;
      accum$.push(in$(childName, node.listMembers) ? foldl(opts.listIdentity, function (accum$1) {
        for (var i$1 = 0, length$1 = node[childName].length; i$1 < length$1; ++i$1) {
          child = node[childName][i$1];
          if (!('undefined' !== typeof child && null != child))
            continue;
          accum$1.push(mapper(child, childName));
        }
        return accum$1;
      }.call(this, []), opts.listReducer) : mapper(node[childName], childName));
    }
    return accum$;
  }.call(this, []), reducer);
};
genSym = function () {
  var genSymCounter;
  genSymCounter = 0;
  return function (pre) {
    return new JS.GenSym(pre, ++genSymCounter);
  };
}();
stmt = function (e) {
  var walk;
  if (!(null != e))
    return e;
  if (e.isStatement) {
    return e;
  } else if (e['instanceof'](JS.SequenceExpression)) {
    walk = function (seq) {
      return concatMap(seq.expressions, function (e) {
        if (e['instanceof'](JS.SequenceExpression)) {
          return walk(e);
        } else {
          return [stmt(e)];
        }
      });
    };
    return new JS.BlockStatement(walk(e));
  } else if (e['instanceof'](JS.ConditionalExpression)) {
    return new JS.IfStatement(expr(e.test), stmt(e.consequent), stmt(e.alternate));
  } else {
    return new JS.ExpressionStatement(e);
  }
};
expr = function (s) {
  var accum, alternate, block, consequent, iife, lastExpression, push;
  if (!(null != s))
    return s;
  if (s.isExpression) {
    return s;
  } else if (s['instanceof'](JS.BlockStatement)) {
    switch (s.body.length) {
    case 0:
      return helpers.undef();
    case 1:
      return expr(s.body[0]);
    default:
      return new JS.SequenceExpression(map(s.body, expr));
    }
  } else if (s['instanceof'](JS.ExpressionStatement)) {
    return s.expression;
  } else if (s['instanceof'](JS.ThrowStatement)) {
    return new JS.CallExpression(new JS.FunctionExpression(null, [], forceBlock(s)), []);
  } else if (s['instanceof'](JS.IfStatement)) {
    consequent = expr(null != s.consequent ? s.consequent : helpers.undef());
    alternate = expr(null != s.alternate ? s.alternate : helpers.undef());
    return new JS.ConditionalExpression(s.test, consequent, alternate);
  } else if (s['instanceof'](JS.ForInStatement, JS.ForStatement, JS.WhileStatement)) {
    accum = genSym('accum');
    push = function (x) {
      return stmt(new JS.CallExpression(memberAccess(accum, 'push'), [x]));
    };
    s.body = forceBlock(s.body);
    if (s.body.body.length) {
      lastExpression = s.body.body.slice(-1)[0];
      if (!lastExpression['instanceof'](JS.ThrowStatement))
        s.body.body[s.body.body.length - 1] = push(expr(lastExpression));
    } else {
      s.body.body.push(push(helpers.undef()));
    }
    block = new JS.BlockStatement([
      s,
      new JS.ReturnStatement(accum)
    ]);
    iife = new JS.FunctionExpression(null, [accum], block);
    return new JS.CallExpression(memberAccess(iife.g(), 'call'), [
      new JS.ThisExpression,
      new JS.ArrayExpression([])
    ]);
  } else if (s['instanceof'](JS.SwitchStatement, JS.TryStatement)) {
    block = new JS.BlockStatement([makeReturn(s)]);
    iife = new JS.FunctionExpression(null, [], block);
    return new JS.CallExpression(memberAccess(iife.g(), 'call'), [new JS.ThisExpression]);
  } else {
    throw new Error('expr: Cannot use a ' + s.type + ' as a value');
  }
};
isScopeBoundary = function (node) {
  return node['instanceof'](JS.FunctionExpression, JS.FunctionDeclaration) && !node.generated;
};
makeReturn = function (node) {
  var stmts;
  if (!(null != node))
    return new JS.ReturnStatement;
  if (node['instanceof'](JS.BlockStatement)) {
    return new JS.BlockStatement([].slice.call(node.body.slice(0, -1)).concat([makeReturn(node.body.slice(-1)[0])]));
  } else if (node['instanceof'](JS.SequenceExpression)) {
    return new JS.SequenceExpression([].slice.call(node.expressions.slice(0, -1)).concat([makeReturn(node.expressions.slice(-1)[0])]));
  } else if (node['instanceof'](JS.IfStatement)) {
    return new JS.IfStatement(node.test, makeReturn(node.consequent), null != node.alternate ? makeReturn(node.alternate) : null);
  } else if (node['instanceof'](JS.SwitchStatement)) {
    return new JS.SwitchStatement(node.discriminant, map(node.cases, makeReturn));
  } else if (node['instanceof'](JS.SwitchCase)) {
    if (!node.consequent.length)
      return node;
    stmts = node.consequent.slice(-1)[0]['instanceof'](JS.BreakStatement) ? node.consequent.slice(0, -1) : node.consequent;
    return new JS.SwitchCase(node.test, [].slice.call(stmts.slice(0, -1)).concat([makeReturn(stmts.slice(-1)[0])]));
  } else if (node['instanceof'](JS.TryStatement)) {
    return new JS.TryStatement(makeReturn(node.block), map(node.handlers, makeReturn), null != node.finalizer ? makeReturn(node.finalizer) : null);
  } else if (node['instanceof'](JS.CatchClause)) {
    return new JS.CatchClause(node.param, makeReturn(node.body));
  } else if (node['instanceof'](JS.ThrowStatement, JS.ReturnStatement, JS.BreakStatement, JS.ContinueStatement, JS.DebuggerStatement)) {
    return node;
  } else if (node['instanceof'](JS.UnaryExpression) && node.operator === 'void') {
    return new JS.ReturnStatement;
  } else {
    return new JS.ReturnStatement(expr(node));
  }
};
generateMutatingWalker = function (fn) {
  return function (node) {
    var args, mapper, reducer;
    args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
    mapper = function (child, nameInParent) {
      return [
        nameInParent,
        fn.apply(child, args)
      ];
    };
    reducer = function (parent, param$) {
      var cache$2, name, newChild;
      {
        cache$2 = param$;
        name = cache$2[0];
        newChild = cache$2[1];
      }
      parent[name] = newChild;
      return parent;
    };
    return mapChildNodes(node, mapper, reducer, node, {
      listReducer: function (param$, param$1) {
        var _, accum, cache$2, cache$3, name, newChild;
        {
          cache$2 = param$;
          _ = cache$2[0];
          accum = cache$2[1];
        }
        {
          cache$3 = param$1;
          name = cache$3[0];
          newChild = cache$3[1];
        }
        return [
          name,
          accum.concat(newChild)
        ];
      },
      listIdentity: [
        null,
        []
      ]
    });
  };
};
declarationsNeeded = function (node) {
  if (!(null != node))
    return [];
  if (node['instanceof'](JS.AssignmentExpression) && node.operator === '=' && node.left['instanceof'](JS.Identifier)) {
    return [node.left.name];
  } else if (node['instanceof'](JS.ForInStatement) && node.left['instanceof'](JS.Identifier)) {
    return [node.left.name];
  } else {
    return [];
  }
};
declarationsNeededRecursive = function (node) {
  if (!(null != node))
    return [];
  if (isScopeBoundary(node)) {
    return [];
  } else {
    return union(declarationsNeeded(node), mapChildNodes(node, declarationsNeededRecursive, function (a, b) {
      return a.concat(b);
    }, []));
  }
};
variableDeclarations = function (node) {
  if (!(null != node))
    return [];
  if (node['instanceof'](JS.FunctionDeclaration)) {
    return [node.id];
  } else if (isScopeBoundary(node)) {
    return [];
  } else if (node['instanceof'](JS.VariableDeclarator)) {
    return [node.id];
  } else {
    return mapChildNodes(node, variableDeclarations, function (a, b) {
      return a.concat(b);
    }, []);
  }
};
collectIdentifiers = function (node) {
  return nub(function () {
    switch (false) {
    case !!(null != node):
      return [];
    case !node['instanceof'](JS.Identifier):
      return [node.name];
    case !(node['instanceof'](JS.MemberExpression) && !node.computed):
      return collectIdentifiers(node.object);
    default:
      return mapChildNodes(node, collectIdentifiers, function (a, b) {
        return a.concat(b);
      }, []);
    }
  }.call(this));
};
needsCaching = function (node) {
  if (!(null != node))
    return false;
  return envEnrichments(node, []).length > 0 || node['instanceof'](CS.FunctionApplications, CS.DoOp, CS.NewOp, CS.ArrayInitialiser, CS.ObjectInitialiser, CS.RegExp, CS.HeregExp, CS.PreIncrementOp, CS.PostIncrementOp, CS.PreDecrementOp, CS.PostDecrementOp, CS.Range) || mapChildNodes(node, needsCaching, function (a, b) {
    return a || b;
  }, false);
};
forceBlock = function (node) {
  if (!(null != node))
    return new JS.BlockStatement([]);
  node = stmt(node);
  if (node['instanceof'](JS.BlockStatement)) {
    return node;
  } else {
    return new JS.BlockStatement([node]);
  }
};
makeVarDeclaration = function (vars) {
  var decls, v;
  vars.sort(function (a, b) {
    a = a.name.toLowerCase();
    b = b.name.toLowerCase();
    if (a < b) {
      return -1;
    } else if (a > b) {
      return 1;
    } else {
      return 0;
    }
  });
  decls = function (accum$) {
    for (var i$ = 0, length$ = vars.length; i$ < length$; ++i$) {
      v = vars[i$];
      accum$.push(new JS.VariableDeclarator(v));
    }
    return accum$;
  }.call(this, []);
  return new JS.VariableDeclaration('var', decls);
};
isIdentifierName = function (name) {
  return !in$(name, jsReserved) && /^[$_a-z][$_a-z0-9]*$/i.test(name);
};
memberAccess = function (e, member) {
  if (isIdentifierName(member)) {
    return new JS.MemberExpression(false, expr(e), new JS.Identifier(member));
  } else {
    return new JS.MemberExpression(true, expr(e), new JS.Literal(member));
  }
};
dynamicMemberAccess = function (e, index) {
  if (index['instanceof'](JS.Literal) && typeof index.value === 'string') {
    return memberAccess(e, index.value);
  } else {
    return new JS.MemberExpression(true, expr(e), expr(index));
  }
};
assignment = function (assignee, expression, valueUsed) {
  var alternate, assignments, consequent, e, elements, i, index, m, numElements, p, propName, restName, size, test;
  if (null == valueUsed)
    valueUsed = false;
  assignments = [];
  expression = expr(expression);
  switch (false) {
  case !assignee.rest:
  case !assignee['instanceof'](JS.ArrayExpression):
    e = expression;
    if (valueUsed || assignee.elements.length > 1) {
      e = genSym('cache');
      assignments.push(new JS.AssignmentExpression('=', e, expression));
    }
    elements = assignee.elements;
    for (var i$ = 0, length$ = elements.length; i$ < length$; ++i$) {
      m = elements[i$];
      i = i$;
      if (m.rest)
        break;
      assignments.push(assignment(m, dynamicMemberAccess(e, new JS.Literal(i)), valueUsed));
    }
    if (elements.length > 0) {
      if (elements.slice(-1)[0].rest) {
        numElements = elements.length;
        restName = elements[numElements - 1] = elements[numElements - 1].expression;
        test = new JS.BinaryExpression('<=', new JS.Literal(numElements), memberAccess(e, 'length'));
        consequent = helpers.slice(e, new JS.Literal(numElements - 1));
        alternate = new JS.ArrayExpression([]);
        assignments.push(stmt(new JS.AssignmentExpression('=', restName, new JS.ConditionalExpression(test, consequent, alternate))));
      } else if (any(elements, function (p) {
          return p.rest;
        })) {
        restName = index = null;
        for (var i$1 = 0, length$1 = elements.length; i$1 < length$1; ++i$1) {
          p = elements[i$1];
          i = i$1;
          if (!p.rest)
            continue;
          restName = p.expression;
          index = i;
          break;
        }
        elements.splice(index, 1);
        numElements = elements.length;
        size = genSym('size');
        assignments.push(new JS.AssignmentExpression('=', size, memberAccess(e, 'length')));
        test = new JS.BinaryExpression('>', size, new JS.Literal(numElements));
        consequent = helpers.slice(e, new JS.Literal(index), new JS.BinaryExpression('-', size, new JS.Literal(numElements - index)));
        assignments.push(new JS.AssignmentExpression('=', restName, new JS.ConditionalExpression(test, consequent, new JS.ArrayExpression([]))));
        for (var i$2 = 0, length$2 = elements.slice(index).length; i$2 < length$2; ++i$2) {
          p = elements.slice(index)[i$2];
          i = i$2;
          assignments.push(stmt(new JS.AssignmentExpression('=', p, new JS.MemberExpression(true, e, new JS.BinaryExpression('-', size, new JS.Literal(numElements - index - i))))));
        }
      }
      if (any(elements, function (p) {
          return p.rest;
        }))
        throw new Error('Positional destructuring assignments may not have more than one rest operator');
    }
    break;
  case !assignee['instanceof'](JS.ObjectExpression):
    e = expression;
    if (valueUsed || assignee.properties.length > 1) {
      e = genSym('cache');
      assignments.push(new JS.AssignmentExpression('=', e, expression));
    }
    for (var i$3 = 0, length$3 = assignee.properties.length; i$3 < length$3; ++i$3) {
      m = assignee.properties[i$3];
      propName = m.key['instanceof'](JS.Identifier) ? new JS.Literal(m.key.name) : m.key;
      assignments.push(assignment(m.value, dynamicMemberAccess(e, propName), valueUsed));
    }
    break;
  case !assignee['instanceof'](JS.Identifier, JS.GenSym, JS.MemberExpression):
    assignments.push(new JS.AssignmentExpression('=', assignee, expr(expression)));
    break;
  default:
    throw new Error('compile: assignment: unassignable assignee: ' + assignee.type);
  }
  switch (assignments.length) {
  case 0:
    if (e === expression) {
      return helpers.undef();
    } else {
      return expression;
    }
  case 1:
    return assignments[0];
  default:
    return new JS.SequenceExpression(valueUsed ? [].slice.call(assignments).concat([e]) : assignments);
  }
};
hasSoak = function (node) {
  switch (false) {
  case !node['instanceof'](CS.SoakedFunctionApplication, CS.SoakedMemberAccessOp, CS.SoakedProtoMemberAccessOp, CS.SoakedDynamicMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp):
    return true;
  case !node['instanceof'](CS.FunctionApplication):
    return hasSoak(node['function']);
  case !node['instanceof'](CS.MemberAccessOps):
    return hasSoak(node.expression);
  default:
    return false;
  }
};
generateSoak = function () {
  var fn;
  fn = function (node) {
    var cache$2, cache$3, cache$4, cache$5, cache$6, ctor, e, memberName, sym, tests, typeofTest;
    switch (false) {
    case !node['instanceof'](CS.MemberAccessOp, CS.ProtoMemberAccessOp):
      cache$2 = fn(node.expression);
      tests = cache$2[0];
      e = cache$2[1];
      return [
        tests,
        new node.constructor(e, node.memberName)
      ];
    case !node['instanceof'](CS.DynamicMemberAccessOp, CS.DynamicProtoMemberAccessOp):
      cache$3 = fn(node.expression);
      tests = cache$3[0];
      e = cache$3[1];
      return [
        tests,
        new node.constructor(e, node.indexingExpr)
      ];
    case !node['instanceof'](CS.FunctionApplication):
      cache$4 = fn(node['function']);
      tests = cache$4[0];
      e = cache$4[1];
      return [
        tests,
        new CS.FunctionApplication(e, node['arguments'])
      ];
    case !node['instanceof'](CS.SoakedFunctionApplication):
      cache$5 = fn(node['function']);
      tests = cache$5[0];
      e = cache$5[1];
      typeofTest = function (e) {
        return new CS.EQOp(new CS.String('function'), new CS.TypeofOp(e));
      };
      if (needsCaching(e)) {
        sym = new CS.GenSym('cache');
        return [
          [].slice.call(tests).concat([typeofTest(new CS.AssignOp(sym, e))]),
          new CS.FunctionApplication(sym, node['arguments'])
        ];
      } else {
        return [
          [].slice.call(tests).concat([typeofTest(e)]),
          new CS.FunctionApplication(e, node['arguments'])
        ];
      }
    case !node['instanceof'](CS.SoakedMemberAccessOp, CS.SoakedProtoMemberAccessOp, CS.SoakedDynamicMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp):
      memberName = function () {
        switch (false) {
        case !node['instanceof'](CS.SoakedMemberAccessOp, CS.SoakedProtoMemberAccessOp):
          return 'memberName';
        case !node['instanceof'](CS.SoakedDynamicMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp):
          return 'indexingExpr';
        }
      }.call(this);
      ctor = function () {
        switch (false) {
        case !node['instanceof'](CS.SoakedMemberAccessOp):
          return CS.MemberAccessOp;
        case !node['instanceof'](CS.SoakedProtoMemberAccessOp):
          return CS.ProtoMemberAccessOp;
        case !node['instanceof'](CS.SoakedDynamicMemberAccessOp):
          return CS.DynamicMemberAccessOp;
        case !node['instanceof'](CS.SoakedDynamicProtoMemberAccessOp):
          return CS.DynamicProtoMemberAccessOp;
        }
      }.call(this);
      cache$6 = fn(node.expression);
      tests = cache$6[0];
      e = cache$6[1];
      if (needsCaching(e)) {
        sym = new CS.GenSym('cache');
        return [
          [].slice.call(tests).concat([new CS.UnaryExistsOp(new CS.AssignOp(sym, e))]),
          new ctor(sym, node[memberName])
        ];
      } else {
        return [
          [].slice.call(tests).concat([new CS.UnaryExistsOp(e)]),
          new ctor(e, node[memberName])
        ];
      }
    default:
      return [
        [],
        node
      ];
    }
  };
  return function (node) {
    var cache$2, e, tests;
    cache$2 = fn(node);
    tests = cache$2[0];
    e = cache$2[1];
    return new CS.Conditional(foldl1(tests, function (memo, t) {
      return new CS.LogicalAndOp(memo, t);
    }), e);
  };
}();
extractNumber = function (what) {
  if (what['instanceof'](CS.Int))
    return what.data;
  if (!what['instanceof'](CS.UnaryNegateOp))
    return false;
  if (!what.expression['instanceof'](CS.Int))
    return false;
  return 0 - what.expression.data;
};
extractStaticRange = function (range) {
  var left, right;
  if (!range['instanceof'](CS.Range))
    return;
  left = extractNumber(range.left);
  right = extractNumber(range.right);
  if (left === false)
    return;
  if (right === false)
    return;
  return [
    left,
    right
  ];
};
helperNames = {};
helpers = {
  'extends': function () {
    var block, child, ctor, f, key, parent, protoAccess;
    protoAccess = function (e) {
      return memberAccess(e, 'prototype');
    };
    child = new JS.Identifier('child');
    parent = new JS.Identifier('parent');
    ctor = new JS.Identifier('ctor');
    key = new JS.Identifier('key');
    block = [
      new JS.ForInStatement(new JS.VariableDeclaration('var', [new JS.VariableDeclarator(key, null)]), parent, new JS.IfStatement(helpers.isOwn(parent, key), f = stmt(new JS.AssignmentExpression('=', new JS.MemberExpression(true, child, key), new JS.MemberExpression(true, parent, key))))),
      new JS.FunctionDeclaration(ctor, [], new JS.BlockStatement([stmt(new JS.AssignmentExpression('=', memberAccess(new JS.ThisExpression, 'constructor'), child))])),
      new JS.AssignmentExpression('=', protoAccess(ctor), protoAccess(parent)),
      new JS.AssignmentExpression('=', protoAccess(child), new JS.NewExpression(ctor, [])),
      new JS.AssignmentExpression('=', memberAccess(child, '__super__'), protoAccess(parent)),
      new JS.ReturnStatement(child)
    ];
    return new JS.FunctionDeclaration(helperNames['extends'], [
      child,
      parent
    ], new JS.BlockStatement(map(block, stmt)));
  },
  construct: function () {
    var args, block, child, ctor, fn, result;
    child = new JS.Identifier('child');
    ctor = new JS.Identifier('ctor');
    fn = new JS.Identifier('fn');
    args = new JS.Identifier('args');
    result = new JS.Identifier('result');
    block = [
      new JS.VariableDeclaration('var', [new JS.VariableDeclarator(fn, new JS.FunctionExpression(null, [], new JS.BlockStatement([])))]),
      new JS.AssignmentExpression('=', memberAccess(fn, 'prototype'), memberAccess(ctor, 'prototype')),
      new JS.VariableDeclaration('var', [
        new JS.VariableDeclarator(child, new JS.NewExpression(fn, [])),
        new JS.VariableDeclarator(result, new JS.CallExpression(memberAccess(ctor, 'apply'), [
          child,
          args
        ]))
      ]),
      new JS.ReturnStatement(new JS.ConditionalExpression(new JS.BinaryExpression('===', result, new JS.CallExpression(new JS.Identifier('Object'), [result])), result, child))
    ];
    return new JS.FunctionDeclaration(helperNames.construct, [
      ctor,
      args
    ], new JS.BlockStatement(map(block, stmt)));
  },
  isOwn: function () {
    var args, functionBody, hop, params;
    hop = memberAccess(new JS.ObjectExpression([]), 'hasOwnProperty');
    params = args = [
      new JS.Identifier('o'),
      new JS.Identifier('p')
    ];
    functionBody = [new JS.CallExpression(memberAccess(hop, 'call'), args)];
    return new JS.FunctionDeclaration(helperNames.isOwn, params, makeReturn(new JS.BlockStatement(map(functionBody, stmt))));
  },
  'in': function () {
    var functionBody, i, length, list, loopBody, member, varDeclaration;
    member = new JS.Identifier('member');
    list = new JS.Identifier('list');
    i = new JS.Identifier('i');
    length = new JS.Identifier('length');
    varDeclaration = new JS.VariableDeclaration('var', [
      new JS.VariableDeclarator(i, new JS.Literal(0)),
      new JS.VariableDeclarator(length, memberAccess(list, 'length'))
    ]);
    loopBody = new JS.IfStatement(new JS.LogicalExpression('&&', new JS.BinaryExpression('in', i, list), new JS.BinaryExpression('===', new JS.MemberExpression(true, list, i), member)), new JS.ReturnStatement(new JS.Literal(true)));
    functionBody = [
      new JS.ForStatement(varDeclaration, new JS.BinaryExpression('<', i, length), new JS.UpdateExpression('++', true, i), loopBody),
      new JS.Literal(false)
    ];
    return new JS.FunctionDeclaration(helperNames['in'], [
      member,
      list
    ], makeReturn(new JS.BlockStatement(map(functionBody, stmt))));
  }
};
enabledHelpers = [];
for (h in helpers) {
  if (!isOwn$(helpers, h))
    continue;
  fn = helpers[h];
  helperNames[h] = genSym(h);
  helpers[h] = function (h, fn) {
    return function () {
      enabledHelpers.push(fn());
      return (helpers[h] = function () {
        return new JS.CallExpression(helperNames[h], arguments);
      }).apply(this, arguments);
    };
  }(h, fn);
}
inlineHelpers = {
  exp: function () {
    return new JS.CallExpression(memberAccess(new JS.Identifier('Math'), 'pow'), arguments);
  },
  undef: function () {
    return new JS.UnaryExpression('void', new JS.Literal(0));
  },
  slice: function () {
    return new JS.CallExpression(memberAccess(memberAccess(new JS.ArrayExpression([]), 'slice'), 'call'), arguments);
  }
};
for (h in inlineHelpers) {
  if (!isOwn$(inlineHelpers, h))
    continue;
  fn = inlineHelpers[h];
  helpers[h] = fn;
}
exports.Compiler = function () {
  Compiler.compile = function (this$) {
    return function () {
      var cache$2;
      return (cache$2 = new this$()).compile.apply(cache$2, [].slice.call(arguments));
    };
  }(Compiler);
  defaultRules = [
    [
      CS.Program,
      function (param$) {
        var block, body, cache$2, cache$3, decls, fnDeclHelpers, inScope, options, otherHelpers, pkg, program;
        {
          cache$2 = param$;
          body = cache$2.body;
          inScope = cache$2.inScope;
          options = cache$2.options;
        }
        if (!(null != body))
          return new JS.Program([]);
        block = stmt(body);
        block = block['instanceof'](JS.BlockStatement) ? block.body : [block];
        cache$3 = partition(enabledHelpers, function (helper) {
          return helper['instanceof'](JS.FunctionDeclaration);
        });
        fnDeclHelpers = cache$3[0];
        otherHelpers = cache$3[1];
        [].push.apply(block, fnDeclHelpers);
        [].unshift.apply(block, otherHelpers);
        decls = nub(concatMap(block, declarationsNeededRecursive));
        if (decls.length && !options.bare)
          block = [stmt(new JS.UnaryExpression('void', new JS.CallExpression(memberAccess(new JS.FunctionExpression(null, [], new JS.BlockStatement(block)), 'call'), [new JS.ThisExpression])))];
        pkg = __webpack_require__(282);
        program = new JS.Program(block);
        program.leadingComments = [{
            type: 'Line',
            value: ' Generated by CoffeeScript ' + pkg.version
          }];
        return program;
      }
    ],
    [
      CS.Block,
      function (param$) {
        var statements;
        statements = param$.statements;
        switch (statements.length) {
        case 0:
          return new JS.EmptyStatement;
        case 1:
          return new stmt(statements[0]);
        default:
          return new JS.BlockStatement(concatMap(statements, function (s) {
            if (s['instanceof'](JS.BlockStatement)) {
              return map(s.body, stmt);
            } else if (s['instanceof'](JS.SequenceExpression)) {
              return map(s.expressions, stmt);
            } else {
              return [stmt(s)];
            }
          }));
        }
      }
    ],
    [
      CS.SeqOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.SequenceExpression([
          left,
          right
        ]);
      }
    ],
    [
      CS.Conditional,
      function (param$) {
        var ancestry, cache$2, condition;
        var alternate, consequent;
        {
          cache$2 = param$;
          condition = cache$2.condition;
          consequent = cache$2.consequent;
          alternate = cache$2.alternate;
          ancestry = cache$2.ancestry;
        }
        if (null != alternate) {
          if (!(null != consequent))
            throw new Error('Conditional with non-null alternate requires non-null consequent');
          if (!alternate['instanceof'](JS.IfStatement))
            alternate = forceBlock(alternate);
        }
        if (null != alternate || (null != ancestry[0] ? ancestry[0]['instanceof'](CS.Conditional) : void 0))
          consequent = forceBlock(consequent);
        return new JS.IfStatement(expr(condition), stmt(consequent), alternate);
      }
    ],
    [
      CS.ForIn,
      function (param$) {
        var block, body, cache$2, compile, e, filter, i, increment, k, keyAssignee, length, numericRange, op, step, target, update, valAssignee, varDeclaration;
        {
          cache$2 = param$;
          valAssignee = cache$2.valAssignee;
          keyAssignee = cache$2.keyAssignee;
          target = cache$2.target;
          step = cache$2.step;
          filter = cache$2.filter;
          body = cache$2.body;
          compile = cache$2.compile;
        }
        i = genSym('i');
        length = genSym('length');
        block = forceBlock(body);
        if (!block.body.length)
          block.body.push(stmt(helpers.undef()));
        numericRange = extractStaticRange(this.target);
        increment = null != this.step && !(this.step['instanceof'](CS.Int) && this.step.data === 1) ? function (x) {
          return new JS.AssignmentExpression('+=', x, step);
        } : null != numericRange && numericRange[1] < numericRange[0] ? function (x) {
          return new JS.UpdateExpression('--', true, x);
        } : function (x) {
          return new JS.UpdateExpression('++', true, x);
        };
        if (null != numericRange) {
          varDeclaration = new JS.VariableDeclaration('var', [new JS.VariableDeclarator(i, compile(this.target.left))]);
          update = increment(i);
          if (null != this.filter)
            block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', filter), new JS.ContinueStatement)));
          if (null != keyAssignee) {
            k = genSym('k');
            varDeclaration.declarations.unshift(new JS.VariableDeclarator(k, new JS.Literal(0)));
            update = new JS.SequenceExpression([
              increment(k),
              update
            ]);
            block.body.unshift(stmt(new JS.AssignmentExpression('=', keyAssignee, k)));
          }
          if (null != valAssignee)
            block.body.unshift(stmt(new JS.AssignmentExpression('=', valAssignee, i)));
          if (numericRange[1] > numericRange[0]) {
            op = this.target.isInclusive ? '<=' : '<';
          } else {
            op = this.target.isInclusive ? '>=' : '>';
          }
          return new JS.ForStatement(varDeclaration, new JS.BinaryExpression(op, i, compile(this.target.right)), update, block);
        }
        e = needsCaching(this.target) ? genSym('cache') : target;
        varDeclaration = new JS.VariableDeclaration('var', [
          new JS.VariableDeclarator(i, new JS.Literal(0)),
          new JS.VariableDeclarator(length, memberAccess(e, 'length'))
        ]);
        if (!(e === target))
          varDeclaration.declarations.unshift(new JS.VariableDeclarator(e, target));
        if (null != this.filter)
          block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', filter), new JS.ContinueStatement)));
        if (null != keyAssignee)
          block.body.unshift(stmt(assignment(keyAssignee, i)));
        if (null != valAssignee)
          block.body.unshift(stmt(assignment(valAssignee, new JS.MemberExpression(true, e, i))));
        return new JS.ForStatement(varDeclaration, new JS.BinaryExpression('<', i, length), increment(i), block);
      }
    ],
    [
      CS.ForOf,
      function (param$) {
        var block, body, cache$2, e, filter, keyAssignee, right, target, valAssignee;
        {
          cache$2 = param$;
          keyAssignee = cache$2.keyAssignee;
          valAssignee = cache$2.valAssignee;
          target = cache$2.target;
          filter = cache$2.filter;
          body = cache$2.body;
        }
        block = forceBlock(body);
        if (!block.body.length)
          block.body.push(stmt(helpers.undef()));
        e = this.isOwn && needsCaching(this.target) ? genSym('cache') : expr(target);
        if (null != this.filter)
          block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', filter), new JS.ContinueStatement)));
        if (null != valAssignee)
          block.body.unshift(stmt(assignment(valAssignee, new JS.MemberExpression(true, e, keyAssignee))));
        if (this.isOwn)
          block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', helpers.isOwn(e, keyAssignee)), new JS.ContinueStatement)));
        right = e === target ? e : new JS.AssignmentExpression('=', e, target);
        return new JS.ForInStatement(keyAssignee, right, block);
      }
    ],
    [
      CS.While,
      function (param$) {
        var body, cache$2, condition;
        {
          cache$2 = param$;
          condition = cache$2.condition;
          body = cache$2.body;
        }
        return new JS.WhileStatement(expr(condition), forceBlock(body));
      }
    ],
    [
      CS.Switch,
      function (param$) {
        var alternate, c, cache$2;
        var cases, expression;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          cases = cache$2.cases;
          alternate = cache$2.alternate;
        }
        cases = concat(cases);
        if (!(null != expression)) {
          expression = new JS.Literal(false);
          for (var i$ = 0, length$ = cases.length; i$ < length$; ++i$) {
            c = cases[i$];
            c.test = new JS.UnaryExpression('!', c.test);
          }
        }
        if (null != alternate)
          cases.push(new JS.SwitchCase(null, [stmt(alternate)]));
        for (var i$1 = 0, length$1 = cases.slice(0, -1).length; i$1 < length$1; ++i$1) {
          c = cases.slice(0, -1)[i$1];
          if (!((null != c.consequent ? c.consequent.length : void 0) > 0))
            continue;
          c.consequent.push(new JS.BreakStatement);
        }
        return new JS.SwitchStatement(expression, cases);
      }
    ],
    [
      CS.SwitchCase,
      function (param$) {
        var block, cache$2, cases, conditions, consequent;
        {
          cache$2 = param$;
          conditions = cache$2.conditions;
          consequent = cache$2.consequent;
        }
        cases = map(conditions, function (c) {
          return new JS.SwitchCase(c, []);
        });
        block = stmt(consequent);
        block = null != block ? block['instanceof'](JS.BlockStatement) ? block.body : [block] : [];
        cases[cases.length - 1].consequent = block;
        return cases;
      }
    ],
    [
      CS.Try,
      function (param$) {
        var body, cache$2, catchAssignee, catchBlock, catchBody, e, finallyBlock, finallyBody, handlers;
        {
          cache$2 = param$;
          body = cache$2.body;
          catchAssignee = cache$2.catchAssignee;
          catchBody = cache$2.catchBody;
          finallyBody = cache$2.finallyBody;
        }
        finallyBlock = null != this.finallyBody ? forceBlock(finallyBody) : null;
        if (null != this.catchBody || !(null != this.finallyBody)) {
          e = genSym('e');
          catchBlock = forceBlock(catchBody);
          if (null != catchAssignee)
            catchBlock.body.unshift(stmt(assignment(catchAssignee, e)));
          handlers = [new JS.CatchClause(e, catchBlock)];
        } else {
          handlers = [];
        }
        return new JS.TryStatement(forceBlock(body), handlers, finallyBlock);
      }
    ],
    [
      CS.Throw,
      function (param$) {
        var expression;
        expression = param$.expression;
        return new JS.ThrowStatement(expression);
      }
    ],
    [
      CS.Range,
      function (param$) {
        var accum, ancestry, body, cache$2, condition, conditionAlternate, conditionConsequent, conditionTest, i, left, left_, range, rawLeft, rawRight, right, right_, update, vars;
        {
          cache$2 = param$;
          left_ = cache$2.left;
          right_ = cache$2.right;
          ancestry = cache$2.ancestry;
        }
        if ((this.left['instanceof'](CS.Int) || this.left['instanceof'](CS.UnaryNegateOp) && this.left.expression['instanceof'](CS.Int)) && (this.right['instanceof'](CS.Int) || this.right['instanceof'](CS.UnaryNegateOp) && this.right.expression['instanceof'](CS.Int))) {
          rawLeft = this.left['instanceof'](CS.UnaryNegateOp) ? -this.left.expression.data : this.left.data;
          rawRight = this.right['instanceof'](CS.UnaryNegateOp) ? -this.right.expression.data : this.right.data;
          if (Math.abs(rawLeft - rawRight) <= 20) {
            range = this.isInclusive ? function () {
              var accum$;
              accum$ = [];
              for (var i$ = rawLeft; rawLeft <= rawRight ? i$ <= rawRight : i$ >= rawRight; rawLeft <= rawRight ? ++i$ : --i$)
                accum$.push(i$);
              return accum$;
            }.apply(this, arguments) : function () {
              var accum$;
              accum$ = [];
              for (var i$ = rawLeft; rawLeft <= rawRight ? i$ < rawRight : i$ > rawRight; rawLeft <= rawRight ? ++i$ : --i$)
                accum$.push(i$);
              return accum$;
            }.apply(this, arguments);
            return new JS.ArrayExpression(map(range, function (n) {
              if (n < 0) {
                return new JS.UnaryExpression('-', new JS.Literal(-n));
              } else {
                return new JS.Literal(n);
              }
            }));
          }
        }
        accum = genSym('accum');
        body = [stmt(new JS.AssignmentExpression('=', accum, new JS.ArrayExpression([])))];
        if (needsCaching(left_)) {
          left = genSym('from');
          body.push(stmt(new JS.AssignmentExpression('=', left, left_)));
        } else {
          left = left_;
        }
        if (needsCaching(right_)) {
          right = genSym('to');
          body.push(stmt(new JS.AssignmentExpression('=', right, right_)));
        } else {
          right = right_;
        }
        i = genSym('i');
        vars = new JS.VariableDeclaration('var', [new JS.VariableDeclarator(i, left)]);
        conditionTest = new JS.BinaryExpression('<=', left, right);
        conditionConsequent = new JS.BinaryExpression(this.isInclusive ? '<=' : '<', i, right);
        conditionAlternate = new JS.BinaryExpression(this.isInclusive ? '>=' : '>', i, right);
        condition = new JS.ConditionalExpression(conditionTest, conditionConsequent, conditionAlternate);
        update = new JS.ConditionalExpression(conditionTest, new JS.UpdateExpression('++', true, i), new JS.UpdateExpression('--', true, i));
        body.push(new JS.ForStatement(vars, condition, update, stmt(new JS.CallExpression(memberAccess(accum, 'push'), [i]))));
        body.push(new JS.ReturnStatement(accum));
        if (any(ancestry, function (ancestor) {
            return ancestor['instanceof'](CS.Functions);
          })) {
          return new JS.CallExpression(memberAccess(new JS.FunctionExpression(null, [], new JS.BlockStatement(body)), 'apply'), [
            new JS.ThisExpression,
            new JS.Identifier('arguments')
          ]);
        } else {
          return new JS.CallExpression(memberAccess(new JS.FunctionExpression(null, [], new JS.BlockStatement(body)), 'call'), [new JS.ThisExpression]);
        }
      }
    ],
    [
      CS.ArrayInitialiser,
      function () {
        var groupMembers;
        groupMembers = function (members) {
          var cache$2, cache$3, sliced, ys, zs;
          if (members.length === 0) {
            return [];
          } else {
            cache$2 = span(members, function (x) {
              return !x.spread;
            });
            ys = cache$2[0];
            zs = cache$2[1];
            if (ys.length === 0) {
              sliced = helpers.slice(zs[0].expression);
              cache$3 = [
                sliced,
                zs.slice(1)
              ];
              ys = cache$3[0];
              zs = cache$3[1];
              cache$3;
            } else {
              ys = new JS.ArrayExpression(map(ys, expr));
            }
            return [ys].concat(groupMembers(zs));
          }
        };
        return function (param$) {
          var cache$2, compile, grouped, members;
          {
            cache$2 = param$;
            members = cache$2.members;
            compile = cache$2.compile;
          }
          if (any(members, function (m) {
              return m.spread;
            })) {
            grouped = map(groupMembers(members), expr);
            if (grouped.length <= 1) {
              return grouped[0];
            } else {
              return new JS.CallExpression(memberAccess(grouped[0], 'concat'), grouped.slice(1));
            }
          } else {
            return new JS.ArrayExpression(map(members, expr));
          }
        };
      }()
    ],
    [
      CS.Spread,
      function (param$) {
        var expression;
        expression = param$.expression;
        return {
          spread: true,
          expression: expr(expression)
        };
      }
    ],
    [
      CS.ObjectInitialiser,
      function (param$) {
        var members;
        members = param$.members;
        return new JS.ObjectExpression(members);
      }
    ],
    [
      CS.ObjectInitialiserMember,
      function (param$) {
        var cache$2, expression, keyName;
        var key;
        {
          cache$2 = param$;
          key = cache$2.key;
          expression = cache$2.expression;
        }
        keyName = this.key.data;
        key = isIdentifierName(keyName) ? new JS.Identifier(keyName) : new JS.Literal(keyName);
        return new JS.Property(key, expr(expression));
      }
    ],
    [
      CS.DefaultParam,
      function (param$) {
        var cache$2, d, param;
        {
          cache$2 = param$;
          param = cache$2.param;
          d = cache$2['default'];
        }
        return {
          param: param,
          'default': d
        };
      }
    ],
    [
      CS.Function,
      CS.BoundFunction,
      function () {
        var handleParam;
        handleParam = function (param, original, block, inScope) {
          var decls, p;
          switch (false) {
          case !original['instanceof'](CS.Rest):
            return param;
          case !original['instanceof'](CS.Identifier):
            return param;
          case !original['instanceof'](CS.MemberAccessOps, CS.ObjectInitialiser, CS.ArrayInitialiser):
            p = genSym('param');
            decls = map(intersect(inScope, beingDeclared(original)), function (i) {
              return new JS.Identifier(i);
            });
            block.body.unshift(stmt(assignment(param, p)));
            if (decls.length)
              block.body.unshift(makeVarDeclaration(decls));
            return p;
          case !original['instanceof'](CS.DefaultParam):
            p = handleParam.call(this, param.param, original.param, block, inScope);
            block.body.unshift(new JS.IfStatement(new JS.BinaryExpression('==', new JS.Literal(null), p), stmt(assignment(p, param['default']))));
            return p;
          default:
            throw new Error('Unsupported parameter type: ' + original.className);
          }
        };
        return function (param$) {
          var alternate, ancestry, block, cache$2, consequent, i, index, inScope, last, newThis, numArgs, numParams, p, parameters_, paramName, performedRewrite, pIndex, reassignments, rewriteThis, test;
          var body, parameters;
          {
            cache$2 = param$;
            parameters = cache$2.parameters;
            body = cache$2.body;
            ancestry = cache$2.ancestry;
            inScope = cache$2.inScope;
          }
          if (!(null != ancestry[0] ? ancestry[0]['instanceof'](CS.Constructor) : void 0))
            body = makeReturn(body);
          block = forceBlock(body);
          last = block.body.slice(-1)[0];
          if ((null != last ? last['instanceof'](JS.ReturnStatement) : void 0) && !(null != last.argument))
            block.body = block.body.slice(0, -1);
          parameters_ = parameters.length === 0 ? [] : (pIndex = parameters.length, function (accum$) {
            while (pIndex--) {
              accum$.push(handleParam.call(this, parameters[pIndex], this.parameters[pIndex], block, inScope));
            }
            return accum$;
          }.call(this, []));
          parameters = parameters_.reverse();
          if (parameters.length > 0) {
            if (parameters.slice(-1)[0].rest) {
              paramName = parameters.pop().expression;
              numParams = parameters.length;
              test = new JS.BinaryExpression('>', memberAccess(new JS.Identifier('arguments'), 'length'), new JS.Literal(numParams));
              consequent = helpers.slice(new JS.Identifier('arguments'), new JS.Literal(numParams));
              alternate = new JS.ArrayExpression([]);
              if (paramName['instanceof'](JS.Identifier) && in$(paramName.name, inScope))
                block.body.unshift(makeVarDeclaration([paramName]));
              block.body.unshift(stmt(new JS.AssignmentExpression('=', paramName, new JS.ConditionalExpression(test, consequent, alternate))));
            } else if (any(parameters, function (p) {
                return p.rest;
              })) {
              paramName = index = null;
              for (var i$ = 0, length$ = parameters.length; i$ < length$; ++i$) {
                p = parameters[i$];
                i = i$;
                if (!p.rest)
                  continue;
                paramName = p.expression;
                index = i;
                break;
              }
              parameters.splice(index, 1);
              numParams = parameters.length;
              numArgs = genSym('numArgs');
              reassignments = new JS.IfStatement(new JS.BinaryExpression('>', new JS.AssignmentExpression('=', numArgs, memberAccess(new JS.Identifier('arguments'), 'length')), new JS.Literal(numParams)), new JS.BlockStatement([stmt(new JS.AssignmentExpression('=', paramName, helpers.slice(new JS.Identifier('arguments'), new JS.Literal(index), new JS.BinaryExpression('-', numArgs, new JS.Literal(numParams - index)))))]), new JS.BlockStatement([stmt(new JS.AssignmentExpression('=', paramName, new JS.ArrayExpression([])))]));
              for (var i$1 = 0, length$1 = parameters.slice(index).length; i$1 < length$1; ++i$1) {
                p = parameters.slice(index)[i$1];
                i = i$1;
                reassignments.consequent.body.push(stmt(new JS.AssignmentExpression('=', p, new JS.MemberExpression(true, new JS.Identifier('arguments'), new JS.BinaryExpression('-', numArgs, new JS.Literal(numParams - index - i))))));
              }
              if (paramName['instanceof'](JS.Identifier) && in$(paramName.name, inScope))
                block.body.unshift(makeVarDeclaration([paramName]));
              block.body.unshift(reassignments);
            }
            if (any(parameters, function (p) {
                return p.rest;
              }))
              throw new Error('Parameter lists may not have more than one rest operator');
          }
          performedRewrite = false;
          if (this['instanceof'](CS.BoundFunction)) {
            newThis = genSym('this');
            rewriteThis = generateMutatingWalker(function () {
              if (this['instanceof'](JS.ThisExpression)) {
                performedRewrite = true;
                return newThis;
              } else if (this['instanceof'](JS.FunctionExpression, JS.FunctionDeclaration)) {
                return this;
              } else {
                return rewriteThis(this);
              }
            });
            rewriteThis(block);
          }
          fn = new JS.FunctionExpression(null, parameters, block);
          if (performedRewrite) {
            return new JS.CallExpression(new JS.FunctionExpression(null, [newThis], new JS.BlockStatement([new JS.ReturnStatement(fn)])), [new JS.ThisExpression]);
          } else {
            return fn;
          }
        };
      }()
    ],
    [
      CS.Rest,
      function (param$) {
        var expression;
        expression = param$.expression;
        return {
          rest: true,
          expression: expression,
          isExpression: true,
          isStatement: true
        };
      }
    ],
    [
      CS.Class,
      function (param$) {
        var _, args, block, body, c, cache$2, compile, ctorBody, ctorIndex, ctorRef, i, iife, instance, member, memberName, nameAssignee, params, parent, parentRef, protoAssignOp, protoMember, ps, rewriteThis;
        var ctor, name;
        {
          cache$2 = param$;
          nameAssignee = cache$2.nameAssignee;
          parent = cache$2.parent;
          name = cache$2.name;
          ctor = cache$2.ctor;
          body = cache$2.body;
          compile = cache$2.compile;
        }
        args = [];
        params = [];
        parentRef = genSym('super');
        block = forceBlock(body);
        if (name['instanceof'](JS.Identifier) && in$(name.name, jsReserved))
          name = genSym(name.name);
        if (null != ctor) {
          for (var i$ = 0, length$ = block.body.length; i$ < length$; ++i$) {
            c = block.body[i$];
            i = i$;
            if (!c['instanceof'](JS.FunctionDeclaration))
              continue;
            ctorIndex = i;
            break;
          }
          block.body.splice(ctorIndex, 1, ctor);
        } else {
          ctorBody = new JS.BlockStatement([]);
          if (null != parent)
            ctorBody.body.push(stmt(new JS.CallExpression(memberAccess(parentRef, 'apply'), [
              new JS.ThisExpression,
              new JS.Identifier('arguments')
            ])));
          ctor = new JS.FunctionDeclaration(name, [], ctorBody);
          ctorIndex = 0;
          block.body.unshift(ctor);
        }
        ctor.id = name;
        if (null != this.ctor && !this.ctor.expression['instanceof'](CS.Functions)) {
          ctorRef = genSym('externalCtor');
          ctor.body.body.push(makeReturn(new JS.CallExpression(memberAccess(ctorRef, 'apply'), [
            new JS.ThisExpression,
            new JS.Identifier('arguments')
          ])));
          block.body.splice(ctorIndex, 0, stmt(new JS.AssignmentExpression('=', ctorRef, expr(compile(this.ctor.expression)))));
        }
        if (this.boundMembers.length > 0) {
          instance = genSym('instance');
          for (var i$1 = 0, length$1 = this.boundMembers.length; i$1 < length$1; ++i$1) {
            protoAssignOp = this.boundMembers[i$1];
            memberName = protoAssignOp.assignee.data.toString();
            ps = function (accum$) {
              for (var i$2 = 0, length$2 = protoAssignOp.expression.parameters.length; i$2 < length$2; ++i$2) {
                _ = protoAssignOp.expression.parameters[i$2];
                accum$.push(genSym());
              }
              return accum$;
            }.call(this, []);
            member = memberAccess(new JS.ThisExpression, memberName);
            protoMember = memberAccess(memberAccess(name, 'prototype'), memberName);
            fn = new JS.FunctionExpression(null, ps, new JS.BlockStatement([makeReturn(new JS.CallExpression(memberAccess(protoMember, 'apply'), [
                instance,
                new JS.Identifier('arguments')
              ]))]));
            ctor.body.body.unshift(stmt(new JS.AssignmentExpression('=', member, fn)));
          }
          ctor.body.body.unshift(stmt(new JS.AssignmentExpression('=', instance, new JS.ThisExpression)));
        }
        if (null != parent) {
          params.push(parentRef);
          args.push(parent);
          block.body.unshift(stmt(helpers['extends'](name, parentRef)));
        }
        block.body.push(new JS.ReturnStatement(new JS.ThisExpression));
        rewriteThis = generateMutatingWalker(function () {
          if (this['instanceof'](JS.ThisExpression)) {
            return name;
          } else if (this['instanceof'](JS.FunctionExpression, JS.FunctionDeclaration)) {
            return this;
          } else {
            return rewriteThis(this);
          }
        });
        rewriteThis(block);
        iife = new JS.CallExpression(new JS.FunctionExpression(null, params, block).g(), args);
        if (null != nameAssignee) {
          return assignment(nameAssignee, iife);
        } else {
          return iife;
        }
      }
    ],
    [
      CS.Constructor,
      function (param$) {
        var expression, tmpName;
        expression = param$.expression;
        tmpName = genSym('class');
        if (this.expression['instanceof'](CS.Functions)) {
          return new JS.FunctionDeclaration(tmpName, expression.params, forceBlock(expression.body));
        } else {
          return new JS.FunctionDeclaration(tmpName, [], new JS.BlockStatement([]));
        }
      }
    ],
    [
      CS.ClassProtoAssignOp,
      function (param$) {
        var assignee, cache$2, compile, expression, protoMember;
        {
          cache$2 = param$;
          assignee = cache$2.assignee;
          expression = cache$2.expression;
          compile = cache$2.compile;
        }
        if (this.expression['instanceof'](CS.BoundFunction)) {
          return compile(new CS.ClassProtoAssignOp(this.assignee, new CS.Function(this.expression.parameters, this.expression.body)));
        } else {
          protoMember = memberAccess(memberAccess(new JS.ThisExpression, 'prototype'), this.assignee.data);
          return new JS.AssignmentExpression('=', protoMember, expression);
        }
      }
    ],
    [
      CS.AssignOp,
      function (param$) {
        var ancestry, assignee, cache$2, expression;
        {
          cache$2 = param$;
          assignee = cache$2.assignee;
          expression = cache$2.expression;
          ancestry = cache$2.ancestry;
        }
        return assignment(assignee, expression, usedAsExpression(this, ancestry));
      }
    ],
    [
      CS.CompoundAssignOp,
      function (param$) {
        var assignee, cache$2, condition, expression, inScope, op;
        {
          cache$2 = param$;
          assignee = cache$2.assignee;
          expression = cache$2.expression;
          inScope = cache$2.inScope;
        }
        op = function () {
          switch (this.op) {
          case CS.LogicalAndOp.prototype.className:
            return '&&';
          case CS.LogicalOrOp.prototype.className:
            return '||';
          case CS.ExistsOp.prototype.className:
            return '?';
          case CS.BitOrOp.prototype.className:
            return '|';
          case CS.BitXorOp.prototype.className:
            return '^';
          case CS.BitAndOp.prototype.className:
            return '&';
          case CS.LeftShiftOp.prototype.className:
            return '<<';
          case CS.SignedRightShiftOp.prototype.className:
            return '>>';
          case CS.UnsignedRightShiftOp.prototype.className:
            return '>>>';
          case CS.PlusOp.prototype.className:
            return '+';
          case CS.SubtractOp.prototype.className:
            return '-';
          case CS.MultiplyOp.prototype.className:
            return '*';
          case CS.DivideOp.prototype.className:
            return '/';
          case CS.RemOp.prototype.className:
            return '%';
          case CS.ExpOp.prototype.className:
            return '**';
          default:
            throw new Error('Unrecognised compound assignment operator');
          }
        }.call(this);
        if ((op === '&&' || op === '||' || op === '?') && assignee['instanceof'](JS.Identifier) && !in$(assignee.name, inScope))
          throw new Error('the variable "' + assignee.name + '" can\'t be assigned with ?= because it has not been defined.');
        switch (op) {
        case '&&':
        case '||':
          return new JS.LogicalExpression(op, assignee, new JS.AssignmentExpression('=', assignee, expr(expression)));
        case '?':
          condition = new JS.BinaryExpression('!=', new JS.Literal(null), assignee);
          return new JS.ConditionalExpression(condition, assignee, new JS.AssignmentExpression('=', assignee, expr(expression)));
        case '**':
          return new JS.AssignmentExpression('=', assignee, helpers.exp(assignee, expr(expression)));
        default:
          return new JS.AssignmentExpression('' + op + '=', assignee, expr(expression));
        }
      }
    ],
    [
      CS.ChainedComparisonOp,
      function (param$) {
        var cache$2, compile, expression, left, lhs;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          compile = cache$2.compile;
        }
        if (!this.expression.left['instanceof'](CS.ComparisonOps))
          return expression;
        left = expression.left.right;
        lhs = compile(new CS.ChainedComparisonOp(this.expression.left));
        if (needsCaching(this.expression.left.right)) {
          left = genSym('cache');
          if (this.expression.left.left['instanceof'](CS.ComparisonOps)) {
            lhs.right.right = new JS.AssignmentExpression('=', left, lhs.right.right);
          } else {
            lhs.right = new JS.AssignmentExpression('=', left, lhs.right);
          }
        }
        return new JS.LogicalExpression('&&', lhs, new JS.BinaryExpression(expression.operator, left, expression.right));
      }
    ],
    [
      CS.FunctionApplication,
      function (param$) {
        var args, cache$2, compile, context, lhs;
        var fn;
        {
          cache$2 = param$;
          fn = cache$2['function'];
          args = cache$2['arguments'];
          compile = cache$2.compile;
        }
        if (any(args, function (m) {
            return m.spread;
          })) {
          lhs = this['function'];
          context = new CS.Null;
          if (needsCaching(this['function'])) {
            context = new CS.GenSym('cache');
            lhs = this['function']['instanceof'](CS.StaticMemberAccessOps) ? new this['function'].constructor(new CS.AssignOp(context, lhs.expression), this['function'].memberName) : this['function']['instanceof'](CS.DynamicMemberAccessOps) ? new this['function'].constructor(new CS.AssignOp(context, lhs.expression), this['function'].indexingExpr) : new CS.AssignOp(context, lhs);
          } else if (lhs['instanceof'](CS.MemberAccessOps)) {
            context = lhs.expression;
          }
          if (this['function']['instanceof'](CS.ProtoMemberAccessOp, CS.DynamicProtoMemberAccessOp)) {
            context = new CS.MemberAccessOp(context, 'prototype');
          } else if (this['function']['instanceof'](CS.SoakedProtoMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp)) {
            context = new CS.SoakedMemberAccessOp(context, 'prototype');
          }
          return compile(new CS.FunctionApplication(new CS.MemberAccessOp(lhs, 'apply'), [
            context,
            new CS.ArrayInitialiser(this['arguments'])
          ]));
        } else if (hasSoak(this)) {
          return compile(generateSoak(this));
        } else {
          return new JS.CallExpression(expr(fn), map(args, expr));
        }
      }
    ],
    [
      CS.SoakedFunctionApplication,
      function (param$) {
        var compile;
        compile = param$.compile;
        return compile(generateSoak(this));
      }
    ],
    [
      CS.NewOp,
      function (param$) {
        var args, cache$2, compile, ctor;
        {
          cache$2 = param$;
          ctor = cache$2.ctor;
          args = cache$2['arguments'];
          compile = cache$2.compile;
        }
        if (any(args, function (m) {
            return m.spread;
          })) {
          return helpers.construct(ctor, compile(new CS.ArrayInitialiser(this['arguments'])));
        } else {
          return new JS.NewExpression(ctor, map(args, expr));
        }
      }
    ],
    [
      CS.HeregExp,
      function (param$) {
        var args, expression, flag, flags;
        expression = param$.expression;
        args = [expression];
        if (flags = function (accum$) {
            for (var cache$2 = [
                  'g',
                  'i',
                  'm',
                  'y'
                ], i$ = 0, length$ = cache$2.length; i$ < length$; ++i$) {
              flag = cache$2[i$];
              if (!this.flags[flag])
                continue;
              accum$.push(flag);
            }
            return accum$;
          }.call(this, []).join(''))
          args.push(new JS.Literal(flags));
        return new JS.NewExpression(new JS.Identifier('RegExp'), args);
      }
    ],
    [
      CS.RegExp,
      function () {
        var flag, flags, re;
        flags = function (accum$) {
          for (var cache$2 = [
                'g',
                'i',
                'm',
                'y'
              ], i$ = 0, length$ = cache$2.length; i$ < length$; ++i$) {
            flag = cache$2[i$];
            if (!this.flags[flag])
              continue;
            accum$.push(flag);
          }
          return accum$;
        }.call(this, []).join('');
        re = new RegExp(this.data, flags);
        return new JS.Literal(re);
      }
    ],
    [
      CS.ConcatOp,
      function (param$) {
        var ancestry, cache$2, left, leftmost, plusOp, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
          ancestry = cache$2.ancestry;
        }
        plusOp = new JS.BinaryExpression('+', expr(left), expr(right));
        if (!ancestry[0]['instanceof'](CS.ConcatOp)) {
          leftmost = plusOp;
          while (null != (null != leftmost.left ? leftmost.left.left : void 0)) {
            leftmost = leftmost.left;
          }
          if (!(leftmost.left['instanceof'](JS.Literal) && 'string' === typeof leftmost.left.value))
            leftmost.left = new JS.BinaryExpression('+', new JS.Literal(''), leftmost.left);
        }
        return plusOp;
      }
    ],
    [
      CS.MemberAccessOp,
      CS.SoakedMemberAccessOp,
      function (param$) {
        var access, cache$2, compile, expression, offset;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          compile = cache$2.compile;
        }
        if (hasSoak(this)) {
          return expr(compile(generateSoak(this)));
        } else {
          access = memberAccess(expression, this.memberName);
          if (this.raw) {
            access.property.raw = this.memberName;
            access.property.line = this.line;
            offset = this.raw.length - this.memberName.length;
            access.property.column = this.column + offset - 1;
            access.property.offset = this.offset + offset - 1;
            this.column += this.expression.raw.length;
            this.offset += this.expression.raw.length;
          }
          return access;
        }
      }
    ],
    [
      CS.ProtoMemberAccessOp,
      CS.SoakedProtoMemberAccessOp,
      function (param$) {
        var cache$2, compile, expression;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          compile = cache$2.compile;
        }
        if (hasSoak(this)) {
          return expr(compile(generateSoak(this)));
        } else {
          return memberAccess(memberAccess(expression, 'prototype'), this.memberName);
        }
      }
    ],
    [
      CS.DynamicMemberAccessOp,
      CS.SoakedDynamicMemberAccessOp,
      function (param$) {
        var cache$2, compile, expression, indexingExpr;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          indexingExpr = cache$2.indexingExpr;
          compile = cache$2.compile;
        }
        if (hasSoak(this)) {
          return expr(compile(generateSoak(this)));
        } else {
          return dynamicMemberAccess(expression, indexingExpr);
        }
      }
    ],
    [
      CS.DynamicProtoMemberAccessOp,
      CS.SoakedDynamicProtoMemberAccessOp,
      function (param$) {
        var cache$2, compile, expression, indexingExpr;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          indexingExpr = cache$2.indexingExpr;
          compile = cache$2.compile;
        }
        if (hasSoak(this)) {
          return expr(compile(generateSoak(this)));
        } else {
          return dynamicMemberAccess(memberAccess(expression, 'prototype'), indexingExpr);
        }
      }
    ],
    [
      CS.Slice,
      function (param$) {
        var args, cache$2, expression, left, right;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          left = cache$2.left;
          right = cache$2.right;
        }
        args = null != left ? [left] : null != right ? [new JS.Literal(0)] : [];
        if (null != right)
          args.push(this.isInclusive ? right['instanceof'](JS.Literal) && typeof right.data === 'number' ? new JS.Literal(right.data + 1) : new JS.LogicalExpression('||', new JS.BinaryExpression('+', new JS.UnaryExpression('+', right), new JS.Literal(1)), new JS.Literal(9e9)) : right);
        return new JS.CallExpression(memberAccess(expression, 'slice'), args);
      }
    ],
    [
      CS.ExistsOp,
      function (param$) {
        var ancestry, cache$2, condition, e, inScope, node;
        var left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
          ancestry = cache$2.ancestry;
          inScope = cache$2.inScope;
        }
        left = expr(left);
        right = expr(right);
        e = needsCaching(this.left) ? genSym('cache') : left;
        condition = new JS.BinaryExpression('!=', new JS.Literal(null), e);
        if (e['instanceof'](JS.Identifier) && !in$(e.name, inScope))
          condition = new JS.LogicalExpression('&&', new JS.BinaryExpression('!==', new JS.Literal('undefined'), new JS.UnaryExpression('typeof', e)), condition);
        node = new JS.ConditionalExpression(condition, e, right);
        if (e === left) {
          return node;
        } else {
          return new JS.SequenceExpression([
            new JS.AssignmentExpression('=', e, left),
            node
          ]);
        }
      }
    ],
    [
      CS.UnaryExistsOp,
      function (param$) {
        var cache$2, expression, inScope, nullTest, typeofTest;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          inScope = cache$2.inScope;
        }
        nullTest = new JS.BinaryExpression('!=', new JS.Literal(null), expression);
        if (expression['instanceof'](JS.Identifier) && !in$(expression.name, inScope)) {
          typeofTest = new JS.BinaryExpression('!==', new JS.Literal('undefined'), new JS.UnaryExpression('typeof', expression));
          return new JS.LogicalExpression('&&', typeofTest, nullTest);
        } else {
          return nullTest;
        }
      }
    ],
    [
      CS.DoOp,
      function () {
        var deriveArgsFromParams;
        deriveArgsFromParams = function (params) {
          var args, index, param;
          return args = function (accum$) {
            for (var i$ = 0, length$ = params.length; i$ < length$; ++i$) {
              param = params[i$];
              index = i$;
              accum$.push(function () {
                switch (false) {
                case !param['instanceof'](CS.DefaultParam):
                  params[index] = param.param;
                  return param['default'];
                case !param['instanceof'](CS.Identifier, CS.MemberAccessOp):
                  return param;
                default:
                  return helpers.undef();
                }
              }.call(this));
            }
            return accum$;
          }.call(this, []);
        };
        return function (param$) {
          var args, cache$2, compile, expression;
          {
            cache$2 = param$;
            expression = cache$2.expression;
            compile = cache$2.compile;
          }
          args = [];
          if (this.expression['instanceof'](CS.AssignOp) && this.expression.expression['instanceof'](CS.Functions)) {
            args = deriveArgsFromParams(this.expression.expression.parameters);
          } else if (this.expression['instanceof'](CS.Functions)) {
            args = deriveArgsFromParams(this.expression.parameters);
          }
          return compile(new CS.FunctionApplication(this.expression, args));
        };
      }()
    ],
    [
      CS.Return,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.ReturnStatement(expr(e));
      }
    ],
    [
      CS.Break,
      function () {
        return new JS.BreakStatement;
      }
    ],
    [
      CS.Continue,
      function () {
        return new JS.ContinueStatement;
      }
    ],
    [
      CS.Debugger,
      function () {
        return new JS.DebuggerStatement;
      }
    ],
    [
      CS.ExpOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return helpers.exp(expr(left), expr(right));
      }
    ],
    [
      CS.DivideOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('/', expr(left), expr(right));
      }
    ],
    [
      CS.MultiplyOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('*', expr(left), expr(right));
      }
    ],
    [
      CS.RemOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('%', expr(left), expr(right));
      }
    ],
    [
      CS.PlusOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('+', expr(left), expr(right));
      }
    ],
    [
      CS.SubtractOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('-', expr(left), expr(right));
      }
    ],
    [
      CS.OfOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('in', expr(left), expr(right));
      }
    ],
    [
      CS.InOp,
      function (param$) {
        var cache$2, comparisons, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        if (right['instanceof'](JS.ArrayExpression) && right.elements.length < 5) {
          switch (right.elements.length) {
          case 0:
            if (needsCaching(this.left)) {
              return new JS.SequenceExpression([
                left,
                new JS.Literal(false)
              ]);
            } else {
              return new JS.Literal(false);
            }
          case 1:
            return new JS.BinaryExpression('===', left, right.elements[0]);
          default:
            if (needsCaching(this.left)) {
              return helpers['in'](expr(left), expr(right));
            } else {
              comparisons = map(right.elements, function (e) {
                return new JS.BinaryExpression('===', left, e);
              });
              return foldl1(comparisons, function (l, r) {
                return new JS.LogicalExpression('||', l, r);
              });
            }
          }
        } else {
          return helpers['in'](expr(left), expr(right));
        }
      }
    ],
    [
      CS.ExtendsOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return helpers['extends'](expr(left), expr(right));
      }
    ],
    [
      CS.InstanceofOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('instanceof', expr(left), expr(right));
      }
    ],
    [
      CS.LogicalAndOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.LogicalExpression('&&', expr(left), expr(right));
      }
    ],
    [
      CS.LogicalOrOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.LogicalExpression('||', expr(left), expr(right));
      }
    ],
    [
      CS.EQOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('===', expr(left), expr(right));
      }
    ],
    [
      CS.NEQOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('!==', expr(left), expr(right));
      }
    ],
    [
      CS.GTEOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('>=', expr(left), expr(right));
      }
    ],
    [
      CS.GTOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('>', expr(left), expr(right));
      }
    ],
    [
      CS.LTEOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('<=', expr(left), expr(right));
      }
    ],
    [
      CS.LTOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('<', expr(left), expr(right));
      }
    ],
    [
      CS.BitAndOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('&', expr(left), expr(right));
      }
    ],
    [
      CS.BitOrOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('|', expr(left), expr(right));
      }
    ],
    [
      CS.BitXorOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('^', expr(left), expr(right));
      }
    ],
    [
      CS.LeftShiftOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('<<', expr(left), expr(right));
      }
    ],
    [
      CS.SignedRightShiftOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('>>', expr(left), expr(right));
      }
    ],
    [
      CS.UnsignedRightShiftOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('>>>', expr(left), expr(right));
      }
    ],
    [
      CS.PreDecrementOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UpdateExpression('--', true, expr(e));
      }
    ],
    [
      CS.PreIncrementOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UpdateExpression('++', true, expr(e));
      }
    ],
    [
      CS.PostDecrementOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UpdateExpression('--', false, expr(e));
      }
    ],
    [
      CS.PostIncrementOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UpdateExpression('++', false, expr(e));
      }
    ],
    [
      CS.UnaryPlusOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('+', expr(e));
      }
    ],
    [
      CS.UnaryNegateOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('-', expr(e));
      }
    ],
    [
      CS.LogicalNotOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('!', expr(e));
      }
    ],
    [
      CS.BitNotOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('~', expr(e));
      }
    ],
    [
      CS.TypeofOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('typeof', expr(e));
      }
    ],
    [
      CS.DeleteOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('delete', expr(e));
      }
    ],
    [
      CS.Identifier,
      function () {
        return new JS.Identifier(this.data);
      }
    ],
    [
      CS.GenSym,
      function () {
        var memos, symbols;
        symbols = [];
        memos = [];
        return function () {
          var memo;
          if (in$(this, symbols)) {
            return memos[symbols.indexOf(this)];
          } else {
            symbols.push(this);
            memos.push(memo = genSym(this.data));
            return memo;
          }
        };
      }()
    ],
    [
      CS.Bool,
      CS.Int,
      CS.Float,
      CS.String,
      function () {
        return new JS.Literal(this.data);
      }
    ],
    [
      CS.Null,
      function () {
        return new JS.Literal(null);
      }
    ],
    [
      CS.Undefined,
      function () {
        return helpers.undef();
      }
    ],
    [
      CS.This,
      function () {
        return new JS.ThisExpression;
      }
    ],
    [
      CS.JavaScript,
      function () {
        return new JS.CallExpression(new JS.Identifier('eval'), [new JS.Literal(this.data)]);
      }
    ]
  ];
  function Compiler() {
    var cache$2, ctor, ctors, handler, size$;
    this.rules = {};
    for (var i$ = 0, length$ = defaultRules.length; i$ < length$; ++i$) {
      {
        cache$2 = defaultRules[i$];
        size$ = cache$2.length;
        ctors = size$ > 1 ? [].slice.call(cache$2, 0, size$ - 1) : [];
        handler = cache$2[size$ - 1];
      }
      for (var i$1 = 0, length$1 = ctors.length; i$1 < length$1; ++i$1) {
        ctor = ctors[i$1];
        this.addRule(ctor, handler);
      }
    }
  }
  Compiler.prototype.addRule = function (ctor, handler) {
    this.rules[ctor.prototype.className] = handler;
    return this;
  };
  Compiler.prototype.compile = function () {
    var defaultRule, generateSymbols, walk;
    walk = function (fn, inScope, ancestry, options) {
      var child, childName, children, jsNode, member;
      if ((null != ancestry[0] ? ancestry[0]['instanceof'](CS.Function, CS.BoundFunction) : void 0) && this === ancestry[0].body)
        inScope = union(inScope, concatMap(ancestry[0].parameters, beingDeclared));
      ancestry.unshift(this);
      children = {};
      for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {
        childName = this.childNodes[i$];
        if (!(null != this[childName]))
          continue;
        children[childName] = in$(childName, this.listMembers) ? function (accum$) {
          for (var i$1 = 0, length$1 = this[childName].length; i$1 < length$1; ++i$1) {
            member = this[childName][i$1];
            jsNode = walk.call(member, fn, inScope, ancestry);
            inScope = union(inScope, envEnrichments(member, inScope));
            accum$.push(jsNode);
          }
          return accum$;
        }.call(this, []) : (child = this[childName], jsNode = walk.call(child, fn, inScope, ancestry), inScope = union(inScope, envEnrichments(child, inScope)), jsNode);
      }
      children.inScope = inScope;
      children.ancestry = ancestry;
      children.options = options;
      children.compile = function (node) {
        return walk.call(node, fn, inScope, ancestry);
      };
      ancestry.shift();
      jsNode = fn.call(this, children);
      jsNode.raw = this.raw;
      jsNode.line = this.line;
      jsNode.column = this.column - 1;
      jsNode.offset = this.offset;
      return jsNode;
    };
    generateSymbols = function () {
      var format, generateChildSymbols, generatedSymbols, generateName;
      generatedSymbols = {};
      format = function (pre, counter) {
        var cache$2, div, mod;
        if (pre) {
          return '' + pre + '$' + (counter || '');
        } else if (counter < 26) {
          return String.fromCharCode(97 + counter);
        } else {
          cache$2 = divMod(counter, 26);
          div = cache$2[0];
          mod = cache$2[1];
          return format(pre, div - 1) + format(pre, mod);
        }
      };
      generateName = function (node, param$) {
        var cache$2, formatted, nsCounters, usedSymbols;
        {
          cache$2 = param$;
          usedSymbols = cache$2.usedSymbols;
          nsCounters = cache$2.nsCounters;
        }
        if (owns(generatedSymbols, node.uniqueId)) {
          return generatedSymbols[node.uniqueId];
        } else {
          nsCounters[node.ns] = owns(nsCounters, node.ns) ? 1 + nsCounters[node.ns] : 0;
          while (in$(formatted = format(node.ns, nsCounters[node.ns]), usedSymbols)) {
            ++nsCounters[node.ns];
          }
          return generatedSymbols[node.uniqueId] = formatted;
        }
      };
      generateChildSymbols = generateMutatingWalker(function (state) {
        var alreadyDeclared, cache$2, declaredSymbols, declNames, decls, k, newNode, nsCounters, nsCounters_, params, undeclared, usedSymbols, v;
        state.declaredSymbols = union(state.declaredSymbols, declarationsNeeded(this));
        cache$2 = state;
        declaredSymbols = cache$2.declaredSymbols;
        usedSymbols = cache$2.usedSymbols;
        nsCounters = cache$2.nsCounters;
        newNode = this['instanceof'](JS.GenSym) ? (newNode = new JS.Identifier(generateName(this, state)), usedSymbols.push(newNode.name), newNode) : isScopeBoundary(this) ? (params = concatMap(this.params, collectIdentifiers), nsCounters_ = {}, function (accum$) {
          for (k in nsCounters) {
            if (!isOwn$(nsCounters, k))
              continue;
            v = nsCounters[k];
            accum$.push(nsCounters_[k] = v);
          }
          return accum$;
        }.call(this, []), newNode = generateChildSymbols(this, {
          declaredSymbols: union(declaredSymbols, params),
          usedSymbols: union(usedSymbols, params),
          nsCounters: nsCounters_
        }), newNode.body = forceBlock(newNode.body), undeclared = declarationsNeededRecursive(this.body), undeclared = difference(undeclared, map(variableDeclarations(this.body), function (id) {
          return id.name;
        })), alreadyDeclared = union(declaredSymbols, concatMap(this.params, collectIdentifiers)), declNames = nub(difference(undeclared, alreadyDeclared)), decls = map(declNames, function (name) {
          return new JS.Identifier(name);
        }), decls.length > 0 ? newNode.body.body.unshift(makeVarDeclaration(decls)) : void 0, newNode) : generateChildSymbols(this, state);
        state.declaredSymbols = union(declaredSymbols, declarationsNeededRecursive(newNode));
        return newNode;
      });
      return function (jsAST, state) {
        var inScope, needed, program;
        inScope = (null != state.declaredSymbols ? state.declaredSymbols : []).slice();
        program = generateChildSymbols(jsAST, state);
        if (program['instanceof'](JS.Program)) {
          needed = nub(difference(concatMap(program.body, declarationsNeededRecursive), inScope));
          if (needed.length > 0)
            program.body.unshift(makeVarDeclaration(needed.map(function (n) {
              return new JS.Identifier(n);
            })));
        }
        return program;
      };
    }();
    defaultRule = function () {
      throw new Error('compile: Non-exhaustive patterns in case: ' + this.className);
    };
    return function (ast, options) {
      var inScope, jsAST, rules;
      if (null == options)
        options = {};
      if (null != options.bare)
        options.bare;
      else
        options.bare = false;
      rules = this.rules;
      inScope = null != options.inScope ? options.inScope : [];
      jsAST = walk.call(ast, function () {
        return (null != rules[this.className] ? rules[this.className] : defaultRule).apply(this, arguments);
      }, inScope, [], options);
      return generateSymbols(jsAST, {
        declaredSymbols: inScope,
        usedSymbols: union(jsReserved.slice(), collectIdentifiers(jsAST)),
        nsCounters: {}
      });
    };
  }();
  return Compiler;
}();
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(279)(module)))

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {// Generated by CoffeeScript 2.0.0-beta9-dev
var ArrayExpression, AssignmentExpression, BinaryExpression, BlockStatement, cache$, cache$1, CallExpression, createNode, ctor, difference, exports, FunctionDeclaration, FunctionExpression, GenSym, handleLists, handlePrimitives, Identifier, isStatement, Literal, LogicalExpression, MemberExpression, NewExpression, node, nodeData, Nodes, ObjectExpression, params, Program, SequenceExpression, SwitchCase, SwitchStatement, TryStatement, UnaryExpression, UpdateExpression, VariableDeclaration;
difference = __webpack_require__(277).difference;
exports = null != ( true && null != module ? module.exports : void 0) ?  true && null != module ? module.exports : void 0 : this;
createNode = function (type, props) {
  return function (super$) {
    extends$(class$, super$);
    function class$() {
      var i, prop;
      for (var i$ = 0, length$ = props.length; i$ < length$; ++i$) {
        prop = props[i$];
        i = i$;
        this[prop] = arguments[i];
      }
    }
    class$.prototype.type = type;
    class$.prototype.childNodes = props;
    return class$;
  }(Nodes);
};
this.Nodes = Nodes = function () {
  function Nodes() {
  }
  Nodes.prototype.listMembers = [];
  Nodes.prototype['instanceof'] = function () {
    var ctor, ctors;
    ctors = arguments.length > 0 ? [].slice.call(arguments, 0) : [];
    for (var i$ = 0, length$ = ctors.length; i$ < length$; ++i$) {
      ctor = ctors[i$];
      if (!(this.type === ctor.prototype.type))
        continue;
      return true;
    }
    return false;
  };
  Nodes.prototype.toBasicObject = function () {
    var child, obj, p;
    obj = { type: this.type };
    if (null != this.leadingComments)
      obj.leadingComments = this.leadingComments;
    for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {
      child = this.childNodes[i$];
      if (in$(child, this.listMembers)) {
        obj[child] = function (accum$) {
          for (var i$1 = 0, length$1 = this[child].length; i$1 < length$1; ++i$1) {
            p = this[child][i$1];
            accum$.push('undefined' !== typeof p && null != p ? p.toBasicObject() : void 0);
          }
          return accum$;
        }.call(this, []);
      } else {
        obj[child] = null != this[child] ? this[child].toBasicObject() : void 0;
      }
    }
    if (null != this.line && null != this.column)
      obj.loc = {
        start: {
          line: this.line,
          column: this.column
        }
      };
    if (null != this.offset)
      obj.range = [
        this.offset,
        null != this.raw ? this.offset + this.raw.length : void 0
      ];
    if (null != this.raw)
      obj.raw = this.raw;
    return obj;
  };
  return Nodes;
}();
nodeData = [
  [
    'ArrayExpression',
    false,
    ['elements']
  ],
  [
    'AssignmentExpression',
    false,
    [
      'operator',
      'left',
      'right'
    ]
  ],
  [
    'BinaryExpression',
    false,
    [
      'operator',
      'left',
      'right'
    ]
  ],
  [
    'BlockStatement',
    true,
    ['body']
  ],
  [
    'BreakStatement',
    true,
    ['label']
  ],
  [
    'CallExpression',
    false,
    [
      'callee',
      'arguments'
    ]
  ],
  [
    'CatchClause',
    true,
    [
      'param',
      'body'
    ]
  ],
  [
    'ConditionalExpression',
    false,
    [
      'test',
      'consequent',
      'alternate'
    ]
  ],
  [
    'ContinueStatement',
    true,
    ['label']
  ],
  [
    'DebuggerStatement',
    true,
    []
  ],
  [
    'DoWhileStatement',
    true,
    [
      'body',
      'test'
    ]
  ],
  [
    'EmptyStatement',
    true,
    []
  ],
  [
    'ExpressionStatement',
    true,
    ['expression']
  ],
  [
    'ForInStatement',
    true,
    [
      'left',
      'right',
      'body'
    ]
  ],
  [
    'ForStatement',
    true,
    [
      'init',
      'test',
      'update',
      'body'
    ]
  ],
  [
    'FunctionDeclaration',
    true,
    [
      'id',
      'params',
      'body'
    ]
  ],
  [
    'FunctionExpression',
    false,
    [
      'id',
      'params',
      'body'
    ]
  ],
  [
    'GenSym',
    false,
    [
      'ns',
      'uniqueId'
    ]
  ],
  [
    'Identifier',
    false,
    ['name']
  ],
  [
    'IfStatement',
    true,
    [
      'test',
      'consequent',
      'alternate'
    ]
  ],
  [
    'LabeledStatement',
    true,
    [
      'label',
      'body'
    ]
  ],
  [
    'Literal',
    false,
    ['value']
  ],
  [
    'LogicalExpression',
    false,
    [
      'operator',
      'left',
      'right'
    ]
  ],
  [
    'MemberExpression',
    false,
    [
      'computed',
      'object',
      'property'
    ]
  ],
  [
    'NewExpression',
    false,
    [
      'callee',
      'arguments'
    ]
  ],
  [
    'ObjectExpression',
    false,
    ['properties']
  ],
  [
    'Program',
    true,
    ['body']
  ],
  [
    'Property',
    true,
    [
      'key',
      'value'
    ]
  ],
  [
    'ReturnStatement',
    true,
    ['argument']
  ],
  [
    'SequenceExpression',
    false,
    ['expressions']
  ],
  [
    'SwitchCase',
    true,
    [
      'test',
      'consequent'
    ]
  ],
  [
    'SwitchStatement',
    true,
    [
      'discriminant',
      'cases'
    ]
  ],
  [
    'ThisExpression',
    false,
    []
  ],
  [
    'ThrowStatement',
    true,
    ['argument']
  ],
  [
    'TryStatement',
    true,
    [
      'block',
      'handlers',
      'finalizer'
    ]
  ],
  [
    'UnaryExpression',
    false,
    [
      'operator',
      'argument'
    ]
  ],
  [
    'UpdateExpression',
    false,
    [
      'operator',
      'prefix',
      'argument'
    ]
  ],
  [
    'VariableDeclaration',
    true,
    [
      'kind',
      'declarations'
    ]
  ],
  [
    'VariableDeclarator',
    true,
    [
      'id',
      'init'
    ]
  ],
  [
    'WhileStatement',
    true,
    [
      'test',
      'body'
    ]
  ],
  [
    'WithStatement',
    true,
    [
      'object',
      'body'
    ]
  ]
];
for (var i$ = 0, length$ = nodeData.length; i$ < length$; ++i$) {
  {
    cache$ = nodeData[i$];
    node = cache$[0];
    isStatement = cache$[1];
    params = cache$[2];
  }
  exports[node] = ctor = createNode(node, params);
  ctor.prototype.isStatement = isStatement;
  ctor.prototype.isExpression = !isStatement;
}
cache$1 = exports;
Program = cache$1.Program;
BlockStatement = cache$1.BlockStatement;
Literal = cache$1.Literal;
Identifier = cache$1.Identifier;
FunctionExpression = cache$1.FunctionExpression;
CallExpression = cache$1.CallExpression;
SequenceExpression = cache$1.SequenceExpression;
ArrayExpression = cache$1.ArrayExpression;
BinaryExpression = cache$1.BinaryExpression;
UnaryExpression = cache$1.UnaryExpression;
NewExpression = cache$1.NewExpression;
VariableDeclaration = cache$1.VariableDeclaration;
ObjectExpression = cache$1.ObjectExpression;
MemberExpression = cache$1.MemberExpression;
UpdateExpression = cache$1.UpdateExpression;
AssignmentExpression = cache$1.AssignmentExpression;
LogicalExpression = cache$1.LogicalExpression;
GenSym = cache$1.GenSym;
FunctionDeclaration = cache$1.FunctionDeclaration;
VariableDeclaration = cache$1.VariableDeclaration;
SwitchStatement = cache$1.SwitchStatement;
SwitchCase = cache$1.SwitchCase;
TryStatement = cache$1.TryStatement;
handlePrimitives = function (ctor, primitives) {
  ctor.prototype.childNodes = difference(ctor.prototype.childNodes, primitives);
  return ctor.prototype.toBasicObject = function () {
    var obj, primitive;
    obj = Nodes.prototype.toBasicObject.call(this);
    for (var i$1 = 0, length$1 = primitives.length; i$1 < length$1; ++i$1) {
      primitive = primitives[i$1];
      obj[primitive] = this[primitive];
    }
    return obj;
  };
};
handlePrimitives(AssignmentExpression, ['operator']);
handlePrimitives(BinaryExpression, ['operator']);
handlePrimitives(LogicalExpression, ['operator']);
handlePrimitives(GenSym, [
  'ns',
  'uniqueId'
]);
handlePrimitives(Identifier, ['name']);
handlePrimitives(Literal, ['value']);
handlePrimitives(MemberExpression, ['computed']);
handlePrimitives(UnaryExpression, ['operator']);
handlePrimitives(UpdateExpression, [
  'operator',
  'prefix'
]);
handlePrimitives(VariableDeclaration, ['kind']);
handleLists = function (ctor, listProps) {
  return ctor.prototype.listMembers = listProps;
};
handleLists(ArrayExpression, ['elements']);
handleLists(BlockStatement, ['body']);
handleLists(CallExpression, ['arguments']);
handleLists(FunctionDeclaration, ['params']);
handleLists(FunctionExpression, ['params']);
handleLists(NewExpression, ['arguments']);
handleLists(ObjectExpression, ['properties']);
handleLists(Program, ['body']);
handleLists(SequenceExpression, ['expressions']);
handleLists(SwitchCase, ['consequent']);
handleLists(SwitchStatement, ['cases']);
handleLists(TryStatement, ['handlers']);
handleLists(VariableDeclaration, ['declarations']);
FunctionDeclaration.prototype.generated = FunctionExpression.prototype.generated = false;
FunctionDeclaration.prototype.g = FunctionExpression.prototype.g = function () {
  this.generated = true;
  return this;
};
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
  for (var key in parent)
    if (isOwn$(parent, key))
      child[key] = parent[key];
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(279)(module)))

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var lua2js = __webpack_require__(286);

function parser(code, options) {
	options = options || {};
	var opts = {
		forceVar: false,
		decorateLuaObjects: true,
		luaCalls: true,
		luaOperators: true,
		encloseWithFunctions: false
	};

	var ast = lua2js.parse(code, opts);
	var wrap = function wrap(o) {
		o.loc = ast.loc;
		o.range = ast.range;
		return o;
	};
	var final = ast;
	var fixThis = {
		'type': 'VariableDeclaration',
		'declarations': [{
			'type': 'VariableDeclarator',
			'id': {
				'type': 'Identifier',
				'name': 'self'
			},
			'init': {
				'type': 'ThisExpression'
			}
		}],
		'kind': 'var',
		'userCode': false
	};
	if (!options.inFunctionBody) {
		final = wrap({
			type: 'FunctionExpression',
			params: [],
			body: final
		});
		final = wrap({
			type: 'CallExpression',
			callee: final,
			arguments: []
		});
		final = wrap({
			type: 'ExpressionStatement',
			expression: final
		});
		final = wrap({
			type: 'Program',
			body: [fixThis, final]
		});
	} else {
		var newBody = [fixThis];
		Array.prototype.push.apply(newBody, final.body);
		final = wrap({
			type: 'Program',
			body: newBody
		});
	}
	return final;
}

var startupCode = __webpack_require__(289);
var startupCodeAST = void 0;

var plugin = module.exports = {
	name: 'lang-lua',
	lua2js: lua2js,
	parser: parser,
	init: function init(esper) {
		esper.languages.lua = plugin;
		startupCodeAST = esper.languages.javascript.parser(startupCode);
	},
	startupCode: function startupCode() {
		return startupCodeAST;
	}
};

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {


var parser = __webpack_require__(287);
var stdlib = __webpack_require__(288);

this.stdlib = stdlib;
this.parse = parser.parser.parse;




/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

this.parser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = function() { init(); return true; },
        peg$c2 = void 0,
        peg$c3 = null,
        peg$c4 = "#",
        peg$c5 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c6 = [],
        peg$c7 = /^[^\n]/,
        peg$c8 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
        peg$c9 = "\n",
        peg$c10 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c11 = function(t) { return finalize(t); },
        peg$c12 = /^[ \r\t\n]/,
        peg$c13 = { type: "class", value: "[ \\r\\t\\n]", description: "[ \\r\\t\\n]" },
        peg$c14 = "--[",
        peg$c15 = { type: "literal", value: "--[", description: "\"--[\"" },
        peg$c16 = "]",
        peg$c17 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c18 = "--",
        peg$c19 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c20 = { type: "any", description: "any character" },
        peg$c21 = ";",
        peg$c22 = { type: "literal", value: ";", description: "\";\"" },
        peg$c23 = function(r) {
                return builder.blockStatement([r]) 
            },
        peg$c24 = function(list, ret) {
                list = expandMultiStatements(list);
                return builder.blockStatement(ret === null ? list : list.concat([ret[1]])); 
            },
        peg$c25 = function(a, b) {  
                if ( a === null ) return [];
                if ( b === null ) return a;
                return listHelper(a,b,1);
            },
        peg$c26 = "if",
        peg$c27 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c28 = "then",
        peg$c29 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c30 = "elseif",
        peg$c31 = { type: "literal", value: "elseif", description: "\"elseif\"" },
        peg$c32 = "else",
        peg$c33 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c34 = "do",
        peg$c35 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c36 = "end",
        peg$c37 = { type: "literal", value: "end", description: "\"end\"" },
        peg$c38 = "return",
        peg$c39 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c40 = "local",
        peg$c41 = { type: "literal", value: "local", description: "\"local\"" },
        peg$c42 = "nil",
        peg$c43 = { type: "literal", value: "nil", description: "\"nil\"" },
        peg$c44 = "true",
        peg$c45 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c46 = "false",
        peg$c47 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c48 = "function",
        peg$c49 = { type: "literal", value: "function", description: "\"function\"" },
        peg$c50 = "not",
        peg$c51 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c52 = "break",
        peg$c53 = { type: "literal", value: "break", description: "\"break\"" },
        peg$c54 = "for",
        peg$c55 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c56 = "until",
        peg$c57 = { type: "literal", value: "until", description: "\"until\"" },
        peg$c58 = "while",
        peg$c59 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c60 = /^[a-zA-Z_]/,
        peg$c61 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
        peg$c62 = /^[a-zA-Z0-9_]/,
        peg$c63 = { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
        peg$c64 = function(a) { return a; },
        peg$c65 = /^[0-9]/,
        peg$c66 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c67 = ".",
        peg$c68 = { type: "literal", value: ".", description: "\".\"" },
        peg$c69 = "\\",
        peg$c70 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c71 = /^[abfrntv'"\\]/,
        peg$c72 = { type: "class", value: "[abfrntv'\"\\\\]", description: "[abfrntv'\"\\\\]" },
        peg$c73 = function(c) { return {
                "n": "\n",
                "b": "\b",
                "f": "\f",
                "r": "\r",
                "t": "\t",
                "v": "\v",
                '"': '"',
                "'": "'",
                "\\": "\\"
            }[c] },
        peg$c74 = "\\\n",
        peg$c75 = { type: "literal", value: "\\\n", description: "\"\\\\\\n\"" },
        peg$c76 = function() { return "\n" },
        peg$c77 = "\\z",
        peg$c78 = { type: "literal", value: "\\z", description: "\"\\\\z\"" },
        peg$c79 = function() { return "" },
        peg$c80 = "\\x",
        peg$c81 = { type: "literal", value: "\\x", description: "\"\\\\x\"" },
        peg$c82 = /^[0-9a-f]/,
        peg$c83 = { type: "class", value: "[0-9a-f]", description: "[0-9a-f]" },
        peg$c84 = function(a, b) { return String.fromCharCode(parseInt('0x' + a + b)); },
        peg$c85 = function(a, b, c) { return String.fromCharCode(parseInt('' + a + b + c)); },
        peg$c86 = function() { error('Invalid Escape Sequence') },
        peg$c87 = /^[^'"']/,
        peg$c88 = { type: "class", value: "[^'\"']", description: "[^'\"']" },
        peg$c89 = /^[']/,
        peg$c90 = { type: "class", value: "[']", description: "[']" },
        peg$c91 = function() { return wrapNode({}); },
        peg$c92 = /^["]/,
        peg$c93 = { type: "class", value: "[\"]", description: "[\"]" },
        peg$c94 = "'",
        peg$c95 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c96 = function(s, r, e) { return eUntermIfEmpty(e,"string","\"",s); },
        peg$c97 = function(s, r, e) { return r.join(''); },
        peg$c98 = "\"",
        peg$c99 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c100 = function(s, r, e) { return eUntermIfEmpty(e,"string","'",s); },
        peg$c101 = "[",
        peg$c102 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c103 = function(s) { return s; },
        peg$c104 = "=",
        peg$c105 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c106 = /^[\n]/,
        peg$c107 = { type: "class", value: "[\\n]", description: "[\\n]" },
        peg$c108 = function(a) { return a;},
        peg$c109 = function(e) { return eMsg("Found an expression but expected a statement: " + e)},
        peg$c110 = function(e) { return builder.emptyStatement(); },
        peg$c111 = function(e) { return eMsg("`=` expected")},
        peg$c112 = /^[^\n\t\r ]/,
        peg$c113 = { type: "class", value: "[^\\n\\t\\r ]", description: "[^\\n\\t\\r ]" },
        peg$c114 = function(e) { return eMsg("Parser error near `" + e + "`"); },
        peg$c115 = "debugger",
        peg$c116 = { type: "literal", value: "debugger", description: "\"debugger\"" },
        peg$c117 = function() { return {type: "ExpressionStatement", expression: {type: "Identifier", name:"debugger; "} } },
        peg$c118 = function(start, b, end) { return eUntermIfEmpty(end, "do", "end", start); },
        peg$c119 = function(start, b, end) { return b ? b[0] : {type: "BlockStatement", body: []}; },
        peg$c120 = ",",
        peg$c121 = { type: "literal", value: ",", description: "\",\"" },
        peg$c122 = function(start, a, b, c, d, body, end) { return eUntermIfEmpty(end, "for", "end", start); },
        peg$c123 = function(start, a, b, c, d, body, end) {
                var amount = d == null ? {type: "Literal", value: 1 } : d[3];
                

                var start = bhelper.tempVar(b);
                var updateBy = bhelper.tempVar(amount);
                var testValue = bhelper.tempVar(c);
                var idx = bhelper.tempVar();

                var update = builder.assignmentExpression("=", idx.id, bhelper.binaryExpression("+", idx.id, updateBy.id));

                var texp;
                if ( false ) {} else {
                    texp = bhelper.luaOperator("forcomp", updateBy.id, idx.id, testValue.id);
                }

                if ( !body ) body = {type: "BlockStatement", body: []};
                else body = body[0];

                body.body.unshift(builder.variableDeclaration("let",[
                    {
                            type: "VariableDeclarator",
                            id: a,
                            init: idx.id,
                            userCode: false
                    }
                ]));

                var out = {
                    type: "ForStatement",
                    init: builder.variableDeclaration("let", [
                        {
                            type: "VariableDeclarator",
                            id: idx.id,
                            init: start.id,
                            userCode: false
                        }
                    ]),
                    body: body,
                    update: update,
                    test: texp,
                    loc: loc(),
                    range: range()
                };

                return bhelper.encloseDecls([out], start, updateBy, testValue);
            },
        peg$c124 = "in",
        peg$c125 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c126 = function(start, a, b, c, end) { return eUntermIfEmpty(end, "for", "end", start); },
        peg$c127 = function(start, a, b, c, end) {
                var statements = [];
                var nil = {type: "Literal", value: null };
                var uf = {type: "Identifier", name: 'undefined' };


                var iterator = bhelper.tempName();
                var context = bhelper.tempName();
                var curent = bhelper.tempName();

                var v1 = a[0];

                var varlist = [];
                for ( var idx in a ) {
                    varlist.push({type: "VariableDeclarator", id: a[idx] });
                }

                var call = builder.callExpression(iterator,[context, curent]);
                var assign;
                //if ( a.length > 1 ) {
                    assign = bhelper.bulkAssign(a, [call])
                //} else {
                //    assign = bhelper.assign(v1, call);
                //}

                var nullish = function(v) {
                    return builder.binaryExpression("||", builder.binaryExpression("===", v1, nil), builder.binaryExpression("===", v1, uf))
                }

                statements.push(builder.variableDeclaration("let", varlist));
                statements.push({
                    type: "WhileStatement",
                    test: {type: "Literal", value: true},
                    body: bhelper.blockStatement([
                    assign,
                    { type: "IfStatement", test: nullish(v1), consequent: {type: "BreakStatement" } },
                    bhelper.assign(curent, v1),
                    c.body

                    ])
                });

                return bhelper.encloseDeclsUnpack(statements, [iterator, context, curent], b);
            },
        peg$c128 = function(left, right) { 
                var result = builder.variableDeclaration("let", []);

                if ( !opt('decorateLuaObjects', false) || ( left.length < 2 && right.length < 2 )) { 
                    for ( var i = 0; i < left.length; ++i ) {
                        result.declarations.push(            {
                            type: "VariableDeclarator",
                            id: left[i],
                            init: right[i],
                        });
                    }

                    return result;
                } else {
                    var assign = bhelper.bulkAssign(left, right)
                    for ( var i = 0; i < left.length; ++i ) {
                        result.declarations.push({
                            type: "VariableDeclarator",
                            id: left[i]
                        });
                    }
                 
                    return [result, assign];   
                }
            
            },
        peg$c129 = function(left) {
                var result = builder.variableDeclaration("let", []);
                for ( var i = 0; i < left.length; ++i ) {
                    result.declarations.push({
                        type: "VariableDeclarator",
                        id: left[i]
                    });
                }
                return result;  
            },
        peg$c130 = function(left, right) { 
                // if ( left.length < 2 ) return bhelper.assign(left[0], right[0]).expression;
                return bhelper.bulkAssign(left, right).expression;
            },
        peg$c131 = function() { return {
                "type": "BreakStatement",
                loc: loc(),
                range: range()
            } },
        peg$c132 = function(e) { return {
                type: "ExpressionStatement",
                expression: e,
                loc: loc(),
                range: range()
            } },
        peg$c133 = function(test, then) { return wrapNode({test: test, then:then}); },
        peg$c134 = function() { return eUnterminated("if","then"); },
        peg$c135 = function(start, test, then, elzeifs, elze, end) { return eUntermIfEmpty(end, "if", "end", start); },
        peg$c136 = function(start, test, then, elzeifs, elze, end) {
                var result = { type: "IfStatement", test: test, consequent: then, loc: loc(), range: range()}
                var last = result;

                for ( var idx in elzeifs ) {
                    var elif = elzeifs[idx][1];
                    var nue = { type: "IfStatement", test: elif.test, consequent: elif.then, loc: elif.loc, range: elif.range }
                    last.alternate = nue;
                    last = nue;
                }

                if ( elze !== null ) last.alternate = elze[3];
                return result;
            },
        peg$c137 = function(argument) { 
                var arg;


                if ( argument == null ) { }
                else if ( argument.length == 1 ) arg = argument[0];
                else if ( argument.length > 1 ) {
                    if ( opt('decorateLuaObjects', false) ) arg = bhelper.luaOperatorA("makeMultiReturn", argument);
                    else  arg = {
                        type: "ArrayExpression",
                        elements: argument
                    };            
                }
                return {
                    type: "ReturnStatement",
                    argument: arg,
                    loc: loc(),
                    range: range()
                }
            },
        peg$c138 = function() {
                return {
                    type: "ReturnStatement",
                    loc: loc(),
                }     
            },
        peg$c139 = function() { return eUnterminated("if"); },
        peg$c140 = function(test, body) { return {
                type: "WhileStatement",
                test: test,
                body: body ? body[0] : {type: "EmptyStatement"},
                loc: loc(),
                range: range()

            } },
        peg$c141 = "repeat",
        peg$c142 = { type: "literal", value: "repeat", description: "\"repeat\"" },
        peg$c143 = function() { return eUnterminated("repeat", "until"); },
        peg$c144 = function() {return eMsg("repeat until needs terminations criteria"); },
        peg$c145 = function(body, test) { return {
                type: "DoWhileStatement",
                test: { 
                    type: "UnaryExpression",
                    operator: "!",
                    argument: test,
                    prefix: true,
                    loc: test.loc,
                    range: test.range
                },
                body: body ? body[0] : {type: "EmptyStatement"},
                loc: loc(),
                range: range()
            } },
        peg$c146 = "that",
        peg$c147 = { type: "literal", value: "that", description: "\"that\"" },
        peg$c148 = function() { return { "type": "ThisExpression" }; },
        peg$c149 = function(a, b) {
                a = bhelper.translateExpressionIfNeeded(a);
                if ( b === null ) return a;
                var tokens = [];
                for ( var idx in b ) {
                    var v = b[idx];
                    tokens.push(v[1]);
                    tokens.push(bhelper.translateExpressionIfNeeded(v[3]));
                }

                return precedenceClimber(tokens, a, 1);
            },
        peg$c150 = "-",
        peg$c151 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c152 = "+",
        peg$c153 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c154 = "==",
        peg$c155 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c156 = ">=",
        peg$c157 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c158 = "<=",
        peg$c159 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c160 = "~=",
        peg$c161 = { type: "literal", value: "~=", description: "\"~=\"" },
        peg$c162 = ">",
        peg$c163 = { type: "literal", value: ">", description: "\">\"" },
        peg$c164 = "<",
        peg$c165 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c166 = "..",
        peg$c167 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c168 = "and",
        peg$c169 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c170 = "or",
        peg$c171 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c172 = "*",
        peg$c173 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c174 = "//",
        peg$c175 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c176 = "/",
        peg$c177 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c178 = "%",
        peg$c179 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c180 = "^",
        peg$c181 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c182 = "(",
        peg$c183 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c184 = ")",
        peg$c185 = { type: "literal", value: ")", description: "\")\"" },
        peg$c186 = function(e) { return e; },
        peg$c187 = ":",
        peg$c188 = { type: "literal", value: ":", description: "\":\"" },
        peg$c189 = function(who, a) {
                var left = who
                for ( var idx = 0; idx < a.length; ++idx ) {
                    var v = a[idx];
                    if ( v[1] != null ) {
                        left = builder.memberExpression(left, v[1][1], false);
                        left.selfSuggar = true;
                    }
                    left = bhelper.callExpression(left,v[2]);
                }
                return left;
            },
        peg$c190 = function(b) { return [b]; },
        peg$c191 = function(c) { return [{type: "Literal", value: c, loc: loc(), range: range()}]; },
        peg$c192 = function(a) {

            // Wraping a call in ()'s reduces it to a singel value
            if ( a.type == "CallExpression" ) {
                return bhelper.luaOperator("oneValue", a);
            } else if ( a.type == "Identifier" && a.name == "__lua$rest" ) {
                return bhelper.luaOperator("oneValue", a);
            }
            return a;
        },
        peg$c193 = "...",
        peg$c194 = { type: "literal", value: "...", description: "\"...\"" },
        peg$c195 = function() {
                return wrapNode({type: "Identifier", name: "__lua$rest"});
            },
        peg$c196 = function(a, b) {
                var selfSuggar = false;
                if ( b.length == 0 ) return a;
                var left = a;
                for ( var i in b ) {
                    left = builder.memberExpression(left, b[i].exp, b[i].computed);
                    if ( b[i].suggar ) left.selfSuggar = true;
                }

                return left;
            },
        peg$c197 = /^[.:]/,
        peg$c198 = { type: "class", value: "[.:]", description: "[.:]" },
        peg$c199 = function(p, e) {
                return {exp: e, suggar: p == ':', computed: false }
            },
        peg$c200 = function(e) {
                return {exp: e, suggar: false, computed: true }
            },
        peg$c201 = function() { return eMsg("Malformed argument list."); },
        peg$c202 = function(a, b) {
                 return listHelper(a,b,3); 
            },
        peg$c203 = function(a, b) {
             return listHelper(a,b,3); 
        },
        peg$c204 = function() {return eUnterminated(")", "argument list"); },
        peg$c205 = function(a) {
                 return a; 
            },
        peg$c206 = function() {
                return []
            },
        peg$c207 = function(a, b, c) { 
                var left = builder.memberExpression(a, b[0], b[1]);
                for ( var idx in c ) {
                    left = builder.memberExpression(left, c[idx][0], c[idx][1]);
                }
                return left;
            },
        peg$c208 = function(b) { return [b, true]; },
        peg$c209 = function(b) { return [b,false]; },
        peg$c210 = "{",
        peg$c211 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c212 = "}",
        peg$c213 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c214 = function(f, s) { 
                var result = {
                    type: "ObjectExpression",
                    properties: [],
                    loc: loc(),
                    range: range()
                };

                var props = listHelper(f,s,3);
                var numeric = 0;
                var longProps = [];
                for ( var idx in props ) {
                    var p = props[idx];

                    if ( p.key === undefined ) p.key = {type: "Literal", value: ++numeric, arrayLike: true};
                    p.kind = "init";
                    result.properties.push(p);
                }


                if ( opt('decorateLuaObjects', false) ) {
                    var last;
                    var args = [];
                    var pp = [];
                    var last = true;
                    for ( var idx in result.properties ) {
                        var p = result.properties[idx];
                        if ( p.key.arrayLike ) {
                            args.push(p.value);
                            last = true;
                        } else {
                            longProps.push({
                                type: "ArrayExpression",
                                elements: [p.key, p.value]
                            });
                            pp.push(p);
                            last = false;
                        }
                    }
                    result.properties = pp;

                    result = {type: "ArrayExpression", elements: longProps };
                    if (pp.length < 1 ) result = {type:"Literal", value: null};

                    return bhelper.luaOperator.apply(bhelper, ["makeTable", result, {type: "Literal", value:last}].concat(args)); 
                }
                else return result;
            },
        peg$c215 = function(n, v) {
                if ( n.type == "Identifier" ) n = {type: "Literal", value: n.name};
                return { key: n, value: v };
            },
        peg$c216 = function(v) {
                return { value: v };
            },
        peg$c217 = function(k, v) {
                return { key: k, value: v }; 
            },
        peg$c218 = function(start, name, f, end) { return eUntermIfEmpty(end, "function", "end", start); },
        peg$c219 = function(start, name, f, end) {



                if ( name.type != "MemberExpression" && opt("allowRegularFunctions", false) ) {
                    //TODO: this would need to be decorated
                    return builder.functionDeclaration(name, f.params, f.body);
                }

                //TODO: Translate member expression into call
                var params = f.params.slice(0);
                if ( name.selfSuggar ) params = [{type: "Identifier", name: "self"}].concat(f.params);

                if ( f.rest ) {
                    bhelper.injectRest(f.body.body, params.length);
                }

                var out = builder.functionExpression(null, params, f.body)
                if ( opt('decorateLuaObjects', false) ) {
                    out = bhelper.luaOperator("makeFunction", out);
                }

                return bhelper.assign(name, out);
            },
        peg$c220 = function(start, name, f, end) {

                if ( f.rest ) {
                    bhelper.injectRest(f.body.body, f.params.length);
                }

                if ( opt("allowRegularFunctions", false) )
                    return builder.functionDeclaration(name, f.params, f.body);

                var func = builder.functionExpression(name, f.params, f.body);
                if ( opt('decorateLuaObjects', false) ) {
                    func = bhelper.luaOperator("makeFunction", func);
                }

                var decl = {type: "VariableDeclarator", id: name, init: func};
                var out = builder.variableDeclaration("let", [ decl ]);

                return out;
            },
        peg$c221 = function(f) {
                var result = {
                    type: "FunctionExpression",
                    body: f.body,
                    params: f.params,
                    loc:loc(),
                    range:range()
                }

                if ( f.rest ) {
                    bhelper.injectRest(f.body.body, f.params.length)
                }

                if ( opt('decorateLuaObjects', false) ) {
                    return bhelper.luaOperator("makeFunction", result);
                } else {
                    return result;
                }

            },
        peg$c222 = function(start, b, end) { return eUntermIfEmpty(end, "function", "end", start); },
        peg$c223 = function(start, b, end) { return b; },
        peg$c224 = function(p, rest, body) {
                return { params: p, body: body, rest: rest != null }
            },
        peg$c225 = function(body) {
                return { params: [], body: body, rest: true }
            },
        peg$c226 = function(a, b) {
                return listHelper(a,b); 
            },
        peg$c227 = function() { 
                return [] 
            },
        peg$c228 = function(o, e) { 
                var ops = {"not": "!", "-": "-", "#": "#" }
                if ( o == "#" ) {
                    e = bhelper.translateExpressionIfNeeded(e);
                    return bhelper.luaOperator("count", e);
                }
                return { 
                    type: "UnaryExpression",
                    operator: ops[o],
                    argument: bhelper.translateExpressionIfNeeded(e),
                    prefix: true,
                    loc: loc(),
                    range: range()
                }
            },
        peg$c229 = function(name) { return {
                type: "Identifier",
                name: name,
                loc: loc(),
                range: range()
            } },
        peg$c230 = function(a) {
                var values = {"nil": null, "false": false, "true": true} 
                return { type: "Literal", value: values[a], loc: loc(), range: range() }

            },
        peg$c231 = /^[eE]/,
        peg$c232 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c233 = function(b, c) {
                return { type: "Literal", value: parseFloat(b) * Math.pow(10, parseInt(c)), loc: loc(), range: range()  }

            },
        peg$c234 = "0",
        peg$c235 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c236 = /^[Xx]/,
        peg$c237 = { type: "class", value: "[Xx]", description: "[Xx]" },
        peg$c238 = /^[0-9a-fA-F]/,
        peg$c239 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c240 = function(b) {
                return { type: "Literal", value: parseInt(b), loc: loc(), range: range()  }

            },
        peg$c241 = function(b) {
                return { type: "Literal", value: parseFloat(b), loc: loc(), range: range()  }

            },
        peg$c242 = function(s) {
                return { type: "Literal", value: s, loc: loc(), range: range()  }

            },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c1();
      if (s1) {
        s1 = peg$c2;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s3 = peg$c4;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c7.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c7.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 10) {
              s5 = peg$c9;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseBlockStatement();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c11(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1, s2, s3, s4, s5;

      s0 = [];
      if (peg$c12.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c14) {
          s2 = peg$c14;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebalstringinsde();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c18) {
            s2 = peg$c18;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            if (peg$c7.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c7.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 10) {
                s5 = peg$c9;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = [];
              if (input.length > peg$currPos) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c12.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c13); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c14) {
              s2 = peg$c14;
              peg$currPos += 3;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsebalstringinsde();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s4 = peg$c16;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s4 !== peg$FAILED) {
                  s2 = [s2, s3, s4];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c18) {
                s2 = peg$c18;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = [];
                if (peg$c7.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c7.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                  }
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s5 = peg$c9;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
                if (s3 === peg$FAILED) {
                  s3 = [];
                  if (input.length > peg$currPos) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (input.length > peg$currPos) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                  }
                }
                if (s3 !== peg$FAILED) {
                  s2 = [s2, s3];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            }
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsescws() {
      var s0, s1, s2, s3, s4;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parsews();
      if (s2 === peg$FAILED) {
        s2 = peg$c3;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s3 = peg$c21;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 === peg$FAILED) {
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          s2 = peg$parsews();
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s3 = peg$c21;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsews();
              if (s4 === peg$FAILED) {
                s4 = peg$c3;
              }
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      } else {
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsews();
      }

      return s0;
    }

    function peg$parseBlockStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseReturnStatement();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c23(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseStatementList();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parsescws();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsescws();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseReturnStatement();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c24(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseStatementList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseStatement();
      if (s1 === peg$FAILED) {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parsescws();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsescws();
          }
        } else {
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseStatement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parsescws();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsescws();
            }
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseStatement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsews();
          if (s5 === peg$FAILED) {
            s5 = peg$c3;
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s6 = peg$c21;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsews();
            if (s5 === peg$FAILED) {
              s5 = peg$c3;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s6 = peg$c21;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c25(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseReservedWord() {
      var s0, s1, s2;

      if (input.substr(peg$currPos, 2) === peg$c26) {
        s0 = peg$c26;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c28) {
          s0 = peg$c28;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c30) {
            s0 = peg$c30;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c32) {
              s0 = peg$c32;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c34) {
                s0 = peg$c34;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c36) {
                  s0 = peg$c36;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c37); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c38) {
                    s0 = peg$c38;
                    peg$currPos += 6;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c40) {
                      s0 = peg$c40;
                      peg$currPos += 5;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c41); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c42) {
                        s0 = peg$c42;
                        peg$currPos += 3;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c43); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c44) {
                          s0 = peg$c44;
                          peg$currPos += 4;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c45); }
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 5) === peg$c46) {
                            s1 = peg$c46;
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c47); }
                          }
                          if (s1 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 8) === peg$c48) {
                              s2 = peg$c48;
                              peg$currPos += 8;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c49); }
                            }
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c50) {
                              s0 = peg$c50;
                              peg$currPos += 3;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c51); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c52) {
                                s0 = peg$c52;
                                peg$currPos += 5;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c53); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c54) {
                                  s0 = peg$c54;
                                  peg$currPos += 3;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c55); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c56) {
                                    s0 = peg$c56;
                                    peg$currPos += 5;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 8) === peg$c48) {
                                      s0 = peg$c48;
                                      peg$currPos += 8;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c49); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 5) === peg$c58) {
                                        s0 = peg$c58;
                                        peg$currPos += 5;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsebinop();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseunop();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseName() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      s3 = peg$parseReservedWord();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c2;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (peg$c60.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c62.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c62.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c63); }
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c64(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNumber() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c65.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
        }
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c67;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c65.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c66); }
              }
            }
          } else {
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestringchar() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c69;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c74) {
          s1 = peg$c74;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c76();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c77) {
            s1 = peg$c77;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsews();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c79();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c80) {
              s1 = peg$c80;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c81); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              if (peg$c82.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c83); }
              }
              if (s3 !== peg$FAILED) {
                s3 = input.substring(s2, peg$currPos);
              }
              s2 = s3;
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                if (peg$c82.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c83); }
                }
                if (s4 !== peg$FAILED) {
                  s4 = input.substring(s3, peg$currPos);
                }
                s3 = s4;
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c84(s2, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c69;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                if (peg$c65.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c66); }
                }
                if (s3 !== peg$FAILED) {
                  s3 = input.substring(s2, peg$currPos);
                }
                s2 = s3;
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  if (peg$c65.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c66); }
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$c3;
                  }
                  if (s4 !== peg$FAILED) {
                    s4 = input.substring(s3, peg$currPos);
                  }
                  s3 = s4;
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    if (peg$c65.test(input.charAt(peg$currPos))) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c66); }
                    }
                    if (s5 === peg$FAILED) {
                      s5 = peg$c3;
                    }
                    if (s5 !== peg$FAILED) {
                      s5 = input.substring(s4, peg$currPos);
                    }
                    s4 = s5;
                    if (s4 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c85(s2, s3, s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s1 = peg$c69;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c70); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c86();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (peg$c87.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c88); }
                  }
                  if (s1 !== peg$FAILED) {
                    s1 = input.substring(s0, peg$currPos);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesinglequote() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c89.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedoublequote() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c92.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseString() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsedoublequote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsestringchar();
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c94;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsestringchar();
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c94;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c95); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedoublequote();
          if (s3 === peg$FAILED) {
            s3 = [];
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = peg$currPos;
            s4 = peg$c96(s1, s2, s3);
            if (s4) {
              s4 = peg$c2;
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c97(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesinglequote();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsestringchar();
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c98;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsestringchar();
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c98;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c99); }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsesinglequote();
            if (s3 === peg$FAILED) {
              s3 = [];
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s4 = peg$c100(s1, s2, s3);
              if (s4) {
                s4 = peg$c2;
              } else {
                s4 = peg$c0;
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c97(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c101;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c102); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsebalstringinsde();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c16;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c103(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsebalstringinsde() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c104;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebalstringinsde();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c104;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c64(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c101;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c102); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c106.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c107); }
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 93) {
              s8 = peg$c16;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s8 !== peg$FAILED) {
              s9 = [];
              if (input.charCodeAt(peg$currPos) === 61) {
                s10 = peg$c104;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                if (input.charCodeAt(peg$currPos) === 61) {
                  s10 = peg$c104;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c105); }
                }
              }
              if (s9 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s10 = peg$c16;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s10 !== peg$FAILED) {
                  s8 = [s8, s9, s10];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$c0;
            }
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = peg$c2;
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            if (s6 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 93) {
                s8 = peg$c16;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s8 !== peg$FAILED) {
                s9 = [];
                if (input.charCodeAt(peg$currPos) === 61) {
                  s10 = peg$c104;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c105); }
                }
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s10 = peg$c104;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c105); }
                  }
                }
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s10 = peg$c16;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                  }
                  if (s10 !== peg$FAILED) {
                    s8 = [s8, s9, s10];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
              peg$silentFails--;
              if (s7 === peg$FAILED) {
                s6 = peg$c2;
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s4 = input.substring(s3, peg$currPos);
            }
            s3 = s4;
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s4 = peg$c16;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c108(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parseDebugger();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBreakStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumericFor();
          if (s0 === peg$FAILED) {
            s0 = peg$parseForEach();
            if (s0 === peg$FAILED) {
              s0 = peg$parseRepeatUntil();
              if (s0 === peg$FAILED) {
                s0 = peg$parseWhileStatement();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseIfStatement();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseExpressionStatement();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseDoEndGrouped();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseLocalAssingment();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseFunctionDeclaration();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseLocalFunction();
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$currPos;
                              peg$silentFails++;
                              s2 = peg$currPos;
                              s3 = peg$parsews();
                              if (s3 === peg$FAILED) {
                                s3 = peg$c3;
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseReservedWord();
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                              peg$silentFails--;
                              if (s2 === peg$FAILED) {
                                s1 = peg$c2;
                              } else {
                                peg$currPos = s1;
                                s1 = peg$c0;
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$currPos;
                                s3 = peg$parseExpression();
                                if (s3 !== peg$FAILED) {
                                  s3 = input.substring(s2, peg$currPos);
                                }
                                s2 = s3;
                                if (s2 !== peg$FAILED) {
                                  peg$reportedPos = peg$currPos;
                                  s3 = peg$c109(s2);
                                  if (s3) {
                                    s3 = peg$c2;
                                  } else {
                                    s3 = peg$c0;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c110(s2);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$currPos;
                                peg$silentFails++;
                                s2 = peg$currPos;
                                s3 = peg$parsews();
                                if (s3 === peg$FAILED) {
                                  s3 = peg$c3;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseReservedWord();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                peg$silentFails--;
                                if (s2 === peg$FAILED) {
                                  s1 = peg$c2;
                                } else {
                                  peg$currPos = s1;
                                  s1 = peg$c0;
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$currPos;
                                  s3 = peg$parseIdentifier();
                                  if (s3 !== peg$FAILED) {
                                    s3 = input.substring(s2, peg$currPos);
                                  }
                                  s2 = s3;
                                  if (s2 !== peg$FAILED) {
                                    peg$reportedPos = peg$currPos;
                                    s3 = peg$c111(s2);
                                    if (s3) {
                                      s3 = peg$c2;
                                    } else {
                                      s3 = peg$c0;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c110(s2);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$currPos;
                                  peg$silentFails++;
                                  s2 = peg$currPos;
                                  s3 = peg$parsews();
                                  if (s3 === peg$FAILED) {
                                    s3 = peg$c3;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseReservedWord();
                                    if (s4 !== peg$FAILED) {
                                      s3 = [s3, s4];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                  peg$silentFails--;
                                  if (s2 === peg$FAILED) {
                                    s1 = peg$c2;
                                  } else {
                                    peg$currPos = s1;
                                    s1 = peg$c0;
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$currPos;
                                    if (peg$c112.test(input.charAt(peg$currPos))) {
                                      s3 = input.charAt(peg$currPos);
                                      peg$currPos++;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c113); }
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s3 = input.substring(s2, peg$currPos);
                                    }
                                    s2 = s3;
                                    if (s2 !== peg$FAILED) {
                                      s3 = [];
                                      if (peg$c7.test(input.charAt(peg$currPos))) {
                                        s4 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                      }
                                      while (s4 !== peg$FAILED) {
                                        s3.push(s4);
                                        if (peg$c7.test(input.charAt(peg$currPos))) {
                                          s4 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                        }
                                      }
                                      if (s3 !== peg$FAILED) {
                                        if (peg$c106.test(input.charAt(peg$currPos))) {
                                          s4 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                        }
                                        if (s4 === peg$FAILED) {
                                          s4 = peg$currPos;
                                          peg$silentFails++;
                                          if (input.length > peg$currPos) {
                                            s5 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                          }
                                          peg$silentFails--;
                                          if (s5 === peg$FAILED) {
                                            s4 = peg$c2;
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$c0;
                                          }
                                        }
                                        if (s4 !== peg$FAILED) {
                                          peg$reportedPos = peg$currPos;
                                          s5 = peg$c114(s2);
                                          if (s5) {
                                            s5 = peg$c2;
                                          } else {
                                            s5 = peg$c0;
                                          }
                                          if (s5 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c110(s2);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseDebugger() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c115) {
        s1 = peg$c115;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c117();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDoEndGrouped() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsedo();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseBlockStatement();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c36) {
              s4 = peg$c36;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }
            if (s4 === peg$FAILED) {
              s4 = [];
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s5 = peg$c118(s1, s3, s4);
              if (s5) {
                s5 = peg$c2;
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c119(s1, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseif() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c26) {
        s1 = peg$c26;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedo() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c34) {
        s1 = peg$c34;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefor() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c54) {
        s1 = peg$c54;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefunction() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c48) {
        s1 = peg$c48;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNumericFor() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

      s0 = peg$currPos;
      s1 = peg$parsefor();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c104;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 === peg$FAILED) {
                  s6 = peg$c3;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseExpression();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsews();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c3;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s9 = peg$c120;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c121); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsews();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c3;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseExpression();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$currPos;
                            s13 = peg$parsews();
                            if (s13 === peg$FAILED) {
                              s13 = peg$c3;
                            }
                            if (s13 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 44) {
                                s14 = peg$c120;
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c121); }
                              }
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parsews();
                                if (s15 === peg$FAILED) {
                                  s15 = peg$c3;
                                }
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parseExpression();
                                  if (s16 !== peg$FAILED) {
                                    s13 = [s13, s14, s15, s16];
                                    s12 = s13;
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$c0;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$c0;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$c0;
                            }
                            if (s12 === peg$FAILED) {
                              s12 = peg$c3;
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsews();
                              if (s13 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c34) {
                                  s14 = peg$c34;
                                  peg$currPos += 2;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c35); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsews();
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$currPos;
                                    s17 = peg$parseBlockStatement();
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parsews();
                                      if (s18 !== peg$FAILED) {
                                        s17 = [s17, s18];
                                        s16 = s17;
                                      } else {
                                        peg$currPos = s16;
                                        s16 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s16;
                                      s16 = peg$c0;
                                    }
                                    if (s16 === peg$FAILED) {
                                      s16 = peg$c3;
                                    }
                                    if (s16 !== peg$FAILED) {
                                      if (input.substr(peg$currPos, 3) === peg$c36) {
                                        s17 = peg$c36;
                                        peg$currPos += 3;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                      }
                                      if (s17 === peg$FAILED) {
                                        s17 = [];
                                      }
                                      if (s17 !== peg$FAILED) {
                                        peg$reportedPos = peg$currPos;
                                        s18 = peg$c122(s1, s3, s7, s11, s12, s16, s17);
                                        if (s18) {
                                          s18 = peg$c2;
                                        } else {
                                          s18 = peg$c0;
                                        }
                                        if (s18 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c123(s1, s3, s7, s11, s12, s16, s17);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseForEach() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$parsefor();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenamelist();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c124) {
                s5 = peg$c124;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c125); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexplist();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsews();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c34) {
                        s9 = peg$c34;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c35); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsews();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c3;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseBlockStatement();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsews();
                            if (s12 === peg$FAILED) {
                              s12 = peg$c3;
                            }
                            if (s12 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c36) {
                                s13 = peg$c36;
                                peg$currPos += 3;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c37); }
                              }
                              if (s13 === peg$FAILED) {
                                s13 = [];
                              }
                              if (s13 !== peg$FAILED) {
                                peg$reportedPos = peg$currPos;
                                s14 = peg$c126(s1, s3, s7, s11, s13);
                                if (s14) {
                                  s14 = peg$c2;
                                } else {
                                  s14 = peg$c0;
                                }
                                if (s14 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c127(s1, s3, s7, s11, s13);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLocalAssingment() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c40) {
        s1 = peg$c40;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenamelist();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c104;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 === peg$FAILED) {
                  s6 = peg$c3;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexplist();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c128(s3, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c40) {
          s1 = peg$c40;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenamelist();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c129(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseAssignmentExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsevarlist();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c104;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexplist();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c130(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBreakStatement() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c52) {
        s1 = peg$c52;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c131();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseExpressionStatement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseAssignmentExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parseCallExpression();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c132(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseelseif() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c30) {
        s1 = peg$c30;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c28) {
                s5 = peg$c28;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseBlockStatement();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c133(s3, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseIfStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parseif();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c28) {
                s5 = peg$c28;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
              }
              if (s5 === peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s5 = peg$c134();
                if (s5) {
                  s5 = peg$c2;
                } else {
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseBlockStatement();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$currPos;
                    s10 = peg$parsews();
                    if (s10 === peg$FAILED) {
                      s10 = peg$c3;
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseelseif();
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$currPos;
                      s10 = peg$parsews();
                      if (s10 === peg$FAILED) {
                        s10 = peg$c3;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseelseif();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parsews();
                      if (s10 === peg$FAILED) {
                        s10 = peg$c3;
                      }
                      if (s10 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c32) {
                          s11 = peg$c32;
                          peg$currPos += 4;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c33); }
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsews();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parseBlockStatement();
                            if (s13 !== peg$FAILED) {
                              s10 = [s10, s11, s12, s13];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$c0;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$c0;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c3;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsews();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c3;
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c36) {
                            s11 = peg$c36;
                            peg$currPos += 3;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                          }
                          if (s11 === peg$FAILED) {
                            s11 = [];
                          }
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = peg$currPos;
                            s12 = peg$c135(s1, s3, s7, s8, s9, s11);
                            if (s12) {
                              s12 = peg$c2;
                            } else {
                              s12 = peg$c0;
                            }
                            if (s12 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c136(s1, s3, s7, s8, s9, s11);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseReturnStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c38) {
        s1 = peg$c38;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexplist();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c137(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c38) {
          s1 = peg$c38;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c138();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseWhileStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c58) {
        s1 = peg$c58;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c34) {
                s5 = peg$c34;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseBlockStatement();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsews();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c3;
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c36) {
                      s8 = peg$c36;
                      peg$currPos += 3;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c37); }
                    }
                    if (s8 === peg$FAILED) {
                      peg$reportedPos = peg$currPos;
                      s8 = peg$c139();
                      if (s8) {
                        s8 = peg$c2;
                      } else {
                        s8 = peg$c0;
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c140(s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRepeatUntil() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c141) {
        s1 = peg$c141;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseBlockStatement();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c56) {
                s5 = peg$c56;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c57); }
              }
              if (s5 === peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s5 = peg$c143();
                if (s5) {
                  s5 = peg$c2;
                } else {
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseExpression();
                  if (s7 === peg$FAILED) {
                    peg$reportedPos = peg$currPos;
                    s7 = peg$c144();
                    if (s7) {
                      s7 = peg$c2;
                    } else {
                      s7 = peg$c0;
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c145(s3, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseThat() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c146) {
        s1 = peg$c146;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c148();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSimpleExpression() {
      var s0;

      s0 = peg$parseLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseResetExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFunctionExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCallExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parseThat();
              if (s0 === peg$FAILED) {
                s0 = peg$parseIdentifier();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseObjectExpression();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseUnaryExpression();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseParenExpr();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0;

      s0 = peg$parseAssignmentExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBinSimpleExpression();
      }

      return s0;
    }

    function peg$parseBinSimpleExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseMemberExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSimpleExpression();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebinop();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseMemberExpression();
              if (s7 === peg$FAILED) {
                s7 = peg$parseSimpleExpression();
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsews();
          if (s4 === peg$FAILED) {
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebinop();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseMemberExpression();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseSimpleExpression();
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c149(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseunop() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c150;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c50) {
          s1 = peg$c50;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 35) {
            s1 = peg$c4;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebinop() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c152;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c150;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c151); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c154) {
            s1 = peg$c154;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c155); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c156) {
              s1 = peg$c156;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c157); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c158) {
                s1 = peg$c158;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c159); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c160) {
                  s1 = peg$c160;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c161); }
                }
                if (s1 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s1 = peg$c162;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c163); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 60) {
                      s1 = peg$c164;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c165); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c166) {
                        s1 = peg$c166;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c167); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c168) {
                          s1 = peg$c168;
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c169); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c170) {
                            s1 = peg$c170;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c171); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 42) {
                              s1 = peg$c172;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c173); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c174) {
                                s1 = peg$c174;
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c175); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 47) {
                                  s1 = peg$c176;
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c177); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 37) {
                                    s1 = peg$c178;
                                    peg$currPos++;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 94) {
                                      s1 = peg$c180;
                                      peg$currPos++;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c181); }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseprefixexp() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parsefuncname();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c182;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c183); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsews();
              if (s4 === peg$FAILED) {
                s4 = peg$c3;
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c184;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c185); }
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c186(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseCallExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c48) {
        s3 = peg$c48;
        peg$currPos += 8;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c182;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c183); }
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprefixexp();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsews();
          if (s5 === peg$FAILED) {
            s5 = peg$c3;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 58) {
              s7 = peg$c187;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c188); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseIdentifier();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecallsuffix();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parsews();
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 58) {
                  s7 = peg$c187;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c188); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseIdentifier();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c3;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecallsuffix();
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c189(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecallsuffix() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseargs();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c64(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseObjectExpression();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c190(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseString();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c191(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseParenExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c182;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c184;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c185); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c192(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseResetExpression() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c193) {
        s1 = peg$c193;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c194); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefuncname() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseThat();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIdentifier();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsefuncnamesuffix();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsefuncnamesuffix();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c196(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefuncnamesuffix() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        if (peg$c197.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c198); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifier();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c199(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 === peg$FAILED) {
          s1 = peg$c3;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c101;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c102); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsews();
            if (s3 === peg$FAILED) {
              s3 = peg$c3;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseExpression();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsews();
                if (s5 === peg$FAILED) {
                  s5 = peg$c3;
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s6 = peg$c16;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c200(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseexplist() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c120;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseExpression();
              if (s7 === peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s7 = peg$c201();
                if (s7) {
                  s7 = peg$c2;
                } else {
                  s7 = peg$c0;
                }
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsews();
          if (s4 === peg$FAILED) {
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c120;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseExpression();
                if (s7 === peg$FAILED) {
                  peg$reportedPos = peg$currPos;
                  s7 = peg$c201();
                  if (s7) {
                    s7 = peg$c2;
                  } else {
                    s7 = peg$c0;
                  }
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c202(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevarlist() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsevar();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c120;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsevar();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsews();
          if (s4 === peg$FAILED) {
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c120;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsevar();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c203(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenamelist() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c120;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIdentifier();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsews();
          if (s4 === peg$FAILED) {
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c120;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseIdentifier();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c202(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseargs() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c182;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexplist();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c184;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c185); }
              }
              if (s5 === peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s5 = peg$c204();
                if (s5) {
                  s5 = peg$c2;
                } else {
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c205(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c182;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c183); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s3 = peg$c184;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c185); }
            }
            if (s3 === peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s3 = peg$c204();
              if (s3) {
                s3 = peg$c2;
              } else {
                s3 = peg$c0;
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c206();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsevar() {
      var s0;

      s0 = peg$parseMemberExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIdentifier();
      }

      return s0;
    }

    function peg$parseMemberExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseCallExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSimpleExpression();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseindexer();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseindexer();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseindexer();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c207(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexer() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c101;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c16;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c208(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c67;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSimpleExpression();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c209(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseObjectExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c210;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c211); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefield();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c120;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
              }
              if (s7 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 59) {
                  s7 = peg$c21;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsews();
                if (s8 === peg$FAILED) {
                  s8 = peg$c3;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsefield();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c120;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c121); }
                }
                if (s7 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s7 = peg$c21;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsews();
                  if (s8 === peg$FAILED) {
                    s8 = peg$c3;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsefield();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c212;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c213); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c214(s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefield() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseLiteral();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIdentifier();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c104;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseBinSimpleExpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c215(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBinSimpleExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c216(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsews();
          if (s1 === peg$FAILED) {
            s1 = peg$c3;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s2 = peg$c101;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c102); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsews();
              if (s3 === peg$FAILED) {
                s3 = peg$c3;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseExpression();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsews();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c3;
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s6 = peg$c16;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c17); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsews();
                      if (s7 === peg$FAILED) {
                        s7 = peg$c3;
                      }
                      if (s7 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                          s8 = peg$c104;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c105); }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parsews();
                          if (s9 === peg$FAILED) {
                            s9 = peg$c3;
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parseBinSimpleExpression();
                            if (s10 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c217(s4, s10);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseFunctionDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsefunction();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefuncname();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefuncbody();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c36) {
                    s7 = peg$c36;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                  }
                  if (s7 === peg$FAILED) {
                    s7 = [];
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = peg$currPos;
                    s8 = peg$c218(s1, s3, s5, s7);
                    if (s8) {
                      s8 = peg$c2;
                    } else {
                      s8 = peg$c0;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c219(s1, s3, s5, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLocalFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c40) {
        s1 = peg$c40;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefunction();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefuncname();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 === peg$FAILED) {
                  s6 = peg$c3;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsefuncbody();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsews();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c3;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c36) {
                        s9 = peg$c36;
                        peg$currPos += 3;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                      }
                      if (s9 === peg$FAILED) {
                        s9 = [];
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = peg$currPos;
                        s10 = peg$c218(s3, s5, s7, s9);
                        if (s10) {
                          s10 = peg$c2;
                        } else {
                          s10 = peg$c0;
                        }
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c220(s3, s5, s7, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFunctionExpression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsefuncdef();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c221(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefuncdef() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsefunction();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefuncbody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c36) {
                s5 = peg$c36;
                peg$currPos += 3;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c37); }
              }
              if (s5 === peg$FAILED) {
                s5 = [];
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s6 = peg$c222(s1, s3, s5);
                if (s6) {
                  s6 = peg$c2;
                } else {
                  s6 = peg$c0;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c223(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefuncbody() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c182;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseparamlist();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c120;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 === peg$FAILED) {
                  s7 = peg$c3;
                }
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c193) {
                    s8 = peg$c193;
                    peg$currPos += 3;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c194); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsews();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c3;
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c184;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c185); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsews();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseBlockStatement();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c224(s3, s5, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c182;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c183); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c193) {
              s3 = peg$c193;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c194); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsews();
              if (s4 === peg$FAILED) {
                s4 = peg$c3;
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c184;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c185); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsews();
                  if (s6 === peg$FAILED) {
                    s6 = peg$c3;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseBlockStatement();
                    if (s7 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c225(s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseparamlist() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c120;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIdentifier();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c120;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseIdentifier();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c226(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 === peg$FAILED) {
          s1 = peg$c3;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c227();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseUnaryExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseunop();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMemberExpression();
          if (s3 === peg$FAILED) {
            s3 = peg$parseSimpleExpression();
            if (s3 === peg$FAILED) {
              s3 = peg$parseExpression();
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c228(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseName();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c229(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLiteral() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c42) {
        s1 = peg$c42;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c46) {
          s1 = peg$c46;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c44) {
            s1 = peg$c44;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c230(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNumber();
        if (s1 !== peg$FAILED) {
          if (peg$c231.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c232); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c150;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c151); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s5 = peg$c152;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c153); }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c3;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c65.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c66); }
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c65.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c66); }
                  }
                }
              } else {
                s6 = peg$c0;
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s4 = input.substring(s3, peg$currPos);
            }
            s3 = s4;
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c233(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 48) {
            s1 = peg$c234;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c235); }
          }
          if (s1 !== peg$FAILED) {
            if (peg$c236.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = [];
              if (peg$c238.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c239); }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c238.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c239); }
                  }
                }
              } else {
                s4 = peg$c0;
              }
              if (s4 !== peg$FAILED) {
                s4 = input.substring(s3, peg$currPos);
              }
              s3 = s4;
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c240(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseNumber();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c241(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseString();
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c242(s1);
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }


      function loc() { return {start: { line: line(), column: column() } } }
      function range() { return [offset(), offset() + text().length]; }
      function listHelper(a,b,c) { return a == null ? [] : [a].concat(b.map(function(b) { return b[c || 2]; })); }
      function opt(name, def) { return name in options ? options[name] : def }

      function expandMultiStatements(list) {
        var out = [];
        for ( var i = 0; i < list.length; ++i ) {
            var value = list[i];
            if (value instanceof Array) out = out.concat(value);
            else out.push(value);
        }
        return out;
      }

      function wrapNode(obj, hasScope) {
        hasScope = !!hasScope 
        obj.loc = loc();
        obj.range = range();
        obj.hasScope = hasScope;
        obj.text = text();
        return obj;
      }

      function eUntermIfEmpty(what, type, end, start) {
        if ( what.length == 0 ) return eUnterminated(type, end, start);
        return true;
      }

      function eUnterminated(type, end, start) {
        var xline = start !== undefined ? start.loc.start.line : (line());
        var xcol = start !== undefined ? start.loc.start.column : (column());

        eMsg("`" + (end || "end") + "` expected (to close " + type + " at " + xline + ":" + xcol + ") at " + line() +  ":" + column() );
        return true;
      }

      function eMsg(why) {
        if ( !opt("loose", false) ) error(why);
        errors.push({msg: why, loc: loc(), range: range()});
        return true;
      }

      var opPrecedence = {
        "^": 10,
        "not": 9,
        "*": 8, "/": 8, "%": 8, "//": 8,
        "+": 7, "-": 7,
        "..": 6,
        "<": 5, ">": 5, ">=": 5, "<=": 5, "==": 5, "~=": 5,
        "and": 4,
        "or": 3
      }

      function precedenceClimber(tokens, lhs, min) {
        while ( true ) { 
            if ( tokens.length == 0 ) return lhs;
            var op = tokens[0];
            var prec = opPrecedence[op];
            if ( prec < min ) return lhs;
            tokens.shift();

            var rhs = tokens.shift();
            while ( true ) {
                var peek = tokens[0];
                if ( peek == null || opPrecedence[peek] <= prec ) break;
                rhs = precedenceClimber(tokens, rhs, opPrecedence[peek]);
            }

            lhs = bhelper.binaryExpression(op, lhs, rhs);
        }

      }

      var errors;

      function init() {
        errors = [];
      }

      var builder = {
        assignmentExpression: function(op, left, right) { return wrapNode({type: "AssignmentExpression", operator: op, left: left, right: right }); },
        binaryExpression: function(op, left, right) { return wrapNode({type: (op == '||' || op == '&&') ? "LogicalExpression" : "BinaryExpression", operator: op, left: left, right: right }); },
        blockStatement: function(body) { return wrapNode({ type: "BlockStatement", body: body}); },
        callExpression: function(callee, args) { return wrapNode({ type: "CallExpression", callee: callee, arguments: args}); },
        emptyStatement: function() { return wrapNode({ type: "EmptyStatement" }); },
        functionDeclaration: function(name, args, body, isGenerator, isExpression) {
            return wrapNode({type: "FunctionDeclaration", id: name, params: args, body: body, generator: isGenerator, expression: isExpression });
        },
        memberExpression: function(obj, prop, isComputed) { return wrapNode({ type:"MemberExpression", object: obj, property: prop, computed: isComputed }); },
        variableDeclaration: function(kind, decls) { return { type: "VariableDeclaration", declarations: decls, kind: opt("forceVar", true) ? "var" : kind } },
        functionExpression: function(name, args, body) { return { type: "FunctionExpression", name: name, body: body, params: args } },
        returnStatement: function(arg) { return wrapNode({type: "ReturnStatement", argument: arg}); },
        generatedReturnStatement: function(arg) { return wrapNode({type: "ReturnStatement", argument: arg, userCode: false}); }
      };

      var i = function(n) { return { type: "Identifier", name: n}; }
      var id = i;
      var tmpVarCtr = 0;

      function clone(obj) {
        return JSON.parse(JSON.stringify(obj));
      }



      function finalize(ast) {
        if ( opt("loose", false) ) ast.errors = errors;
        
        if ( opt("useStrict", false) ) {
            ast.body.unshift({
                type: "ExpressionStatement",
                expression: { type: "Literal", value: "use strict" }
            });
        }

        if ( opt("noSharedObjects", true) ) return clone(ast);
        return ast;
      }

      var bhelper = {
        blockStatement: function(body) {
            return builder.blockStatement(expandMultiStatements(body));
        },
        tempName: function() {
            return i("__lua$tmpvar$" + (++tmpVarCtr));
        },
        tempVar: function(exp) {
            return { type: "VariableDeclarator", id: bhelper.tempName(), init: exp };
        },
        assign: function(target, exp) {
            var out = builder.assignmentExpression("=", target, exp);
            if ( target.type == "MemberExpression" && opt("luaOperators", false) ) {
                var prop = target.property;
                if ( !target.computed ) prop = {"type": "Literal", "value": prop.name, loc: prop.loc, range: prop.range };
                
                var helper;
                var nue = bhelper.translateExpressionIfNeeded(target.object);

                if ( target.object.type == "Identifier" ) helper = target.object.name;

                if ( helper === undefined ) {
                    nue = bhelper.luaOperator("indexAssign", nue, prop, exp);
                } else {
                    nue = bhelper.luaOperator("indexAssign", nue, prop, exp, {type:"Literal", value: helper});
                }

                nue = {type: "ConditionalExpression",test: nue, consequent: exp, alternate: out};

                out = nue;
            }
                
            return {
                type: "ExpressionStatement",
                expression: out
            };
        },
        encloseDecls: function(body /*, decls...*/) {
            var decls = Array.prototype.slice.call(arguments, 1);
            return bhelper.encloseDeclsEx.apply(this, [body, opt("encloseWithFunctions", true) ].concat(decls));
        },
        encloseDeclsEx: function(body, enclose /*, decls...*/) {
            var decls = Array.prototype.slice.call(arguments, 2);
            var vals = [];
            var names = [];
            for ( var k in decls ) {
                var v = decls[k];
                vals.push(v.init);
                names.push(v.id);
            }

            if ( enclose ) {
                return {
                    expression: builder.callExpression(
                        builder.functionExpression(null, names, bhelper.blockStatement(body)),
                        vals
                    ),
                    type: "ExpressionStatement"
                }
            } else {
                if ( decls.length < 1 ) return body;
                return bhelper.blockStatement([ builder.variableDeclaration("let", decls) ].concat(body));
            }
        },
        encloseDeclsUnpack: function(body, names, explist, force) {

            if ( force || opt("encloseWithFunctions", true) ) {
                return {
                    expression: builder.callExpression(
                        builder.memberExpression(
                            builder.functionExpression(null, names, builder.blockStatement(body)),
                            i("apply")
                        ),
                        [{type: "Literal", value: null}, bhelper.luaOperatorA("expandReturnValues", explist)]
                    ),
                    type: "ExpressionStatement"
                }
            } else {
                var decls = [];
                for ( var idx in names ) {
                    decls.push({
                        type: "VariableDeclarator",
                        id: names[idx],
                        init: idx.id
                    });
                }
                return bhelper.blockStatement([ 
                    builder.variableDeclaration("let", decls),
                    bhelper.bulkAssign(names, explist)
                    ].concat(body));
            }
        },
        bulkAssign: function(names, explist) {
            var temps = [];
            var body = [];
            for ( var i = 0; i < names.length; ++i ) {
                temps[i] = bhelper.tempName();
            }

            // If we are refrencing a previously set value in a bulk assign as a property
            // we want to use the old value to look up the index, so we will pull that from
            // the temp var passed in
            var extra = 0;
            for ( var i = 0; i < names.length; ++i ) {
                var exp = names[i];
                if ( exp.type == "MemberExpression" && exp.property.type == "Identifier" ) {
                    for ( var j = 0; j < i; ++j) {
                        if ( names[j].name == exp.property.name ) {
                            var holding = bhelper.tempName();
                            temps.unshift(holding);
                            explist.unshift(exp.property);
                            exp.property = holding;
                            ++extra;
                        }
                    }
                }
            }

            for ( var i = 0; i < names.length; ++i ) {
                body[i] = bhelper.assign(names[i], temps[i+extra]);
            }

            if ( names.length > 1 ) {
                return bhelper.encloseDeclsUnpack(body, temps, explist, true);
            } else {
                var value = explist[0];
                if ( value.type == "CallExpression" ) value = bhelper.luaOperator("oneValue", value);
                return bhelper.assign(names[0], value);
            }
            
        },
        luaOperator: function(op /*, args */) {
            if ( op == "oneValue" && opt("noMutliReturnSquish", false) ) return arguments[1];
            var o = builder.callExpression(
                builder.memberExpression(i("__lua"), i(op)), 
                Array.prototype.slice.call(arguments, 1)
            );
            o.internal = true;
            return o;
        },
        luaOperatorA: function(op, args) {
            var o = builder.callExpression(
                builder.memberExpression(i("__lua"), i(op)), 
                args
            );
            o.internal = true;
            return o;
        },
        binaryExpression: function(op, a, b) {
            if ( opt("luaOperators", false) && op != "and" && op != "or" ) {
                var map = {"+": "add", "-": "sub", "*": "mul", "/": "div", "//": "intdiv", "^": "pow", "%":"mod",
                    "..": "concat", "==": "eq", "<": "lt", "<=": "lte", ">": "gt", ">=": "gte", "~=": "ne",
                    "and": "and", "or": "or"
                };
                
                return bhelper.luaOperator(map[op], a, b);
            } else {

                if ( op == "~=" ) xop = "!=";
                else if ( op == ".." ) op = "+";
                else if ( op == "or" ) op = "||";
                else if ( op == "and" ) op = "&&";
                else if ( op == "//" ) op = "/";

                a = bhelper.luaOperator("oneValue", a);
                b = bhelper.luaOperator("oneValue", b);

                return builder.binaryExpression(op, a, b);
            }
        },
        callExpression: function(callee, args) {
            if ( opt("luaCalls", false) ) {
                var that = {"type": "ThisExpression" };
                if ( callee.type == "MemberExpression" ) that = {"type":"Literal", "value": null};
                var flags = 0;
                if ( callee.selfSuggar ) {
                    flags = flags | 1;
                }

                if ( opt('decorateLuaObjects', false) ) {
                    flags = flags | 2;
                }

                var flagso = {"type": "Literal", "value": flags};
                var helper = null;
                
                if ( callee.type == "Identifier" ) helper = callee.name;
                else if ( callee.type == "MemberExpression" && !callee.computed ) helper = callee.property.name;

                helper = {"type": "Literal", "value": helper};

                if ( callee.selfSuggar ) {
                    if ( callee.object.type == "Identifier" ) {
                        //Dont bother making a function if we are just an identifer.
                        var rcallee = bhelper.translateExpressionIfNeeded(callee)
                        return bhelper.luaOperator.apply(bhelper, ["call", flagso , rcallee, callee.object, helper].concat(args));

                    } else {
                        var tmp = bhelper.tempVar(bhelper.translateExpressionIfNeeded(callee.object));
                        
                        var rexpr = builder.memberExpression(tmp.id, callee.property, callee.computed);
                        var rcallee = bhelper.translateExpressionIfNeeded(rexpr);
                        var expr = bhelper.luaOperator.apply(bhelper, ["call", flagso, rcallee, tmp.id, helper].concat(args));
                        return result = bhelper.encloseDeclsEx([
                            builder.returnStatement(
                                expr
                            )
                        ], true, tmp).expression;

                    }
                } else {
                    var rcallee = bhelper.translateExpressionIfNeeded(callee)
                    if ( rcallee.type == "Identifier" && rcallee.name == "assert" ) {
                        args.push({type: "Literal", value: args[0].text || "?"})
                    }
                    return bhelper.luaOperator.apply(bhelper, ["call", flagso , rcallee, that, helper].concat(args));
                }
            } else {
                return builder.callExpression(callee, args);
            }
        },
        memberExpression: function(obj, prop, isComputed) {
            if ( opt("luaOperators", false) && !isComputed ) {
                var helper;
                if ( obj.type == "Identifier") helper = obj.name;

                if ( helper == undefined ) {
                    return bhelper.luaOperator("index", obj, prop);
                } else {
                    return bhelper.luaOperator("index", obj, prop, {type:"Literal", value: helper});
                }
            }
            return builder.memberExpression(obj, prop, isComputed);
        },
        translateExpressionIfNeeded: function(exp) {
            if ( !opt("luaOperators", false) ) return exp;
            if ( exp.type == "MemberExpression" ) {
                var prop = exp.property;
                if ( !exp.computed ) prop = {"type": "Literal", value: prop.name };
                var nu = bhelper.memberExpression(bhelper.translateExpressionIfNeeded(exp.object), prop, false);
                nu.origional = exp;
                nu.range = exp.range;
                nu.loc = exp.loc;
                return nu;
            }

            return exp;
        },
        injectRest: function(block, count) {
            block.unshift(builder.variableDeclaration("let", [
                    {
                        type: "VariableDeclarator", 
                        id: {type: "Identifier", name:"__lua$rest"},
                        userCode: false,
                        init: bhelper.luaOperator("rest", 
                            {type: "Identifier", name:"arguments"},
                            {type: "Literal", value:count}
                        )
                    }
                 ]));
        },
        valueProvdier: function(statement) {
            return builder.functionExpression(null, [], bhelper.blockStatement([
                builder.generatedReturnStatement(statement)
            ]));
        }
      }



    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();


/***/ }),
/* 288 */
/***/ (function(module, exports) {

var env = {};
var __lua = (function() {

	// Yoinked from underscore.
	var isJSArray = Array.isArray || function(obj) { return toString.call(obj) === '[object Array]'; };

	function type(what) {
		if ( what === null || what === undefined ) return "nil";
		if ( isNaN(what) ) return "number";
		var t = typeof what;
		if ( t == "object" ) return "table";
		return t;
	}

	function numberForArith(n) {
		if ( type(n) == "number" ) return n;
		else if ( typeof n == "string" ) {
			n = parseInt(n);
			if ( !isNaN(n) ) return n;

		}

		throw "attempt to perform arithmetic on a " +  type(n) + " value: " + n;
	}

	function makeString(a) { 
		a = oneValue(a);

		var mtf = lookupMetaTable(a, "__tostring");
		if ( mtf !== null ) return mtf(a);

		if ( a === undefined || a === null ) return "nil";
		if ( a instanceof LuaTable ) {
			return "table: 0x" + a.id;
		} else if ( typeof a == "number" ) {
			if ( ~~a == a ) return a.toString();
			var rep = a.toPrecision();
			if ( rep.length > 14 ) return a.toPrecision(14);
			return rep;
		}
		return "" + a;
	}

	function add(a,b) {
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__add");
		if ( mtf !== null ) return mtf(a,b);

		return numberForArith(a) + numberForArith(b); 
	}

	function sub(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__sub");
		if ( mtf !== null ) return mtf(a,b);

		return numberForArith(a) - numberForArith(b);
	}

	function mul(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__mul");
		if ( mtf !== null ) return mtf(a,b);

		return numberForArith(a) * numberForArith(b);
	}

	function div(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__div");
		if ( mtf !== null ) return mtf(a,b);

		return numberForArith(a) / numberForArith(b);
	}

	function intdiv(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__idiv");
		if ( mtf !== null ) return mtf(a,b);

		return ~~(numberForArith(a) / numberForArith(b));
	}

	function mod(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__mod");
		if ( mtf !== null ) return mtf(a,b);

		return numberForArith(a) % numberForArith(b);
	}

	function pow(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__pow");
		if ( mtf !== null ) return mtf(a,b);

		return Math.pow(numberForArith(a),numberForArith(b)); 
	}

	function concat(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__concat");
		if ( mtf !== null ) return mtf(a,b);
		if ( a === null || a === undefined || b === null || b === undefined ) throw "attempt to concatenate a nil value";

		return  makeString(a) + makeString(b); 
	}

	function lte(a,b) {
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__le");
		if ( mtf !== null ) return mtf(a,b);

		return a <= b; 
	}

	function lt(a,b) {
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__lt");
		if ( mtf !== null ) return mtf(a,b);

		return a < b; 
	}

	function gte(a,b) { return lte(b,a); }
	function gt(a,b) { return lt(b,a); }


	function forcomp(d,a,b) { 
		if ( d > 0 ) return a <= b; 
		else if ( d < 0 ) return b <= a;
		else return false;
	}

	
	function eq(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__eq");
		if ( mtf !== null ) return mtf(a,b);


		if ( a === null || a === undefined ) {
			return ( b === null || b === undefined );
		}
		if ( a === b ) return true;
		return false;
	}
	
	function ne(a,b) { return !eq(a,b); }

	function count(a) { 
		if ( a instanceof LuaTable ) {
			var cnt = 0;
			while ( a.numeric[cnt] !== undefined ) ++cnt;
			return cnt;
		}
		return a.length;
	}

	function and(a,b) { return a && b; }
	function or(a,b) { return a || b; }

	function call(flags, what, that, helper /*, args... */ ) {
		var injectSelf = !!(flags & 1); 
		var detectLua = !!(flags & 2); 

		if ( what === null || what === undefined ) {
			if ( helper === undefined ) throw "attempt to call a " + type(what) + " value";
			else throw "attempt to call '" + helper + "' (a " + type(what) + " value)"; 
		}

		var args = expand(Array.prototype.slice.call(arguments, 4), true);

		var doInject = true;

		if ( detectLua ) {
			doInject = what.__luaType == "function";
		}

		if ( injectSelf && doInject ) {
			args.unshift(that);
		}

		if ( detectLua && what.__luaType != "function" ) {
			var args2 = [];
			for ( var i = 0; i < args.length; ++i ) {
				var a = args[i];
				if ( a instanceof LuaTable ) {
					if ( a.numeric.length == 0 ) args2[i] = a.hash;
					else if ( Object.keys(a.hash).length == 0 ) args2[i] = a.numeric;
					else args2[i] = a;
				} else {
					args2[i] = a;
				}
			}
			args = args2;
		}

		return what.apply(that, args);
	}

	function rest(args, cnt) {
		var out = Object.create(LuaReturnValues.prototype, {});
		out.values = Array.prototype.slice.call(args, cnt);
		return out;
	}

	var id = 0;
	function LuaTable() {
		this.id = ++id;
		this.numeric = [];
		this.hash = {};
	}

	Object.defineProperty(LuaTable.prototype, "__luaType",  {value: "table",  enumerable: false});
	Object.defineProperty(LuaTable.prototype, "toString",  {value: function() {
		return makeString(this);
	},  enumerable: false});

	function makeTable(t, allowExpand /*, numeric ... */) {
		var out = new LuaTable();

		out.numeric = expand(Array.prototype.slice.call(arguments, 2), allowExpand);
		if ( !t ) return out;

		if ( isJSArray(t) ) {
			for ( var i = 0; i < t.length; ++i ) {
				var pair = t[i];
				var key = pair[0];
				var val = pair[1];
				if ( typeof key == "number" ) {
					out.numeric[key - 1] = val;
				} else {
					out.hash[key] = val;
				}
			}
		} else {
			for ( var k in t ) {
				out.hash[k] = t[k];
			}
		}

		return out;
	}

	function makeFunction(f) {
		f.__luaType = "function";
		return f;
	}

	function LuaReturnValues(v) {
		this.values = v;
	}

	Object.defineProperty(LuaReturnValues.prototype, "__luaType",  {value: "returnValues",  enumerable: false});

	function lookupMetaTable(table, entry) {
		if ( table instanceof LuaTable ) {
			if ( table.__metatable === undefined ) return null;

			var idx = table.__metatable.hash[entry];
			if ( idx === null || idx === undefined ) return null;

			return idx;
		}

		return null;
	}

	function lookupMetaTableBin(a, b, entry) {
		var mt = lookupMetaTable(a, entry);
		if ( mt == null ) return lookupMetaTable(b, entry);
		return mt;
	}

	function index(table, prop, helper) {
		if ( table === null || table === undefined || typeof table == "number" ) {
			if ( helper == undefined ) {
				throw "attempt to index a " + type(table) + " value";
			} else {
				throw "attempt to index '" + helper + "' (a " + type(table) + " value)";
			}
		} else if ( table instanceof LuaTable ) {
			var val;
			if ( typeof prop == "number") val = table.numeric[prop-1];
			else val = table.hash[prop];

			if ( val !== null & val !== undefined ) return val;

			var idxfx = lookupMetaTable(table, "__index");
			if ( idxfx == null ) return null;

			if ( typeof idxfx == "function" ) return oneValue(idxfx(table, prop));
			return index(idxfx, prop);
		} else if ( isJSArray(table) ) {
			return table[prop - 1];
		} else if ( typeof table == "string" ) {
			var sidx = tonumber(prop);
			if ( sidx < 0 ) sidx += (table.length + 1);
			return table[sidx-1];
		} else {
			return table[prop];
		}
	}

	function indexAssign(table, prop, value, helper) {

		if ( table === null || table === undefined || typeof table == "number" ) {
			if ( helper == undefined ) {
				throw "attempt to index a " + type(table) + " value";
			} else {
				throw "attempt to index '" + helper + "' (a " + type(table) + " value)";
			}
		}

		if ( table instanceof LuaTable ) {
			var val;

			if ( prop === undefined || prop === null ) throw "table index is nil";

			if ( typeof prop == "number" ) val = table.numeric[prop-1];
			else val = table.hash[prop];

			if ( val !== null & val !== undefined ) {
				if ( typeof prop == "number") table.numeric[prop-1] = value;
				else table.hash[prop] = value;
				return true;
			}

			if ( table.__metatable === undefined ) {
				if ( typeof prop == "number") table.numeric[prop-1] = value;
				else table.hash[prop] = value;
				return true;
			}



			var idx = table.__metatable.__newindex;
			if ( idx === null || idx === undefined ) {
				if ( typeof pop == "number") table.numeric[prop] = value;
				else table.hash[prop] = value;
				return true;	
			}

			if ( typeof idx == "function" ) idx(table, prop, value);
			else indexAssign(idx, prop, value);

			return true;


		} else if ( typeof table == "string" ) { 
			throw "attempt to index string value";
		} else if ( isJSArray(table) ) {
			table[prop-1] = value;
			return true;
		} else {
			return false;
		}
	}

	function oneValue(v) {
		if ( v instanceof LuaReturnValues ) return v.values[0];
		return v;
	}

	function makeMultiReturn() {
		return new LuaReturnValues(expand(arguments, true));
	}

	function expand(what, allowExpand) {
		if ( allowExpand === undefined ) allowExpand = false;

		var out = [];
		for ( var idx in what ) {
			var v = what[idx];
			if ( v instanceof LuaReturnValues ) {
				for ( var i in v.values ) {
					out.push(v.values[i]);
					if ( idx < what.length - 1 || !allowExpand) break;
				}
			} else {
				out.push(v);
			}
		}
		return out;
	}

	function expandReturnValues() {
		return expand(arguments, true);
	}

	function pcall(what /*, args... */ ) {
		try {
			var result = expand([what.apply(this, Array.prototype.slice.call(arguments, 1))], true);
			result.unshift(true);
			return makeMultiReturn.apply(__lua, result);
		} catch ( e ) {
			return makeMultiReturn(false, e);
		}
	}

	function isTable(a) { return a instanceof LuaTable; }

	function mark(o) {
		var seen = [];
		function domark(o) {
			if ( o in seen ) return;
			seen.push(o);
			if ( typeof o == "object" ) for ( var idx in o ) domark(o[idx]);
			else if ( typeof o == "function" ) o.__luaType = "function";
			
		}
		domark(o);
	}

	return {
		add: add,
		sub: sub,
		mul: mul,
		div: div,
		intdiv: intdiv,
		mod: mod,
		call: call,
		lte: lte,
		lt: lt,
		ne: ne,
		gt: gt,
		gte: gte,
		eq: eq,
		index: index,
		indexAssign: indexAssign,
		concat: concat,
		makeTable: makeTable,
		makeFunction: makeFunction,
		expandReturnValues: expandReturnValues,
		makeMultiReturn: makeMultiReturn,
		count: count,
		and: and,
		or: or,
		expand: expand,
		rest: rest,
		pcall: pcall,
		type: type,
		pow: pow,
		isTable: isTable,
		mark: mark,
		forcomp: forcomp,
		makeString: makeString,
		oneValue: oneValue,
		lookupMetaTable: lookupMetaTable,
		isJSArray: isJSArray
	};

})();


this.__lua = __lua;

env.string = {
	byte: function byte(s,i,j) {
		var chars = env.string.sub(s,i,j);
		var out = [];
		for ( var i = 0; i < chars.length; ++i ) out[i] = chars.charCodeAt(i);
		return __lua.makeMultiReturn.apply(__lua, out);
	},
	char: function char(/* arguments */) {
		var out = "";
		for ( var i = 0; i < arguments.length; ++i ) {
			out += String.fromCharCode(arguments[i]|0); 
		}
		return out;

	},
	dump: null,
	find: null,
	gmatch: null,
	gsub: null,
	len: function len(s) { return ("" + s).length; },
	lower: function lower(s) { return ("" + s).toLowerCase(); },
	match: null,
	reverse: function(s) {
		return ("" + s).split("").reverse().join("");
	},
	sub: function(s, i, j) {
		if ( i === undefined || i === null ) i = 1;
		if ( j === undefined || j === null ) j = s.length;
		if ( i < 0 ) i += (s.length+1);
		if ( j < 0 ) j += (s.length+1);

		return __lua.makeString(s).substring(i-1,j);

	},
	upper: function lower(s) { return ("" + s).toUpperCase(); },
	format: function format(format, etc) {
		var arg = arguments;
		var i = 1;
		return format.replace(/%([0-9.]+)?([%sfdgi])/g, function (m, w, t) {
			var r = null;
			if ( t == "%" ) return "%";
			else if ( t == "s") r = arg[i++];
			else if ( t == "d") r = parseInt(arg[i++]);
			else if ( t == "i") r = parseInt(arg[i++]);
			else if ( t == "f" ) r = arg[i++].toFixed(parseFloat(m[1]) || 6);
			else r = arg[i++]; 
			r = "" + r;
			if ( parseInt(w) ) {
				var extra = parseInt(w) - r.length;
				if ( extra > 0 ) r = new Array(extra).join(" ") + r;
			}
			return r;
		});
	}

};

env.table = {
	concat: null,
	insert: null,
	pack: function(/* arguments */) {
		var obj = {}
		for ( var i = 0; i < arguments.length; ++i) {
			obj[("" + (i + 1))] = arguments[i];
		}
		return __lua.makeTable(obj);
	},
	remove: null,
	sort: function sort(table) { return table; },
	unpack: function(table,i,j) {
		if ( i === undefined || i === null ) i = 1;
		if ( j === undefined || j === null ) j = __lua.count(table);

		var arr = [];
		if ( __lua.isTable(table) ) {
			for ( var a = i; a <= j; ++a ) {
				arr.push(table.numeric[a]);
			}
		} else {
			for ( var a = i; a <= j; ++a ) {
				arr.push(table[a]);
			}			
		}

		return __lua.makeMultiReturn.apply(__lua, arr);


	}

};

env.unpack = env.table.unpack;

env.tonumber = function(n) {
	return parseInt(n);
};

env.tostring = function(n) {
	return __lua.makeString(n);
};

env.os = {
	clock: null,
	date: null,
	difftime: function difftime(t1,t2) { return t2 - t1; },
	execute: null,
	exit: null,
	time: function time(table) {
		if ( table == null ) return new Date().getTime();
		throw "Time given a table not implemented yet.";
	}
};

env.io = {
	write: function() { env.print(arguments); }
};

env.error = function error(s) { throw s; };

env.assert = function assert(what, msg, code) {
	if ( code === undefined ) {
		code = msg;
		msg = undefined;
	}

	if ( !!what ) return what;

	throw("Assert Failed!! " + code);
};

env.type = function type(what) {
	return __lua.type(what);
};


env.pairs = function pairs(table) {

	var mtf = __lua.lookupMetaTable(table, "__pairs");
	if ( mtf !== null ) return mtf(table);

	var list = [];
	if ( __lua.isTable(table) ) {
		for ( var i = 0; i < table.numeric.length; ++i ) list.push([i + 1, i, table.numeric]);
		for ( var idx in table.hash ) list.push([idx, idx, table.hash]);
	} else if ( __lua.isJSArray(table) ) {
		for ( var i = 0; i < table.length; ++i ) list.push([i + 1, i, table]);
	} else {
		var keys = Object.keys(table);
		for ( var idx in keys ) list.push([keys[idx], keys[idx], table]);
	}

	return __lua.makeMultiReturn(function(handle, cur) {
		if ( handle.length < 1 ) return null;
		var nfo = handle.shift();
		var k = nfo[0];
		var v = nfo[2][nfo[1]];
		return __lua.makeMultiReturn(k,v);
	}, list, null);
};

env.ipairs = function ipairs(table) {

	var mtf = __lua.lookupMetaTable(table, "__ipairs");
	if ( mtf !== null ) return mtf(table);

	return __lua.makeMultiReturn(function ipairsitr(table, cur) {
		cur = cur + 1;
		if ( __lua.isJSArray(table) ) {
			if ( table.length < cur ) return null;
			return __lua.makeMultiReturn(cur, table[cur-1]);
		} else if ( __lua.isTable(table) ) {
			if ( table.numeric[cur-1] === null || table.numeric[cur-1] === undefined ) return null;
			return __lua.makeMultiReturn(cur, table.numeric[cur-1]);
		} else {
			return table[cur-1];
		}
	}, table, 0);
};

env.next = function next(table, cur) {
	if ( __lua.isTable(table) ) {
		var list = [];
		for ( var i = 0; i < table.numeric.length; ++i ) list.push([i + 1, table.numeric[i]]);
		for ( var tidx in table.hash ) list.push([tidx, table.hash[tidx]]);
		var trigger = false;
		for ( var i = 0; i < list.length; ++i ) {
			var itm = list[i];
			if ( cur === null || cur === undefined || trigger ) {
				if ( itm[1] !== undefined && itm[1] !== null )
					return __lua.makeMultiReturn(itm[0], itm[1]);
			}
			if ( cur === itm[0] ) trigger = true;
		}

		return null;
	} else {
		var listk = Object.keys(table);
		var trigger = false;
		for ( var i = 0; i < listk.length; ++i ) {
			var idx = listk[i];
			var sidx = idx;
			if ( typeof sidx == "number" ) sidx = sidx = 1;
			if ( cur === null || cur === undefined || trigger ) return __lua.makeMultiReturn(idx, table[sidx]);
			if ( cur === idx ) trigger = true;
		}
		return null;
	}
};

env.print = function print() { console.log.apply(console, arguments); };
env.pcall = this.__lua.pcall;

env.rawequals = function rawequals(a,b) { return a == b; };
env.rawget = function rawget(table, prop) { 
	if ( table instanceof LuaTable ) {
		if ( typeof prop == "number" ) return table.numeric[prop - 1];
		else return table.hash[prop];
	}
	return table[prop]; 
};
env.rawset = function rawset(table, prop, val) { 
	if ( table instanceof LuaTable ) {
		if ( typeof prop == "number" ) return table.numeric[prop - 1] = val;
		else return table.hash[prop] = val;
	}
	return table[prop] = val; 
};

env.something = function something(table) {
	var array = [];
	var idx = 1;
	while ( table[idx] !== undefined ) {
		array.push(table[idx]);
		++idx;
	}
	return __lua.makeMultiReturn.apply(__lua, array);
};
env.math = Math;

env.setmetatable = function setmetatable(target, meta) {

	Object.defineProperty(target, "__metatable", {value: meta, enumerable: false, configurable: true });
	return target;
};

env.getmetatable = function getmetatable(taget, meta) {
	return taget.__metatable;
};

var reduce = function reduce(arr, op) {
	if ( arr.length < 1 ) return undefined;
	var val = arr[0];
	for ( var i = 1; i < arr.length; ++i ) {
		val = op(val, arr[i]);
	}
	return val;
};

env.bit32 = {
	band: function band() { return reduce(arguments, function(a,b) { return a & b; }); },
	bor: function bor() { return reduce(arguments, function(a,b) { return a | b; }); },
	bxor: function bxor() { return reduce(arguments, function(a,b) { return a | b; }); },

	rshift: function rshift(b, disp) { return b >> disp; }
};

env.require = function require(what) {
	if ( what == "bit" ) return env.bit32;
	if ( what == "bit32" ) return env.bit32;
	throw "Module " + waht + " not found";
};

__lua.mark(env);
__lua.env = env;
for ( var idx in env ) this[idx] = env[idx];



/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {

var fs = __webpack_require__(55);
var path = __webpack_require__(13);

var str = void 0;

if (fs.readFileSync) str = fs.readFileSync(path.join(__dirname, 'node_modules', 'lua2js', 'stdlib.js'), 'utf8');else str = __webpack_require__(290);

module.exports = str.replace(/^var pythonRuntime = module.exports/, 'var __pythonRuntime');
/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),
/* 290 */
/***/ (function(module, exports) {

module.exports = "var env = {};\nvar __lua = (function() {\n\n\t// Yoinked from underscore.\n\tvar isJSArray = Array.isArray || function(obj) { return toString.call(obj) === '[object Array]'; };\n\n\tfunction type(what) {\n\t\tif ( what === null || what === undefined ) return \"nil\";\n\t\tif ( isNaN(what) ) return \"number\";\n\t\tvar t = typeof what;\n\t\tif ( t == \"object\" ) return \"table\";\n\t\treturn t;\n\t}\n\n\tfunction numberForArith(n) {\n\t\tif ( type(n) == \"number\" ) return n;\n\t\telse if ( typeof n == \"string\" ) {\n\t\t\tn = parseInt(n);\n\t\t\tif ( !isNaN(n) ) return n;\n\n\t\t}\n\n\t\tthrow \"attempt to perform arithmetic on a \" +  type(n) + \" value: \" + n;\n\t}\n\n\tfunction makeString(a) { \n\t\ta = oneValue(a);\n\n\t\tvar mtf = lookupMetaTable(a, \"__tostring\");\n\t\tif ( mtf !== null ) return mtf(a);\n\n\t\tif ( a === undefined || a === null ) return \"nil\";\n\t\tif ( a instanceof LuaTable ) {\n\t\t\treturn \"table: 0x\" + a.id;\n\t\t} else if ( typeof a == \"number\" ) {\n\t\t\tif ( ~~a == a ) return a.toString();\n\t\t\tvar rep = a.toPrecision();\n\t\t\tif ( rep.length > 14 ) return a.toPrecision(14);\n\t\t\treturn rep;\n\t\t}\n\t\treturn \"\" + a;\n\t}\n\n\tfunction add(a,b) {\n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__add\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn numberForArith(a) + numberForArith(b); \n\t}\n\n\tfunction sub(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__sub\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn numberForArith(a) - numberForArith(b);\n\t}\n\n\tfunction mul(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__mul\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn numberForArith(a) * numberForArith(b);\n\t}\n\n\tfunction div(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__div\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn numberForArith(a) / numberForArith(b);\n\t}\n\n\tfunction intdiv(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__idiv\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn ~~(numberForArith(a) / numberForArith(b));\n\t}\n\n\tfunction mod(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__mod\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn numberForArith(a) % numberForArith(b);\n\t}\n\n\tfunction pow(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__pow\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn Math.pow(numberForArith(a),numberForArith(b)); \n\t}\n\n\tfunction concat(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__concat\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\t\tif ( a === null || a === undefined || b === null || b === undefined ) throw \"attempt to concatenate a nil value\";\n\n\t\treturn  makeString(a) + makeString(b); \n\t}\n\n\tfunction lte(a,b) {\n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__le\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn a <= b; \n\t}\n\n\tfunction lt(a,b) {\n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__lt\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn a < b; \n\t}\n\n\tfunction gte(a,b) { return lte(b,a); }\n\tfunction gt(a,b) { return lt(b,a); }\n\n\n\tfunction forcomp(d,a,b) { \n\t\tif ( d > 0 ) return a <= b; \n\t\telse if ( d < 0 ) return b <= a;\n\t\telse return false;\n\t}\n\n\t\n\tfunction eq(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__eq\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\n\t\tif ( a === null || a === undefined ) {\n\t\t\treturn ( b === null || b === undefined );\n\t\t}\n\t\tif ( a === b ) return true;\n\t\treturn false;\n\t}\n\t\n\tfunction ne(a,b) { return !eq(a,b); }\n\n\tfunction count(a) { \n\t\tif ( a instanceof LuaTable ) {\n\t\t\tvar cnt = 0;\n\t\t\twhile ( a.numeric[cnt] !== undefined ) ++cnt;\n\t\t\treturn cnt;\n\t\t}\n\t\treturn a.length;\n\t}\n\n\tfunction and(a,b) { return a && b; }\n\tfunction or(a,b) { return a || b; }\n\n\tfunction call(flags, what, that, helper /*, args... */ ) {\n\t\tvar injectSelf = !!(flags & 1); \n\t\tvar detectLua = !!(flags & 2); \n\n\t\tif ( what === null || what === undefined ) {\n\t\t\tif ( helper === undefined ) throw \"attempt to call a \" + type(what) + \" value\";\n\t\t\telse throw \"attempt to call '\" + helper + \"' (a \" + type(what) + \" value)\"; \n\t\t}\n\n\t\tvar args = expand(Array.prototype.slice.call(arguments, 4), true);\n\n\t\tvar doInject = true;\n\n\t\tif ( detectLua ) {\n\t\t\tdoInject = what.__luaType == \"function\";\n\t\t}\n\n\t\tif ( injectSelf && doInject ) {\n\t\t\targs.unshift(that);\n\t\t}\n\n\t\tif ( detectLua && what.__luaType != \"function\" ) {\n\t\t\tvar args2 = [];\n\t\t\tfor ( var i = 0; i < args.length; ++i ) {\n\t\t\t\tvar a = args[i];\n\t\t\t\tif ( a instanceof LuaTable ) {\n\t\t\t\t\tif ( a.numeric.length == 0 ) args2[i] = a.hash;\n\t\t\t\t\telse if ( Object.keys(a.hash).length == 0 ) args2[i] = a.numeric;\n\t\t\t\t\telse args2[i] = a;\n\t\t\t\t} else {\n\t\t\t\t\targs2[i] = a;\n\t\t\t\t}\n\t\t\t}\n\t\t\targs = args2;\n\t\t}\n\n\t\treturn what.apply(that, args);\n\t}\n\n\tfunction rest(args, cnt) {\n\t\tvar out = Object.create(LuaReturnValues.prototype, {});\n\t\tout.values = Array.prototype.slice.call(args, cnt);\n\t\treturn out;\n\t}\n\n\tvar id = 0;\n\tfunction LuaTable() {\n\t\tthis.id = ++id;\n\t\tthis.numeric = [];\n\t\tthis.hash = {};\n\t}\n\n\tObject.defineProperty(LuaTable.prototype, \"__luaType\",  {value: \"table\",  enumerable: false});\n\tObject.defineProperty(LuaTable.prototype, \"toString\",  {value: function() {\n\t\treturn makeString(this);\n\t},  enumerable: false});\n\n\tfunction makeTable(t, allowExpand /*, numeric ... */) {\n\t\tvar out = new LuaTable();\n\n\t\tout.numeric = expand(Array.prototype.slice.call(arguments, 2), allowExpand);\n\t\tif ( !t ) return out;\n\n\t\tif ( isJSArray(t) ) {\n\t\t\tfor ( var i = 0; i < t.length; ++i ) {\n\t\t\t\tvar pair = t[i];\n\t\t\t\tvar key = pair[0];\n\t\t\t\tvar val = pair[1];\n\t\t\t\tif ( typeof key == \"number\" ) {\n\t\t\t\t\tout.numeric[key - 1] = val;\n\t\t\t\t} else {\n\t\t\t\t\tout.hash[key] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( var k in t ) {\n\t\t\t\tout.hash[k] = t[k];\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}\n\n\tfunction makeFunction(f) {\n\t\tf.__luaType = \"function\";\n\t\treturn f;\n\t}\n\n\tfunction LuaReturnValues(v) {\n\t\tthis.values = v;\n\t}\n\n\tObject.defineProperty(LuaReturnValues.prototype, \"__luaType\",  {value: \"returnValues\",  enumerable: false});\n\n\tfunction lookupMetaTable(table, entry) {\n\t\tif ( table instanceof LuaTable ) {\n\t\t\tif ( table.__metatable === undefined ) return null;\n\n\t\t\tvar idx = table.__metatable.hash[entry];\n\t\t\tif ( idx === null || idx === undefined ) return null;\n\n\t\t\treturn idx;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfunction lookupMetaTableBin(a, b, entry) {\n\t\tvar mt = lookupMetaTable(a, entry);\n\t\tif ( mt == null ) return lookupMetaTable(b, entry);\n\t\treturn mt;\n\t}\n\n\tfunction index(table, prop, helper) {\n\t\tif ( table === null || table === undefined || typeof table == \"number\" ) {\n\t\t\tif ( helper == undefined ) {\n\t\t\t\tthrow \"attempt to index a \" + type(table) + \" value\";\n\t\t\t} else {\n\t\t\t\tthrow \"attempt to index '\" + helper + \"' (a \" + type(table) + \" value)\";\n\t\t\t}\n\t\t} else if ( table instanceof LuaTable ) {\n\t\t\tvar val;\n\t\t\tif ( typeof prop == \"number\") val = table.numeric[prop-1];\n\t\t\telse val = table.hash[prop];\n\n\t\t\tif ( val !== null & val !== undefined ) return val;\n\n\t\t\tvar idxfx = lookupMetaTable(table, \"__index\");\n\t\t\tif ( idxfx == null ) return null;\n\n\t\t\tif ( typeof idxfx == \"function\" ) return oneValue(idxfx(table, prop));\n\t\t\treturn index(idxfx, prop);\n\t\t} else if ( isJSArray(table) ) {\n\t\t\treturn table[prop - 1];\n\t\t} else if ( typeof table == \"string\" ) {\n\t\t\tvar sidx = tonumber(prop);\n\t\t\tif ( sidx < 0 ) sidx += (table.length + 1);\n\t\t\treturn table[sidx-1];\n\t\t} else {\n\t\t\treturn table[prop];\n\t\t}\n\t}\n\n\tfunction indexAssign(table, prop, value, helper) {\n\n\t\tif ( table === null || table === undefined || typeof table == \"number\" ) {\n\t\t\tif ( helper == undefined ) {\n\t\t\t\tthrow \"attempt to index a \" + type(table) + \" value\";\n\t\t\t} else {\n\t\t\t\tthrow \"attempt to index '\" + helper + \"' (a \" + type(table) + \" value)\";\n\t\t\t}\n\t\t}\n\n\t\tif ( table instanceof LuaTable ) {\n\t\t\tvar val;\n\n\t\t\tif ( prop === undefined || prop === null ) throw \"table index is nil\";\n\n\t\t\tif ( typeof prop == \"number\" ) val = table.numeric[prop-1];\n\t\t\telse val = table.hash[prop];\n\n\t\t\tif ( val !== null & val !== undefined ) {\n\t\t\t\tif ( typeof prop == \"number\") table.numeric[prop-1] = value;\n\t\t\t\telse table.hash[prop] = value;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( table.__metatable === undefined ) {\n\t\t\t\tif ( typeof prop == \"number\") table.numeric[prop-1] = value;\n\t\t\t\telse table.hash[prop] = value;\n\t\t\t\treturn true;\n\t\t\t}\n\n\n\n\t\t\tvar idx = table.__metatable.__newindex;\n\t\t\tif ( idx === null || idx === undefined ) {\n\t\t\t\tif ( typeof pop == \"number\") table.numeric[prop] = value;\n\t\t\t\telse table.hash[prop] = value;\n\t\t\t\treturn true;\t\n\t\t\t}\n\n\t\t\tif ( typeof idx == \"function\" ) idx(table, prop, value);\n\t\t\telse indexAssign(idx, prop, value);\n\n\t\t\treturn true;\n\n\n\t\t} else if ( typeof table == \"string\" ) { \n\t\t\tthrow \"attempt to index string value\";\n\t\t} else if ( isJSArray(table) ) {\n\t\t\ttable[prop-1] = value;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction oneValue(v) {\n\t\tif ( v instanceof LuaReturnValues ) return v.values[0];\n\t\treturn v;\n\t}\n\n\tfunction makeMultiReturn() {\n\t\treturn new LuaReturnValues(expand(arguments, true));\n\t}\n\n\tfunction expand(what, allowExpand) {\n\t\tif ( allowExpand === undefined ) allowExpand = false;\n\n\t\tvar out = [];\n\t\tfor ( var idx in what ) {\n\t\t\tvar v = what[idx];\n\t\t\tif ( v instanceof LuaReturnValues ) {\n\t\t\t\tfor ( var i in v.values ) {\n\t\t\t\t\tout.push(v.values[i]);\n\t\t\t\t\tif ( idx < what.length - 1 || !allowExpand) break;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tout.push(v);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\tfunction expandReturnValues() {\n\t\treturn expand(arguments, true);\n\t}\n\n\tfunction pcall(what /*, args... */ ) {\n\t\ttry {\n\t\t\tvar result = expand([what.apply(this, Array.prototype.slice.call(arguments, 1))], true);\n\t\t\tresult.unshift(true);\n\t\t\treturn makeMultiReturn.apply(__lua, result);\n\t\t} catch ( e ) {\n\t\t\treturn makeMultiReturn(false, e);\n\t\t}\n\t}\n\n\tfunction isTable(a) { return a instanceof LuaTable; }\n\n\tfunction mark(o) {\n\t\tvar seen = [];\n\t\tfunction domark(o) {\n\t\t\tif ( o in seen ) return;\n\t\t\tseen.push(o);\n\t\t\tif ( typeof o == \"object\" ) for ( var idx in o ) domark(o[idx]);\n\t\t\telse if ( typeof o == \"function\" ) o.__luaType = \"function\";\n\t\t\t\n\t\t}\n\t\tdomark(o);\n\t}\n\n\treturn {\n\t\tadd: add,\n\t\tsub: sub,\n\t\tmul: mul,\n\t\tdiv: div,\n\t\tintdiv: intdiv,\n\t\tmod: mod,\n\t\tcall: call,\n\t\tlte: lte,\n\t\tlt: lt,\n\t\tne: ne,\n\t\tgt: gt,\n\t\tgte: gte,\n\t\teq: eq,\n\t\tindex: index,\n\t\tindexAssign: indexAssign,\n\t\tconcat: concat,\n\t\tmakeTable: makeTable,\n\t\tmakeFunction: makeFunction,\n\t\texpandReturnValues: expandReturnValues,\n\t\tmakeMultiReturn: makeMultiReturn,\n\t\tcount: count,\n\t\tand: and,\n\t\tor: or,\n\t\texpand: expand,\n\t\trest: rest,\n\t\tpcall: pcall,\n\t\ttype: type,\n\t\tpow: pow,\n\t\tisTable: isTable,\n\t\tmark: mark,\n\t\tforcomp: forcomp,\n\t\tmakeString: makeString,\n\t\toneValue: oneValue,\n\t\tlookupMetaTable: lookupMetaTable,\n\t\tisJSArray: isJSArray\n\t};\n\n})();\n\n\nthis.__lua = __lua;\n\nenv.string = {\n\tbyte: function byte(s,i,j) {\n\t\tvar chars = env.string.sub(s,i,j);\n\t\tvar out = [];\n\t\tfor ( var i = 0; i < chars.length; ++i ) out[i] = chars.charCodeAt(i);\n\t\treturn __lua.makeMultiReturn.apply(__lua, out);\n\t},\n\tchar: function char(/* arguments */) {\n\t\tvar out = \"\";\n\t\tfor ( var i = 0; i < arguments.length; ++i ) {\n\t\t\tout += String.fromCharCode(arguments[i]|0); \n\t\t}\n\t\treturn out;\n\n\t},\n\tdump: null,\n\tfind: null,\n\tgmatch: null,\n\tgsub: null,\n\tlen: function len(s) { return (\"\" + s).length; },\n\tlower: function lower(s) { return (\"\" + s).toLowerCase(); },\n\tmatch: null,\n\treverse: function(s) {\n\t\treturn (\"\" + s).split(\"\").reverse().join(\"\");\n\t},\n\tsub: function(s, i, j) {\n\t\tif ( i === undefined || i === null ) i = 1;\n\t\tif ( j === undefined || j === null ) j = s.length;\n\t\tif ( i < 0 ) i += (s.length+1);\n\t\tif ( j < 0 ) j += (s.length+1);\n\n\t\treturn __lua.makeString(s).substring(i-1,j);\n\n\t},\n\tupper: function lower(s) { return (\"\" + s).toUpperCase(); },\n\tformat: function format(format, etc) {\n\t\tvar arg = arguments;\n\t\tvar i = 1;\n\t\treturn format.replace(/%([0-9.]+)?([%sfdgi])/g, function (m, w, t) {\n\t\t\tvar r = null;\n\t\t\tif ( t == \"%\" ) return \"%\";\n\t\t\telse if ( t == \"s\") r = arg[i++];\n\t\t\telse if ( t == \"d\") r = parseInt(arg[i++]);\n\t\t\telse if ( t == \"i\") r = parseInt(arg[i++]);\n\t\t\telse if ( t == \"f\" ) r = arg[i++].toFixed(parseFloat(m[1]) || 6);\n\t\t\telse r = arg[i++]; \n\t\t\tr = \"\" + r;\n\t\t\tif ( parseInt(w) ) {\n\t\t\t\tvar extra = parseInt(w) - r.length;\n\t\t\t\tif ( extra > 0 ) r = new Array(extra).join(\" \") + r;\n\t\t\t}\n\t\t\treturn r;\n\t\t});\n\t}\n\n};\n\nenv.table = {\n\tconcat: null,\n\tinsert: null,\n\tpack: function(/* arguments */) {\n\t\tvar obj = {}\n\t\tfor ( var i = 0; i < arguments.length; ++i) {\n\t\t\tobj[(\"\" + (i + 1))] = arguments[i];\n\t\t}\n\t\treturn __lua.makeTable(obj);\n\t},\n\tremove: null,\n\tsort: function sort(table) { return table; },\n\tunpack: function(table,i,j) {\n\t\tif ( i === undefined || i === null ) i = 1;\n\t\tif ( j === undefined || j === null ) j = __lua.count(table);\n\n\t\tvar arr = [];\n\t\tif ( __lua.isTable(table) ) {\n\t\t\tfor ( var a = i; a <= j; ++a ) {\n\t\t\t\tarr.push(table.numeric[a]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( var a = i; a <= j; ++a ) {\n\t\t\t\tarr.push(table[a]);\n\t\t\t}\t\t\t\n\t\t}\n\n\t\treturn __lua.makeMultiReturn.apply(__lua, arr);\n\n\n\t}\n\n};\n\nenv.unpack = env.table.unpack;\n\nenv.tonumber = function(n) {\n\treturn parseInt(n);\n};\n\nenv.tostring = function(n) {\n\treturn __lua.makeString(n);\n};\n\nenv.os = {\n\tclock: null,\n\tdate: null,\n\tdifftime: function difftime(t1,t2) { return t2 - t1; },\n\texecute: null,\n\texit: null,\n\ttime: function time(table) {\n\t\tif ( table == null ) return new Date().getTime();\n\t\tthrow \"Time given a table not implemented yet.\";\n\t}\n};\n\nenv.io = {\n\twrite: function() { env.print(arguments); }\n};\n\nenv.error = function error(s) { throw s; };\n\nenv.assert = function assert(what, msg, code) {\n\tif ( code === undefined ) {\n\t\tcode = msg;\n\t\tmsg = undefined;\n\t}\n\n\tif ( !!what ) return what;\n\n\tthrow(\"Assert Failed!! \" + code);\n};\n\nenv.type = function type(what) {\n\treturn __lua.type(what);\n};\n\n\nenv.pairs = function pairs(table) {\n\n\tvar mtf = __lua.lookupMetaTable(table, \"__pairs\");\n\tif ( mtf !== null ) return mtf(table);\n\n\tvar list = [];\n\tif ( __lua.isTable(table) ) {\n\t\tfor ( var i = 0; i < table.numeric.length; ++i ) list.push([i + 1, i, table.numeric]);\n\t\tfor ( var idx in table.hash ) list.push([idx, idx, table.hash]);\n\t} else if ( __lua.isJSArray(table) ) {\n\t\tfor ( var i = 0; i < table.length; ++i ) list.push([i + 1, i, table]);\n\t} else {\n\t\tvar keys = Object.keys(table);\n\t\tfor ( var idx in keys ) list.push([keys[idx], keys[idx], table]);\n\t}\n\n\treturn __lua.makeMultiReturn(function(handle, cur) {\n\t\tif ( handle.length < 1 ) return null;\n\t\tvar nfo = handle.shift();\n\t\tvar k = nfo[0];\n\t\tvar v = nfo[2][nfo[1]];\n\t\treturn __lua.makeMultiReturn(k,v);\n\t}, list, null);\n};\n\nenv.ipairs = function ipairs(table) {\n\n\tvar mtf = __lua.lookupMetaTable(table, \"__ipairs\");\n\tif ( mtf !== null ) return mtf(table);\n\n\treturn __lua.makeMultiReturn(function ipairsitr(table, cur) {\n\t\tcur = cur + 1;\n\t\tif ( __lua.isJSArray(table) ) {\n\t\t\tif ( table.length < cur ) return null;\n\t\t\treturn __lua.makeMultiReturn(cur, table[cur-1]);\n\t\t} else if ( __lua.isTable(table) ) {\n\t\t\tif ( table.numeric[cur-1] === null || table.numeric[cur-1] === undefined ) return null;\n\t\t\treturn __lua.makeMultiReturn(cur, table.numeric[cur-1]);\n\t\t} else {\n\t\t\treturn table[cur-1];\n\t\t}\n\t}, table, 0);\n};\n\nenv.next = function next(table, cur) {\n\tif ( __lua.isTable(table) ) {\n\t\tvar list = [];\n\t\tfor ( var i = 0; i < table.numeric.length; ++i ) list.push([i + 1, table.numeric[i]]);\n\t\tfor ( var tidx in table.hash ) list.push([tidx, table.hash[tidx]]);\n\t\tvar trigger = false;\n\t\tfor ( var i = 0; i < list.length; ++i ) {\n\t\t\tvar itm = list[i];\n\t\t\tif ( cur === null || cur === undefined || trigger ) {\n\t\t\t\tif ( itm[1] !== undefined && itm[1] !== null )\n\t\t\t\t\treturn __lua.makeMultiReturn(itm[0], itm[1]);\n\t\t\t}\n\t\t\tif ( cur === itm[0] ) trigger = true;\n\t\t}\n\n\t\treturn null;\n\t} else {\n\t\tvar listk = Object.keys(table);\n\t\tvar trigger = false;\n\t\tfor ( var i = 0; i < listk.length; ++i ) {\n\t\t\tvar idx = listk[i];\n\t\t\tvar sidx = idx;\n\t\t\tif ( typeof sidx == \"number\" ) sidx = sidx = 1;\n\t\t\tif ( cur === null || cur === undefined || trigger ) return __lua.makeMultiReturn(idx, table[sidx]);\n\t\t\tif ( cur === idx ) trigger = true;\n\t\t}\n\t\treturn null;\n\t}\n};\n\nenv.print = function print() { console.log.apply(console, arguments); };\nenv.pcall = this.__lua.pcall;\n\nenv.rawequals = function rawequals(a,b) { return a == b; };\nenv.rawget = function rawget(table, prop) { \n\tif ( table instanceof LuaTable ) {\n\t\tif ( typeof prop == \"number\" ) return table.numeric[prop - 1];\n\t\telse return table.hash[prop];\n\t}\n\treturn table[prop]; \n};\nenv.rawset = function rawset(table, prop, val) { \n\tif ( table instanceof LuaTable ) {\n\t\tif ( typeof prop == \"number\" ) return table.numeric[prop - 1] = val;\n\t\telse return table.hash[prop] = val;\n\t}\n\treturn table[prop] = val; \n};\n\nenv.something = function something(table) {\n\tvar array = [];\n\tvar idx = 1;\n\twhile ( table[idx] !== undefined ) {\n\t\tarray.push(table[idx]);\n\t\t++idx;\n\t}\n\treturn __lua.makeMultiReturn.apply(__lua, array);\n};\nenv.math = Math;\n\nenv.setmetatable = function setmetatable(target, meta) {\n\n\tObject.defineProperty(target, \"__metatable\", {value: meta, enumerable: false, configurable: true });\n\treturn target;\n};\n\nenv.getmetatable = function getmetatable(taget, meta) {\n\treturn taget.__metatable;\n};\n\nvar reduce = function reduce(arr, op) {\n\tif ( arr.length < 1 ) return undefined;\n\tvar val = arr[0];\n\tfor ( var i = 1; i < arr.length; ++i ) {\n\t\tval = op(val, arr[i]);\n\t}\n\treturn val;\n};\n\nenv.bit32 = {\n\tband: function band() { return reduce(arguments, function(a,b) { return a & b; }); },\n\tbor: function bor() { return reduce(arguments, function(a,b) { return a | b; }); },\n\tbxor: function bxor() { return reduce(arguments, function(a,b) { return a | b; }); },\n\n\trshift: function rshift(b, disp) { return b >> disp; }\n};\n\nenv.require = function require(what) {\n\tif ( what == \"bit\" ) return env.bit32;\n\tif ( what == \"bit32\" ) return env.bit32;\n\tthrow \"Module \" + waht + \" not found\";\n};\n\n__lua.mark(env);\n__lua.env = env;\nfor ( var idx in env ) this[idx] = env[idx];\n\n"

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var skulpty = __webpack_require__(292);
var esper = void 0;

function parser(code, options) {
	options = options || {};
	var opts = { locations: true, ranges: true };
	var ast = skulpty.parse(code, opts);
	var fixThis = {
		'type': 'VariableDeclaration',
		'declarations': [{
			'type': 'VariableDeclarator',
			'id': {
				'type': 'Identifier',
				'name': 'self'
			},
			'init': {
				'type': 'ThisExpression'
			}
		}],
		'kind': 'var',
		'userCode': false
	};
	ast.body.unshift(fixThis);
	return ast;
}

var startupCode = __webpack_require__(293);
var startupCodeAST = void 0;

var plugin = module.exports = {
	name: 'lang-python',
	skulpty: skulpty,
	parser: parser,
	init: function init(e) {
		esper = e;
		esper.languages.python = plugin;
		startupCodeAST = esper.languages.javascript.parser(startupCode);
	},
	setupRealm: function setupRealm(realm) {
		realm.PythonString = function (_esper$StringValue) {
			(0, _inherits3.default)(PythonString, _esper$StringValue);

			function PythonString() {
				(0, _classCallCheck3.default)(this, PythonString);
				return (0, _possibleConstructorReturn3.default)(this, (PythonString.__proto__ || (0, _getPrototypeOf2.default)(PythonString)).apply(this, arguments));
			}

			(0, _createClass3.default)(PythonString, [{
				key: 'derivePrototype',
				value: function derivePrototype(realm) {
					return realm.pythonStringBaseInstance;
				}
			}]);
			return PythonString;
		}(esper.StringValue);

		var PythonStringBase = function (_esper$EasyObjectValu) {
			(0, _inherits3.default)(PythonStringBase, _esper$EasyObjectValu);

			function PythonStringBase() {
				(0, _classCallCheck3.default)(this, PythonStringBase);
				return (0, _possibleConstructorReturn3.default)(this, (PythonStringBase.__proto__ || (0, _getPrototypeOf2.default)(PythonStringBase)).apply(this, arguments));
			}

			(0, _createClass3.default)(PythonStringBase, null, [{
				key: 'join$e',
				value: /*#__PURE__*/_regenerator2.default.mark(function join$e(thiz, args, s) {
					var j;
					return _regenerator2.default.wrap(function join$e$(_context) {
						while (1) {
							switch (_context.prev = _context.next) {
								case 0:
									if (!(args.length != 1)) {
										_context.next = 2;
										break;
									}

									return _context.abrupt('return', esper.CompletionRecord.makeTypeError(s.realm, 'join() takes exactly one argument (' + args.length + ' given)'));

								case 2:
									return _context.delegateYield(s.realm.ArrayPrototype.get('join', s), 't0', 3);

								case 3:
									j = _context.t0;
									return _context.delegateYield(j.call(args[0], [thiz], s), 't1', 5);

								case 5:
									return _context.abrupt('return', _context.t1);

								case 6:
								case 'end':
									return _context.stop();
							}
						}
					}, join$e, this);
				})
			}]);
			return PythonStringBase;
		}(esper.EasyObjectValue);

		realm.pythonStringBaseInstance = new PythonStringBase(realm);

		//Copy JS string functions for python that are pretty close.
		var map = {
			uper: 'toUpperCase',
			lower: 'toLowerCase',
			find: 'indexOf',
			replace: 'replace',
			split: 'split',
			trim: 'trim',
			charCodeAt: 'charCodeAt', //Used by Skulpty stdlib
			substring: 'substring', //Used by Skulpty stdlib
			toString: 'toString',
			valueOf: 'valueOf'
		};
		for (var k in map) {
			realm.pythonStringBaseInstance.properties[k] = realm.StringPrototype.properties[map[k]];
		}
	},
	startupCode: function startupCode() {
		return startupCodeAST;
	},
	makeLiteralValue: function makeLiteralValue(v, realm, n) {
		if (n.nonUserCode) return;
		if (typeof v !== 'string') return;
		return new realm.PythonString(v, realm);
	}
};

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var Sk = __webpack_require__(1);
	var transform = __webpack_require__(2);
	var improveError = __webpack_require__(3);

	var defaultOptions = {
		locations: true,
		ranges: true,
		sippets: true,
		filename: 'file.py',
		useLet: false,
		friendlyErrors: true
	};

	function rangeToLoc(x, offsets) {
		var best = -1;
		for ( var i = 0; i < offsets.length; ++i ) {
			if ( offsets[i] > x ) break;
			best = i;
		}
		var off = best >= 0 ? offsets[best] : 0;
		return {line: best+2, column: x - off, pos: x };
	}

	function locToRange(line, col, offsets) {
		var loff = 0;
		if ( line >= 2 && (line-2) < offsets.length ) loff = offsets[line-2];
		return loff + col;
	}

	function decorate(n, code, offsets, options) {
		var numrange = locToRange(n.lineno, n.col_offset, offsets);

		var range = [
			numrange === numrange ? numrange : Infinity,
			numrange === numrange ? numrange : -Infinity
		];
		
		if ( n.value ) range[1] += (n.value.length);

		if ( n.children )
		for ( var i = 0; i < n.children.length; ++i ) {
			var r = decorate(n.children[i], code, offsets, options);
			range[0] = Math.min(range[0], r[0]);
			range[1] = Math.max(range[1], r[1]);
		}

		if ( options.ranges ) n.range = range;
		if ( options.locations ) {
			n.loc = {
				start: rangeToLoc(range[0], offsets),
				end: rangeToLoc(range[1], offsets),
			};
		}
		if ( options.snippets ) n.str = code.substring(range[0], range[1]);

		return range;
	}

	function parser(code, options) {
		var lineOffsets = [];
		var idx = -1;
		var parse, ast;
		options = options || {};
		for ( var opt in defaultOptions ) {
			if ( !(opt in options) ) options[opt] = defaultOptions[opt];
		}

		while ( true ) {
			idx = code.indexOf("\n", idx+1);
			if ( idx < 0 ) break;
			lineOffsets.push(idx+1);
		}

		try {
			parse = Sk.parse(options.filename, code);
			decorate(parse.cst, code, lineOffsets, options);
			parse.flags = parse.flags | Sk.Parser.CO_FUTURE_UNICODE_LITERALS; //Enable future unicode literals
			ast = Sk.astFromParse(parse.cst, options.filename, parse.flags);
		} catch ( e ) {
			if ( e.extra && e.extra.node ) decorate(e.extra.node, code, lineOffsets, options);
			improveError(e, options, code);
			if ( e.loc ) {
				e.pos = locToRange(e.loc.line, e.loc.column, lineOffsets);
			}
			throw e;
		}

		//console.log(JSON.stringify(ast, null, "  "));
		var ctx = {varType: (options.useLet ? 'let' : 'var')};
		var js = transform(ast, ctx);
		return js;
	}

	module.exports = {
		parse: parser,
		pythonRuntime: __webpack_require__(4),
		defaultOptions: {runtimeParamName: '__pythonRuntime'}
	};

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/* ---- /Users/rob/skulpty/lib/preamble.js ---- */ 

	var goog = {
		global: global
	};

	var COMPILED = false;

	goog.exportSymbol = function() {};
	goog.require = function() {};

	goog.inherits = function(childCtor, parentCtor) {
	  if ( !parentCtor ) throw new Error("Cant inherit from undefined?");
	  /** @constructor */
	  function tempCtor() {};
	  tempCtor.prototype = parentCtor.prototype;
	  childCtor.superClass_ = parentCtor.prototype;
	  childCtor.prototype = new tempCtor();
	  /** @override */
	  childCtor.prototype.constructor = childCtor;
	};

	goog.asserts = {
		assert: function(what, why) {
	        if ( !what ) throw new Error("AssertionFailed:" + why);
	    }
	};

	var Sk = Sk || {};

	Sk.builtin = Sk.builtin  ||  {};

	Sk.builtin.bool = Boolean;
	Sk.builtin.int_ = function Int(x) {
	  this.v = x;
	};

	Sk.builtin.int_.prototype.threshold$ = Infinity;
	Sk.builtin.int_.prototype.valueOf = function() { return this.v.valueOf(); };

	Sk.builtin.tuple = function(x) {
	  this.v = Array.prototype.slice.call(x, 0);
	};
	Sk.builtin.tuple.prototype.sq$length = function() { return this.length; };

	Sk.builtin.float_ = Number;
	Sk.builtin.long = Number;
	Sk.builtin.func = function(fx) { return fx; };


	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/type.js ---- */ 

	if(Sk.builtin === undefined) {
	    Sk.builtin = {};
	}

	/**
	 * Maps Python dunder names to the Skulpt Javascript function names that
	 * implement them.
	 *
	 * Note: __add__, __mul__, and __rmul__ can be used for either numeric or
	 * sequence types. Here, they default to the numeric versions (i.e. nb$add,
	 * nb$multiply, and nb$reflected_multiply). This works because Sk.abstr.binary_op_
	 * checks for the numeric shortcuts and not the sequence shortcuts when computing
	 * a binary operation.
	 *
	 * Because many of these functions are used in contexts in which Skulpt does not
	 * [yet] handle suspensions, the assumption is that they must not suspend. However,
	 * some of these built-in functions are acquiring 'canSuspend' arguments to signal
	 * where this is not the case. These need to be spliced out of the argument list before
	 * it is passed to python. Array values in this map contain [dunderName, argumentIdx],
	 * where argumentIdx specifies the index of the 'canSuspend' boolean argument.
	 *
	 * @type {Object}
	 */
	Sk.dunderToSkulpt = {
	    "__eq__": "ob$eq",
	    "__ne__": "ob$ne",
	    "__lt__": "ob$lt",
	    "__le__": "ob$le",
	    "__gt__": "ob$gt",
	    "__ge__": "ob$ge",
	    "__hash__": "tp$hash",
	    "__abs__": "nb$abs",
	    "__neg__": "nb$negative",
	    "__pos__": "nb$positive",
	    "__int__": "nb$int_",
	    "__long__": "nb$lng",
	    "__float__": "nb$float_",
	    "__add__": "nb$add",
	    "__radd__": "nb$reflected_add",
	    "__sub__": "nb$subtract",
	    "__rsub__": "nb$reflected_subtract",
	    "__mul__": "nb$multiply",
	    "__rmul__": "nb$reflected_multiply",
	    "__div__": "nb$divide",
	    "__rdiv__": "nb$reflected_divide",
	    "__floordiv__": "nb$floor_divide",
	    "__rfloordiv__": "nb$reflected_floor_divide",
	    "__mod__": "nb$remainder",
	    "__rmod__": "nb$reflected_remainder",
	    "__divmod__": "nb$divmod",
	    "__rdivmod__": "nb$reflected_divmod",
	    "__pow__": "nb$power",
	    "__rpow__": "nb$reflected_power",
	    "__contains__": "sq$contains",
	    "__len__": ["sq$length", 1],
	    "__get__": ["tp$descr_get", 3],
	    "__set__": ["tp$descr_set", 3]
	};

	/**
	 *
	 * @constructor
	 *
	 * @param {*} name name or object to get type of, if only one arg
	 *
	 * @param {Sk.builtin.tuple=} bases
	 *
	 * @param {Object=} dict
	 *
	 *
	 * This type represents the type of `type'. *Calling* an instance of
	 * this builtin type named "type" creates class objects. The resulting
	 * class objects will have various tp$xyz attributes on them that allow
	 * for the various operations on that object.
	 *
	 * calling the type or calling an instance of the type? or both?
	 */
	Sk.builtin.type = function (name, bases, dict) {
	    var mro;
	    var obj;
	    var klass;
	    var v;
	    if (bases === undefined && dict === undefined) {
	        // 1 arg version of type()
	        // the argument is an object, not a name and returns a type object
	        obj = name;
	        return obj.ob$type;
	    } else {

	        // argument dict must be of type dict
	        if(dict.tp$name !== "dict") {
	            throw new Sk.builtin.TypeError("type() argument 3 must be dict, not " + Sk.abstr.typeName(dict));
	        }

	        // checks if name must be string
	        if(!Sk.builtin.checkString(name)) {
	            throw new Sk.builtin.TypeError("type() argument 1 must be str, not " + Sk.abstr.typeName(name));
	        }

	        // argument bases must be of type tuple
	        if(bases.tp$name !== "tuple") {
	            throw new Sk.builtin.TypeError("type() argument 2 must be tuple, not " + Sk.abstr.typeName(bases));
	        }

	        // type building version of type

	        // dict is the result of running the classes code object
	        // (basically the dict of functions). those become the prototype
	        // object of the class).

	        /**
	        * The constructor is a stub, that gets called from object.__new__
	        * @constructor
	        */
	        klass = function (args, kws) {
	            var args_copy;

	            // Call up through the chain in case there's a built-in object
	            // whose constructor we need to initialise
	            if (klass.prototype.tp$base !== undefined) {
	                if (klass.prototype.tp$base.sk$klass) {
	                    klass.prototype.tp$base.call(this, args, kws);
	                } else {
	                    // Call super constructor if subclass of a builtin
	                    args_copy = args.slice();
	                    args_copy.unshift(klass, this);
	                    Sk.abstr.superConstructor.apply(undefined, args_copy);
	                }
	            }

	            this["$d"] = new Sk.builtin.dict([]);
	            this["$d"].mp$ass_subscript(new Sk.builtin.str("__dict__"), this["$d"]);
	        };


	        var _name = Sk.ffi.remapToJs(name); // unwrap name string to js for latter use

	        var inheritsBuiltin = false;

	        // Invoking the class object calls __new__() to generate a new instance,
	        // then __init__() to initialise it
	        klass.tp$call = function(args, kws) {
	            var newf = Sk.builtin.type.typeLookup(klass, "__new__"), newargs;
	            var self;

	            args = args || [];
	            kws = kws || [];

	            if (newf === undefined || newf === Sk.builtin.object.prototype["__new__"]) {
	                // No override -> just call the constructor
	                self = new klass(args, kws);
	                newf = undefined;
	            } else {
	                newargs = args.slice();
	                newargs.unshift(klass);
	                self = Sk.misceval.applyOrSuspend(newf, undefined, undefined, kws, newargs);
	            }

	            return Sk.misceval.chain(self, function(s) {
	                var init = Sk.builtin.type.typeLookup(s.ob$type, "__init__");

	                self = s; // in case __new__ suspended

	                if (init !== undefined) {
	                    args.unshift(self);
	                    return Sk.misceval.applyOrSuspend(init, undefined, undefined, kws, args);
	                } else if (newf === undefined && (args.length !== 0 || kws.length !== 0) && !inheritsBuiltin) {
	                    // We complain about spurious constructor arguments if neither __new__
	                    // nor __init__ were overridden
	                    throw new Sk.builtin.TypeError("__init__() got unexpected argument(s)");
	                }
	            }, function(r) {
	                if (r !== Sk.builtin.none.none$ && r !== undefined) {
	                    throw new Sk.builtin.TypeError("__init__() should return None, not " + Sk.abstr.typeName(r));
	                } else {
	                    return self;
	                }
	            });
	        };

	        if (bases.v.length === 0 && Sk.python3) {
	            // new style class, inherits from object by default
	            Sk.abstr.setUpInheritance(_name, klass, Sk.builtin.object);
	        }

	        var parent, it, firstAncestor, builtin_bases = [];
	        // Set up inheritance from any builtins
	        for (it = bases.tp$iter(), parent = it.tp$iternext(); parent !== undefined; parent = it.tp$iternext()) {
	            if (firstAncestor === undefined) {
	                firstAncestor = parent;
	            }

	            while (parent.sk$klass && parent.prototype.tp$base) {
	                parent = parent.prototype.tp$base;
	            }

	            if (!parent.sk$klass && builtin_bases.indexOf(parent) < 0) {
	                builtin_bases.push(parent);
	                inheritsBuiltin = true;
	            }
	        }

	        if (builtin_bases.length > 1) {
	            throw new Sk.builtin.TypeError("Multiple inheritance with more than one builtin type is unsupported");
	        }

	        // Javascript does not support multiple inheritance, so only the first
	        // base (if any) will directly inherit in Javascript
	        if (firstAncestor !== undefined) {
	            goog.inherits(klass, firstAncestor);

	            if (firstAncestor.prototype instanceof Sk.builtin.object || firstAncestor === Sk.builtin.object) {
	                klass.prototype.tp$base = firstAncestor;
	            }
	        }

	        klass.prototype.tp$name = _name;
	        klass.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj(_name, klass);

	        // set __module__ if not present (required by direct type(name, bases, dict) calls)
	        var module_lk = new Sk.builtin.str("__module__");
	        if(dict.mp$lookup(module_lk) === undefined) {
	            dict.mp$ass_subscript(module_lk, Sk.globals["__name__"]);
	        }

	        // copy properties into our klass object
	        // uses python iter methods
	        var k;
	        for (it = dict.tp$iter(), k = it.tp$iternext(); k !== undefined; k = it.tp$iternext()) {
	            v = dict.mp$subscript(k);
	            if (v === undefined) {
	                v = null;
	            }
	            klass.prototype[k.v] = v;
	            klass[k.v] = v;
	        }

	        klass["__class__"] = klass;
	        klass["__name__"] = name;
	        klass.sk$klass = true;
	        klass.prototype["$r"] = function () {
	            var cname;
	            var mod;
	            var reprf = this.tp$getattr("__repr__");
	            if (reprf !== undefined && reprf.im_func !== Sk.builtin.object.prototype["__repr__"]) {
	                return Sk.misceval.apply(reprf, undefined, undefined, undefined, []);
	            }

	            if ((klass.prototype.tp$base !== undefined) &&
	                (klass.prototype.tp$base !== Sk.builtin.object) &&
	                (klass.prototype.tp$base.prototype["$r"] !== undefined)) {
	                // If subclass of a builtin which is not object, use that class' repr
	                return klass.prototype.tp$base.prototype["$r"].call(this);
	            } else {
	                // Else, use default repr for a user-defined class instance
	                mod = dict.mp$subscript(module_lk); // lookup __module__
	                cname = "";
	                if (mod) {
	                    cname = mod.v + ".";
	                }
	                return new Sk.builtin.str("<" + cname + _name + " object>");
	            }
	        };

	        klass.prototype.tp$setattr = function(name, data, canSuspend) {
	            var r, /** @type {(Object|undefined)} */ setf = Sk.builtin.object.prototype.GenericGetAttr.call(this, "__setattr__");
	            if (setf !== undefined) {
	                r = Sk.misceval.callsimOrSuspend(/** @type {Object} */ (setf), new Sk.builtin.str(name), data);
	                return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	            }

	            return Sk.builtin.object.prototype.GenericSetAttr.call(this, name, data);
	        };

	        klass.prototype.tp$getattr = function(name, canSuspend) {
	            var r, /** @type {(Object|undefined)} */ getf;
	            // Convert AttributeErrors back into 'undefined' returns to match the tp$getattr
	            // convention
	            var callCatchUndefined = function() {
	                return Sk.misceval.tryCatch(function() {
	                    return Sk.misceval.callsimOrSuspend(/** @type {Object} */ (getf), new Sk.builtin.str(name));
	                }, function (e) {
	                    if (e instanceof Sk.builtin.AttributeError) {
	                        return undefined;
	                    } else {
	                        throw e;
	                    }
	                });
	            };

	            getf = Sk.builtin.object.prototype.GenericGetAttr.call(this, "__getattribute__");

	            if (getf !== undefined) {
	                r = callCatchUndefined();
	            } else {
	                r = Sk.builtin.object.prototype.GenericGetAttr.call(this, name);
	                if (r === undefined) {
	                    getf = Sk.builtin.object.prototype.GenericGetAttr.call(this, "__getattr__");
	                    if (getf !== undefined) {
	                        r = callCatchUndefined();
	                    }
	                }
	            }
	            
	            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	        };

	        klass.prototype.tp$str = function () {
	            var strf = this.tp$getattr("__str__");
	            if (strf !== undefined && strf.im_func !== Sk.builtin.object.prototype["__str__"]) {
	                return Sk.misceval.apply(strf, undefined, undefined, undefined, []);
	            }
	            if ((klass.prototype.tp$base !== undefined) &&
	                (klass.prototype.tp$base !== Sk.builtin.object) &&
	                (klass.prototype.tp$base.prototype.tp$str !== undefined)) {
	                // If subclass of a builtin which is not object, use that class' repr
	                return klass.prototype.tp$base.prototype.tp$str.call(this);
	            }
	            return this["$r"]();
	        };
	        klass.prototype.tp$length = function (canSuspend) {
	            var r = Sk.misceval.chain(Sk.abstr.gattr(this, "__len__", canSuspend), function(lenf) {
	                return Sk.misceval.applyOrSuspend(lenf, undefined, undefined, undefined, []);
	            });
	            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	        };
	        klass.prototype.tp$call = function (args, kw) {
	            return Sk.misceval.chain(this.tp$getattr("__call__", true), function(callf) {
	                if (callf === undefined) {
	                    throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(this) + "' object is not callable");
	                }
	                return Sk.misceval.applyOrSuspend(callf, undefined, undefined, kw, args);
	            });
	        };
	        klass.prototype.tp$iter = function () {
	            var iterf = this.tp$getattr("__iter__");
	            if (iterf === undefined) {
	                throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(this) + "' object is not iterable");
	            }
	            return Sk.misceval.callsim(iterf);
	        };
	        klass.prototype.tp$iternext = function (canSuspend) {
	            var self = this;
	            var r = Sk.misceval.chain(self.tp$getattr("next", canSuspend), function(/** {Object} */ iternextf) {
	                if (iternextf === undefined) {
	                    throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(self) + "' object is not iterable");
	                }

	                return Sk.misceval.tryCatch(function() {
	                    return Sk.misceval.callsimOrSuspend(iternextf);
	                }, function(e) {
	                    if (e instanceof Sk.builtin.StopIteration) {
	                        return undefined;
	                    } else {
	                        throw e;
	                    }
	                });
	            });

	            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	        };

	        klass.prototype.tp$getitem = function (key, canSuspend) {
	            var getf = this.tp$getattr("__getitem__", canSuspend), r;
	            if (getf !== undefined) {
	                r = Sk.misceval.applyOrSuspend(getf, undefined, undefined, undefined, [key]);
	                return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	            }
	            throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(this) + "' object does not support indexing");
	        };
	        klass.prototype.tp$setitem = function (key, value, canSuspend) {
	            var setf = this.tp$getattr("__setitem__", canSuspend), r;
	            if (setf !== undefined) {
	                r = Sk.misceval.applyOrSuspend(setf, undefined, undefined, undefined, [key, value]);
	                return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	            }
	            throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(this) + "' object does not support item assignment");
	        };

	        if (bases) {
	            //print("building mro for", name);
	            //for (var i = 0; i < bases.length; ++i)
	            //print("base[" + i + "]=" + bases[i].tp$name);
	            klass["$d"] = new Sk.builtin.dict([]);
	            klass["$d"].mp$ass_subscript(Sk.builtin.type.basesStr_, bases);
	            mro = Sk.builtin.type.buildMRO(klass);
	            klass["$d"].mp$ass_subscript(Sk.builtin.type.mroStr_, mro);
	            klass.tp$mro = mro;
	            //print("mro result", Sk.builtin.repr(mro).v);
	        }

	        // fix for class attributes
	        klass.tp$setattr = Sk.builtin.type.prototype.tp$setattr;

	        var shortcutDunder = function (skulpt_name, magic_name, magic_func, canSuspendIdx) {
	            klass.prototype[skulpt_name] = function () {
	                var args = Array.prototype.slice.call(arguments), canSuspend;
	                args.unshift(magic_func, this);

	                if (canSuspendIdx !== null) {
	                    canSuspend = args[canSuspendIdx+1];
	                    args.splice(canSuspendIdx+1, 1);

	                    if (canSuspend) {
	                        return Sk.misceval.callsimOrSuspend.apply(undefined, args);
	                    }
	                }
	                return Sk.misceval.callsim.apply(undefined, args);
	            };
	        };

	        // Register skulpt shortcuts to magic methods defined by this class.
	        // Dynamically deflined methods (eg those returned by __getattr__())
	        // cannot be used by these magic functions; this is consistent with
	        // how CPython handles "new-style" classes:
	        // https://docs.python.org/2/reference/datamodel.html#special-method-lookup-for-old-style-classes
	        var dunder, skulpt_name, canSuspendIdx;
	        for (dunder in Sk.dunderToSkulpt) {
	            skulpt_name = Sk.dunderToSkulpt[dunder];
	            if (typeof(skulpt_name) === "string") {
	                canSuspendIdx = null;
	            } else {
	                canSuspendIdx = skulpt_name[1];
	                skulpt_name = skulpt_name[0];
	            }

	            if (klass[dunder]) {
	                // scope workaround
	                shortcutDunder(skulpt_name, dunder, klass[dunder], canSuspendIdx);
	            }
	        }

	        return klass;
	    }

	};

	/**
	 *
	 */
	Sk.builtin.type.makeTypeObj = function (name, newedInstanceOfType) {
	    Sk.builtin.type.makeIntoTypeObj(name, newedInstanceOfType);
	    return newedInstanceOfType;
	};

	Sk.builtin.type.makeIntoTypeObj = function (name, t) {
	    goog.asserts.assert(name !== undefined);
	    goog.asserts.assert(t !== undefined);
	    t.ob$type = Sk.builtin.type;
	    t.tp$name = name;
	    t["$r"] = function () {
	        var ctype;
	        var mod = t.__module__;
	        var cname = "";
	        if (mod) {
	            cname = mod.v + ".";
	        }
	        ctype = "class";
	        if (!mod && !t.sk$klass && !Sk.python3) {
	            ctype = "type";
	        }
	        return new Sk.builtin.str("<" + ctype + " '" + cname + t.tp$name + "'>");
	    };
	    t.tp$str = undefined;
	    t.tp$getattr = Sk.builtin.type.prototype.tp$getattr;
	    t.tp$setattr = Sk.builtin.object.prototype.GenericSetAttr;
	    t.tp$richcompare = Sk.builtin.type.prototype.tp$richcompare;
	    t.sk$type = true;

	    return t;
	};

	Sk.builtin.type.ob$type = Sk.builtin.type;
	Sk.builtin.type.tp$name = "type";
	Sk.builtin.type["$r"] = function () {
	    if(Sk.python3) {
	        return new Sk.builtin.str("<class 'type'>");
	    } else {
	        return new Sk.builtin.str("<type 'type'>");
	    }
	};

	//Sk.builtin.type.prototype.tp$descr_get = function() { print("in type descr_get"); };

	//Sk.builtin.type.prototype.tp$name = "type";

	// basically the same as GenericGetAttr except looks in the proto instead
	Sk.builtin.type.prototype.tp$getattr = function (name, canSuspend) {
	    var res;
	    var tp = this;
	    var descr;
	    var f;

	    if (this["$d"]) {
	        res = this["$d"].mp$lookup(new Sk.builtin.str(name));
	        if (res !== undefined) {
	            return res;
	        }
	    }

	    descr = Sk.builtin.type.typeLookup(tp, name);

	    //print("type.tpgetattr descr", descr, descr.tp$name, descr.func_code, name);
	    if (descr !== undefined && descr !== null && descr.ob$type !== undefined) {
	        f = descr.tp$descr_get;
	        // todo;if (f && descr.tp$descr_set) // is a data descriptor if it has a set
	        // return f.call(descr, this, this.ob$type);
	    }

	    if (f) {
	        // non-data descriptor
	        return f.call(descr, Sk.builtin.none.none$, tp, canSuspend);
	    }

	    if (descr !== undefined) {
	        return descr;
	    }

	    return undefined;
	};

	Sk.builtin.type.prototype.tp$setattr = function (name, value) {
	    // class attributes are direct properties of the object
	    this[name] = value;
	};

	Sk.builtin.type.typeLookup = function (type, name) {
	    var mro = type.tp$mro;
	    var pyname = new Sk.builtin.str(name);
	    var base;
	    var res;
	    var i;

	    // todo; probably should fix this, used for builtin types to get stuff
	    // from prototype
	    if (!mro) {
	        if (type.prototype) {
	            return type.prototype[name];
	        }
	        return undefined;
	    }

	    for (i = 0; i < mro.v.length; ++i) {
	        base = mro.v[i];
	        if (base.hasOwnProperty(name)) {
	            return base[name];
	        }
	        res = base["$d"].mp$lookup(pyname);
	        if (res !== undefined) {
	            return res;
	        }
	        if (base.prototype && base.prototype[name] !== undefined) {
	            return base.prototype[name];
	        }
	    }

	    return undefined;
	};

	Sk.builtin.type.mroMerge_ = function (seqs) {
	    /*
	     var tmp = [];
	     for (var i = 0; i < seqs.length; ++i)
	     {
	     tmp.push(new Sk.builtin.list(seqs[i]));
	     }
	     print(Sk.builtin.repr(new Sk.builtin.list(tmp)).v);
	     */
	    var seq;
	    var i;
	    var next;
	    var k;
	    var sseq;
	    var j;
	    var cand;
	    var cands;
	    var res = [];
	    for (; ;) {
	        for (i = 0; i < seqs.length; ++i) {
	            seq = seqs[i];
	            if (seq.length !== 0) {
	                break;
	            }
	        }
	        if (i === seqs.length) { // all empty
	            return res;
	        }
	        cands = [];
	        for (i = 0; i < seqs.length; ++i) {
	            seq = seqs[i];
	            //print("XXX", Sk.builtin.repr(new Sk.builtin.list(seq)).v);
	            if (seq.length !== 0) {
	                cand = seq[0];
	                //print("CAND", Sk.builtin.repr(cand).v);
	                OUTER:
	                    for (j = 0; j < seqs.length; ++j) {
	                        sseq = seqs[j];
	                        for (k = 1; k < sseq.length; ++k) {
	                            if (sseq[k] === cand) {
	                                break OUTER;
	                            }
	                        }
	                    }

	                // cand is not in any sequences' tail -> constraint-free
	                if (j === seqs.length) {
	                    cands.push(cand);
	                }
	            }
	        }

	        if (cands.length === 0) {
	            throw new Sk.builtin.TypeError("Inconsistent precedences in type hierarchy");
	        }

	        next = cands[0];
	        // append next to result and remove from sequences
	        res.push(next);
	        for (i = 0; i < seqs.length; ++i) {
	            seq = seqs[i];
	            if (seq.length > 0 && seq[0] === next) {
	                seq.splice(0, 1);
	            }
	        }
	    }
	};

	Sk.builtin.type.buildMRO_ = function (klass) {
	    // MERGE(klass + mro(bases) + bases)
	    var i;
	    var bases;
	    var all = [
	        [klass]
	    ];

	    //Sk.debugout("buildMRO for", klass.tp$name);

	    var kbases = klass["$d"].mp$subscript(Sk.builtin.type.basesStr_);
	    for (i = 0; i < kbases.v.length; ++i) {
	        all.push(Sk.builtin.type.buildMRO_(kbases.v[i]));
	    }

	    bases = [];
	    for (i = 0; i < kbases.v.length; ++i) {
	        bases.push(kbases.v[i]);
	    }
	    all.push(bases);

	    return Sk.builtin.type.mroMerge_(all);
	};

	/*
	 * C3 MRO (aka CPL) linearization. Figures out which order to search through
	 * base classes to determine what should override what. C3 does the "right
	 * thing", and it's what Python has used since 2.3.
	 *
	 * Kind of complicated to explain, but not really that complicated in
	 * implementation. Explanations:
	 *
	 * http://people.csail.mit.edu/jrb/goo/manual.43/goomanual_55.html
	 * http://www.python.org/download/releases/2.3/mro/
	 * http://192.220.96.201/dylan/linearization-oopsla96.html
	 *
	 * This implementation is based on a post by Samuele Pedroni on python-dev
	 * (http://mail.python.org/pipermail/python-dev/2002-October/029176.html) when
	 * discussing its addition to Python.
	 */
	Sk.builtin.type.buildMRO = function (klass) {
	    return new Sk.builtin.tuple(Sk.builtin.type.buildMRO_(klass));
	};

	Sk.builtin.type.prototype.tp$richcompare = function (other, op) {
	    var r2;
	    var r1;
	    if (other.ob$type != Sk.builtin.type) {
	        return undefined;
	    }
	    if (!this["$r"] || !other["$r"]) {
	        return undefined;
	    }
	    r1 = new Sk.builtin.str(this["$r"]().v.slice(1,6));
	    r2 = new Sk.builtin.str(other["$r"]().v.slice(1,6));
	    if (this["$r"]().v.slice(1,6) !== "class") {
	        r1 = this["$r"]();
	        r2 = other["$r"]();
	    }
	    return r1.tp$richcompare(r2, op);
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/abstract.js ---- */ 

	/**
	 * @namespace Sk.abstr
	 *
	 */
	Sk.abstr = {};

	//
	// Number
	//

	Sk.abstr.typeName = function (v) {
	    var vtypename;
	    if (v.tp$name !== undefined) {
	        vtypename = v.tp$name;
	    } else {
	        vtypename = "<invalid type>";
	    }
	    return vtypename;
	};

	Sk.abstr.binop_type_error = function (v, w, name) {
	    var vtypename = Sk.abstr.typeName(v),
	        wtypename = Sk.abstr.typeName(w);

	    throw new Sk.builtin.TypeError("unsupported operand type(s) for " + name + ": '" + vtypename + "' and '" + wtypename + "'");
	};

	Sk.abstr.unop_type_error = function (v, name) {
	    var vtypename = Sk.abstr.typeName(v),
	        uop = {
	            "UAdd"  : "+",
	            "USub"  : "-",
	            "Invert": "~"
	        }[name];

	    throw new Sk.builtin.TypeError("bad operand type for unary " + uop + ": '" + vtypename + "'");
	};

	/**
	 * lookup and return the LHS object slot function method.  This coudl be either a builtin slot function or a dunder method defined by the user.
	 * @param obj
	 * @param name
	 * @returns {Object|null|undefined}
	 * @private
	 */
	Sk.abstr.boNameToSlotFuncLhs_ = function (obj, name) {
	    if (obj === null) {
	        return undefined;
	    }

	    switch (name) {
	    case "Add":
	        return obj.nb$add ? obj.nb$add : obj["__add__"];
	    case "Sub":
	        return obj.nb$subtract ? obj.nb$subtract : obj["__sub__"];
	    case "Mult":
	        return obj.nb$multiply ? obj.nb$multiply : obj["__mul__"];
	    case "Div":
	        return obj.nb$divide ? obj.nb$divide : obj["__div__"];
	    case "FloorDiv":
	        return obj.nb$floor_divide ? obj.nb$floor_divide : obj["__floordiv__"];
	    case "Mod":
	        return obj.nb$remainder ? obj.nb$remainder : obj["__mod__"];
	    case "DivMod":
	        return obj.nb$divmod ? obj.nb$divmod : obj["__divmod__"];
	    case "Pow":
	        return obj.nb$power ? obj.nb$power : obj["__pow__"];
	    case "LShift":
	        return obj.nb$lshift ? obj.nb$lshift : obj["__lshift__"];
	    case "RShift":
	        return obj.nb$rshift ? obj.nb$rshift : obj["__rshift__"];
	    case "BitAnd":
	        return obj.nb$and ? obj.nb$and : obj["__and__"];
	    case "BitXor":
	        return obj.nb$xor ? obj.nb$xor : obj["__xor__"];
	    case "BitOr":
	        return obj.nb$or ? obj.nb$or : obj["__or__"];
	    }
	};

	Sk.abstr.boNameToSlotFuncRhs_ = function (obj, name) {
	    if (obj === null) {
	        return undefined;
	    }

	    switch (name) {
	    case "Add":
	        return obj.nb$reflected_add ? obj.nb$reflected_add : obj["__radd__"];
	    case "Sub":
	        return obj.nb$reflected_subtract ? obj.nb$reflected_subtract : obj["__rsub__"];
	    case "Mult":
	        return obj.nb$reflected_multiply ? obj.nb$reflected_multiply : obj["__rmul__"];
	    case "Div":
	        return obj.nb$reflected_divide ? obj.nb$reflected_divide : obj["__rdiv__"];
	    case "FloorDiv":
	        return obj.nb$reflected_floor_divide ? obj.nb$reflected_floor_divide : obj["__rfloordiv__"];
	    case "Mod":
	        return obj.nb$reflected_remainder ? obj.nb$reflected_remainder : obj["__rmod__"];
	    case "DivMod":
	        return obj.nb$reflected_divmod ? obj.nb$reflected_divmod : obj["__rdivmod__"];
	    case "Pow":
	        return obj.nb$reflected_power ? obj.nb$reflected_power : obj["__rpow__"];
	    case "LShift":
	        return obj.nb$reflected_lshift ? obj.nb$reflected_lshift : obj["__rlshift__"];
	    case "RShift":
	        return obj.nb$reflected_rshift ? obj.nb$reflected_rshift : obj["__rrshift__"];
	    case "BitAnd":
	        return obj.nb$reflected_and ? obj.nb$reflected_and : obj["__rand__"];
	    case "BitXor":
	        return obj.nb$reflected_xor ? obj.nb$reflected_xor : obj["__rxor__"];
	    case "BitOr":
	        return obj.nb$reflected_or ? obj.nb$reflected_or : obj["__ror__"];
	    }
	};

	Sk.abstr.iboNameToSlotFunc_ = function (obj, name) {
	    switch (name) {
	    case "Add":
	        return obj.nb$inplace_add ? obj.nb$inplace_add : obj["__iadd__"];
	    case "Sub":
	        return obj.nb$inplace_subtract ? obj.nb$inplace_subtract : obj["__isub__"];
	    case "Mult":
	        return obj.nb$inplace_multiply ? obj.nb$inplace_multiply : obj["__imul__"];
	    case "Div":
	        return obj.nb$inplace_divide ? obj.nb$inplace_divide : obj["__idiv__"];
	    case "FloorDiv":
	        return obj.nb$inplace_floor_divide ? obj.nb$inplace_floor_divide : obj["__ifloordiv__"];
	    case "Mod":
	        return obj.nb$inplace_remainder;
	    case "Pow":
	        return obj.nb$inplace_power;
	    case "LShift":
	        return obj.nb$inplace_lshift ? obj.nb$inplace_lshift : obj["__ilshift__"];
	    case "RShift":
	        return obj.nb$inplace_rshift ? obj.nb$inplace_rshift : obj["__irshift__"];
	    case "BitAnd":
	        return obj.nb$inplace_and;
	    case "BitOr":
	        return obj.nb$inplace_or;
	    case "BitXor":
	        return obj.nb$inplace_xor ? obj.nb$inplace_xor : obj["__ixor__"];
	    }
	};
	Sk.abstr.uoNameToSlotFunc_ = function (obj, name) {
	    if (obj === null) {
	        return undefined;
	    }
	    switch (name) {
	    case "USub":
	        return obj.nb$negative ? obj.nb$negative : obj["__neg__"];
	    case "UAdd":
	        return obj.nb$positive ? obj.nb$positive : obj["__pos__"];
	    case "Invert":
	        return obj.nb$invert ? obj.nb$invert : obj["__invert__"];
	    }
	};

	Sk.abstr.binary_op_ = function (v, w, opname) {
	    var wop;
	    var ret;
	    var vop;

	    // All Python inheritance is now enforced with Javascript inheritance
	    // (see Sk.abstr.setUpInheritance). This checks if w's type is a strict
	    // subclass of v's type
	    var w_is_subclass = w.constructor.prototype instanceof v.constructor;

	    // From the Python 2.7 docs:
	    //
	    // "If the right operand’s type is a subclass of the left operand’s type and
	    // that subclass provides the reflected method for the operation, this
	    // method will be called before the left operand’s non-reflected method.
	    // This behavior allows subclasses to override their ancestors’ operations."
	    //
	    // -- https://docs.python.org/2/reference/datamodel.html#index-92

	    if (w_is_subclass) {
	        wop = Sk.abstr.boNameToSlotFuncRhs_(w, opname);
	        if (wop !== undefined) {
	            if (wop.call) {
	                ret = wop.call(w, v);
	            } else {
	                ret = Sk.misceval.callsim(wop, w, v);
	            }
	            if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	                return ret;
	            }
	        }
	    }

	    vop = Sk.abstr.boNameToSlotFuncLhs_(v, opname);
	    if (vop !== undefined) {
	        if (vop.call) {
	            ret = vop.call(v, w);
	        } else {
	            ret = Sk.misceval.callsim(vop, v, w);
	        }
	        if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	            return ret;
	        }
	    }
	    // Don't retry RHS if failed above
	    if (!w_is_subclass) {
	        wop = Sk.abstr.boNameToSlotFuncRhs_(w, opname);
	        if (wop !== undefined) {
	            if (wop.call) {
	                ret = wop.call(w, v);
	            } else {
	                ret = Sk.misceval.callsim(wop, w, v);
	            }
	            if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	                return ret;
	            }
	        }
	    }
	    Sk.abstr.binop_type_error(v, w, opname);
	};

	Sk.abstr.binary_iop_ = function (v, w, opname) {
	    var wop;
	    var ret;
	    var vop = Sk.abstr.iboNameToSlotFunc_(v, opname);
	    if (vop !== undefined) {
	        if (vop.call) {
	            ret = vop.call(v, w);
	        } else {  // assume that vop is an __xxx__ type method
	            ret = Sk.misceval.callsim(vop, v, w);
	        }
	        if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	            return ret;
	        }
	    }
	    // If there wasn't an in-place operation, fall back to the binop
	    return Sk.abstr.binary_op_(v, w, opname);
	};
	Sk.abstr.unary_op_ = function (v, opname) {
	    var ret;
	    var vop = Sk.abstr.uoNameToSlotFunc_(v, opname);
	    if (vop !== undefined) {
	        if (vop.call) {
	            ret = vop.call(v);
	        } else {  // assume that vop is an __xxx__ type method
	            ret = Sk.misceval.callsim(vop, v); //  added to be like not-in-place... is this okay?
	        }
	        if (ret !== undefined) {
	            return ret;
	        }
	    }
	    Sk.abstr.unop_type_error(v, opname);
	};

	//
	// handle upconverting a/b from number to long if op causes too big/small a
	// result, or if either of the ops are already longs
	Sk.abstr.numOpAndPromote = function (a, b, opfn) {
	    var tmp;
	    var ans;
	    if (a === null || b === null) {
	        return undefined;
	    }

	    if (typeof a === "number" && typeof b === "number") {
	        ans = opfn(a, b);
	        // todo; handle float   Removed RNL (bugs in lng, and it should be a question of precision, not magnitude -- this was just wrong)
	        if ((ans > Sk.builtin.int_.threshold$ || ans < -Sk.builtin.int_.threshold$) && Math.floor(ans) === ans) {
	            return [Sk.builtin.lng.fromInt$(a), Sk.builtin.lng.fromInt$(b)];
	        } else {
	            return ans;
	        }
	    } else if (a === undefined || b === undefined) {
	        throw new Sk.builtin.NameError("Undefined variable in expression");
	    }

	    if (a.constructor === Sk.builtin.lng) {
	        return [a, b];
	    } else if ((a.constructor === Sk.builtin.int_ ||
	                a.constructor === Sk.builtin.float_) &&
	                b.constructor === Sk.builtin.complex) {
	        // special case of upconverting nmber and complex
	        // can we use here the Sk.builtin.checkComplex() method?
	        tmp = new Sk.builtin.complex(a);
	        return [tmp, b];
	    } else if (a.constructor === Sk.builtin.int_ ||
	               a.constructor === Sk.builtin.float_) {
	        return [a, b];
	    } else if (typeof a === "number") {
	        tmp = Sk.builtin.assk$(a);
	        return [tmp, b];
	    } else {
	        return undefined;
	    }
	};

	Sk.abstr.boNumPromote_ = {
	    "Add"     : function (a, b) {
	        return a + b;
	    },
	    "Sub"     : function (a, b) {
	        return a - b;
	    },
	    "Mult"    : function (a, b) {
	        return a * b;
	    },
	    "Mod"     : function (a, b) {
	        var m;
	        if (b === 0) {
	            throw new Sk.builtin.ZeroDivisionError("division or modulo by zero");
	        }
	        m = a % b;
	        return ((m * b) < 0 ? (m + b) : m);
	    },
	    "Div"     : function (a, b) {
	        if (b === 0) {
	            throw new Sk.builtin.ZeroDivisionError("division or modulo by zero");
	        } else {
	            return a / b;
	        }
	    },
	    "FloorDiv": function (a, b) {
	        if (b === 0) {
	            throw new Sk.builtin.ZeroDivisionError("division or modulo by zero");
	        } else {
	            return Math.floor(a / b);
	        } // todo; wrong? neg?
	    },
	    "Pow"     : Math.pow,
	    "BitAnd"  : function (a, b) {
	        var m = a & b;
	        if (m < 0) {
	            m = m + 4294967296; // convert back to unsigned
	        }
	        return m;
	    },
	    "BitOr"   : function (a, b) {
	        var m = a | b;
	        if (m < 0) {
	            m = m + 4294967296; // convert back to unsigned
	        }
	        return m;
	    },
	    "BitXor"  : function (a, b) {
	        var m = a ^ b;
	        if (m < 0) {
	            m = m + 4294967296; // convert back to unsigned
	        }
	        return m;
	    },
	    "LShift"  : function (a, b) {
	        var m;
	        if (b < 0) {
	            throw new Sk.builtin.ValueError("negative shift count");
	        }
	        m = a << b;
	        if (m > a) {
	            return m;
	        } else {
	            // Fail, this will get recomputed with longs
	            return a * Math.pow(2, b);
	        }
	    },
	    "RShift"  : function (a, b) {
	        var m;
	        if (b < 0) {
	            throw new Sk.builtin.ValueError("negative shift count");
	        }
	        m = a >> b;
	        if ((a > 0) && (m < 0)) {
	            // fix incorrect sign extension
	            m = m & (Math.pow(2, 32 - b) - 1);
	        }
	        return m;
	    }
	};

	Sk.abstr.numberBinOp = function (v, w, op) {
	    var tmp;
	    var numPromoteFunc = Sk.abstr.boNumPromote_[op];
	    if (numPromoteFunc !== undefined) {
	        tmp = Sk.abstr.numOpAndPromote(v, w, numPromoteFunc);
	        if (typeof tmp === "number") {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.int_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.float_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.lng) {
	            return tmp;
	        } else if (tmp !== undefined) {
	            v = tmp[0];
	            w = tmp[1];
	        }
	    }

	    return Sk.abstr.binary_op_(v, w, op);
	};
	goog.exportSymbol("Sk.abstr.numberBinOp", Sk.abstr.numberBinOp);

	Sk.abstr.numberInplaceBinOp = function (v, w, op) {
	    var tmp;
	    var numPromoteFunc = Sk.abstr.boNumPromote_[op];
	    if (numPromoteFunc !== undefined) {
	        tmp = Sk.abstr.numOpAndPromote(v, w, numPromoteFunc);
	        if (typeof tmp === "number") {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.int_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.float_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.lng) {
	            return tmp;
	        } else if (tmp !== undefined) {
	            v = tmp[0];
	            w = tmp[1];
	        }
	    }

	    return Sk.abstr.binary_iop_(v, w, op);
	};
	goog.exportSymbol("Sk.abstr.numberInplaceBinOp", Sk.abstr.numberInplaceBinOp);

	Sk.abstr.numberUnaryOp = function (v, op) {
	    var value;
	    if (op === "Not") {
	        return Sk.misceval.isTrue(v) ? Sk.builtin.bool.false$ : Sk.builtin.bool.true$;
	    } else if (v instanceof Sk.builtin.bool) {
	        value = Sk.builtin.asnum$(v);
	        if (op === "USub") {
	            return new Sk.builtin.int_(-value);
	        }
	        if (op === "UAdd") {
	            return new Sk.builtin.int_(value);
	        }
	        if (op === "Invert") {
	            return new Sk.builtin.int_(~value);
	        }
	    } else {
	        if (op === "USub" && v.nb$negative) {
	            return v.nb$negative();
	        }
	        if (op === "UAdd" && v.nb$positive) {
	            return v.nb$positive();
	        }
	        if (op === "Invert" && v.nb$invert) {
	            return v.nb$invert();
	        }
	    }

	    return Sk.abstr.unary_op_(v, op);
	};
	goog.exportSymbol("Sk.abstr.numberUnaryOp", Sk.abstr.numberUnaryOp);

	//
	// Sequence
	//

	Sk.abstr.fixSeqIndex_ = function (seq, i) {
	    i = Sk.builtin.asnum$(i);
	    if (i < 0 && seq.sq$length) {
	        i += seq.sq$length();
	    }
	    return i;
	};

	/**
	 * @param {*} seq
	 * @param {*} ob
	 * @param {boolean=} canSuspend
	 */
	Sk.abstr.sequenceContains = function (seq, ob, canSuspend) {
	    var seqtypename;
	    var special;
	    var r;

	    if (seq.sq$contains) {
	        return seq.sq$contains(ob);
	    }

	    /**
	     *  Look for special method and call it, we have to distinguish between built-ins and
	     *  python objects
	     */
	    special = Sk.abstr.lookupSpecial(seq, "__contains__");
	    if (special != null) {
	        // method on builtin, provide this arg
	        return Sk.misceval.isTrue(Sk.misceval.callsim(special, seq, ob));
	    }

	    if (!Sk.builtin.checkIterable(seq)) {
	        seqtypename = Sk.abstr.typeName(seq);
	        throw new Sk.builtin.TypeError("argument of type '" + seqtypename + "' is not iterable");
	    }

	    r = Sk.misceval.iterFor(Sk.abstr.iter(seq), function(i) {
	        if (Sk.misceval.richCompareBool(i, ob, "Eq")) {
	            return new Sk.misceval.Break(true);
	        } else {
	            return false;
	        }
	    }, false);

	    return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	};

	Sk.abstr.sequenceConcat = function (seq1, seq2) {
	    var seq1typename;
	    if (seq1.sq$concat) {
	        return seq1.sq$concat(seq2);
	    }
	    seq1typename = Sk.abstr.typeName(seq1);
	    throw new Sk.builtin.TypeError("'" + seq1typename + "' object can't be concatenated");
	};

	Sk.abstr.sequenceGetIndexOf = function (seq, ob) {
	    var seqtypename;
	    var i, it;
	    var index;
	    if (seq.index) {
	        return Sk.misceval.callsim(seq.index, seq, ob);
	    }
	    if (Sk.builtin.checkIterable(seq)) {
	        index = 0;
	        for (it = Sk.abstr.iter(seq), i = it.tp$iternext();
	             i !== undefined; i = it.tp$iternext()) {
	            if (Sk.misceval.richCompareBool(ob, i, "Eq")) {
	                return new Sk.builtin.int_(index);
	            }
	            index += 1;
	        }
	        throw new Sk.builtin.ValueError("sequence.index(x): x not in sequence");
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("argument of type '" + seqtypename + "' is not iterable");
	};

	Sk.abstr.sequenceGetCountOf = function (seq, ob) {
	    var seqtypename;
	    var i, it;
	    var count;
	    if (seq.count) {
	        return Sk.misceval.callsim(seq.count, seq, ob);
	    }
	    if (Sk.builtin.checkIterable(seq)) {
	        count = 0;
	        for (it = Sk.abstr.iter(seq), i = it.tp$iternext();
	             i !== undefined; i = it.tp$iternext()) {
	            if (Sk.misceval.richCompareBool(ob, i, "Eq")) {
	                count += 1;
	            }
	        }
	        return new Sk.builtin.int_(count);
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("argument of type '" + seqtypename + "' is not iterable");
	};

	Sk.abstr.sequenceGetItem = function (seq, i, canSuspend) {
	    var seqtypename;
	    if (seq.mp$subscript) {
	        return seq.mp$subscript(i);
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object is unsubscriptable");
	};

	Sk.abstr.sequenceSetItem = function (seq, i, x, canSuspend) {
	    var seqtypename;
	    if (seq.mp$ass_subscript) {
	        return seq.mp$ass_subscript(i, x);
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object does not support item assignment");
	};

	Sk.abstr.sequenceDelItem = function (seq, i) {
	    var seqtypename;
	    if (seq.sq$del_item) {
	        i = Sk.abstr.fixSeqIndex_(seq, i);
	        seq.sq$del_item(i);
	        return;
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object does not support item deletion");
	};

	Sk.abstr.sequenceRepeat = function (f, seq, n) {
	    var ntypename;
	    var count;
	    n = Sk.builtin.asnum$(n);
	    count = Sk.misceval.asIndex(n);
	    if (count === undefined) {
	        ntypename = Sk.abstr.typeName(n);
	        throw new Sk.builtin.TypeError("can't multiply sequence by non-int of type '" + ntypename + "'");
	    }
	    return f.call(seq, n);
	};

	Sk.abstr.sequenceGetSlice = function (seq, i1, i2) {
	    var seqtypename;
	    if (seq.sq$slice) {
	        i1 = Sk.abstr.fixSeqIndex_(seq, i1);
	        i2 = Sk.abstr.fixSeqIndex_(seq, i2);
	        return seq.sq$slice(i1, i2);
	    } else if (seq.mp$subscript) {
	        return seq.mp$subscript(new Sk.builtin.slice(i1, i2));
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object is unsliceable");
	};

	Sk.abstr.sequenceDelSlice = function (seq, i1, i2) {
	    var seqtypename;
	    if (seq.sq$del_slice) {
	        i1 = Sk.abstr.fixSeqIndex_(seq, i1);
	        i2 = Sk.abstr.fixSeqIndex_(seq, i2);
	        seq.sq$del_slice(i1, i2);
	        return;
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' doesn't support slice deletion");
	};

	Sk.abstr.sequenceSetSlice = function (seq, i1, i2, x) {
	    var seqtypename;
	    if (seq.sq$ass_slice) {
	        i1 = Sk.abstr.fixSeqIndex_(seq, i1);
	        i2 = Sk.abstr.fixSeqIndex_(seq, i2);
	        seq.sq$ass_slice(i1, i2, x);
	    } else if (seq.mp$ass_subscript) {
	        seq.mp$ass_subscript(new Sk.builtin.slice(i1, i2), x);
	    } else {
	        seqtypename = Sk.abstr.typeName(seq);
	        throw new Sk.builtin.TypeError("'" + seqtypename + "' object doesn't support slice assignment");
	    }
	};

	// seq - Python object to unpack
	// n   - JavaScript number of items to unpack
	Sk.abstr.sequenceUnpack = function (seq, n) {
	    var res = [];
	    var it, i;

	    if (!Sk.builtin.checkIterable(seq)) {
	        throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(seq) + "' object is not iterable");
	    }

	    for (it = Sk.abstr.iter(seq), i = it.tp$iternext();
	         (i !== undefined) && (res.length < n);
	         i = it.tp$iternext()) {
	        res.push(i);
	    }

	    if (res.length < n) {
	        throw new Sk.builtin.ValueError("need more than " + res.length + " values to unpack");
	    }
	    if (i !== undefined) {
	        throw new Sk.builtin.ValueError("too many values to unpack");
	    }

	    // Return Javascript array of items
	    return res;
	};

	//
	// Object
	//

	Sk.abstr.objectFormat = function (obj, format_spec) {
	    var meth; // PyObject
	    var result; // PyObject

	    // If no format_spec is provided, use an empty string
	    if(format_spec == null) {
	        format_spec = "";
	    }

	    // Find the (unbound!) __format__ method (a borrowed reference)
	    meth = Sk.abstr.lookupSpecial(obj, "__format__");
	    if (meth == null) {
	        throw new Sk.builtin.TypeError("Type " + Sk.abstr.typeName(obj) + "doesn't define __format__");
	    }

	    // And call it
	    result = Sk.misceval.callsim(meth, obj, format_spec);
	    if (!Sk.builtin.checkString(result)) {
	        throw new Sk.builtin.TypeError("__format__ must return a str, not " + Sk.abstr.typeName(result));
	    }

	    return result;
	};

	Sk.abstr.objectAdd = function (a, b) {
	    var btypename;
	    var atypename;
	    if (a.nb$add) {
	        return a.nb$add(b);
	    }

	    atypename = Sk.abstr.typeName(a);
	    btypename = Sk.abstr.typeName(b);
	    throw new Sk.builtin.TypeError("unsupported operand type(s) for +: '" + atypename + "' and '" + btypename + "'");
	};

	// in Python 2.6, this behaviour seems to be defined for numbers and bools (converts bool to int)
	Sk.abstr.objectNegative = function (obj) {
	    var objtypename;
	    var obj_asnum = Sk.builtin.asnum$(obj); // this will also convert bool type to int

	    if (obj instanceof Sk.builtin.bool) {
	        obj = new Sk.builtin.int_(obj_asnum);
	    }

	    if (obj.nb$negative) {
	        return obj.nb$negative();
	    }

	    objtypename = Sk.abstr.typeName(obj);
	    throw new Sk.builtin.TypeError("bad operand type for unary -: '" + objtypename + "'");
	};

	// in Python 2.6, this behaviour seems to be defined for numbers and bools (converts bool to int)
	Sk.abstr.objectPositive = function (obj) {
	    var objtypename = Sk.abstr.typeName(obj);
	    var obj_asnum = Sk.builtin.asnum$(obj); // this will also convert bool type to int

	    if (obj instanceof Sk.builtin.bool) {
	        obj = new Sk.builtin.int_(obj_asnum);
	    }

	    if (obj.nb$negative) {
	        return obj.nb$positive();
	    }

	    throw new Sk.builtin.TypeError("bad operand type for unary +: '" + objtypename + "'");
	};

	Sk.abstr.objectDelItem = function (o, key) {
	    var otypename;
	    var keytypename;
	    var keyValue;
	    if (o !== null) {
	        if (o.mp$del_subscript) {
	            o.mp$del_subscript(key);
	            return;
	        }
	        if (o.sq$ass_item) {
	            keyValue = Sk.misceval.asIndex(key);
	            if (keyValue === undefined) {
	                keytypename = Sk.abstr.typeName(key);
	                throw new Sk.builtin.TypeError("sequence index must be integer, not '" + keytypename + "'");
	            }
	            Sk.abstr.sequenceDelItem(o, keyValue);
	            return;
	        }
	        // if o is a slice do something else...
	    }

	    otypename = Sk.abstr.typeName(o);
	    throw new Sk.builtin.TypeError("'" + otypename + "' object does not support item deletion");
	};
	goog.exportSymbol("Sk.abstr.objectDelItem", Sk.abstr.objectDelItem);

	Sk.abstr.objectGetItem = function (o, key, canSuspend) {
	    var otypename;
	    if (o !== null) {
	        if (o.tp$getitem) {
	            return o.tp$getitem(key, canSuspend);
	        } else if (o.mp$subscript) {
	            return o.mp$subscript(key, canSuspend);
	        } else if (Sk.misceval.isIndex(key) && o.sq$item) {
	            return Sk.abstr.sequenceGetItem(o, Sk.misceval.asIndex(key), canSuspend);
	        }
	    }

	    otypename = Sk.abstr.typeName(o);
	    throw new Sk.builtin.TypeError("'" + otypename + "' does not support indexing");
	};
	goog.exportSymbol("Sk.abstr.objectGetItem", Sk.abstr.objectGetItem);

	Sk.abstr.objectSetItem = function (o, key, v, canSuspend) {
	    var otypename;
	    if (o !== null) {
	        if (o.tp$setitem) {
	            return o.tp$setitem(key, v, canSuspend);
	        } else if (o.mp$ass_subscript) {
	            return o.mp$ass_subscript(key, v, canSuspend);
	        } else if (Sk.misceval.isIndex(key) && o.sq$ass_item) {
	            return Sk.abstr.sequenceSetItem(o, Sk.misceval.asIndex(key), v, canSuspend);
	        }
	    }

	    otypename = Sk.abstr.typeName(o);
	    throw new Sk.builtin.TypeError("'" + otypename + "' does not support item assignment");
	};
	goog.exportSymbol("Sk.abstr.objectSetItem", Sk.abstr.objectSetItem);


	Sk.abstr.gattr = function (obj, nameJS, canSuspend) {
	    var ret, f;
	    var objname = Sk.abstr.typeName(obj);

	    if (obj === null) {
	        throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	    }

	    if (obj.tp$getattr !== undefined) {
	        ret = obj.tp$getattr(nameJS, canSuspend);
	    }

	    ret = Sk.misceval.chain(ret, function(r) {
	        if (r === undefined) {
	            throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	        }
	        return r;
	    });

	    return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);
	};
	goog.exportSymbol("Sk.abstr.gattr", Sk.abstr.gattr);


	Sk.abstr.sattr = function (obj, nameJS, data, canSuspend) {
	    var objname = Sk.abstr.typeName(obj), r, setf;

	    if (obj === null) {
	        throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	    }

	    if (obj.tp$setattr !== undefined) {
	        return obj.tp$setattr(nameJS, data, canSuspend);
	    } else {
	        throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	    }
	};
	goog.exportSymbol("Sk.abstr.sattr", Sk.abstr.sattr);


	Sk.abstr.iternext = function (it, canSuspend) {
	    return it.tp$iternext(canSuspend);
	};
	goog.exportSymbol("Sk.abstr.iternext", Sk.abstr.iternext);


	/**
	 * Get the iterator for a Python object  This iterator could be one of the following.
	 * This is the preferred mechanism for consistently getting the correct iterator.  You should
	 * not just use tp$iter because that could lead to incorrect behavior of a user created class.
	 *
	 * - tp$iter
	 * - A user defined `__iter__` method
	 * - A user defined `__getitem__` method
	 *
	 * @param obj
	 *
	 * @throws {Sk.builtin.TypeError}
	 * @returns {Object}
	 */

	Sk.abstr.iter = function(obj) {
	    var iter;
	    var getit;
	    var ret;

	    /**
	     * Builds an iterator around classes that have a __getitem__ method.
	     *
	     * @constructor
	     */
	    var seqIter = function (obj) {
	        this.idx = 0;
	        this.myobj = obj;
	        this.getitem = Sk.abstr.lookupSpecial(obj, "__getitem__");
	        this.tp$iternext = function () {
	            var ret;
	            try {
	                ret = Sk.misceval.callsim(this.getitem, this.myobj, Sk.ffi.remapToPy(this.idx));
	            } catch (e) {
	                if (e instanceof Sk.builtin.IndexError || e instanceof Sk.builtin.StopIteration) {
	                    return undefined;
	                } else {
	                    throw e;
	                }
	            }
	            this.idx++;
	            return ret;
	        };
	    };

	    if (obj.tp$getattr) {
	        iter =  Sk.abstr.lookupSpecial(obj,"__iter__");
	        if (iter) {
	            ret = Sk.misceval.callsim(iter, obj);
	            if (ret.tp$iternext) {
	                return ret;
	            }
	        }
	    }
	    if (obj.tp$iter) {
	        try {  // catch and ignore not iterable error here.
	            ret = obj.tp$iter();
	            if (ret.tp$iternext) {
	                return ret;
	            }
	        } catch (e) { }
	    }
	    getit = Sk.abstr.lookupSpecial(obj, "__getitem__");
	    if (getit) {
	        // create internal iterobject if __getitem__
	        return new seqIter(obj);
	    }
	    throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(obj) + "' object is not iterable");
	};
	goog.exportSymbol("Sk.abstr.iter", Sk.abstr.iter);

	/**
	 * Special method look up. First try getting the method via
	 * internal dict and getattr. If getattr is not present (builtins)
	 * try if method is defined on the object itself
	 *
	 * @returns {null|Object} Return null if not found or the function
	 */
	Sk.abstr.lookupSpecial = function(op, str) {
	    var res;
	    var obtp;
	    if (op.ob$type) {
	        obtp = op.ob$type;
	    } else {
	        return null;
	    }

	    return Sk.builtin.type.typeLookup(obtp, str);
	};
	goog.exportSymbol("Sk.abstr.lookupSpecial", Sk.abstr.lookupSpecial);

	/**
	 * Mark a class as unhashable and prevent its `__hash__` function from being called.
	 * @param  {function(...[?])} thisClass The class to mark as unhashable.
	 * @return {undefined}
	 */
	Sk.abstr.markUnhashable = function (thisClass) {
	    var proto = thisClass.prototype;
	    proto.__hash__ = Sk.builtin.none.none$;
	    proto.tp$hash = Sk.builtin.none.none$;
	};

	/**
	 * Set up inheritance between two Python classes. This allows only for single
	 * inheritance -- multiple inheritance is not supported by Javascript.
	 *
	 * Javascript's inheritance is prototypal. This means that properties must
	 * be defined on the superclass' prototype in order for subclasses to inherit
	 * them.
	 *
	 * ```
	 * Sk.superclass.myProperty                 # will NOT be inherited
	 * Sk.superclass.prototype.myProperty       # will be inherited
	 * ```
	 *
	 * In order for a class to be subclassable, it must (directly or indirectly)
	 * inherit from Sk.builtin.object so that it will be properly initialized in
	 * {@link Sk.doOneTimeInitialization} (in src/import.js). Further, all Python
	 * builtins should inherit from Sk.builtin.object.
	 *
	 * @param {string} childName The Python name of the child (subclass).
	 * @param {function(...[?])} child     The subclass.
	 * @param {function(...[?])} parent    The superclass.
	 * @return {undefined}
	 */
	Sk.abstr.setUpInheritance = function (childName, child, parent) {
	    goog.inherits(child, parent);
	    child.prototype.tp$base = parent;
	    child.prototype.tp$name = childName;
	    child.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj(childName, child);
	};

	/**
	 * Call the super constructor of the provided class, with the object `self` as
	 * the `this` value of that constructor. Any arguments passed to this function
	 * after `self` will be passed as-is to the constructor.
	 *
	 * @param  {function(...[?])} thisClass The subclass.
	 * @param  {Object} self      The instance of the subclas.
	 * @param  {...?} args Arguments to pass to the constructor.
	 * @return {undefined}
	 */
	Sk.abstr.superConstructor = function (thisClass, self, args) {
	    var argumentsForConstructor = Array.prototype.slice.call(arguments, 2);
	    thisClass.prototype.tp$base.apply(self, argumentsForConstructor);
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/object.js ---- */ 

	/**
	 * @constructor
	 * Sk.builtin.object
	 *
	 * @description
	 * Constructor for Python object. All Python classes (builtin and user-defined)
	 * should inherit from this class.
	 *
	 * @return {Sk.builtin.object} Python object
	 */
	Sk.builtin.object = function () {
	    if (!(this instanceof Sk.builtin.object)) {
	        return new Sk.builtin.object();
	    }

	    return this;
	};



	var _tryGetSubscript = function(dict, pyName) {
	    try {
	        return dict.mp$subscript(pyName);
	    } catch (x) {
	        return undefined;
	    }
	};

	/**
	 * Get an attribute
	 * @param {string} name JS name of the attribute
	 * @param {boolean=} canSuspend Can we return a suspension?
	 * @return {undefined}
	 */
	Sk.builtin.object.prototype.GenericGetAttr = function (name, canSuspend) {
	    var res;
	    var f;
	    var descr;
	    var tp;
	    var dict;
	    var pyName = new Sk.builtin.str(name);
	    goog.asserts.assert(typeof name === "string");

	    tp = this.ob$type;
	    goog.asserts.assert(tp !== undefined, "object has no ob$type!");

	    dict = this["$d"] || this.constructor["$d"];

	    // todo; assert? force?
	    if (dict) {
	        if (dict.mp$lookup) {
	            res = dict.mp$lookup(pyName);
	        } else if (dict.mp$subscript) {
	            res = _tryGetSubscript(dict, pyName);
	        } else if (typeof dict === "object") {
	            // todo; definitely the wrong place for this. other custom tp$getattr won't work on object -- bnm -- implemented custom __getattr__ in abstract.js
	            res = dict[name];
	        }
	        if (res !== undefined) {
	            return res;
	        }
	    }

	    descr = Sk.builtin.type.typeLookup(tp, name);

	    // otherwise, look in the type for a descr
	    if (descr !== undefined && descr !== null) {
	        f = descr.tp$descr_get;
	        // todo - data descriptors (ie those with tp$descr_set too) get a different lookup priority

	        if (f) {
	            // non-data descriptor
	            return f.call(descr, this, this.ob$type, canSuspend);
	        }
	    }

	    if (descr !== undefined) {
	        return descr;
	    }

	    return undefined;
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericGetAttr", Sk.builtin.object.prototype.GenericGetAttr);

	Sk.builtin.object.prototype.GenericPythonGetAttr = function(self, name) {
	    return Sk.builtin.object.prototype.GenericGetAttr.call(self, name.v);
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericPythonGetAttr", Sk.builtin.object.prototype.GenericPythonGetAttr);

	/**
	 * @param {string} name
	 * @param {undefined} value
	 * @param {boolean=} canSuspend
	 * @return {undefined}
	 */
	Sk.builtin.object.prototype.GenericSetAttr = function (name, value, canSuspend) {
	    var objname = Sk.abstr.typeName(this);
	    var pyname;
	    var dict;
	    var tp = this.ob$type;
	    var descr;
	    var f;

	    goog.asserts.assert(typeof name === "string");
	    goog.asserts.assert(tp !== undefined, "object has no ob$type!");

	    dict = this["$d"] || this.constructor["$d"];

	    descr = Sk.builtin.type.typeLookup(tp, name);

	    // otherwise, look in the type for a descr
	    if (descr !== undefined && descr !== null) {
	        f = descr.tp$descr_set;
	        // todo; is this the right lookup priority for data descriptors?
	        if (f) {
	            return f.call(descr, this, value, canSuspend);
	        }
	    }

	    if (dict.mp$ass_subscript) {
	        pyname = new Sk.builtin.str(name);

	        if (this instanceof Sk.builtin.object && !(this.ob$type.sk$klass) &&
	            dict.mp$lookup(pyname) === undefined) {
	            // Cannot add new attributes to a builtin object
	            throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + Sk.unfixReserved(name) + "'");
	        }
	        dict.mp$ass_subscript(new Sk.builtin.str(name), value);
	    } else if (typeof dict === "object") {
	        dict[name] = value;
	    }
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericSetAttr", Sk.builtin.object.prototype.GenericSetAttr);

	Sk.builtin.object.prototype.GenericPythonSetAttr = function(self, name, value) {
	    return Sk.builtin.object.prototype.GenericSetAttr.call(self, name.v, value);
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericPythonSetAttr", Sk.builtin.object.prototype.GenericPythonSetAttr);

	Sk.builtin.object.prototype.HashNotImplemented = function () {
	    throw new Sk.builtin.TypeError("unhashable type: '" + Sk.abstr.typeName(this) + "'");
	};

	Sk.builtin.object.prototype.tp$getattr = Sk.builtin.object.prototype.GenericGetAttr;
	Sk.builtin.object.prototype.tp$setattr = Sk.builtin.object.prototype.GenericSetAttr;

	// Although actual attribute-getting happens in pure Javascript via tp$getattr, classes
	// overriding __getattr__ etc need to be able to call object.__getattr__ etc from Python
	Sk.builtin.object.prototype["__getattr__"] = Sk.builtin.object.prototype.GenericPythonGetAttr;
	Sk.builtin.object.prototype["__setattr__"] = Sk.builtin.object.prototype.GenericPythonSetAttr;

	/**
	 * The name of this class.
	 * @type {string}
	 */
	Sk.builtin.object.prototype.tp$name = "object";

	/**
	 * The type object of this class.
	 * @type {Sk.builtin.type}
	 */
	Sk.builtin.object.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj("object", Sk.builtin.object);
	Sk.builtin.object.prototype.ob$type.sk$klass = undefined;   // Nonsense for closure compiler
	Sk.builtin.object.prototype.tp$descr_set = undefined;   // Nonsense for closure compiler

	/** Default implementations of dunder methods found in all Python objects */
	/**
	 * Default implementation of __new__ just calls the class constructor
	 * @name  __new__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__new__"] = function (cls) {
	    Sk.builtin.pyCheckArgs("__new__", arguments, 1, 1, false, false);

	    return new cls([], []);
	};

	/**
	 * Python wrapper for `__repr__` method.
	 * @name  __repr__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__repr__"] = function (self) {
	    Sk.builtin.pyCheckArgs("__repr__", arguments, 0, 0, false, true);

	    return self["$r"]();
	};

	/**
	 * Python wrapper for `__str__` method.
	 * @name  __str__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__str__"] = function (self) {
	    Sk.builtin.pyCheckArgs("__str__", arguments, 0, 0, false, true);

	    return self["$r"]();
	};

	/**
	 * Python wrapper for `__hash__` method.
	 * @name  __hash__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__hash__"] = function (self) {
	    Sk.builtin.pyCheckArgs("__hash__", arguments, 0, 0, false, true);

	    return self.tp$hash();
	};

	/**
	 * Python wrapper for `__eq__` method.
	 * @name  __eq__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__eq__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__eq__", arguments, 1, 1, false, true);

	    return self.ob$eq(other);
	};

	/**
	 * Python wrapper for `__ne__` method.
	 * @name  __ne__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__ne__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__ne__", arguments, 1, 1, false, true);

	    return self.ob$ne(other);
	};

	/**
	 * Python wrapper for `__lt__` method.
	 * @name  __lt__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__lt__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__lt__", arguments, 1, 1, false, true);

	    return self.ob$lt(other);
	};

	/**
	 * Python wrapper for `__le__` method.
	 * @name  __le__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__le__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__le__", arguments, 1, 1, false, true);

	    return self.ob$le(other);
	};

	/**
	 * Python wrapper for `__gt__` method.
	 * @name  __gt__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__gt__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__gt__", arguments, 1, 1, false, true);

	    return self.ob$gt(other);
	};

	/**
	 * Python wrapper for `__ge__` method.
	 * @name  __ge__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__ge__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__ge__", arguments, 1, 1, false, true);

	    return self.ob$ge(other);
	};

	/** Default implementations of Javascript functions used in dunder methods */

	/**
	 * Return the string representation of this instance.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @name  $r
	 * @memberOf Sk.builtin.object.prototype
	 * @return {Sk.builtin.str} The Python string representation of this instance.
	 */
	Sk.builtin.object.prototype["$r"] = function () {
	    return new Sk.builtin.str("<object>");
	};

	Sk.builtin.hashCount = 1;
	Sk.builtin.idCount = 1;

	/**
	 * Return the hash value of this instance.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @return {Sk.builtin.int_} The hash value
	 */
	Sk.builtin.object.prototype.tp$hash = function () {
	    if (!this.$savedHash_) {
	        this.$savedHash_ = new Sk.builtin.int_(Sk.builtin.hashCount++);
	    }

	    return this.$savedHash_;
	};

	/**
	 * Perform equality check between this instance and a Python object (i.e. this == other).
	 *
	 * Implements `__eq__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to check for equality.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if equal, false otherwise
	 */
	Sk.builtin.object.prototype.ob$eq = function (other) {
	    if (this === other) {
	        return Sk.builtin.bool.true$;
	    }

	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Perform non-equality check between this instance and a Python object (i.e. this != other).
	 *
	 * Implements `__ne__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to check for non-equality.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if not equal, false otherwise
	 */
	Sk.builtin.object.prototype.ob$ne = function (other) {
	    if (this === other) {
	        return Sk.builtin.bool.false$;
	    }

	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is less than a Python object (i.e. this < other).
	 *
	 * Implements `__lt__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this < other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$lt = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is less than or equal to a Python object (i.e. this <= other).
	 *
	 * Implements `__le__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this <= other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$le = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is greater than a Python object (i.e. this > other).
	 *
	 * Implements `__gt__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this > other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$gt = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is greater than or equal to a Python object (i.e. this >= other).
	 *
	 * Implements `__ge__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this >= other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$ge = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	// Wrap the following functions in Sk.builtin.func once that class is initialized
	/**
	 * Array of all the Python functions which are methods of this class.
	 * @type {Array}
	 */
	Sk.builtin.object.pythonFunctions = ["__repr__", "__str__", "__hash__",
	"__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__getattr__", "__setattr__"];

	/**
	 * @constructor
	 * Sk.builtin.none
	 *
	 * @extends {Sk.builtin.object}
	 */
	Sk.builtin.none = function () {
	    this.v = null;
	};
	Sk.abstr.setUpInheritance("NoneType", Sk.builtin.none, Sk.builtin.object);

	/** @override */
	Sk.builtin.none.prototype["$r"] = function () { return new Sk.builtin.str("None"); };

	/** @override */
	Sk.builtin.none.prototype.tp$hash = function () {
	    return new Sk.builtin.int_(0);
	};

	/**
	 * Python None constant.
	 * @type {Sk.builtin.none}
	 */
	Sk.builtin.none.none$ = new Sk.builtin.none();

	/**
	 * @constructor
	 * Sk.builtin.NotImplemented
	 *
	 * @extends {Sk.builtin.object}
	 */
	Sk.builtin.NotImplemented = function() { };
	Sk.abstr.setUpInheritance("NotImplementedType", Sk.builtin.NotImplemented, Sk.builtin.object);

	/** @override */
	Sk.builtin.NotImplemented.prototype["$r"] = function () { return new Sk.builtin.str("NotImplemented"); };

	/**
	 * Python NotImplemented constant.
	 * @type {Sk.builtin.NotImplemented}
	 */
	Sk.builtin.NotImplemented.NotImplemented$ = new Sk.builtin.NotImplemented();

	goog.exportSymbol("Sk.builtin.none", Sk.builtin.none);
	goog.exportSymbol("Sk.builtin.NotImplemented", Sk.builtin.NotImplemented);



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/function.js ---- */ 

	/**
	 * @namespace Sk.builtin
	 */


	/**
	 * Check arguments to Python functions to ensure the correct number of
	 * arguments are passed.
	 *
	 * @param {string} name the name of the function
	 * @param {Object} args the args passed to the function
	 * @param {number} minargs the minimum number of allowable arguments
	 * @param {number=} maxargs optional maximum number of allowable
	 * arguments (default: Infinity)
	 * @param {boolean=} kwargs optional true if kwargs, false otherwise
	 * (default: false)
	 * @param {boolean=} free optional true if free vars, false otherwise
	 * (default: false)
	 */
	Sk.builtin.pyCheckArgs = function (name, args, minargs, maxargs, kwargs, free) {
	    var nargs = args.length;
	    var msg = "";

	    if (maxargs === undefined) {
	        maxargs = Infinity;
	    }
	    if (kwargs) {
	        nargs -= 1;
	    }
	    if (free) {
	        nargs -= 1;
	    }
	    if ((nargs < minargs) || (nargs > maxargs)) {
	        if (minargs === maxargs) {
	            msg = name + "() takes exactly " + minargs + " arguments";
	        } else if (nargs < minargs) {
	            msg = name + "() takes at least " + minargs + " arguments";
	        } else {
	            msg = name + "() takes at most " + maxargs + " arguments";
	        }
	        msg += " (" + nargs + " given)";
	        throw new Sk.builtin.TypeError(msg);
	    }
	};
	goog.exportSymbol("Sk.builtin.pyCheckArgs", Sk.builtin.pyCheckArgs);

	/**
	 * Check type of argument to Python functions.
	 *
	 * @param {string} name the name of the argument
	 * @param {string} exptype string of the expected type name
	 * @param {boolean} check truthy if type check passes, falsy otherwise
	 */
	Sk.builtin.pyCheckType = function (name, exptype, check) {
	    if (!check) {
	        throw new Sk.builtin.TypeError(name + " must be a " + exptype);
	    }
	};
	goog.exportSymbol("Sk.builtin.pyCheckType", Sk.builtin.pyCheckType);

	Sk.builtin.checkSequence = function (arg) {
	    return (arg !== null && arg.mp$subscript !== undefined);
	};
	goog.exportSymbol("Sk.builtin.checkSequence", Sk.builtin.checkSequence);

	/**
	 * Use this to test whether or not a Python object is iterable.  You should **not** rely
	 * on the presence of tp$iter on the object as a good test, as it could be a user defined
	 * class with `__iter__` defined or ``__getitem__``  This tests for all of those cases
	 *
	 * @param arg {Object}   A Python object
	 * @returns {boolean} true if the object is iterable
	 */
	Sk.builtin.checkIterable = function (arg) {
	    var ret = false;
	    if (arg !== null ) {
	        try {
	            ret = Sk.abstr.iter(arg);
	            if (ret) {
	                return true;
	            } else {
	                return false;
	            }
	        } catch (e) {
	            if (e instanceof Sk.builtin.TypeError) {
	                return false;
	            } else {
	                throw e;
	            }
	        }
	    }
	    return ret;
	};
	goog.exportSymbol("Sk.builtin.checkIterable", Sk.builtin.checkIterable);

	Sk.builtin.checkCallable = function (obj) {
	    // takes care of builtin functions and methods, builtins
	    if (typeof obj === "function") {
	        return true;
	    }
	    // takes care of python function, methods and lambdas
	    if (obj instanceof Sk.builtin.func) {
	        return true;
	    }
	    // takes care of instances of methods
	    if (obj instanceof Sk.builtin.method) {
	        return true;
	    }
	    // go up the prototype chain to see if the class has a __call__ method
	    if (Sk.abstr.lookupSpecial(obj, "__call__") !== undefined) {
	        return true;
	    } 
	    return false;
	};

	Sk.builtin.checkNumber = function (arg) {
	    return (arg !== null && (typeof arg === "number" ||
	        arg instanceof Sk.builtin.int_ ||
	        arg instanceof Sk.builtin.float_ ||
	        arg instanceof Sk.builtin.lng));
	};
	goog.exportSymbol("Sk.builtin.checkNumber", Sk.builtin.checkNumber);

	/**
	 * Checks for complex type, delegates to internal method
	 * Most skulpt users would search here!
	 */
	Sk.builtin.checkComplex = function (arg) {
	    return Sk.builtin.complex._complex_check(arg);
	};
	goog.exportSymbol("Sk.builtin.checkComplex", Sk.builtin.checkComplex);

	Sk.builtin.checkInt = function (arg) {
	    return (arg !== null) && ((typeof arg === "number" && arg === (arg | 0)) ||
	        arg instanceof Sk.builtin.int_ ||
	        arg instanceof Sk.builtin.lng);
	};
	goog.exportSymbol("Sk.builtin.checkInt", Sk.builtin.checkInt);

	Sk.builtin.checkFloat = function (arg) {
	    return (arg !== null) && (arg instanceof Sk.builtin.float_);
	};
	goog.exportSymbol("Sk.builtin.checkFloat", Sk.builtin.checkFloat);

	Sk.builtin.checkString = function (arg) {
	    return (arg !== null && arg.__class__ == Sk.builtin.str);
	};
	goog.exportSymbol("Sk.builtin.checkString", Sk.builtin.checkString);

	Sk.builtin.checkClass = function (arg) {
	    return (arg !== null && arg.sk$type);
	};
	goog.exportSymbol("Sk.builtin.checkClass", Sk.builtin.checkClass);

	Sk.builtin.checkBool = function (arg) {
	    return (arg instanceof Sk.builtin.bool);
	};
	goog.exportSymbol("Sk.builtin.checkBool", Sk.builtin.checkBool);

	Sk.builtin.checkNone = function (arg) {
	    return (arg instanceof Sk.builtin.none);
	};
	goog.exportSymbol("Sk.builtin.checkNone", Sk.builtin.checkNone);

	Sk.builtin.checkFunction = function (arg) {
	    return (arg !== null && arg.tp$call !== undefined);
	};
	goog.exportSymbol("Sk.builtin.checkFunction", Sk.builtin.checkFunction);

	/**
	 * @constructor
	 * Sk.builtin.func
	 *
	 * @description
	 * This function converts a Javascript function into a Python object that is callable.  Or just
	 * think of it as a Python function rather than a Javascript function now.  This is an important
	 * distinction in skulpt because once you have Python function you cannot just call it.
	 * You must now use Sk.misceval.callsim to call the Python function.
	 *
	 * @param {Function} code the javascript implementation of this function
	 * @param {Object=} globals the globals where this function was defined.
	 * Can be undefined (which will be stored as null) for builtins. (is
	 * that ok?)
	 * @param {Object=} closure dict of free variables
	 * @param {Object=} closure2 another dict of free variables that will be
	 * merged into 'closure'. there's 2 to simplify generated code (one is $free,
	 * the other is $cell)
	 *
	 * closure is the cell variables from the parent scope that we need to close
	 * over. closure2 is the free variables in the parent scope that we also might
	 * need to access.
	 *
	 * NOTE: co_varnames and co_name are defined by compiled code only, so we have
	 * to access them via dict-style lookup for closure.
	 *
	 */
	Sk.builtin.func = function (code, globals, closure, closure2) {
	    var k;
	    this.func_code = code;
	    this.func_globals = globals || null;
	    if (closure2 !== undefined) {
	        // todo; confirm that modification here can't cause problems
	        for (k in closure2) {
	            closure[k] = closure2[k];
	        }
	    }
	    this.func_closure = closure;
	    return this;
	};
	goog.exportSymbol("Sk.builtin.func", Sk.builtin.func);


	Sk.builtin.func.prototype.tp$name = "function";
	Sk.builtin.func.prototype.tp$descr_get = function (obj, objtype) {
	    goog.asserts.assert(obj !== undefined && objtype !== undefined);
	    if (obj === Sk.builtin.none.none$) {
	        return this;
	    }
	    return new Sk.builtin.method(this, obj, objtype);
	};
	Sk.builtin.func.prototype.tp$call = function (args, kw) {
	    var j;
	    var i;
	    var numvarnames;
	    var varnames;
	    var kwlen;
	    var kwargsarr;
	    var expectskw;
	    var name;
	    var numargs;

	    expectskw = this.func_code["co_kwargs"];
	    kwargsarr = [];

	    if (this.func_code["no_kw"] && kw) {
	        name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	        throw new Sk.builtin.TypeError(name + "() takes no keyword arguments");
	    }

	    if (kw) {
	        // bind the kw args
	        kwlen = kw.length;
	        varnames = this.func_code["co_varnames"];
	        numvarnames = varnames && varnames.length;
	        for (i = 0; i < kwlen; i += 2) {
	            // todo; make this a dict mapping name to offset
	            for (j = 0; j < numvarnames; ++j) {
	                if (kw[i] === varnames[j]) {
	                    break;
	                }
	            }
	            if (varnames && j !== numvarnames) {
	                if (j in args) {
	                    name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	                    throw new Sk.builtin.TypeError(name + "() got multiple values for keyword argument '" + kw[i] + "'");
	                }
	                args[j] = kw[i + 1];
	            } else if (expectskw) {
	                // build kwargs dict
	                kwargsarr.push(new Sk.builtin.str(kw[i]));
	                kwargsarr.push(kw[i + 1]);
	            } else {
	                name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	                throw new Sk.builtin.TypeError(name + "() got an unexpected keyword argument '" + kw[i] + "'");
	            }
	        }
	    }

	    if (this.func_closure) {
	        // todo; OK to modify?
	        if (this.func_code["co_varnames"]) {
	            // Make sure all default arguments are in args before adding closure
	            numargs = args.length;
	            numvarnames = this.func_code["co_varnames"].length;
	            for (i = numargs; i < numvarnames; i++) {
	                args.push(undefined);
	            }
	        }

	        args.push(this.func_closure);
	    }

	    if (expectskw) {
	        args.unshift(kwargsarr);
	    }

	    //print(JSON.stringify(args, null, 2));

	    // note: functions expect 'this' to be globals to avoid having to
	    // slice/unshift onto the main args
	    return this.func_code.apply(this.func_globals, args);
	};

	Sk.builtin.func.prototype.tp$getattr = function (key) {
	    return this[key];
	};
	Sk.builtin.func.prototype.tp$setattr = function (key, value) {
	    this[key] = value;
	};

	//todo; investigate why the other doesn't work
	//Sk.builtin.type.makeIntoTypeObj('function', Sk.builtin.func);
	Sk.builtin.func.prototype.ob$type = Sk.builtin.type.makeTypeObj("function", new Sk.builtin.func(null, null));

	Sk.builtin.func.prototype["$r"] = function () {
	    var name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	    return new Sk.builtin.str("<function " + name + ">");
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/seqtype.js ---- */ 

	/**
	 * @constructor
	 * Sk.builtin.seqtype
	 *
	 * @description
	 * Abstract class for Python sequence types.
	 *
	 * @extends {Sk.builtin.object}
	 *
	 * @return {undefined} Cannot instantiate a Sk.builtin.seqtype object
	 */
	Sk.builtin.seqtype = function () {

	    throw new Sk.builtin.ExternalError("Cannot instantiate abstract Sk.builtin.seqtype class");

	};

	Sk.abstr.setUpInheritance("SequenceType", Sk.builtin.seqtype, Sk.builtin.object);

	Sk.builtin.seqtype.sk$abstract = true;

	/**
	 * Python wrapper of `__len__` method.
	 *
	 * @name  __len__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__len__"] = new Sk.builtin.func(function (self) {

	    Sk.builtin.pyCheckArgs("__len__", arguments, 0, 0, false, true);

	    return new Sk.builtin.int_(self.sq$length());    

	});

	/**
	 * Python wrapper of `__iter__` method.
	 *
	 * @name  __iter__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__iter__"] = new Sk.builtin.func(function (self) {

	    Sk.builtin.pyCheckArgs("__iter__", arguments, 0, 0, false, true);

	    return self.tp$iter();

	});

	/**
	 * Python wrapper of `__contains__` method.
	 *
	 * @name  __contains__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__contains__"] = new Sk.builtin.func(function (self, item) {

	    Sk.builtin.pyCheckArgs("__contains__", arguments, 1, 1, false, true);

	    if (self.sq$contains(item)) {
	        return Sk.builtin.bool.true$;
	    } else {
	        return Sk.builtin.bool.false$;
	    }

	});

	/**
	 * Python wrapper of `__getitem__` method.
	 *
	 * @name  __getitem__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__getitem__"] = new Sk.builtin.func(function (self, key) {

	    Sk.builtin.pyCheckArgs("__getitem__", arguments, 1, 1, false, true);

	    return self.mp$subscript(key);

	});

	/**
	 * Python wrapper of `__add__` method.
	 *
	 * @name  __add__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__add__"] = new Sk.builtin.func(function (self, other) {

	    Sk.builtin.pyCheckArgs("__add__", arguments, 1, 1, false, true);

	    return self.sq$concat(other);

	});

	/**
	 * Python wrapper of `__mul__` method.
	 *
	 * @name  __mul__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__mul__"] = new Sk.builtin.func(function (self, n) {

	    Sk.builtin.pyCheckArgs("__mul__", arguments, 1, 1, false, true);

	    if (!Sk.misceval.isIndex(n)) {
	        throw new Sk.builtin.TypeError("can't multiply sequence by non-int of type '" + Sk.abstr.typeName(n) + "'");
	    }

	    return self.sq$repeat(n);

	});

	/**
	 * Python wrapper of `__rmul__` method.
	 *
	 * @name  __rmul__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__rmul__"] = new Sk.builtin.func(function (self, n) {

	    Sk.builtin.pyCheckArgs("__rmul__", arguments, 1, 1, false, true);

	    return self.sq$repeat(n);    

	});



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/str.js ---- */ 

	Sk.builtin.interned = {};

	/**
	 * @constructor
	 * @param {*} x
	 * @extends Sk.builtin.object
	 */
	Sk.builtin.str = function (x) {
	    var ret;
	    if (x === undefined) {
	        x = "";
	    }
	    if (x instanceof Sk.builtin.str) {
	        return x;
	    }
	    if (!(this instanceof Sk.builtin.str)) {
	        return new Sk.builtin.str(x);
	    }


	    // convert to js string
	    if (x === true) {
	        ret = "True";
	    } else if (x === false) {
	        ret = "False";
	    } else if ((x === null) || (x instanceof Sk.builtin.none)) {
	        ret = "None";
	    } else if (x instanceof Sk.builtin.bool) {
	        if (x.v) {
	            ret = "True";
	        } else {
	            ret = "False";
	        }
	    } else if (typeof x === "number") {
	        ret = x.toString();
	        if (ret === "Infinity") {
	            ret = "inf";
	        } else if (ret === "-Infinity") {
	            ret = "-inf";
	        }
	    } else if (typeof x === "string") {
	        ret = x;
	    } else if (x.tp$str !== undefined) {
	        ret = x.tp$str();
	        if (!(ret instanceof Sk.builtin.str)) {
	            throw new Sk.builtin.ValueError("__str__ didn't return a str");
	        }
	        return ret;
	    } else {
	        return Sk.misceval.objectRepr(x);
	    }

	    // interning required for strings in py
	    if (Sk.builtin.interned["1" + ret]) {
	        return Sk.builtin.interned["1" + ret];
	    }

	    this.__class__ = Sk.builtin.str;
	    this.v = ret;
	    this["v"] = this.v;
	    Sk.builtin.interned["1" + ret] = this;
	    return this;

	};
	goog.exportSymbol("Sk.builtin.str", Sk.builtin.str);

	Sk.abstr.setUpInheritance("str", Sk.builtin.str, Sk.builtin.seqtype);

	Sk.builtin.str.prototype.mp$subscript = function (index) {
	    var ret;
	    if (Sk.misceval.isIndex(index)) {
	        index = Sk.misceval.asIndex(index);
	        if (index < 0) {
	            index = this.v.length + index;
	        }
	        if (index < 0 || index >= this.v.length) {
	            throw new Sk.builtin.IndexError("string index out of range");
	        }
	        return new Sk.builtin.str(this.v.charAt(index));
	    } else if (index instanceof Sk.builtin.slice) {
	        ret = "";
	        index.sssiter$(this, function (i, wrt) {
	            if (i >= 0 && i < wrt.v.length) {
	                ret += wrt.v.charAt(i);
	            }
	        });
	        return new Sk.builtin.str(ret);
	    } else {
	        throw new Sk.builtin.TypeError("string indices must be integers, not " + Sk.abstr.typeName(index));
	    }
	};

	Sk.builtin.str.prototype.sq$length = function () {
	    return this.v.length;
	};
	Sk.builtin.str.prototype.sq$concat = function (other) {
	    var otypename;
	    if (!other || !Sk.builtin.checkString(other)) {
	        otypename = Sk.abstr.typeName(other);
	        throw new Sk.builtin.TypeError("cannot concatenate 'str' and '" + otypename + "' objects");
	    }
	    return new Sk.builtin.str(this.v + other.v);
	};
	Sk.builtin.str.prototype.nb$add = Sk.builtin.str.prototype.sq$concat;
	Sk.builtin.str.prototype.nb$inplace_add = Sk.builtin.str.prototype.sq$concat;
	Sk.builtin.str.prototype.sq$repeat = function (n) {
	    var i;
	    var ret;

	    if (!Sk.misceval.isIndex(n)) {
	        throw new Sk.builtin.TypeError("can't multiply sequence by non-int of type '" + Sk.abstr.typeName(n) + "'");
	    }

	    n = Sk.misceval.asIndex(n);
	    ret = "";
	    for (i = 0; i < n; ++i) {
	        ret += this.v;
	    }
	    return new Sk.builtin.str(ret);
	};
	Sk.builtin.str.prototype.nb$multiply = Sk.builtin.str.prototype.sq$repeat;
	Sk.builtin.str.prototype.nb$inplace_multiply = Sk.builtin.str.prototype.sq$repeat;
	Sk.builtin.str.prototype.sq$item = function () {
	    goog.asserts.fail();
	};
	Sk.builtin.str.prototype.sq$slice = function (i1, i2) {
	    i1 = Sk.builtin.asnum$(i1);
	    i2 = Sk.builtin.asnum$(i2);
	    if (i1 < 0) {
	        i1 = 0;
	    }
	    return new Sk.builtin.str(this.v.substr(i1, i2 - i1));
	};

	Sk.builtin.str.prototype.sq$contains = function (ob) {
	    if (!(ob instanceof Sk.builtin.str)) {
	        throw new Sk.builtin.TypeError("TypeError: 'In <string> requires string as left operand");
	    }
	    return this.v.indexOf(ob.v) != -1;
	};

	Sk.builtin.str.prototype.__iter__ = new Sk.builtin.func(function (self) {
	    return new Sk.builtin.str_iter_(self);
	});

	Sk.builtin.str.prototype.tp$iter = function () {
	    return new Sk.builtin.str_iter_(this);
	};

	Sk.builtin.str.prototype.tp$richcompare = function (other, op) {
	    if (!(other instanceof Sk.builtin.str)) {
	        return undefined;
	    }

	    switch (op) {
	        case "Lt":
	            return this.v < other.v;
	        case "LtE":
	            return this.v <= other.v;
	        case "Eq":
	            return this.v === other.v;
	        case "NotEq":
	            return this.v !== other.v;
	        case "Gt":
	            return this.v > other.v;
	        case "GtE":
	            return this.v >= other.v;
	        default:
	            goog.asserts.fail();
	    }
	};

	Sk.builtin.str.prototype["$r"] = function () {
	    // single is preferred
	    var ashex;
	    var c;
	    var i;
	    var ret;
	    var len;
	    var quote = "'";
	    //jshint ignore:start
	    if (this.v.indexOf("'") !== -1 && this.v.indexOf('"') === -1) {
	        quote = '"';
	    }
	    //jshint ignore:end
	    len = this.v.length;
	    ret = quote;
	    for (i = 0; i < len; ++i) {
	        c = this.v.charAt(i);
	        if (c === quote || c === "\\") {
	            ret += "\\" + c;
	        } else if (c === "\t") {
	            ret += "\\t";
	        } else if (c === "\n") {
	            ret += "\\n";
	        } else if (c === "\r") {
	            ret += "\\r";
	        } else if (c < " " || c >= 0x7f) {
	            ashex = c.charCodeAt(0).toString(16);
	            if (ashex.length < 2) {
	                ashex = "0" + ashex;
	            }
	            ret += "\\x" + ashex;
	        } else {
	            ret += c;
	        }
	    }
	    ret += quote;
	    return new Sk.builtin.str(ret);
	};


	Sk.builtin.str.re_escape_ = function (s) {
	    var c;
	    var i;
	    var ret = [];
	    var re = /^[A-Za-z0-9]+$/;
	    for (i = 0; i < s.length; ++i) {
	        c = s.charAt(i);

	        if (re.test(c)) {
	            ret.push(c);
	        } else {
	            if (c === "\\000") {
	                ret.push("\\000");
	            } else {
	                ret.push("\\" + c);
	            }
	        }
	    }
	    return ret.join("");
	};

	Sk.builtin.str.prototype["lower"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("lower", arguments, 1, 1);
	    return new Sk.builtin.str(self.v.toLowerCase());
	});

	Sk.builtin.str.prototype["upper"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("upper", arguments, 1, 1);
	    return new Sk.builtin.str(self.v.toUpperCase());
	});

	Sk.builtin.str.prototype["capitalize"] = new Sk.builtin.func(function (self) {
	    var i;
	    var cap;
	    var orig;
	    Sk.builtin.pyCheckArgs("capitalize", arguments, 1, 1);
	    orig = self.v;

	    if (orig.length === 0) {
	        return new Sk.builtin.str("");
	    }
	    cap = orig.charAt(0).toUpperCase();

	    for (i = 1; i < orig.length; i++) {
	        cap += orig.charAt(i).toLowerCase();
	    }
	    return new Sk.builtin.str(cap);
	});

	Sk.builtin.str.prototype["join"] = new Sk.builtin.func(function (self, seq) {
	    var it, i;
	    var arrOfStrs;
	    Sk.builtin.pyCheckArgs("join", arguments, 2, 2);
	    Sk.builtin.pyCheckType("seq", "iterable", Sk.builtin.checkIterable(seq));
	    arrOfStrs = [];
	    for (it = seq.tp$iter(), i = it.tp$iternext(); i !== undefined; i = it.tp$iternext()) {
	        if (i.constructor !== Sk.builtin.str) {
	            throw new Sk.builtin.TypeError("TypeError: sequence item " + arrOfStrs.length + ": expected string, " + typeof i + " found");
	        }
	        arrOfStrs.push(i.v);
	    }
	    return new Sk.builtin.str(arrOfStrs.join(self.v));
	});

	Sk.builtin.str.prototype["split"] = new Sk.builtin.func(function (self, on, howmany) {
	    var splits;
	    var index;
	    var match;
	    var result;
	    var s;
	    var str;
	    var regex;
	    Sk.builtin.pyCheckArgs("split", arguments, 1, 3);
	    if ((on === undefined) || (on instanceof Sk.builtin.none)) {
	        on = null;
	    }
	    if ((on !== null) && !Sk.builtin.checkString(on)) {
	        throw new Sk.builtin.TypeError("expected a string");
	    }
	    if ((on !== null) && on.v === "") {
	        throw new Sk.builtin.ValueError("empty separator");
	    }
	    if ((howmany !== undefined) && !Sk.builtin.checkInt(howmany)) {
	        throw new Sk.builtin.TypeError("an integer is required");
	    }

	    howmany = Sk.builtin.asnum$(howmany);
	    regex = /[\s]+/g;
	    str = self.v;
	    if (on === null) {
	        str = goog.string.trimLeft(str);
	    } else {
	        // Escape special characters in "on" so we can use a regexp
	        s = on.v.replace(/([.*+?=|\\\/()\[\]\{\}^$])/g, "\\$1");
	        regex = new RegExp(s, "g");
	    }

	    // This is almost identical to re.split,
	    // except how the regexp is constructed

	    result = [];
	    index = 0;
	    splits = 0;
	    while ((match = regex.exec(str)) != null) {
	        if (match.index === regex.lastIndex) {
	            // empty match
	            break;
	        }
	        result.push(new Sk.builtin.str(str.substring(index, match.index)));
	        index = regex.lastIndex;
	        splits += 1;
	        if (howmany && (splits >= howmany)) {
	            break;
	        }
	    }
	    str = str.substring(index);
	    if (on !== null || (str.length > 0)) {
	        result.push(new Sk.builtin.str(str));
	    }

	    return new Sk.builtin.list(result);
	});

	Sk.builtin.str.prototype["strip"] = new Sk.builtin.func(function (self, chars) {
	    var regex;
	    var pattern;
	    Sk.builtin.pyCheckArgs("strip", arguments, 1, 2);
	    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {
	        throw new Sk.builtin.TypeError("strip arg must be None or str");
	    }
	    if (chars === undefined) {
	        pattern = /^\s+|\s+$/g;
	    } else {
	        regex = Sk.builtin.str.re_escape_(chars.v);
	        pattern = new RegExp("^[" + regex + "]+|[" + regex + "]+$", "g");
	    }
	    return new Sk.builtin.str(self.v.replace(pattern, ""));
	});

	Sk.builtin.str.prototype["lstrip"] = new Sk.builtin.func(function (self, chars) {
	    var regex;
	    var pattern;
	    Sk.builtin.pyCheckArgs("lstrip", arguments, 1, 2);
	    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {
	        throw new Sk.builtin.TypeError("lstrip arg must be None or str");
	    }
	    if (chars === undefined) {
	        pattern = /^\s+/g;
	    } else {
	        regex = Sk.builtin.str.re_escape_(chars.v);
	        pattern = new RegExp("^[" + regex + "]+", "g");
	    }
	    return new Sk.builtin.str(self.v.replace(pattern, ""));
	});

	Sk.builtin.str.prototype["rstrip"] = new Sk.builtin.func(function (self, chars) {
	    var regex;
	    var pattern;
	    Sk.builtin.pyCheckArgs("rstrip", arguments, 1, 2);
	    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {
	        throw new Sk.builtin.TypeError("rstrip arg must be None or str");
	    }
	    if (chars === undefined) {
	        pattern = /\s+$/g;
	    } else {
	        regex = Sk.builtin.str.re_escape_(chars.v);
	        pattern = new RegExp("[" + regex + "]+$", "g");
	    }
	    return new Sk.builtin.str(self.v.replace(pattern, ""));
	});

	Sk.builtin.str.prototype["partition"] = new Sk.builtin.func(function (self, sep) {
	    var pos;
	    var sepStr;
	    Sk.builtin.pyCheckArgs("partition", arguments, 2, 2);
	    Sk.builtin.pyCheckType("sep", "string", Sk.builtin.checkString(sep));
	    sepStr = new Sk.builtin.str(sep);
	    pos = self.v.indexOf(sepStr.v);
	    if (pos < 0) {
	        return new Sk.builtin.tuple([self, Sk.builtin.str.$emptystr, Sk.builtin.str.$emptystr]);
	    }

	    return new Sk.builtin.tuple([
	        new Sk.builtin.str(self.v.substring(0, pos)),
	        sepStr,
	        new Sk.builtin.str(self.v.substring(pos + sepStr.v.length))]);
	});

	Sk.builtin.str.prototype["rpartition"] = new Sk.builtin.func(function (self, sep) {
	    var pos;
	    var sepStr;
	    Sk.builtin.pyCheckArgs("rpartition", arguments, 2, 2);
	    Sk.builtin.pyCheckType("sep", "string", Sk.builtin.checkString(sep));
	    sepStr = new Sk.builtin.str(sep);
	    pos = self.v.lastIndexOf(sepStr.v);
	    if (pos < 0) {
	        return new Sk.builtin.tuple([Sk.builtin.str.$emptystr, Sk.builtin.str.$emptystr, self]);
	    }

	    return new Sk.builtin.tuple([
	        new Sk.builtin.str(self.v.substring(0, pos)),
	        sepStr,
	        new Sk.builtin.str(self.v.substring(pos + sepStr.v.length))]);
	});

	Sk.builtin.str.prototype["count"] = new Sk.builtin.func(function (self, pat, start, end) {
	    var normaltext;
	    var ctl;
	    var slice;
	    var m;
	    Sk.builtin.pyCheckArgs("count", arguments, 2, 4);
	    if (!Sk.builtin.checkString(pat)) {
	        throw new Sk.builtin.TypeError("expected a character buffer object");
	    }
	    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }
	    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }

	    if (start === undefined) {
	        start = 0;
	    } else {
	        start = Sk.builtin.asnum$(start);
	        start = start >= 0 ? start : self.v.length + start;
	    }

	    if (end === undefined) {
	        end = self.v.length;
	    } else {
	        end = Sk.builtin.asnum$(end);
	        end = end >= 0 ? end : self.v.length + end;
	    }

	    normaltext = pat.v.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	    m = new RegExp(normaltext, "g");
	    slice = self.v.slice(start, end);
	    ctl = slice.match(m);
	    if (!ctl) {
	        return  new Sk.builtin.int_(0);
	    } else {
	        return new Sk.builtin.int_(ctl.length);
	    }

	});

	Sk.builtin.str.prototype["ljust"] = new Sk.builtin.func(function (self, len, fillchar) {
	    var newstr;
	    Sk.builtin.pyCheckArgs("ljust", arguments, 2, 3);
	    if (!Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepcted, got " + Sk.abstr.typeName(len));
	    }
	    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {
	        throw new Sk.builtin.TypeError("must be char, not " + Sk.abstr.typeName(fillchar));
	    }
	    if (fillchar === undefined) {
	        fillchar = " ";
	    } else {
	        fillchar = fillchar.v;
	    }
	    len = Sk.builtin.asnum$(len);
	    if (self.v.length >= len) {
	        return self;
	    } else {
	        newstr = Array.prototype.join.call({length: Math.floor(len - self.v.length) + 1}, fillchar);
	        return new Sk.builtin.str(self.v + newstr);
	    }
	});

	Sk.builtin.str.prototype["rjust"] = new Sk.builtin.func(function (self, len, fillchar) {
	    var newstr;
	    Sk.builtin.pyCheckArgs("rjust", arguments, 2, 3);
	    if (!Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepcted, got " + Sk.abstr.typeName(len));
	    }
	    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {
	        throw new Sk.builtin.TypeError("must be char, not " + Sk.abstr.typeName(fillchar));
	    }
	    if (fillchar === undefined) {
	        fillchar = " ";
	    } else {
	        fillchar = fillchar.v;
	    }
	    len = Sk.builtin.asnum$(len);
	    if (self.v.length >= len) {
	        return self;
	    } else {
	        newstr = Array.prototype.join.call({length: Math.floor(len - self.v.length) + 1}, fillchar);
	        return new Sk.builtin.str(newstr + self.v);
	    }

	});

	Sk.builtin.str.prototype["center"] = new Sk.builtin.func(function (self, len, fillchar) {
	    var newstr;
	    var newstr1;
	    Sk.builtin.pyCheckArgs("center", arguments, 2, 3);
	    if (!Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepcted, got " + Sk.abstr.typeName(len));
	    }
	    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {
	        throw new Sk.builtin.TypeError("must be char, not " + Sk.abstr.typeName(fillchar));
	    }
	    if (fillchar === undefined) {
	        fillchar = " ";
	    } else {
	        fillchar = fillchar.v;
	    }
	    len = Sk.builtin.asnum$(len);
	    if (self.v.length >= len) {
	        return self;
	    } else {
	        newstr1 = Array.prototype.join.call({length: Math.floor((len - self.v.length) / 2) + 1}, fillchar);
	        newstr = newstr1 + self.v + newstr1;
	        if (newstr.length < len) {
	            newstr = newstr + fillchar;
	        }
	        return new Sk.builtin.str(newstr);
	    }

	});

	Sk.builtin.str.prototype["find"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("find", arguments, 2, 4);
	    if (!Sk.builtin.checkString(tgt)) {
	        throw new Sk.builtin.TypeError("expected a character buffer object");
	    }
	    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }
	    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }

	    if (start === undefined) {
	        start = 0;
	    } else {
	        start = Sk.builtin.asnum$(start);
	        start = start >= 0 ? start : self.v.length + start;
	    }

	    if (end === undefined) {
	        end = self.v.length;
	    } else {
	        end = Sk.builtin.asnum$(end);
	        end = end >= 0 ? end : self.v.length + end;
	    }

	    idx = self.v.indexOf(tgt.v, start);
	    idx = ((idx >= start) && (idx < end)) ? idx : -1;

	    return new Sk.builtin.int_(idx);
	});

	Sk.builtin.str.prototype["index"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("index", arguments, 2, 4);
	    idx = Sk.misceval.callsim(self["find"], self, tgt, start, end);
	    if (Sk.builtin.asnum$(idx) === -1) {
	        throw new Sk.builtin.ValueError("substring not found");
	    }
	    return idx;
	});

	Sk.builtin.str.prototype["rfind"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("rfind", arguments, 2, 4);
	    if (!Sk.builtin.checkString(tgt)) {
	        throw new Sk.builtin.TypeError("expected a character buffer object");
	    }
	    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }
	    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }

	    if (start === undefined) {
	        start = 0;
	    } else {
	        start = Sk.builtin.asnum$(start);
	        start = start >= 0 ? start : self.v.length + start;
	    }

	    if (end === undefined) {
	        end = self.v.length;
	    } else {
	        end = Sk.builtin.asnum$(end);
	        end = end >= 0 ? end : self.v.length + end;
	    }

	    idx = self.v.lastIndexOf(tgt.v, end);
	    idx = (idx !== end) ? idx : self.v.lastIndexOf(tgt.v, end - 1);
	    idx = ((idx >= start) && (idx < end)) ? idx : -1;

	    return new Sk.builtin.int_(idx);
	});

	Sk.builtin.str.prototype["rindex"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("rindex", arguments, 2, 4);
	    idx = Sk.misceval.callsim(self["rfind"], self, tgt, start, end);
	    if (Sk.builtin.asnum$(idx) === -1) {
	        throw new Sk.builtin.ValueError("substring not found");
	    }
	    return idx;
	});

	Sk.builtin.str.prototype["startswith"] = new Sk.builtin.func(function (self, tgt) {
	    Sk.builtin.pyCheckArgs("startswith", arguments, 2, 2);
	    Sk.builtin.pyCheckType("tgt", "string", Sk.builtin.checkString(tgt));
	    return new Sk.builtin.bool( self.v.indexOf(tgt.v) === 0);
	});

	// http://stackoverflow.com/questions/280634/endswith-in-javascript
	Sk.builtin.str.prototype["endswith"] = new Sk.builtin.func(function (self, tgt) {
	    Sk.builtin.pyCheckArgs("endswith", arguments, 2, 2);
	    Sk.builtin.pyCheckType("tgt", "string", Sk.builtin.checkString(tgt));
	    return new Sk.builtin.bool( self.v.indexOf(tgt.v, self.v.length - tgt.v.length) !== -1);
	});

	Sk.builtin.str.prototype["replace"] = new Sk.builtin.func(function (self, oldS, newS, count) {
	    var c;
	    var patt;
	    Sk.builtin.pyCheckArgs("replace", arguments, 3, 4);
	    Sk.builtin.pyCheckType("oldS", "string", Sk.builtin.checkString(oldS));
	    Sk.builtin.pyCheckType("newS", "string", Sk.builtin.checkString(newS));
	    if ((count !== undefined) && !Sk.builtin.checkInt(count)) {
	        throw new Sk.builtin.TypeError("integer argument expected, got " +
	            Sk.abstr.typeName(count));
	    }
	    count = Sk.builtin.asnum$(count);
	    patt = new RegExp(Sk.builtin.str.re_escape_(oldS.v), "g");

	    if ((count === undefined) || (count < 0)) {
	        return new Sk.builtin.str(self.v.replace(patt, newS.v));
	    }

	    c = 0;

	    function replacer (match) {
	        c++;
	        if (c <= count) {
	            return newS.v;
	        }
	        return match;
	    }

	    return new Sk.builtin.str(self.v.replace(patt, replacer));
	});

	Sk.builtin.str.prototype["zfill"] = new Sk.builtin.func(function (self, len) {
	    var str = self.v;
	    var ret;
	    var zeroes;
	    var offset;
	    var pad = "";

	    Sk.builtin.pyCheckArgs("zfill", arguments, 2, 2);
	    if (! Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepected, got " + Sk.abstr.typeName(len));
	    }

	    // figure out how many zeroes are needed to make the proper length
	    zeroes = len.v - str.length;
	    // offset by 1 if there is a +/- at the beginning of the string
	    offset = (str[0] === "+" || str[0] === "-") ? 1 : 0;
	    for(var i = 0; i < zeroes; i++){
	        pad += "0";
	    }
	    // combine the string and the zeroes
	    ret = str.substr(0, offset) + pad + str.substr(offset);
	    return new Sk.builtin.str(ret);


	});

	Sk.builtin.str.prototype["isdigit"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isdigit", arguments, 1, 1);
	    return new Sk.builtin.bool( /^\d+$/.test(self.v));
	});

	Sk.builtin.str.prototype["isspace"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isspace", arguments, 1, 1);
	    return new Sk.builtin.bool( /^\s+$/.test(self.v));
	});


	Sk.builtin.str.prototype["expandtabs"] = new Sk.builtin.func(function (self, tabsize) {
	    // var input = self.v;
	    // var expanded = "";
	    // var split;
	    // var spacestr = "";
	    // var spacerem;


	    var spaces;
	    var expanded;

	    Sk.builtin.pyCheckArgs("expandtabs", arguments, 1, 2);


	    if ((tabsize !== undefined) && ! Sk.builtin.checkInt(tabsize)) {
	        throw new Sk.builtin.TypeError("integer argument exepected, got " + Sk.abstr.typeName(tabsize));
	    }
	    if (tabsize === undefined) {
	        tabsize = 8;
	    } else {
	        tabsize = Sk.builtin.asnum$(tabsize);
	    }

	    spaces = (new Array(tabsize + 1)).join(" ");
	    expanded = self.v.replace(/([^\r\n\t]*)\t/g, function(a, b) {
	        return b + spaces.slice(b.length % tabsize);
	    });
	    return new Sk.builtin.str(expanded);
	});

	Sk.builtin.str.prototype["swapcase"] = new Sk.builtin.func(function (self) {
	    var ret;
	    Sk.builtin.pyCheckArgs("swapcase", arguments, 1, 1);


	    ret = self.v.replace(/[a-z]/gi, function(c) {
	        var lc = c.toLowerCase();
	        return lc === c ? c.toUpperCase() : lc;
	    });

	    return new Sk.builtin.str(ret);
	});

	Sk.builtin.str.prototype["splitlines"] = new Sk.builtin.func(function (self, keepends) {
	    var data = self.v;
	    var i = 0;
	    var j = i;
	    var selflen = self.v.length;
	    var strs_w = [];
	    var ch;
	    var eol;
	    var sol = 0;
	    var slice;
	    Sk.builtin.pyCheckArgs("splitlines", arguments, 1, 2);
	    if ((keepends !== undefined) && ! Sk.builtin.checkBool(keepends)) {
	        throw new Sk.builtin.TypeError("boolean argument expected, got " + Sk.abstr.typeName(keepends));
	    }
	    if (keepends === undefined) {
	        keepends = false;
	    } else {
	        keepends = keepends.v;
	    }


	    for (i = 0; i < selflen; i ++) {
	        ch = data.charAt(i);
	        if (data.charAt(i + 1) === "\n" && ch === "\r") {
	            eol = i + 2;
	            slice = data.slice(sol, eol);
	            if (! keepends) {
	                slice = slice.replace(/(\r|\n)/g, "");
	            }
	            strs_w.push(new Sk.builtin.str(slice));
	            sol = eol;
	        } else if ((ch === "\n" && data.charAt(i - 1) !== "\r") || ch === "\r") {
	            eol = i + 1;
	            slice = data.slice(sol, eol);
	            if (! keepends) {
	                slice = slice.replace(/(\r|\n)/g, "");
	            }
	            strs_w.push(new Sk.builtin.str(slice));
	            sol = eol;
	        }

	    }
	    if (sol < selflen) {
	        eol = selflen;
	        slice = data.slice(sol, eol);
	        if (! keepends) {
	            slice = slice.replace(/(\r|\n)/g, "");
	        }
	        strs_w.push(new Sk.builtin.str(slice));
	    }
	    return new Sk.builtin.list(strs_w);
	});

	Sk.builtin.str.prototype["title"] = new Sk.builtin.func(function (self) {
	    var ret;

	    Sk.builtin.pyCheckArgs("title", arguments, 1, 1);

	    ret = self.v.replace(/[a-z][a-z]*/gi, function(str) {
	        return str[0].toUpperCase() + str.substr(1).toLowerCase();
	    });

	    return new Sk.builtin.str(ret);
	});

	Sk.builtin.str.prototype["isalpha"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isalpha", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && goog.string.isAlpha(self.v));
	});

	Sk.builtin.str.prototype["isalnum"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isalnum", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && goog.string.isAlphaNumeric(self.v));
	});

	// does not account for unicode numeric values
	Sk.builtin.str.prototype["isnumeric"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isnumeric", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && goog.string.isNumeric(self.v));
	});

	Sk.builtin.str.prototype["islower"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("islower", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && /[a-z]/.test(self.v) && !/[A-Z]/.test(self.v));
	});

	Sk.builtin.str.prototype["isupper"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isupper", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && !/[a-z]/.test(self.v) && /[A-Z]/.test(self.v));
	});

	Sk.builtin.str.prototype["istitle"] = new Sk.builtin.func(function (self) {
	    // Comparing to str.title() seems the most intuitive thing, but it fails on "",
	    // Other empty-ish strings with no change.
	    var input = self.v;
	    var cased = false;
	    var previous_is_cased = false;
	    var pos;
	    var ch;
	    Sk.builtin.pyCheckArgs("istitle", arguments, 1, 1);
	    for (pos = 0; pos < input.length; pos ++) {
	        ch = input.charAt(pos);
	        if (! /[a-z]/.test(ch) && /[A-Z]/.test(ch)) {
	            if (previous_is_cased) {
	                return new Sk.builtin.bool( false);
	            }
	            previous_is_cased = true;
	            cased = true;
	        } else if (/[a-z]/.test(ch) && ! /[A-Z]/.test(ch)) {
	            if (! previous_is_cased) {
	                return new Sk.builtin.bool( false);
	            }
	            cased = true;
	        } else {
	            previous_is_cased = false;
	        }
	    }
	    return new Sk.builtin.bool( cased);
	});

	Sk.builtin.str.prototype.nb$remainder = function (rhs) {
	    // % format op. rhs can be a value, a tuple, or something with __getitem__ (dict)

	    // From http://docs.python.org/library/stdtypes.html#string-formatting the
	    // format looks like:
	    // 1. The '%' character, which marks the start of the specifier.
	    // 2. Mapping key (optional), consisting of a parenthesised sequence of characters (for example, (somename)).
	    // 3. Conversion flags (optional), which affect the result of some conversion types.
	    // 4. Minimum field width (optional). If specified as an '*' (asterisk), the actual width is read from the next
	    // element of the tuple in values, and the object to convert comes after the minimum field width and optional
	    // precision. 5. Precision (optional), given as a '.' (dot) followed by the precision. If specified as '*' (an
	    // asterisk), the actual width is read from the next element of the tuple in values, and the value to convert comes
	    // after the precision. 6. Length modifier (optional). 7. Conversion type.  length modifier is ignored

	    var ret;
	    var replFunc;
	    var index;
	    var regex;
	    if (rhs.constructor !== Sk.builtin.tuple && (rhs.mp$subscript === undefined || rhs.constructor === Sk.builtin.str)) {
	        rhs = new Sk.builtin.tuple([rhs]);
	    }

	    // general approach is to use a regex that matches the format above, and
	    // do an re.sub with a function as replacement to make the subs.

	    //           1 2222222222222222   33333333   444444444   5555555555555  66666  777777777777777777
	    regex = /%(\([a-zA-Z0-9]+\))?([#0 +\-]+)?(\*|[0-9]+)?(\.(\*|[0-9]+))?[hlL]?([diouxXeEfFgGcrs%])/g;
	    index = 0;
	    replFunc = function (substring, mappingKey, conversionFlags, fieldWidth, precision, precbody, conversionType) {
	        var result;
	        var convName;
	        var convValue;
	        var base;
	        var r;
	        var mk;
	        var value;
	        var handleWidth;
	        var formatNumber;
	        var alternateForm;
	        var precedeWithSign;
	        var blankBeforePositive;
	        var leftAdjust;
	        var zeroPad;
	        var i;
	        fieldWidth = Sk.builtin.asnum$(fieldWidth);
	        precision = Sk.builtin.asnum$(precision);

	        if (mappingKey === undefined || mappingKey === "") {
	            i = index++;
	        } // ff passes '' not undef for some reason

	        if (precision === "") { // ff passes '' here aswell causing problems with G,g, etc.
	            precision = undefined;
	        }

	        zeroPad = false;
	        leftAdjust = false;
	        blankBeforePositive = false;
	        precedeWithSign = false;
	        alternateForm = false;
	        if (conversionFlags) {
	            if (conversionFlags.indexOf("-") !== -1) {
	                leftAdjust = true;
	            } else if (conversionFlags.indexOf("0") !== -1) {
	                zeroPad = true;
	            }

	            if (conversionFlags.indexOf("+") !== -1) {
	                precedeWithSign = true;
	            } else if (conversionFlags.indexOf(" ") !== -1) {
	                blankBeforePositive = true;
	            }

	            alternateForm = conversionFlags.indexOf("#") !== -1;
	        }

	        if (precision) {
	            precision = parseInt(precision.substr(1), 10);
	        }

	        formatNumber = function (n, base) {
	            var precZeroPadded;
	            var prefix;
	            var didSign;
	            var neg;
	            var r;
	            var j;
	            base = Sk.builtin.asnum$(base);
	            neg = false;
	            didSign = false;
	            if (typeof n === "number") {
	                if (n < 0) {
	                    n = -n;
	                    neg = true;
	                }
	                r = n.toString(base);
	            } else if (n instanceof Sk.builtin.float_) {
	                r = n.str$(base, false);
	                if (r.length > 2 && r.substr(-2) === ".0") {
	                    r = r.substr(0, r.length - 2);
	                }
	                neg = n.nb$isnegative();
	            } else if (n instanceof Sk.builtin.int_) {
	                r = n.str$(base, false);
	                neg = n.nb$isnegative();
	            } else if (n instanceof Sk.builtin.lng) {
	                r = n.str$(base, false);
	                neg = n.nb$isnegative();	//	neg = n.size$ < 0;	RNL long.js change
	            }

	            goog.asserts.assert(r !== undefined, "unhandled number format");

	            precZeroPadded = false;

	            if (precision) {
	                //print("r.length",r.length,"precision",precision);
	                for (j = r.length; j < precision; ++j) {
	                    r = "0" + r;
	                    precZeroPadded = true;
	                }
	            }

	            prefix = "";

	            if (neg) {
	                prefix = "-";
	            } else if (precedeWithSign) {
	                prefix = "+" + prefix;
	            } else if (blankBeforePositive) {
	                prefix = " " + prefix;
	            }

	            if (alternateForm) {
	                if (base === 16) {
	                    prefix += "0x";
	                } else if (base === 8 && !precZeroPadded && r !== "0") {
	                    prefix += "0";
	                }
	            }

	            return [prefix, r];
	        };

	        handleWidth = function (args) {
	            var totLen;
	            var prefix = args[0];
	            var r = args[1];
	            var j;
	            if (fieldWidth) {
	                fieldWidth = parseInt(fieldWidth, 10);
	                totLen = r.length + prefix.length;
	                if (zeroPad) {
	                    for (j = totLen; j < fieldWidth; ++j) {
	                        r = "0" + r;
	                    }
	                } else if (leftAdjust) {
	                    for (j = totLen; j < fieldWidth; ++j) {
	                        r = r + " ";
	                    }
	                } else {
	                    for (j = totLen; j < fieldWidth; ++j) {
	                        prefix = " " + prefix;
	                    }
	                }
	            }
	            return prefix + r;
	        };

	        //print("Rhs:",rhs, "ctor", rhs.constructor);
	        if (rhs.constructor === Sk.builtin.tuple) {
	            value = rhs.v[i];
	        } else if (rhs.mp$subscript !== undefined && mappingKey !== undefined) {
	            mk = mappingKey.substring(1, mappingKey.length - 1);
	            //print("mk",mk);
	            value = rhs.mp$subscript(new Sk.builtin.str(mk));
	        } else if (rhs.constructor === Sk.builtin.dict || rhs.constructor === Sk.builtin.list) {
	            // new case where only one argument is provided
	            value = rhs;
	        } else {
	            throw new Sk.builtin.AttributeError(rhs.tp$name + " instance has no attribute 'mp$subscript'");
	        }
	        base = 10;
	        if (conversionType === "d" || conversionType === "i") {
	            return handleWidth(formatNumber(value, 10));
	        } else if (conversionType === "o") {
	            return handleWidth(formatNumber(value, 8));
	        } else if (conversionType === "x") {
	            return handleWidth(formatNumber(value, 16));
	        } else if (conversionType === "X") {
	            return handleWidth(formatNumber(value, 16)).toUpperCase();
	        } else if (conversionType === "f" || conversionType === "F" || conversionType === "e" || conversionType === "E" || conversionType === "g" || conversionType === "G") {
	            convValue = Sk.builtin.asnum$(value);
	            if (typeof convValue === "string") {
	                convValue = Number(convValue);
	            }
	            if (convValue === Infinity) {
	                return "inf";
	            }
	            if (convValue === -Infinity) {
	                return "-inf";
	            }
	            if (isNaN(convValue)) {
	                return "nan";
	            }
	            convName = ["toExponential", "toFixed", "toPrecision"]["efg".indexOf(conversionType.toLowerCase())];
	            if (precision === undefined || precision === "") {
	                if (conversionType === "e" || conversionType === "E") {
	                    precision = 6;
	                } else if (conversionType === "f" || conversionType === "F") {
	                    precision = 7;
	                }
	            }
	            result = (convValue)[convName](precision); // possible loose of negative zero sign

	            // apply sign to negative zeros, floats only!
	            if(Sk.builtin.checkFloat(value)) {
	                if(convValue === 0 && 1/convValue === -Infinity) {
	                    result = "-" + result; // add sign for zero
	                }
	            }

	            if ("EFG".indexOf(conversionType) !== -1) {
	                result = result.toUpperCase();
	            }
	            return handleWidth(["", result]);
	        } else if (conversionType === "c") {
	            if (typeof value === "number") {
	                return String.fromCharCode(value);
	            } else if (value instanceof Sk.builtin.int_) {
	                return String.fromCharCode(value.v);
	            } else if (value instanceof Sk.builtin.float_) {
	                return String.fromCharCode(value.v);
	            } else if (value instanceof Sk.builtin.lng) {
	                return String.fromCharCode(value.str$(10, false)[0]);
	            } else if (value.constructor === Sk.builtin.str) {
	                return value.v.substr(0, 1);
	            } else {
	                throw new Sk.builtin.TypeError("an integer is required");
	            }
	        } else if (conversionType === "r") {
	            r = Sk.builtin.repr(value);
	            if (precision) {
	                return r.v.substr(0, precision);
	            }
	            return r.v;
	        } else if (conversionType === "s") {
	            r = new Sk.builtin.str(value);
	            if (precision) {
	                return r.v.substr(0, precision);
	            }
	            if(fieldWidth) {
	                r.v = handleWidth([" ", r.v]);
	            }
	            return r.v;
	        } else if (conversionType === "%") {
	            return "%";
	        }
	    };

	    ret = this.v.replace(regex, replFunc);
	    return new Sk.builtin.str(ret);
	};

	/**
	 * @constructor
	 * @param {Object} obj
	 */
	Sk.builtin.str_iter_ = function (obj) {
	    if (!(this instanceof Sk.builtin.str_iter_)) {
	        return new Sk.builtin.str_iter_(obj);
	    }
	    this.$index = 0;
	    this.$obj = obj.v.slice();
	    this.sq$length = this.$obj.length;
	    this.tp$iter = this;
	    this.tp$iternext = function () {
	        if (this.$index >= this.sq$length) {
	            return undefined;
	        }
	        return new Sk.builtin.str(this.$obj.substr(this.$index++, 1));
	    };
	    this.$r = function () {
	        return new Sk.builtin.str("iterator");
	    };
	    return this;
	};

	Sk.abstr.setUpInheritance("iterator", Sk.builtin.str_iter_, Sk.builtin.object);

	Sk.builtin.str_iter_.prototype.__class__ = Sk.builtin.str_iter_;

	Sk.builtin.str_iter_.prototype.__iter__ = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("__iter__", arguments, 0, 0, true, false);
	    return self;
	});

	Sk.builtin.str_iter_.prototype["next"] = new Sk.builtin.func(function (self) {
	    var ret = self.tp$iternext();
	    if (ret === undefined) {
	        throw new Sk.builtin.StopIteration();
	    }
	    return ret;
	});



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/tokenize.js ---- */ 

	/*
	 * This is a port of tokenize.py by Ka-Ping Yee.
	 *
	 * each call to readline should return one line of input as a string, or
	 * undefined if it's finished.
	 *
	 * callback is called for each token with 5 args:
	 * 1. the token type
	 * 2. the token string
	 * 3. [ start_row, start_col ]
	 * 4. [ end_row, end_col ]
	 * 5. logical line where the token was found, including continuation lines
	 *
	 * callback can return true to abort.
	 *
	 */

	/**
	 * @constructor
	 */
	Sk.Tokenizer = function (filename, interactive, callback) {
	    this.filename = filename;
	    this.callback = callback;
	    this.lnum = 0;
	    this.parenlev = 0;
	    this.parenstack = [];
	    this.continued = false;
	    this.namechars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
	    this.numchars = "0123456789";
	    this.contstr = "";
	    this.needcont = false;
	    this.contline = undefined;
	    this.indents = [0];
	    this.endprog = /.*/;
	    this.strstart = [-1, -1];
	    this.interactive = interactive;
	    this.doneFunc = function () {
	        var i;
	        for (i = 1; i < this.indents.length; ++i) // pop remaining indent levels
	        {
	            if (this.callback(Sk.Tokenizer.Tokens.T_DEDENT, "", [this.lnum, 0], [this.lnum, 0], "")) {
	                return "done";
	            }
	        }
	        if (this.callback(Sk.Tokenizer.Tokens.T_ENDMARKER, "", [this.lnum, 0], [this.lnum, 0], "")) {
	            return "done";
	        }

	        return "failed";
	    };

	};

	/**
	 * @enum {number}
	 */
	Sk.Tokenizer.Tokens = {
	    T_ENDMARKER       : 0,
	    T_NAME            : 1,
	    T_NUMBER          : 2,
	    T_STRING          : 3,
	    T_NEWLINE         : 4,
	    T_INDENT          : 5,
	    T_DEDENT          : 6,
	    T_LPAR            : 7,
	    T_RPAR            : 8,
	    T_LSQB            : 9,
	    T_RSQB            : 10,
	    T_COLON           : 11,
	    T_COMMA           : 12,
	    T_SEMI            : 13,
	    T_PLUS            : 14,
	    T_MINUS           : 15,
	    T_STAR            : 16,
	    T_SLASH           : 17,
	    T_VBAR            : 18,
	    T_AMPER           : 19,
	    T_LESS            : 20,
	    T_GREATER         : 21,
	    T_EQUAL           : 22,
	    T_DOT             : 23,
	    T_PERCENT         : 24,
	    T_BACKQUOTE       : 25,
	    T_LBRACE          : 26,
	    T_RBRACE          : 27,
	    T_EQEQUAL         : 28,
	    T_NOTEQUAL        : 29,
	    T_LESSEQUAL       : 30,
	    T_GREATEREQUAL    : 31,
	    T_TILDE           : 32,
	    T_CIRCUMFLEX      : 33,
	    T_LEFTSHIFT       : 34,
	    T_RIGHTSHIFT      : 35,
	    T_DOUBLESTAR      : 36,
	    T_PLUSEQUAL       : 37,
	    T_MINEQUAL        : 38,
	    T_STAREQUAL       : 39,
	    T_SLASHEQUAL      : 40,
	    T_PERCENTEQUAL    : 41,
	    T_AMPEREQUAL      : 42,
	    T_VBAREQUAL       : 43,
	    T_CIRCUMFLEXEQUAL : 44,
	    T_LEFTSHIFTEQUAL  : 45,
	    T_RIGHTSHIFTEQUAL : 46,
	    T_DOUBLESTAREQUAL : 47,
	    T_DOUBLESLASH     : 48,
	    T_DOUBLESLASHEQUAL: 49,
	    T_AT              : 50,
	    T_OP              : 51,
	    T_COMMENT         : 52,
	    T_NL              : 53,
	    T_RARROW          : 54,
	    T_ERRORTOKEN      : 55,
	    T_N_TOKENS        : 56,
	    T_NT_OFFSET       : 256
	};

	/** @param {...*} x */
	function group (x) {
	    var args = Array.prototype.slice.call(arguments);
	    return "(" + args.join("|") + ")";
	}

	/** @param {...*} x */
	function any (x) {
	    return group.apply(null, arguments) + "*";
	}

	/** @param {...*} x */
	function maybe (x) {
	    return group.apply(null, arguments) + "?";
	}

	/* we have to use string and ctor to be able to build patterns up. + on /.../
	 * does something strange. */
	var Whitespace = "[ \\f\\t]*";
	var Comment_ = "#[^\\r\\n]*";
	var Ident = "[a-zA-Z_]\\w*";

	var Binnumber = "0[bB][01]*";
	var Hexnumber = "0[xX][\\da-fA-F]*[lL]?";
	var Octnumber = "0[oO]?[0-7]*[lL]?";
	var Decnumber = "[1-9]\\d*[lL]?";
	var Intnumber = group(Binnumber, Hexnumber, Octnumber, Decnumber);

	var Exponent = "[eE][-+]?\\d+";
	var Pointfloat = group("\\d+\\.\\d*", "\\.\\d+") + maybe(Exponent);
	var Expfloat = "\\d+" + Exponent;
	var Floatnumber = group(Pointfloat, Expfloat);
	var Imagnumber = group("\\d+[jJ]", Floatnumber + "[jJ]");
	var Number_ = group(Imagnumber, Floatnumber, Intnumber);

	// tail end of ' string
	var Single = "^[^'\\\\]*(?:\\\\.[^'\\\\]*)*'";
	// tail end of " string
	var Double_ = '^[^"\\\\]*(?:\\\\.[^"\\\\]*)*"';
	// tail end of ''' string
	var Single3 = "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''";
	// tail end of """ string
	var Double3 = '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""';
	var Triple = group("[ubUB]?[rR]?'''", '[ubUB]?[rR]?"""');
	var String_ = group("[uU]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'",
	    '[uU]?[rR]?"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*"');

	// Because of leftmost-then-longest match semantics, be sure to put the
	// longest operators first (e.g., if = came before ==, == would get
	// recognized as two instances of =).
	var Operator = group("\\*\\*=?", ">>=?", "<<=?", "<>", "!=",
	    "//=?", "->",
	    "[+\\-*/%&|^=<>]=?",
	    "~");

	var Bracket = "[\\][(){}]";
	var Special = group("\\r?\\n", "[:;.,`@]");
	var Funny = group(Operator, Bracket, Special);

	var ContStr = group("[uUbB]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*" +
	        group("'", "\\\\\\r?\\n"),
	        "[uUbB]?[rR]?\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*" +
	        group("\"", "\\\\\\r?\\n"));
	var PseudoExtras = group("\\\\\\r?\\n", Comment_, Triple);
	// Need to prefix with "^" as we only want to match what's next
	var PseudoToken = "^" + group(PseudoExtras, Number_, Funny, ContStr, Ident);


	var triple_quoted = {
	    "'''"  : true, '"""': true,
	    "r'''" : true, 'r"""': true, "R'''": true, 'R"""': true,
	    "u'''" : true, 'u"""': true, "U'''": true, 'U"""': true,
	    "b'''" : true, 'b"""': true, "B'''": true, 'B"""': true,
	    "ur'''": true, 'ur"""': true, "Ur'''": true, 'Ur"""': true,
	    "uR'''": true, 'uR"""': true, "UR'''": true, 'UR"""': true,
	    "br'''": true, 'br"""': true, "Br'''": true, 'Br"""': true,
	    "bR'''": true, 'bR"""': true, "BR'''": true, 'BR"""': true
	};

	var single_quoted = {
	    "'"  : true, '"': true,
	    "r'" : true, 'r"': true, "R'": true, 'R"': true,
	    "u'" : true, 'u"': true, "U'": true, 'U"': true,
	    "b'" : true, 'b"': true, "B'": true, 'B"': true,
	    "ur'": true, 'ur"': true, "Ur'": true, 'Ur"': true,
	    "uR'": true, 'uR"': true, "UR'": true, 'UR"': true,
	    "br'": true, 'br"': true, "Br'": true, 'Br"': true,
	    "bR'": true, 'bR"': true, "BR'": true, 'BR"': true
	};

	// hack to make closure keep those objects. not sure what a better way is.
	(function () {
	    var k;
	    for (k in triple_quoted) {
	    }
	    for (k in single_quoted) {
	    }
	}());


	var tabsize = 8;

	function contains (a, obj) {
	    var i = a.length;
	    while (i--) {
	        if (a[i] === obj) {
	            return true;
	        }
	    }
	    return false;
	}

	function rstrip (input, what) {
	    var i;
	    for (i = input.length; i > 0; --i) {
	        if (what.indexOf(input.charAt(i - 1)) === -1) {
	            break;
	        }
	    }
	    return input.substring(0, i);
	}

	Sk.Tokenizer.prototype.generateTokens = function (line) {
	    var nl_pos;
	    var newl;
	    var initial;
	    var token;
	    var epos;
	    var spos;
	    var start;
	    var pseudomatch;
	    var capos;
	    var comment_token;
	    var endmatch, pos, column, end, max;


	    // bnm - Move these definitions in this function otherwise test state is preserved between
	    // calls on single3prog and double3prog causing weird errors with having multiple instances
	    // of triple quoted strings in the same program.

	    var pseudoprog = new RegExp(PseudoToken);
	    var single3prog = new RegExp(Single3, "g");
	    var double3prog = new RegExp(Double3, "g");

	    var endprogs = {     "'": new RegExp(Single, "g"), "\"": new RegExp(Double_, "g"),
	        "'''"               : single3prog, '"""': double3prog,
	        "r'''"              : single3prog, 'r"""': double3prog,
	        "u'''"              : single3prog, 'u"""': double3prog,
	        "b'''"              : single3prog, 'b"""': double3prog,
	        "ur'''"             : single3prog, 'ur"""': double3prog,
	        "br'''"             : single3prog, 'br"""': double3prog,
	        "R'''"              : single3prog, 'R"""': double3prog,
	        "U'''"              : single3prog, 'U"""': double3prog,
	        "B'''"              : single3prog, 'B"""': double3prog,
	        "uR'''"             : single3prog, 'uR"""': double3prog,
	        "Ur'''"             : single3prog, 'Ur"""': double3prog,
	        "UR'''"             : single3prog, 'UR"""': double3prog,
	        "bR'''"             : single3prog, 'bR"""': double3prog,
	        "Br'''"             : single3prog, 'Br"""': double3prog,
	        "BR'''"             : single3prog, 'BR"""': double3prog,
	        'r'                 : null, 'R': null,
	        'u'                 : null, 'U': null,
	        'b'                 : null, 'B': null
	    };


	    if (!line) {
	        line = '';
	    }
	    //print("LINE:'"+line+"'");

	    this.lnum += 1;
	    pos = 0;
	    max = line.length;

	    if (this.contstr.length > 0) {
	        if (!line) {
	            throw new Sk.builtin.SyntaxError("EOF in multi-line string", this.filename, this.strstart[0], this.strstart[1], {
	                kind: "STRING_EOF",
	                line: this.contline
	            });
	        }
	        this.endprog.lastIndex = 0;
	        endmatch = this.endprog.test(line);
	        if (endmatch) {
	            pos = end = this.endprog.lastIndex;
	            if (this.callback(Sk.Tokenizer.Tokens.T_STRING, this.contstr + line.substring(0, end),
	                this.strstart, [this.lnum, end], this.contline + line)) {
	                return 'done';
	            }
	            this.contstr = '';
	            this.needcont = false;
	            this.contline = undefined;
	        }
	        else if (this.needcont && line.substring(line.length - 2) !== "\\\n" && line.substring(line.length - 3) !== "\\\r\n") {
	            if (this.callback(Sk.Tokenizer.Tokens.T_ERRORTOKEN, this.contstr + line,
	                this.strstart, [this.lnum, line.length], this.contline)) {
	                return 'done';
	            }
	            this.contstr = '';
	            this.contline = undefined;
	            return false;
	        }
	        else {
	            this.contstr += line;
	            this.contline = this.contline + line;
	            return false;
	        }
	    }
	    else if (this.parenlev === 0 && !this.continued) {
	        if (!line) {
	            return this.doneFunc();
	        }
	        column = 0;
	        while (pos < max) {
	            if (line.charAt(pos) === ' ') {
	                column += 1;
	            }
	            else if (line.charAt(pos) === '\t') {
	                column = (column / tabsize + 1) * tabsize;
	            }
	            else if (line.charAt(pos) === '\f') {
	                column = 0;
	            }
	            else {
	                break;
	            }
	            pos = pos + 1;
	        }
	        if (pos === max) {
	            return this.doneFunc();
	        }

	        if ("#\r\n".indexOf(line.charAt(pos)) !== -1) // skip comments or blank lines
	        {
	            if (line.charAt(pos) === '#') {
	                comment_token = rstrip(line.substring(pos), '\r\n');
	                nl_pos = pos + comment_token.length;
	                if (this.callback(Sk.Tokenizer.Tokens.T_COMMENT, comment_token,
	                    [this.lnum, pos], [this.lnum, pos + comment_token.length], line)) {
	                    return 'done';
	                }
	                //print("HERE:1");
	                if (this.callback(Sk.Tokenizer.Tokens.T_NL, line.substring(nl_pos),
	                    [this.lnum, nl_pos], [this.lnum, line.length], line)) {
	                    return 'done';
	                }
	                return false;
	            }
	            else {
	                //print("HERE:2");
	                if (this.callback(Sk.Tokenizer.Tokens.T_NL, line.substring(pos),
	                    [this.lnum, pos], [this.lnum, line.length], line)) {
	                    return 'done';
	                }
	                if (!this.interactive) {
	                    return false;
	                }
	            }
	        }

	        if (column > this.indents[this.indents.length - 1]) // count indents or dedents
	        {
	            this.indents.push(column);
	            if (this.callback(Sk.Tokenizer.Tokens.T_INDENT, line.substring(0, pos), [this.lnum, 0], [this.lnum, pos], line)) {
	                return 'done';
	            }
	        }
	        while (column < this.indents[this.indents.length - 1]) {
	            if (!contains(this.indents, column)) {
	                throw new Sk.builtin.IndentationError("unindent does not match any outer indentation level",
	                    this.filename, this.lnum, pos, line);
	            }
	            this.indents.splice(this.indents.length - 1, 1);
	            //print("dedent here");
	            if (this.callback(Sk.Tokenizer.Tokens.T_DEDENT, '', [this.lnum, pos], [this.lnum, pos], line)) {
	                return 'done';
	            }
	        }
	    }
	    else // continued statement
	    {
	        if (!line) {
	            throw new Sk.builtin.SyntaxError("EOF in multi-line statement", this.filename, this.lnum, 0, {
	                kind: 'STATEMENT_EOF',
	                parenlev: this.parenlev,
	                parenstack: this.parenstack
	            });
	        }
	        this.continued = false;
	    }

	    while (pos < max) {
	        //print("pos:"+pos+":"+max);
	        // js regexes don't return any info about matches, other than the
	        // content. we'd like to put a \w+ before pseudomatch, but then we
	        // can't get any data
	        capos = line.charAt(pos);
	        while (capos === ' ' || capos === '\f' || capos === '\t') {
	            pos += 1;
	            capos = line.charAt(pos);
	        }
	        pseudoprog.lastIndex = 0;
	        pseudomatch = pseudoprog.exec(line.substring(pos));
	        if (pseudomatch) {
	            start = pos;
	            end = start + pseudomatch[1].length;
	            spos = [this.lnum, start];
	            epos = [this.lnum, end];
	            pos = end;
	            token = line.substring(start, end);
	            initial = line.charAt(start);
	            //Sk.debugout("token:",token, "initial:",initial, start, end);
	            if (this.numchars.indexOf(initial) !== -1 || (initial === '.' && token !== '.')) {
	                if (this.callback(Sk.Tokenizer.Tokens.T_NUMBER, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (initial === '\r' || initial === '\n') {
	                newl = Sk.Tokenizer.Tokens.T_NEWLINE;
	                //print("HERE:3");
	                if (this.parenlev > 0) {
	                    newl = Sk.Tokenizer.Tokens.T_NL;
	                }
	                if (this.callback(newl, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (initial === '#') {
	                if (this.callback(Sk.Tokenizer.Tokens.T_COMMENT, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (triple_quoted.hasOwnProperty(token)) {
	                this.endprog = endprogs[token];
	                this.endprog.lastIndex = 0;
	                endmatch = this.endprog.test(line.substring(pos));
	                if (endmatch) {
	                    pos = this.endprog.lastIndex + pos;
	                    token = line.substring(start, pos);
	                    if (this.callback(Sk.Tokenizer.Tokens.T_STRING, token, spos, [this.lnum, pos], line)) {
	                        return 'done';
	                    }
	                }
	                else {
	                    this.strstart = [this.lnum, start];
	                    this.contstr = line.substring(start);
	                    this.contline = line;
	                    return false;
	                }
	            }
	            else if (single_quoted.hasOwnProperty(initial) ||
	                single_quoted.hasOwnProperty(token.substring(0, 2)) ||
	                single_quoted.hasOwnProperty(token.substring(0, 3))) {
	                if (token[token.length - 1] === '\n') {
	                    this.strstart = [this.lnum, start];
	                    this.endprog = endprogs[initial] || endprogs[token[1]] || endprogs[token[2]];
	                    this.contstr = line.substring(start);
	                    this.needcont = true;
	                    this.contline = line;
	                    //print("i, t1, t2", initial, token[1], token[2]);
	                    //print("ep, cs", this.endprog, this.contstr);
	                    return false;
	                }
	                else {
	                    if (this.callback(Sk.Tokenizer.Tokens.T_STRING, token, spos, epos, line)) {
	                        return 'done';
	                    }
	                }
	            }
	            else if (this.namechars.indexOf(initial) !== -1) {
	                if (this.callback(Sk.Tokenizer.Tokens.T_NAME, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (initial === '\\') {
	                //print("HERE:4");
	                if (this.callback(Sk.Tokenizer.Tokens.T_NL, token, spos, [this.lnum, pos], line)) {
	                    return 'done';
	                }
	                this.continued = true;
	            }
	            else {
	                if ('([{'.indexOf(initial) !== -1) {
	                    this.parenlev += 1;
	                    this.parenstack.push([initial, this.lnum, pos]);
	                }
	                else if (')]}'.indexOf(initial) !== -1) {
	                    this.parenlev -= 1;
	                    this.parenstack.pop();
	                }
	                if (this.callback(Sk.Tokenizer.Tokens.T_OP, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	        }
	        else {
	            if (this.callback(Sk.Tokenizer.Tokens.T_ERRORTOKEN, line.charAt(pos),
	                [this.lnum, pos], [this.lnum, pos + 1], line)) {
	                return 'done';
	            }
	            pos += 1;
	        }
	    }

	    return false;
	};

	Sk.Tokenizer.tokenNames = {
	    0  : 'T_ENDMARKER', 1: 'T_NAME', 2: 'T_NUMBER', 3: 'T_STRING', 4: 'T_NEWLINE',
	    5  : 'T_INDENT', 6: 'T_DEDENT', 7: 'T_LPAR', 8: 'T_RPAR', 9: 'T_LSQB',
	    10 : 'T_RSQB', 11: 'T_COLON', 12: 'T_COMMA', 13: 'T_SEMI', 14: 'T_PLUS',
	    15 : 'T_MINUS', 16: 'T_STAR', 17: 'T_SLASH', 18: 'T_VBAR', 19: 'T_AMPER',
	    20 : 'T_LESS', 21: 'T_GREATER', 22: 'T_EQUAL', 23: 'T_DOT', 24: 'T_PERCENT',
	    25 : 'T_BACKQUOTE', 26: 'T_LBRACE', 27: 'T_RBRACE', 28: 'T_EQEQUAL', 29: 'T_NOTEQUAL',
	    30 : 'T_LESSEQUAL', 31: 'T_GREATEREQUAL', 32: 'T_TILDE', 33: 'T_CIRCUMFLEX', 34: 'T_LEFTSHIFT',
	    35 : 'T_RIGHTSHIFT', 36: 'T_DOUBLESTAR', 37: 'T_PLUSEQUAL', 38: 'T_MINEQUAL', 39: 'T_STAREQUAL',
	    40 : 'T_SLASHEQUAL', 41: 'T_PERCENTEQUAL', 42: 'T_AMPEREQUAL', 43: 'T_VBAREQUAL', 44: 'T_CIRCUMFLEXEQUAL',
	    45 : 'T_LEFTSHIFTEQUAL', 46: 'T_RIGHTSHIFTEQUAL', 47: 'T_DOUBLESTAREQUAL', 48: 'T_DOUBLESLASH', 49: 'T_DOUBLESLASHEQUAL',
	    50 : 'T_AT', 51: 'T_OP', 52: 'T_COMMENT', 53: 'T_NL', 54: 'T_RARROW',
	    55 : 'T_ERRORTOKEN', 56: 'T_N_TOKENS',
	    256: 'T_NT_OFFSET'
	};

	goog.exportSymbol("Sk.Tokenizer", Sk.Tokenizer);
	goog.exportSymbol("Sk.Tokenizer.prototype.generateTokens", Sk.Tokenizer.prototype.generateTokens);
	goog.exportSymbol("Sk.Tokenizer.tokenNames", Sk.Tokenizer.tokenNames);



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/gen/parse_tables.js ---- */ 

	// generated by pgen/main.py
	Sk.OpMap = {
	"(": Sk.Tokenizer.Tokens.T_LPAR,
	")": Sk.Tokenizer.Tokens.T_RPAR,
	"[": Sk.Tokenizer.Tokens.T_LSQB,
	"]": Sk.Tokenizer.Tokens.T_RSQB,
	":": Sk.Tokenizer.Tokens.T_COLON,
	",": Sk.Tokenizer.Tokens.T_COMMA,
	";": Sk.Tokenizer.Tokens.T_SEMI,
	"+": Sk.Tokenizer.Tokens.T_PLUS,
	"-": Sk.Tokenizer.Tokens.T_MINUS,
	"*": Sk.Tokenizer.Tokens.T_STAR,
	"/": Sk.Tokenizer.Tokens.T_SLASH,
	"|": Sk.Tokenizer.Tokens.T_VBAR,
	"&": Sk.Tokenizer.Tokens.T_AMPER,
	"<": Sk.Tokenizer.Tokens.T_LESS,
	">": Sk.Tokenizer.Tokens.T_GREATER,
	"=": Sk.Tokenizer.Tokens.T_EQUAL,
	".": Sk.Tokenizer.Tokens.T_DOT,
	"%": Sk.Tokenizer.Tokens.T_PERCENT,
	"`": Sk.Tokenizer.Tokens.T_BACKQUOTE,
	"{": Sk.Tokenizer.Tokens.T_LBRACE,
	"}": Sk.Tokenizer.Tokens.T_RBRACE,
	"@": Sk.Tokenizer.Tokens.T_AT,
	"==": Sk.Tokenizer.Tokens.T_EQEQUAL,
	"!=": Sk.Tokenizer.Tokens.T_NOTEQUAL,
	"<>": Sk.Tokenizer.Tokens.T_NOTEQUAL,
	"<=": Sk.Tokenizer.Tokens.T_LESSEQUAL,
	">=": Sk.Tokenizer.Tokens.T_GREATEREQUAL,
	"~": Sk.Tokenizer.Tokens.T_TILDE,
	"^": Sk.Tokenizer.Tokens.T_CIRCUMFLEX,
	"<<": Sk.Tokenizer.Tokens.T_LEFTSHIFT,
	">>": Sk.Tokenizer.Tokens.T_RIGHTSHIFT,
	"**": Sk.Tokenizer.Tokens.T_DOUBLESTAR,
	"+=": Sk.Tokenizer.Tokens.T_PLUSEQUAL,
	"-=": Sk.Tokenizer.Tokens.T_MINEQUAL,
	"*=": Sk.Tokenizer.Tokens.T_STAREQUAL,
	"/=": Sk.Tokenizer.Tokens.T_SLASHEQUAL,
	"%=": Sk.Tokenizer.Tokens.T_PERCENTEQUAL,
	"&=": Sk.Tokenizer.Tokens.T_AMPEREQUAL,
	"|=": Sk.Tokenizer.Tokens.T_VBAREQUAL,
	"^=": Sk.Tokenizer.Tokens.T_CIRCUMFLEXEQUAL,
	"<<=": Sk.Tokenizer.Tokens.T_LEFTSHIFTEQUAL,
	">>=": Sk.Tokenizer.Tokens.T_RIGHTSHIFTEQUAL,
	"**=": Sk.Tokenizer.Tokens.T_DOUBLESTAREQUAL,
	"//": Sk.Tokenizer.Tokens.T_DOUBLESLASH,
	"//=": Sk.Tokenizer.Tokens.T_DOUBLESLASHEQUAL,
	"->": Sk.Tokenizer.Tokens.T_RARROW
	};
	Sk.ParseTables = {
	sym:
	{and_expr: 257,
	 and_test: 258,
	 arglist: 259,
	 argument: 260,
	 arith_expr: 261,
	 assert_stmt: 262,
	 atom: 263,
	 augassign: 264,
	 break_stmt: 265,
	 classdef: 266,
	 comp_for: 267,
	 comp_if: 268,
	 comp_iter: 269,
	 comp_op: 270,
	 comparison: 271,
	 compound_stmt: 272,
	 continue_stmt: 273,
	 debugger_stmt: 274,
	 decorated: 275,
	 decorator: 276,
	 decorators: 277,
	 del_stmt: 278,
	 dictorsetmaker: 279,
	 dotted_as_name: 280,
	 dotted_as_names: 281,
	 dotted_name: 282,
	 encoding_decl: 283,
	 eval_input: 284,
	 except_clause: 285,
	 exec_stmt: 286,
	 expr: 287,
	 expr_stmt: 288,
	 exprlist: 289,
	 factor: 290,
	 file_input: 291,
	 flow_stmt: 292,
	 for_stmt: 293,
	 fpdef: 294,
	 fplist: 295,
	 funcdef: 296,
	 global_stmt: 297,
	 if_stmt: 298,
	 import_as_name: 299,
	 import_as_names: 300,
	 import_from: 301,
	 import_name: 302,
	 import_stmt: 303,
	 lambdef: 304,
	 list_for: 305,
	 list_if: 306,
	 list_iter: 307,
	 listmaker: 308,
	 not_test: 309,
	 old_lambdef: 310,
	 old_test: 311,
	 or_test: 312,
	 parameters: 313,
	 pass_stmt: 314,
	 power: 315,
	 print_stmt: 316,
	 raise_stmt: 317,
	 return_stmt: 318,
	 shift_expr: 319,
	 simple_stmt: 320,
	 single_input: 256,
	 sliceop: 321,
	 small_stmt: 322,
	 stmt: 323,
	 subscript: 324,
	 subscriptlist: 325,
	 suite: 326,
	 term: 327,
	 test: 328,
	 testlist: 329,
	 testlist1: 330,
	 testlist_comp: 331,
	 testlist_safe: 332,
	 trailer: 333,
	 try_stmt: 334,
	 varargslist: 335,
	 while_stmt: 336,
	 with_item: 337,
	 with_stmt: 338,
	 xor_expr: 339,
	 yield_expr: 340,
	 yield_stmt: 341},
	number2symbol:
	{256: 'single_input',
	 257: 'and_expr',
	 258: 'and_test',
	 259: 'arglist',
	 260: 'argument',
	 261: 'arith_expr',
	 262: 'assert_stmt',
	 263: 'atom',
	 264: 'augassign',
	 265: 'break_stmt',
	 266: 'classdef',
	 267: 'comp_for',
	 268: 'comp_if',
	 269: 'comp_iter',
	 270: 'comp_op',
	 271: 'comparison',
	 272: 'compound_stmt',
	 273: 'continue_stmt',
	 274: 'debugger_stmt',
	 275: 'decorated',
	 276: 'decorator',
	 277: 'decorators',
	 278: 'del_stmt',
	 279: 'dictorsetmaker',
	 280: 'dotted_as_name',
	 281: 'dotted_as_names',
	 282: 'dotted_name',
	 283: 'encoding_decl',
	 284: 'eval_input',
	 285: 'except_clause',
	 286: 'exec_stmt',
	 287: 'expr',
	 288: 'expr_stmt',
	 289: 'exprlist',
	 290: 'factor',
	 291: 'file_input',
	 292: 'flow_stmt',
	 293: 'for_stmt',
	 294: 'fpdef',
	 295: 'fplist',
	 296: 'funcdef',
	 297: 'global_stmt',
	 298: 'if_stmt',
	 299: 'import_as_name',
	 300: 'import_as_names',
	 301: 'import_from',
	 302: 'import_name',
	 303: 'import_stmt',
	 304: 'lambdef',
	 305: 'list_for',
	 306: 'list_if',
	 307: 'list_iter',
	 308: 'listmaker',
	 309: 'not_test',
	 310: 'old_lambdef',
	 311: 'old_test',
	 312: 'or_test',
	 313: 'parameters',
	 314: 'pass_stmt',
	 315: 'power',
	 316: 'print_stmt',
	 317: 'raise_stmt',
	 318: 'return_stmt',
	 319: 'shift_expr',
	 320: 'simple_stmt',
	 321: 'sliceop',
	 322: 'small_stmt',
	 323: 'stmt',
	 324: 'subscript',
	 325: 'subscriptlist',
	 326: 'suite',
	 327: 'term',
	 328: 'test',
	 329: 'testlist',
	 330: 'testlist1',
	 331: 'testlist_comp',
	 332: 'testlist_safe',
	 333: 'trailer',
	 334: 'try_stmt',
	 335: 'varargslist',
	 336: 'while_stmt',
	 337: 'with_item',
	 338: 'with_stmt',
	 339: 'xor_expr',
	 340: 'yield_expr',
	 341: 'yield_stmt'},
	dfas:
	{256: [[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[2, 1]]],
	       {2: 1,
	        4: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        10: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        16: 1,
	        17: 1,
	        18: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        29: 1,
	        30: 1,
	        31: 1,
	        32: 1,
	        33: 1,
	        34: 1,
	        35: 1,
	        36: 1,
	        37: 1}],
	 257: [[[[38, 1]], [[39, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 258: [[[[40, 1]], [[41, 0], [0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 259: [[[[42, 1], [43, 2], [44, 3]],
	        [[45, 4]],
	        [[46, 5], [0, 2]],
	        [[45, 6]],
	        [[46, 7], [0, 4]],
	        [[42, 1], [43, 2], [44, 3], [0, 5]],
	        [[0, 6]],
	        [[43, 4], [44, 3]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1,
	        42: 1,
	        44: 1}],
	 260: [[[[45, 1]], [[47, 2], [48, 3], [0, 1]], [[45, 3]], [[0, 3]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 261: [[[[49, 1]], [[26, 0], [37, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 262: [[[[21, 1]], [[45, 2]], [[46, 3], [0, 2]], [[45, 4]], [[0, 4]]],
	       {21: 1}],
	 263: [[[[19, 1], [8, 2], [9, 5], [30, 4], [14, 3], [15, 6], [22, 2]],
	        [[19, 1], [0, 1]],
	        [[0, 2]],
	        [[50, 7], [51, 2]],
	        [[52, 2], [53, 8], [54, 8]],
	        [[55, 2], [56, 9]],
	        [[57, 10]],
	        [[51, 2]],
	        [[52, 2]],
	        [[55, 2]],
	        [[15, 2]]],
	       {8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 30: 1}],
	 264: [[[[58, 1],
	         [59, 1],
	         [60, 1],
	         [61, 1],
	         [62, 1],
	         [63, 1],
	         [64, 1],
	         [65, 1],
	         [66, 1],
	         [67, 1],
	         [68, 1],
	         [69, 1]],
	        [[0, 1]]],
	       {58: 1,
	        59: 1,
	        60: 1,
	        61: 1,
	        62: 1,
	        63: 1,
	        64: 1,
	        65: 1,
	        66: 1,
	        67: 1,
	        68: 1,
	        69: 1}],
	 265: [[[[33, 1]], [[0, 1]]], {33: 1}],
	 266: [[[[10, 1]],
	        [[22, 2]],
	        [[70, 3], [30, 4]],
	        [[71, 5]],
	        [[52, 6], [72, 7]],
	        [[0, 5]],
	        [[70, 3]],
	        [[52, 6]]],
	       {10: 1}],
	 267: [[[[29, 1]],
	        [[73, 2]],
	        [[74, 3]],
	        [[75, 4]],
	        [[76, 5], [0, 4]],
	        [[0, 5]]],
	       {29: 1}],
	 268: [[[[32, 1]], [[77, 2]], [[76, 3], [0, 2]], [[0, 3]]], {32: 1}],
	 269: [[[[78, 1], [48, 1]], [[0, 1]]], {29: 1, 32: 1}],
	 270: [[[[79, 1],
	         [80, 1],
	         [7, 2],
	         [81, 1],
	         [79, 1],
	         [74, 1],
	         [82, 1],
	         [83, 3],
	         [84, 1],
	         [85, 1]],
	        [[0, 1]],
	        [[74, 1]],
	        [[7, 1], [0, 3]]],
	       {7: 1, 74: 1, 79: 1, 80: 1, 81: 1, 82: 1, 83: 1, 84: 1, 85: 1}],
	 271: [[[[86, 1]], [[87, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 272: [[[[88, 1],
	         [89, 1],
	         [90, 1],
	         [91, 1],
	         [92, 1],
	         [93, 1],
	         [94, 1],
	         [95, 1]],
	        [[0, 1]]],
	       {4: 1, 10: 1, 16: 1, 18: 1, 29: 1, 32: 1, 35: 1, 36: 1}],
	 273: [[[[34, 1]], [[0, 1]]], {34: 1}],
	 274: [[[[13, 1]], [[0, 1]]], {13: 1}],
	 275: [[[[96, 1]], [[94, 2], [91, 2]], [[0, 2]]], {35: 1}],
	 276: [[[[35, 1]],
	        [[97, 2]],
	        [[2, 4], [30, 3]],
	        [[52, 5], [98, 6]],
	        [[0, 4]],
	        [[2, 4]],
	        [[52, 5]]],
	       {35: 1}],
	 277: [[[[99, 1]], [[99, 1], [0, 1]]], {35: 1}],
	 278: [[[[23, 1]], [[73, 2]], [[0, 2]]], {23: 1}],
	 279: [[[[45, 1]],
	        [[70, 2], [48, 3], [46, 4], [0, 1]],
	        [[45, 5]],
	        [[0, 3]],
	        [[45, 6], [0, 4]],
	        [[48, 3], [46, 7], [0, 5]],
	        [[46, 4], [0, 6]],
	        [[45, 8], [0, 7]],
	        [[70, 9]],
	        [[45, 10]],
	        [[46, 7], [0, 10]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 280: [[[[97, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]], {22: 1}],
	 281: [[[[101, 1]], [[46, 0], [0, 1]]], {22: 1}],
	 282: [[[[22, 1]], [[102, 0], [0, 1]]], {22: 1}],
	 283: [[[[22, 1]], [[0, 1]]], {22: 1}],
	 284: [[[[72, 1]], [[2, 1], [103, 2]], [[0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 285: [[[[104, 1]],
	        [[45, 2], [0, 1]],
	        [[100, 3], [46, 3], [0, 2]],
	        [[45, 4]],
	        [[0, 4]]],
	       {104: 1}],
	 286: [[[[17, 1]],
	        [[86, 2]],
	        [[74, 3], [0, 2]],
	        [[45, 4]],
	        [[46, 5], [0, 4]],
	        [[45, 6]],
	        [[0, 6]]],
	       {17: 1}],
	 287: [[[[105, 1]], [[106, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 288: [[[[72, 1]],
	        [[107, 2], [47, 3], [0, 1]],
	        [[72, 4], [53, 4]],
	        [[72, 5], [53, 5]],
	        [[0, 4]],
	        [[47, 3], [0, 5]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 289: [[[[86, 1]], [[46, 2], [0, 1]], [[86, 1], [0, 2]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 290: [[[[37, 2], [26, 2], [6, 2], [108, 1]], [[0, 1]], [[109, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 291: [[[[2, 0], [103, 1], [110, 0]], [[0, 1]]],
	       {2: 1,
	        4: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        10: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        16: 1,
	        17: 1,
	        18: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        29: 1,
	        30: 1,
	        31: 1,
	        32: 1,
	        33: 1,
	        34: 1,
	        35: 1,
	        36: 1,
	        37: 1,
	        103: 1}],
	 292: [[[[111, 1], [112, 1], [113, 1], [114, 1], [115, 1]], [[0, 1]]],
	       {5: 1, 20: 1, 27: 1, 33: 1, 34: 1}],
	 293: [[[[29, 1]],
	        [[73, 2]],
	        [[74, 3]],
	        [[72, 4]],
	        [[70, 5]],
	        [[71, 6]],
	        [[116, 7], [0, 6]],
	        [[70, 8]],
	        [[71, 9]],
	        [[0, 9]]],
	       {29: 1}],
	 294: [[[[30, 1], [22, 2]], [[117, 3]], [[0, 2]], [[52, 2]]], {22: 1, 30: 1}],
	 295: [[[[118, 1]], [[46, 2], [0, 1]], [[118, 1], [0, 2]]], {22: 1, 30: 1}],
	 296: [[[[4, 1]], [[22, 2]], [[119, 3]], [[70, 4]], [[71, 5]], [[0, 5]]],
	       {4: 1}],
	 297: [[[[28, 1]], [[22, 2]], [[46, 1], [0, 2]]], {28: 1}],
	 298: [[[[32, 1]],
	        [[45, 2]],
	        [[70, 3]],
	        [[71, 4]],
	        [[116, 5], [120, 1], [0, 4]],
	        [[70, 6]],
	        [[71, 7]],
	        [[0, 7]]],
	       {32: 1}],
	 299: [[[[22, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]], {22: 1}],
	 300: [[[[121, 1]], [[46, 2], [0, 1]], [[121, 1], [0, 2]]], {22: 1}],
	 301: [[[[31, 1]],
	        [[97, 2], [102, 3]],
	        [[25, 4]],
	        [[97, 2], [25, 4], [102, 3]],
	        [[122, 5], [42, 5], [30, 6]],
	        [[0, 5]],
	        [[122, 7]],
	        [[52, 5]]],
	       {31: 1}],
	 302: [[[[25, 1]], [[123, 2]], [[0, 2]]], {25: 1}],
	 303: [[[[124, 1], [125, 1]], [[0, 1]]], {25: 1, 31: 1}],
	 304: [[[[11, 1]], [[70, 2], [126, 3]], [[45, 4]], [[70, 2]], [[0, 4]]],
	       {11: 1}],
	 305: [[[[29, 1]],
	        [[73, 2]],
	        [[74, 3]],
	        [[127, 4]],
	        [[128, 5], [0, 4]],
	        [[0, 5]]],
	       {29: 1}],
	 306: [[[[32, 1]], [[77, 2]], [[128, 3], [0, 2]], [[0, 3]]], {32: 1}],
	 307: [[[[129, 1], [130, 1]], [[0, 1]]], {29: 1, 32: 1}],
	 308: [[[[45, 1]],
	        [[129, 2], [46, 3], [0, 1]],
	        [[0, 2]],
	        [[45, 4], [0, 3]],
	        [[46, 3], [0, 4]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 309: [[[[7, 1], [131, 2]], [[40, 2]], [[0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 310: [[[[11, 1]], [[70, 2], [126, 3]], [[77, 4]], [[70, 2]], [[0, 4]]],
	       {11: 1}],
	 311: [[[[132, 1], [75, 1]], [[0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 312: [[[[133, 1]], [[134, 0], [0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 313: [[[[30, 1]], [[52, 2], [126, 3]], [[0, 2]], [[52, 2]]], {30: 1}],
	 314: [[[[24, 1]], [[0, 1]]], {24: 1}],
	 315: [[[[135, 1]], [[44, 2], [136, 1], [0, 1]], [[109, 3]], [[0, 3]]],
	       {8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 30: 1}],
	 316: [[[[12, 1]],
	        [[45, 2], [137, 3], [0, 1]],
	        [[46, 4], [0, 2]],
	        [[45, 5]],
	        [[45, 2], [0, 4]],
	        [[46, 6], [0, 5]],
	        [[45, 7]],
	        [[46, 8], [0, 7]],
	        [[45, 7], [0, 8]]],
	       {12: 1}],
	 317: [[[[5, 1]],
	        [[45, 2], [0, 1]],
	        [[46, 3], [0, 2]],
	        [[45, 4]],
	        [[46, 5], [0, 4]],
	        [[45, 6]],
	        [[0, 6]]],
	       {5: 1}],
	 318: [[[[20, 1]], [[72, 2], [0, 1]], [[0, 2]]], {20: 1}],
	 319: [[[[138, 1]], [[139, 0], [137, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 320: [[[[140, 1]], [[2, 2], [141, 3]], [[0, 2]], [[140, 1], [2, 2]]],
	       {5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        17: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        30: 1,
	        31: 1,
	        33: 1,
	        34: 1,
	        37: 1}],
	 321: [[[[70, 1]], [[45, 2], [0, 1]], [[0, 2]]], {70: 1}],
	 322: [[[[142, 1],
	         [143, 1],
	         [144, 1],
	         [145, 1],
	         [146, 1],
	         [147, 1],
	         [148, 1],
	         [149, 1],
	         [150, 1],
	         [151, 1]],
	        [[0, 1]]],
	       {5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        17: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        30: 1,
	        31: 1,
	        33: 1,
	        34: 1,
	        37: 1}],
	 323: [[[[1, 1], [3, 1]], [[0, 1]]],
	       {4: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        10: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        16: 1,
	        17: 1,
	        18: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        29: 1,
	        30: 1,
	        31: 1,
	        32: 1,
	        33: 1,
	        34: 1,
	        35: 1,
	        36: 1,
	        37: 1}],
	 324: [[[[45, 1], [70, 2], [102, 3]],
	        [[70, 2], [0, 1]],
	        [[45, 4], [152, 5], [0, 2]],
	        [[102, 6]],
	        [[152, 5], [0, 4]],
	        [[0, 5]],
	        [[102, 5]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1,
	        70: 1,
	        102: 1}],
	 325: [[[[153, 1]], [[46, 2], [0, 1]], [[153, 1], [0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1,
	        70: 1,
	        102: 1}],
	 326: [[[[1, 1], [2, 2]],
	        [[0, 1]],
	        [[154, 3]],
	        [[110, 4]],
	        [[155, 1], [110, 4]]],
	       {2: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        17: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        30: 1,
	        31: 1,
	        33: 1,
	        34: 1,
	        37: 1}],
	 327: [[[[109, 1]], [[156, 0], [42, 0], [157, 0], [158, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 328: [[[[75, 1], [159, 2]],
	        [[32, 3], [0, 1]],
	        [[0, 2]],
	        [[75, 4]],
	        [[116, 5]],
	        [[45, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 329: [[[[45, 1]], [[46, 2], [0, 1]], [[45, 1], [0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 330: [[[[45, 1]], [[46, 0], [0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 331: [[[[45, 1]],
	        [[48, 2], [46, 3], [0, 1]],
	        [[0, 2]],
	        [[45, 4], [0, 3]],
	        [[46, 3], [0, 4]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 332: [[[[77, 1]],
	        [[46, 2], [0, 1]],
	        [[77, 3]],
	        [[46, 4], [0, 3]],
	        [[77, 3], [0, 4]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 333: [[[[30, 1], [102, 2], [14, 3]],
	        [[52, 4], [98, 5]],
	        [[22, 4]],
	        [[160, 6]],
	        [[0, 4]],
	        [[52, 4]],
	        [[51, 4]]],
	       {14: 1, 30: 1, 102: 1}],
	 334: [[[[16, 1]],
	        [[70, 2]],
	        [[71, 3]],
	        [[161, 4], [162, 5]],
	        [[70, 6]],
	        [[70, 7]],
	        [[71, 8]],
	        [[71, 9]],
	        [[161, 4], [116, 10], [162, 5], [0, 8]],
	        [[0, 9]],
	        [[70, 11]],
	        [[71, 12]],
	        [[162, 5], [0, 12]]],
	       {16: 1}],
	 335: [[[[42, 1], [118, 2], [44, 3]],
	        [[22, 4]],
	        [[47, 5], [46, 6], [0, 2]],
	        [[22, 7]],
	        [[46, 8], [0, 4]],
	        [[45, 9]],
	        [[42, 1], [118, 2], [44, 3], [0, 6]],
	        [[0, 7]],
	        [[44, 3]],
	        [[46, 6], [0, 9]]],
	       {22: 1, 30: 1, 42: 1, 44: 1}],
	 336: [[[[18, 1]],
	        [[45, 2]],
	        [[70, 3]],
	        [[71, 4]],
	        [[116, 5], [0, 4]],
	        [[70, 6]],
	        [[71, 7]],
	        [[0, 7]]],
	       {18: 1}],
	 337: [[[[45, 1]], [[100, 2], [0, 1]], [[86, 3]], [[0, 3]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 338: [[[[36, 1]], [[163, 2]], [[70, 3], [46, 1]], [[71, 4]], [[0, 4]]],
	       {36: 1}],
	 339: [[[[164, 1]], [[165, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 340: [[[[27, 1]], [[72, 2], [0, 1]], [[0, 2]]], {27: 1}],
	 341: [[[[53, 1]], [[0, 1]]], {27: 1}]},
	states:
	[[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[2, 1]]],
	 [[[38, 1]], [[39, 0], [0, 1]]],
	 [[[40, 1]], [[41, 0], [0, 1]]],
	 [[[42, 1], [43, 2], [44, 3]],
	  [[45, 4]],
	  [[46, 5], [0, 2]],
	  [[45, 6]],
	  [[46, 7], [0, 4]],
	  [[42, 1], [43, 2], [44, 3], [0, 5]],
	  [[0, 6]],
	  [[43, 4], [44, 3]]],
	 [[[45, 1]], [[47, 2], [48, 3], [0, 1]], [[45, 3]], [[0, 3]]],
	 [[[49, 1]], [[26, 0], [37, 0], [0, 1]]],
	 [[[21, 1]], [[45, 2]], [[46, 3], [0, 2]], [[45, 4]], [[0, 4]]],
	 [[[19, 1], [8, 2], [9, 5], [30, 4], [14, 3], [15, 6], [22, 2]],
	  [[19, 1], [0, 1]],
	  [[0, 2]],
	  [[50, 7], [51, 2]],
	  [[52, 2], [53, 8], [54, 8]],
	  [[55, 2], [56, 9]],
	  [[57, 10]],
	  [[51, 2]],
	  [[52, 2]],
	  [[55, 2]],
	  [[15, 2]]],
	 [[[58, 1],
	   [59, 1],
	   [60, 1],
	   [61, 1],
	   [62, 1],
	   [63, 1],
	   [64, 1],
	   [65, 1],
	   [66, 1],
	   [67, 1],
	   [68, 1],
	   [69, 1]],
	  [[0, 1]]],
	 [[[33, 1]], [[0, 1]]],
	 [[[10, 1]],
	  [[22, 2]],
	  [[70, 3], [30, 4]],
	  [[71, 5]],
	  [[52, 6], [72, 7]],
	  [[0, 5]],
	  [[70, 3]],
	  [[52, 6]]],
	 [[[29, 1]], [[73, 2]], [[74, 3]], [[75, 4]], [[76, 5], [0, 4]], [[0, 5]]],
	 [[[32, 1]], [[77, 2]], [[76, 3], [0, 2]], [[0, 3]]],
	 [[[78, 1], [48, 1]], [[0, 1]]],
	 [[[79, 1],
	   [80, 1],
	   [7, 2],
	   [81, 1],
	   [79, 1],
	   [74, 1],
	   [82, 1],
	   [83, 3],
	   [84, 1],
	   [85, 1]],
	  [[0, 1]],
	  [[74, 1]],
	  [[7, 1], [0, 3]]],
	 [[[86, 1]], [[87, 0], [0, 1]]],
	 [[[88, 1], [89, 1], [90, 1], [91, 1], [92, 1], [93, 1], [94, 1], [95, 1]],
	  [[0, 1]]],
	 [[[34, 1]], [[0, 1]]],
	 [[[13, 1]], [[0, 1]]],
	 [[[96, 1]], [[94, 2], [91, 2]], [[0, 2]]],
	 [[[35, 1]],
	  [[97, 2]],
	  [[2, 4], [30, 3]],
	  [[52, 5], [98, 6]],
	  [[0, 4]],
	  [[2, 4]],
	  [[52, 5]]],
	 [[[99, 1]], [[99, 1], [0, 1]]],
	 [[[23, 1]], [[73, 2]], [[0, 2]]],
	 [[[45, 1]],
	  [[70, 2], [48, 3], [46, 4], [0, 1]],
	  [[45, 5]],
	  [[0, 3]],
	  [[45, 6], [0, 4]],
	  [[48, 3], [46, 7], [0, 5]],
	  [[46, 4], [0, 6]],
	  [[45, 8], [0, 7]],
	  [[70, 9]],
	  [[45, 10]],
	  [[46, 7], [0, 10]]],
	 [[[97, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]],
	 [[[101, 1]], [[46, 0], [0, 1]]],
	 [[[22, 1]], [[102, 0], [0, 1]]],
	 [[[22, 1]], [[0, 1]]],
	 [[[72, 1]], [[2, 1], [103, 2]], [[0, 2]]],
	 [[[104, 1]],
	  [[45, 2], [0, 1]],
	  [[100, 3], [46, 3], [0, 2]],
	  [[45, 4]],
	  [[0, 4]]],
	 [[[17, 1]],
	  [[86, 2]],
	  [[74, 3], [0, 2]],
	  [[45, 4]],
	  [[46, 5], [0, 4]],
	  [[45, 6]],
	  [[0, 6]]],
	 [[[105, 1]], [[106, 0], [0, 1]]],
	 [[[72, 1]],
	  [[107, 2], [47, 3], [0, 1]],
	  [[72, 4], [53, 4]],
	  [[72, 5], [53, 5]],
	  [[0, 4]],
	  [[47, 3], [0, 5]]],
	 [[[86, 1]], [[46, 2], [0, 1]], [[86, 1], [0, 2]]],
	 [[[37, 2], [26, 2], [6, 2], [108, 1]], [[0, 1]], [[109, 1]]],
	 [[[2, 0], [103, 1], [110, 0]], [[0, 1]]],
	 [[[111, 1], [112, 1], [113, 1], [114, 1], [115, 1]], [[0, 1]]],
	 [[[29, 1]],
	  [[73, 2]],
	  [[74, 3]],
	  [[72, 4]],
	  [[70, 5]],
	  [[71, 6]],
	  [[116, 7], [0, 6]],
	  [[70, 8]],
	  [[71, 9]],
	  [[0, 9]]],
	 [[[30, 1], [22, 2]], [[117, 3]], [[0, 2]], [[52, 2]]],
	 [[[118, 1]], [[46, 2], [0, 1]], [[118, 1], [0, 2]]],
	 [[[4, 1]], [[22, 2]], [[119, 3]], [[70, 4]], [[71, 5]], [[0, 5]]],
	 [[[28, 1]], [[22, 2]], [[46, 1], [0, 2]]],
	 [[[32, 1]],
	  [[45, 2]],
	  [[70, 3]],
	  [[71, 4]],
	  [[116, 5], [120, 1], [0, 4]],
	  [[70, 6]],
	  [[71, 7]],
	  [[0, 7]]],
	 [[[22, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]],
	 [[[121, 1]], [[46, 2], [0, 1]], [[121, 1], [0, 2]]],
	 [[[31, 1]],
	  [[97, 2], [102, 3]],
	  [[25, 4]],
	  [[97, 2], [25, 4], [102, 3]],
	  [[122, 5], [42, 5], [30, 6]],
	  [[0, 5]],
	  [[122, 7]],
	  [[52, 5]]],
	 [[[25, 1]], [[123, 2]], [[0, 2]]],
	 [[[124, 1], [125, 1]], [[0, 1]]],
	 [[[11, 1]], [[70, 2], [126, 3]], [[45, 4]], [[70, 2]], [[0, 4]]],
	 [[[29, 1]], [[73, 2]], [[74, 3]], [[127, 4]], [[128, 5], [0, 4]], [[0, 5]]],
	 [[[32, 1]], [[77, 2]], [[128, 3], [0, 2]], [[0, 3]]],
	 [[[129, 1], [130, 1]], [[0, 1]]],
	 [[[45, 1]],
	  [[129, 2], [46, 3], [0, 1]],
	  [[0, 2]],
	  [[45, 4], [0, 3]],
	  [[46, 3], [0, 4]]],
	 [[[7, 1], [131, 2]], [[40, 2]], [[0, 2]]],
	 [[[11, 1]], [[70, 2], [126, 3]], [[77, 4]], [[70, 2]], [[0, 4]]],
	 [[[132, 1], [75, 1]], [[0, 1]]],
	 [[[133, 1]], [[134, 0], [0, 1]]],
	 [[[30, 1]], [[52, 2], [126, 3]], [[0, 2]], [[52, 2]]],
	 [[[24, 1]], [[0, 1]]],
	 [[[135, 1]], [[44, 2], [136, 1], [0, 1]], [[109, 3]], [[0, 3]]],
	 [[[12, 1]],
	  [[45, 2], [137, 3], [0, 1]],
	  [[46, 4], [0, 2]],
	  [[45, 5]],
	  [[45, 2], [0, 4]],
	  [[46, 6], [0, 5]],
	  [[45, 7]],
	  [[46, 8], [0, 7]],
	  [[45, 7], [0, 8]]],
	 [[[5, 1]],
	  [[45, 2], [0, 1]],
	  [[46, 3], [0, 2]],
	  [[45, 4]],
	  [[46, 5], [0, 4]],
	  [[45, 6]],
	  [[0, 6]]],
	 [[[20, 1]], [[72, 2], [0, 1]], [[0, 2]]],
	 [[[138, 1]], [[139, 0], [137, 0], [0, 1]]],
	 [[[140, 1]], [[2, 2], [141, 3]], [[0, 2]], [[140, 1], [2, 2]]],
	 [[[70, 1]], [[45, 2], [0, 1]], [[0, 2]]],
	 [[[142, 1],
	   [143, 1],
	   [144, 1],
	   [145, 1],
	   [146, 1],
	   [147, 1],
	   [148, 1],
	   [149, 1],
	   [150, 1],
	   [151, 1]],
	  [[0, 1]]],
	 [[[1, 1], [3, 1]], [[0, 1]]],
	 [[[45, 1], [70, 2], [102, 3]],
	  [[70, 2], [0, 1]],
	  [[45, 4], [152, 5], [0, 2]],
	  [[102, 6]],
	  [[152, 5], [0, 4]],
	  [[0, 5]],
	  [[102, 5]]],
	 [[[153, 1]], [[46, 2], [0, 1]], [[153, 1], [0, 2]]],
	 [[[1, 1], [2, 2]], [[0, 1]], [[154, 3]], [[110, 4]], [[155, 1], [110, 4]]],
	 [[[109, 1]], [[156, 0], [42, 0], [157, 0], [158, 0], [0, 1]]],
	 [[[75, 1], [159, 2]],
	  [[32, 3], [0, 1]],
	  [[0, 2]],
	  [[75, 4]],
	  [[116, 5]],
	  [[45, 2]]],
	 [[[45, 1]], [[46, 2], [0, 1]], [[45, 1], [0, 2]]],
	 [[[45, 1]], [[46, 0], [0, 1]]],
	 [[[45, 1]],
	  [[48, 2], [46, 3], [0, 1]],
	  [[0, 2]],
	  [[45, 4], [0, 3]],
	  [[46, 3], [0, 4]]],
	 [[[77, 1]],
	  [[46, 2], [0, 1]],
	  [[77, 3]],
	  [[46, 4], [0, 3]],
	  [[77, 3], [0, 4]]],
	 [[[30, 1], [102, 2], [14, 3]],
	  [[52, 4], [98, 5]],
	  [[22, 4]],
	  [[160, 6]],
	  [[0, 4]],
	  [[52, 4]],
	  [[51, 4]]],
	 [[[16, 1]],
	  [[70, 2]],
	  [[71, 3]],
	  [[161, 4], [162, 5]],
	  [[70, 6]],
	  [[70, 7]],
	  [[71, 8]],
	  [[71, 9]],
	  [[161, 4], [116, 10], [162, 5], [0, 8]],
	  [[0, 9]],
	  [[70, 11]],
	  [[71, 12]],
	  [[162, 5], [0, 12]]],
	 [[[42, 1], [118, 2], [44, 3]],
	  [[22, 4]],
	  [[47, 5], [46, 6], [0, 2]],
	  [[22, 7]],
	  [[46, 8], [0, 4]],
	  [[45, 9]],
	  [[42, 1], [118, 2], [44, 3], [0, 6]],
	  [[0, 7]],
	  [[44, 3]],
	  [[46, 6], [0, 9]]],
	 [[[18, 1]],
	  [[45, 2]],
	  [[70, 3]],
	  [[71, 4]],
	  [[116, 5], [0, 4]],
	  [[70, 6]],
	  [[71, 7]],
	  [[0, 7]]],
	 [[[45, 1]], [[100, 2], [0, 1]], [[86, 3]], [[0, 3]]],
	 [[[36, 1]], [[163, 2]], [[70, 3], [46, 1]], [[71, 4]], [[0, 4]]],
	 [[[164, 1]], [[165, 0], [0, 1]]],
	 [[[27, 1]], [[72, 2], [0, 1]], [[0, 2]]],
	 [[[53, 1]], [[0, 1]]]],
	labels:
	[[0, 'EMPTY'],
	 [320, null],
	 [4, null],
	 [272, null],
	 [1, 'def'],
	 [1, 'raise'],
	 [32, null],
	 [1, 'not'],
	 [2, null],
	 [26, null],
	 [1, 'class'],
	 [1, 'lambda'],
	 [1, 'print'],
	 [1, 'debugger'],
	 [9, null],
	 [25, null],
	 [1, 'try'],
	 [1, 'exec'],
	 [1, 'while'],
	 [3, null],
	 [1, 'return'],
	 [1, 'assert'],
	 [1, null],
	 [1, 'del'],
	 [1, 'pass'],
	 [1, 'import'],
	 [15, null],
	 [1, 'yield'],
	 [1, 'global'],
	 [1, 'for'],
	 [7, null],
	 [1, 'from'],
	 [1, 'if'],
	 [1, 'break'],
	 [1, 'continue'],
	 [50, null],
	 [1, 'with'],
	 [14, null],
	 [319, null],
	 [19, null],
	 [309, null],
	 [1, 'and'],
	 [16, null],
	 [260, null],
	 [36, null],
	 [328, null],
	 [12, null],
	 [22, null],
	 [267, null],
	 [327, null],
	 [308, null],
	 [10, null],
	 [8, null],
	 [340, null],
	 [331, null],
	 [27, null],
	 [279, null],
	 [330, null],
	 [46, null],
	 [39, null],
	 [41, null],
	 [47, null],
	 [42, null],
	 [43, null],
	 [37, null],
	 [44, null],
	 [49, null],
	 [45, null],
	 [38, null],
	 [40, null],
	 [11, null],
	 [326, null],
	 [329, null],
	 [289, null],
	 [1, 'in'],
	 [312, null],
	 [269, null],
	 [311, null],
	 [268, null],
	 [29, null],
	 [21, null],
	 [28, null],
	 [30, null],
	 [1, 'is'],
	 [31, null],
	 [20, null],
	 [287, null],
	 [270, null],
	 [334, null],
	 [298, null],
	 [293, null],
	 [266, null],
	 [338, null],
	 [336, null],
	 [296, null],
	 [275, null],
	 [277, null],
	 [282, null],
	 [259, null],
	 [276, null],
	 [1, 'as'],
	 [280, null],
	 [23, null],
	 [0, null],
	 [1, 'except'],
	 [339, null],
	 [18, null],
	 [264, null],
	 [315, null],
	 [290, null],
	 [323, null],
	 [265, null],
	 [273, null],
	 [317, null],
	 [318, null],
	 [341, null],
	 [1, 'else'],
	 [295, null],
	 [294, null],
	 [313, null],
	 [1, 'elif'],
	 [299, null],
	 [300, null],
	 [281, null],
	 [302, null],
	 [301, null],
	 [335, null],
	 [332, null],
	 [307, null],
	 [305, null],
	 [306, null],
	 [271, null],
	 [310, null],
	 [258, null],
	 [1, 'or'],
	 [263, null],
	 [333, null],
	 [35, null],
	 [261, null],
	 [34, null],
	 [322, null],
	 [13, null],
	 [292, null],
	 [278, null],
	 [288, null],
	 [314, null],
	 [316, null],
	 [262, null],
	 [286, null],
	 [297, null],
	 [303, null],
	 [274, null],
	 [321, null],
	 [324, null],
	 [5, null],
	 [6, null],
	 [48, null],
	 [17, null],
	 [24, null],
	 [304, null],
	 [325, null],
	 [285, null],
	 [1, 'finally'],
	 [337, null],
	 [257, null],
	 [33, null]],
	keywords:
	{'and': 41,
	 'as': 100,
	 'assert': 21,
	 'break': 33,
	 'class': 10,
	 'continue': 34,
	 'debugger': 13,
	 'def': 4,
	 'del': 23,
	 'elif': 120,
	 'else': 116,
	 'except': 104,
	 'exec': 17,
	 'finally': 162,
	 'for': 29,
	 'from': 31,
	 'global': 28,
	 'if': 32,
	 'import': 25,
	 'in': 74,
	 'is': 83,
	 'lambda': 11,
	 'not': 7,
	 'or': 134,
	 'pass': 24,
	 'print': 12,
	 'raise': 5,
	 'return': 20,
	 'try': 16,
	 'while': 18,
	 'with': 36,
	 'yield': 27},
	tokens:
	{0: 103,
	 1: 22,
	 2: 8,
	 3: 19,
	 4: 2,
	 5: 154,
	 6: 155,
	 7: 30,
	 8: 52,
	 9: 14,
	 10: 51,
	 11: 70,
	 12: 46,
	 13: 141,
	 14: 37,
	 15: 26,
	 16: 42,
	 17: 157,
	 18: 106,
	 19: 39,
	 20: 85,
	 21: 80,
	 22: 47,
	 23: 102,
	 24: 158,
	 25: 15,
	 26: 9,
	 27: 55,
	 28: 81,
	 29: 79,
	 30: 82,
	 31: 84,
	 32: 6,
	 33: 165,
	 34: 139,
	 35: 137,
	 36: 44,
	 37: 64,
	 38: 68,
	 39: 59,
	 40: 69,
	 41: 60,
	 42: 62,
	 43: 63,
	 44: 65,
	 45: 67,
	 46: 58,
	 47: 61,
	 48: 156,
	 49: 66,
	 50: 35},
	start: 256
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/parser.js ---- */ 

	// low level parser to a concrete syntax tree, derived from cpython's lib2to3

	/**
	 *
	 * @constructor
	 * @param {Object} grammar
	 *
	 * p = new Parser(grammar);
	 * p.setup([start]);
	 * foreach input token:
	 *     if p.addtoken(...):
	 *         break
	 * root = p.rootnode
	 *
	 * can throw SyntaxError
	 */
	function Parser (filename, grammar) {
	    this.filename = filename;
	    this.grammar = grammar;
	    this.p_flags = 0;
	    return this;
	}

	// all possible parser flags
	Parser.FUTURE_PRINT_FUNCTION = "print_function";
	Parser.FUTURE_UNICODE_LITERALS = "unicode_literals";
	Parser.FUTURE_DIVISION = "division";
	Parser.FUTURE_ABSOLUTE_IMPORT = "absolute_import";
	Parser.FUTURE_WITH_STATEMENT = "with_statement";
	Parser.FUTURE_NESTED_SCOPES = "nested_scopes";
	Parser.FUTURE_GENERATORS = "generators";
	Parser.CO_FUTURE_PRINT_FUNCTION = 0x10000;
	Parser.CO_FUTURE_UNICODE_LITERALS = 0x20000;
	Parser.CO_FUTURE_DIVISON = 0x2000;
	Parser.CO_FUTURE_ABSOLUTE_IMPORT = 0x4000;
	Parser.CO_FUTURE_WITH_STATEMENT = 0x8000;

	Parser.prototype.setup = function (start) {
	    var stackentry;
	    var newnode;
	    start = start || this.grammar.start;
	    //print("START:"+start);

	    newnode =
	    {
	        type    : start,
	        value   : null,
	        context : null,
	        children: []
	    };
	    stackentry =
	    {
	        dfa  : this.grammar.dfas[start],
	        state: 0,
	        node : newnode
	    };
	    this.stack = [stackentry];
	    this.used_names = {};
	};

	function findInDfa (a, obj) {
	    var i = a.length;
	    while (i--) {
	        if (a[i][0] === obj[0] && a[i][1] === obj[1]) {
	            return true;
	        }
	    }
	    return false;
	}


	// Add a token; return true if we're done
	Parser.prototype.addtoken = function (type, value, context) {
	    var errline;
	    var itsfirst;
	    var itsdfa;
	    var state;
	    var v;
	    var t;
	    var newstate;
	    var i;
	    var a;
	    var arcs;
	    var first;
	    var states;
	    var tp;
	    var ilabel = this.classify(type, value, context);
	    //print("ilabel:"+ilabel);

	    OUTERWHILE:
	    while (true) {
	        tp = this.stack[this.stack.length - 1];
	        states = tp.dfa[0];
	        first = tp.dfa[1];
	        arcs = states[tp.state];

	        // look for a state with this label
	        for (a = 0; a < arcs.length; ++a) {
	            i = arcs[a][0];
	            newstate = arcs[a][1];
	            t = this.grammar.labels[i][0];
	            v = this.grammar.labels[i][1];
	            if (ilabel === i) {
	                // look it up in the list of labels
	                goog.asserts.assert(t < 256);
	                // shift a token; we're done with it
	                this.shift(type, value, newstate, context);
	                // pop while we are in an accept-only state
	                state = newstate;
	                //print("before:"+JSON.stringify(states[state]) + ":state:"+state+":"+JSON.stringify(states[state]));
	                /* jshint ignore:start */
	                while (states[state].length === 1
	                    && states[state][0][0] === 0
	                    && states[state][0][1] === state) {
	                    // states[state] == [(0, state)])
	                    this.pop();
	                    //print("in after pop:"+JSON.stringify(states[state]) + ":state:"+state+":"+JSON.stringify(states[state]));
	                    if (this.stack.length === 0) {
	                        // done!
	                        return true;
	                    }
	                    tp = this.stack[this.stack.length - 1];
	                    state = tp.state;
	                    states = tp.dfa[0];
	                    first = tp.dfa[1];
	                    //print(JSON.stringify(states), JSON.stringify(first));
	                    //print("bottom:"+JSON.stringify(states[state]) + ":state:"+state+":"+JSON.stringify(states[state]));
	                }
	                /* jshint ignore:end */
	                // done with this token
	                //print("DONE, return false");
	                return false;
	            } else if (t >= 256) {
	                itsdfa = this.grammar.dfas[t];
	                itsfirst = itsdfa[1];
	                if (itsfirst.hasOwnProperty(ilabel)) {
	                    // push a symbol
	                    this.push(t, this.grammar.dfas[t], newstate, context);
	                    continue OUTERWHILE;
	                }
	            }
	        }

	        //print("findInDfa: " + JSON.stringify(arcs)+" vs. " + tp.state);
	        if (findInDfa(arcs, [0, tp.state])) {
	            // an accepting state, pop it and try somethign else
	            //print("WAA");
	            this.pop();
	            if (this.stack.length === 0) {
	                throw new Sk.builtin.SyntaxError("too much input", this.filename);
	            }
	        } else {
	            // no transition
	            errline = context[0][0];

	            var that = this;
	            var ar = arcs.map(function(a) {
	                var i = a[0];
	                var t = that.grammar.labels[i][0];
	                return Sk.nameForToken(t);
	            });
	            var extra = {
	                kind: "DAG_MISS",
	                expected: ar,
	                found: Sk.nameForToken(type),
	                found_val: value,
	                inside: Sk.nameForToken(tp.node.type),
	                node: tp.node,
	                parent: this.stack.length > 1 ? this.stack[this.stack.length - 2].node : undefined
	            };
	            var reason = "expected " + ar.join(', ') + " but found " + extra.found + " while parsing " + extra.inside;

	            throw new Sk.builtin.SyntaxError(reason, this.filename, errline, context, extra);
	        }
	    }
	};

	// turn a token into a label
	Parser.prototype.classify = function (type, value, context) {
	    var ilabel;
	    if (type === Sk.Tokenizer.Tokens.T_NAME) {
	        this.used_names[value] = true;
	        ilabel = this.grammar.keywords.hasOwnProperty(value) && this.grammar.keywords[value];

	        /* Check for handling print as an builtin function */
	        if(value === "print" && (this.p_flags & Parser.CO_FUTURE_PRINT_FUNCTION || Sk.python3 === true)) {
	            ilabel = false; // ilabel determines if the value is a keyword
	        }

	        if (ilabel) {
	            //print("is keyword");
	            return ilabel;
	        }
	    }
	    ilabel = this.grammar.tokens.hasOwnProperty(type) && this.grammar.tokens[type];
	    if (!ilabel) {
	        // throw new Sk.builtin.SyntaxError("bad token", type, value, context);
	        // Questionable modification to put line number in position 2
	        // like everywhere else and filename in position 1.
	        var extra = {
	            kind: "CLASSIFY",
	            type: type,
	            value: value
	        };
	        throw new Sk.builtin.SyntaxError("bad token", this.filename, context[0][0], context, extra);
	    }
	    return ilabel;
	};

	// shift a token
	Parser.prototype.shift = function (type, value, newstate, context) {
	    var dfa = this.stack[this.stack.length - 1].dfa;
	    var state = this.stack[this.stack.length - 1].state;
	    var node = this.stack[this.stack.length - 1].node;
	    //print("context", context);
	    var newnode = {
	        type      : type,
	        value     : value,
	        lineno    : context[0][0],         // throwing away end here to match cpython
	        col_offset: context[0][1],
	        children  : null
	    };
	    if (newnode) {
	        node.children.push(newnode);
	    }
	    this.stack[this.stack.length - 1] = {
	        dfa  : dfa,
	        state: newstate,
	        node : node
	    };
	};

	// push a nonterminal
	Parser.prototype.push = function (type, newdfa, newstate, context) {
	    var dfa = this.stack[this.stack.length - 1].dfa;
	    var node = this.stack[this.stack.length - 1].node;
	    var newnode = {
	        type      : type,
	        value     : null,
	        lineno    : context[0][0],      // throwing away end here to match cpython
	        col_offset: context[0][1],
	        children  : []
	    };
	    this.stack[this.stack.length - 1] = {
	        dfa  : dfa,
	        state: newstate,
	        node : node
	    };
	    this.stack.push({
	        dfa  : newdfa,
	        state: 0,
	        node : newnode
	    });
	};

	//var ac = 0;
	//var bc = 0;

	// pop a nonterminal
	Parser.prototype.pop = function () {
	    var node;
	    var pop = this.stack.pop();
	    var newnode = pop.node;
	    //print("POP");
	    if (newnode) {
	        //print("A", ac++, newnode.type);
	        //print("stacklen:"+this.stack.length);
	        if (this.stack.length !== 0) {
	            //print("B", bc++);
	            node = this.stack[this.stack.length - 1].node;
	            node.children.push(newnode);
	        } else {
	            //print("C");
	            this.rootnode = newnode;
	            this.rootnode.used_names = this.used_names;
	        }
	    }
	};

	/**
	 * parser for interactive input. returns a function that should be called with
	 * lines of input as they are entered. the function will return false
	 * until the input is complete, when it will return the rootnode of the parse.
	 *
	 * @param {string} filename
	 * @param {string=} style root of parse tree (optional)
	 */
	function makeParser (filename, style) {
	    var tokenizer;
	    var T_OP;
	    var T_NL;
	    var T_COMMENT;
	    var prefix;
	    var column;
	    var lineno;
	    var p;
	    if (style === undefined) {
	        style = "file_input";
	    }
	    p = new Parser(filename, Sk.ParseTables);
	    // for closure's benefit
	    if (style === "file_input") {
	        p.setup(Sk.ParseTables.sym.file_input);
	    } else {
	        goog.asserts.fail("todo;");
	    }
	    lineno = 1;
	    column = 0;
	    prefix = "";
	    T_COMMENT = Sk.Tokenizer.Tokens.T_COMMENT;
	    T_NL = Sk.Tokenizer.Tokens.T_NL;
	    T_OP = Sk.Tokenizer.Tokens.T_OP;
	    tokenizer = new Sk.Tokenizer(filename, style === "single_input", function (type, value, start, end, line) {
	        var s_lineno = start[0];
	        var s_column = start[1];
	        /*
	         if (s_lineno !== lineno && s_column !== column)
	         {
	         // todo; update prefix and line/col
	         }
	         */
	        if (type === T_COMMENT || type === T_NL) {
	            prefix += value;
	            lineno = end[0];
	            column = end[1];
	            if (value[value.length - 1] === "\n") {
	                lineno += 1;
	                column = 0;
	            }
	            //print("  not calling addtoken");
	            return undefined;
	        }
	        if (type === T_OP) {
	            type = Sk.OpMap[value];
	        }
	        if (p.addtoken(type, value, [start, end, line])) {
	            return true;
	        }
	    });

	    // create parser function
	    var parseFunc = function (line) {
	        var ret = tokenizer.generateTokens(line);
	        //print("tok:"+ret);
	        if (ret) {
	            if (ret !== "done") {
	                throw new Sk.builtin.SyntaxError("incomplete input", this.filename);
	            }
	            return p.rootnode;
	        }
	        return false;
	    };

	    // set flags, and return
	    parseFunc.p_flags = p.p_flags;
	    return parseFunc;
	}

	Sk.parse = function parse (filename, input) {
	    var i;
	    var ret;
	    var lines;
	    var parseFunc = makeParser(filename);
	    if (input.substr(input.length - 1, 1) !== "\n") {
	        input += "\n";
	    }
	    //print("input:"+input);
	    lines = input.split("\n");
	    for (i = 0; i < lines.length; ++i) {
	        ret = parseFunc(lines[i] + ((i === lines.length - 1) ? "" : "\n"));
	    }

	    /*
	     * Small adjustments here in order to return th flags and the cst
	     */
	    return {"cst": ret, "flags": parseFunc.p_flags};
	};

	Sk.parseTreeDump = function parseTreeDump (n, indent) {
	    //return JSON.stringify(n, null, 2);
	    var i;
	    var ret;
	    indent = indent || "";
	    ret = "";
	    ret += indent;
	    if (n.type >= 256) { // non-term
	        ret += Sk.ParseTables.number2symbol[n.type] + "\n";
	        for (i = 0; i < n.children.length; ++i) {
	            ret += Sk.parseTreeDump(n.children[i], indent + "  ");
	        }
	    } else {
	        ret += Sk.Tokenizer.tokenNames[n.type] + ": " + new Sk.builtin.str(n.value)["$r"]().v + "\n";
	    }
	    return ret;
	};


	goog.exportSymbol("Sk.parse", Sk.parse);
	goog.exportSymbol("Sk.parseTreeDump", Sk.parseTreeDump);



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/gen/astnodes.js ---- */ 

	/* File automatically generated by ./asdl_js.py. */

	/* ----- expr_context ----- */
	/** @constructor */
	function Load() {}
	/** @constructor */
	function Store() {}
	/** @constructor */
	function Del() {}
	/** @constructor */
	function AugLoad() {}
	/** @constructor */
	function AugStore() {}
	/** @constructor */
	function Param() {}

	/* ----- boolop ----- */
	/** @constructor */
	function And() {}
	/** @constructor */
	function Or() {}

	/* ----- operator ----- */
	/** @constructor */
	function Add() {}
	/** @constructor */
	function Sub() {}
	/** @constructor */
	function Mult() {}
	/** @constructor */
	function Div() {}
	/** @constructor */
	function Mod() {}
	/** @constructor */
	function Pow() {}
	/** @constructor */
	function LShift() {}
	/** @constructor */
	function RShift() {}
	/** @constructor */
	function BitOr() {}
	/** @constructor */
	function BitXor() {}
	/** @constructor */
	function BitAnd() {}
	/** @constructor */
	function FloorDiv() {}

	/* ----- unaryop ----- */
	/** @constructor */
	function Invert() {}
	/** @constructor */
	function Not() {}
	/** @constructor */
	function UAdd() {}
	/** @constructor */
	function USub() {}

	/* ----- cmpop ----- */
	/** @constructor */
	function Eq() {}
	/** @constructor */
	function NotEq() {}
	/** @constructor */
	function Lt() {}
	/** @constructor */
	function LtE() {}
	/** @constructor */
	function Gt() {}
	/** @constructor */
	function GtE() {}
	/** @constructor */
	function Is() {}
	/** @constructor */
	function IsNot() {}
	/** @constructor */
	function In_() {}
	/** @constructor */
	function NotIn() {}







	/* ---------------------- */
	/* constructors for nodes */
	/* ---------------------- */





	/** @constructor */
	function Module(/* {asdl_seq *} */ body)
	{
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function Interactive(/* {asdl_seq *} */ body)
	{
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function Expression(/* {expr_ty} */ body)
	{
	    goog.asserts.assert(body !== null && body !== undefined);
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function Suite(/* {asdl_seq *} */ body)
	{
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function FunctionDef(/* {identifier} */ name, /* {arguments__ty} */ args, /*
	                          {asdl_seq *} */ body, /* {asdl_seq *} */
	                          decorator_list, /* {int} */ lineno, /* {int} */
	                          col_offset)
	{
	    goog.asserts.assert(name !== null && name !== undefined);
	    goog.asserts.assert(args !== null && args !== undefined);
	    this.name = name;
	    this.args = args;
	    this.body = body;
	    this.decorator_list = decorator_list;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function ClassDef(/* {identifier} */ name, /* {asdl_seq *} */ bases, /*
	                       {asdl_seq *} */ body, /* {asdl_seq *} */ decorator_list,
	                       /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(name !== null && name !== undefined);
	    this.name = name;
	    this.bases = bases;
	    this.body = body;
	    this.decorator_list = decorator_list;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Return_(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Delete_(/* {asdl_seq *} */ targets, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    this.targets = targets;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Assign(/* {asdl_seq *} */ targets, /* {expr_ty} */ value, /* {int} */
	                     lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.targets = targets;
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function AugAssign(/* {expr_ty} */ target, /* {operator_ty} */ op, /* {expr_ty}
	                        */ value, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(target !== null && target !== undefined);
	    goog.asserts.assert(op !== null && op !== undefined);
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.target = target;
	    this.op = op;
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Print(/* {expr_ty} */ dest, /* {asdl_seq *} */ values, /* {bool} */
	                    nl, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.dest = dest;
	    this.values = values;
	    this.nl = nl;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function For_(/* {expr_ty} */ target, /* {expr_ty} */ iter, /* {asdl_seq *} */
	                   body, /* {asdl_seq *} */ orelse, /* {int} */ lineno, /*
	                   {int} */ col_offset)
	{
	    goog.asserts.assert(target !== null && target !== undefined);
	    goog.asserts.assert(iter !== null && iter !== undefined);
	    this.target = target;
	    this.iter = iter;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function While_(/* {expr_ty} */ test, /* {asdl_seq *} */ body, /* {asdl_seq *}
	                     */ orelse, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    this.test = test;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function If_(/* {expr_ty} */ test, /* {asdl_seq *} */ body, /* {asdl_seq *} */
	                  orelse, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    this.test = test;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function With_(/* {expr_ty} */ context_expr, /* {expr_ty} */ optional_vars, /*
	                    {asdl_seq *} */ body, /* {int} */ lineno, /* {int} */
	                    col_offset)
	{
	    goog.asserts.assert(context_expr !== null && context_expr !== undefined);
	    this.context_expr = context_expr;
	    this.optional_vars = optional_vars;
	    this.body = body;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Raise(/* {expr_ty} */ type, /* {expr_ty} */ inst, /* {expr_ty} */
	                    tback, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.type = type;
	    this.inst = inst;
	    this.tback = tback;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function TryExcept(/* {asdl_seq *} */ body, /* {asdl_seq *} */ handlers, /*
	                        {asdl_seq *} */ orelse, /* {int} */ lineno, /* {int} */
	                        col_offset)
	{
	    this.body = body;
	    this.handlers = handlers;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function TryFinally(/* {asdl_seq *} */ body, /* {asdl_seq *} */ finalbody, /*
	                         {int} */ lineno, /* {int} */ col_offset)
	{
	    this.body = body;
	    this.finalbody = finalbody;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Assert(/* {expr_ty} */ test, /* {expr_ty} */ msg, /* {int} */ lineno,
	                     /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    this.test = test;
	    this.msg = msg;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Import_(/* {asdl_seq *} */ names, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    this.names = names;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function ImportFrom(/* {identifier} */ module, /* {asdl_seq *} */ names, /*
	                         {int} */ level, /* {int} */ lineno, /* {int} */
	                         col_offset)
	{
	    goog.asserts.assert(module !== null && module !== undefined);
	    this.module = module;
	    this.names = names;
	    this.level = level;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Exec(/* {expr_ty} */ body, /* {expr_ty} */ globals, /* {expr_ty} */
	                   locals, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(body !== null && body !== undefined);
	    this.body = body;
	    this.globals = globals;
	    this.locals = locals;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Global(/* {asdl_seq *} */ names, /* {int} */ lineno, /* {int} */
	                     col_offset)
	{
	    this.names = names;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Expr(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Pass(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Break_(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Continue_(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Debugger_(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function BoolOp(/* {boolop_ty} */ op, /* {asdl_seq *} */ values, /* {int} */
	                     lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(op !== null && op !== undefined);
	    this.op = op;
	    this.values = values;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function BinOp(/* {expr_ty} */ left, /* {operator_ty} */ op, /* {expr_ty} */
	                    right, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(left !== null && left !== undefined);
	    goog.asserts.assert(op !== null && op !== undefined);
	    goog.asserts.assert(right !== null && right !== undefined);
	    this.left = left;
	    this.op = op;
	    this.right = right;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function UnaryOp(/* {unaryop_ty} */ op, /* {expr_ty} */ operand, /* {int} */
	                      lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(op !== null && op !== undefined);
	    goog.asserts.assert(operand !== null && operand !== undefined);
	    this.op = op;
	    this.operand = operand;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Lambda(/* {arguments__ty} */ args, /* {expr_ty} */ body, /* {int} */
	                     lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(args !== null && args !== undefined);
	    goog.asserts.assert(body !== null && body !== undefined);
	    this.args = args;
	    this.body = body;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function IfExp(/* {expr_ty} */ test, /* {expr_ty} */ body, /* {expr_ty} */
	                    orelse, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    goog.asserts.assert(body !== null && body !== undefined);
	    goog.asserts.assert(orelse !== null && orelse !== undefined);
	    this.test = test;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Dict(/* {asdl_seq *} */ keys, /* {asdl_seq *} */ values, /* {int} */
	                   lineno, /* {int} */ col_offset)
	{
	    this.keys = keys;
	    this.values = values;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Set(/* {asdl_seq *} */ elts, /* {int} */ lineno, /* {int} */
	                  col_offset)
	{
	    this.elts = elts;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function ListComp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /* {int}
	                       */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(elt !== null && elt !== undefined);
	    this.elt = elt;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function SetComp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /* {int}
	                      */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(elt !== null && elt !== undefined);
	    this.elt = elt;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function DictComp(/* {expr_ty} */ key, /* {expr_ty} */ value, /* {asdl_seq *}
	                       */ generators, /* {int} */ lineno, /* {int} */
	                       col_offset)
	{
	    goog.asserts.assert(key !== null && key !== undefined);
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.key = key;
	    this.value = value;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function GeneratorExp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /*
	                           {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(elt !== null && elt !== undefined);
	    this.elt = elt;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Yield(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */
	                    col_offset)
	{
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Compare(/* {expr_ty} */ left, /* {asdl_int_seq *} */ ops, /* {asdl_seq
	                      *} */ comparators, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    goog.asserts.assert(left !== null && left !== undefined);
	    this.left = left;
	    this.ops = ops;
	    this.comparators = comparators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Call(/* {expr_ty} */ func, /* {asdl_seq *} */ args, /* {asdl_seq *} */
	                   keywords, /* {expr_ty} */ starargs, /* {expr_ty} */ kwargs,
	                   /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(func !== null && func !== undefined);
	    this.func = func;
	    this.args = args;
	    this.keywords = keywords;
	    this.starargs = starargs;
	    this.kwargs = kwargs;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Repr(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Num(/* {object} */ n, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(n !== null && n !== undefined);
	    this.n = n;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Str(/* {string} */ s, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(s !== null && s !== undefined);
	    this.s = s;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Attribute(/* {expr_ty} */ value, /* {identifier} */ attr, /*
	                        {expr_context_ty} */ ctx, /* {int} */ lineno, /* {int}
	                        */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    goog.asserts.assert(attr !== null && attr !== undefined);
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.value = value;
	    this.attr = attr;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Subscript(/* {expr_ty} */ value, /* {slice_ty} */ slice, /*
	                        {expr_context_ty} */ ctx, /* {int} */ lineno, /* {int}
	                        */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    goog.asserts.assert(slice !== null && slice !== undefined);
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.value = value;
	    this.slice = slice;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Name(/* {identifier} */ id, /* {expr_context_ty} */ ctx, /* {int} */
	                   lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(id !== null && id !== undefined);
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.id = id;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function List(/* {asdl_seq *} */ elts, /* {expr_context_ty} */ ctx, /* {int} */
	                   lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.elts = elts;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Tuple(/* {asdl_seq *} */ elts, /* {expr_context_ty} */ ctx, /* {int}
	                    */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.elts = elts;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Ellipsis()
	{
	    return this;
	}

	/** @constructor */
	function Slice(/* {expr_ty} */ lower, /* {expr_ty} */ upper, /* {expr_ty} */
	                    step)
	{
	    this.lower = lower;
	    this.upper = upper;
	    this.step = step;
	    return this;
	}

	/** @constructor */
	function ExtSlice(/* {asdl_seq *} */ dims)
	{
	    this.dims = dims;
	    return this;
	}

	/** @constructor */
	function Index(/* {expr_ty} */ value)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.value = value;
	    return this;
	}

	/** @constructor */
	function comprehension(/* {expr_ty} */ target, /* {expr_ty} */ iter, /*
	                            {asdl_seq *} */ ifs)
	{
	    goog.asserts.assert(target !== null && target !== undefined);
	    goog.asserts.assert(iter !== null && iter !== undefined);
	    this.target = target;
	    this.iter = iter;
	    this.ifs = ifs;
	    return this;
	}

	/** @constructor */
	function ExceptHandler(/* {expr_ty} */ type, /* {expr_ty} */ name, /* {asdl_seq
	                            *} */ body, /* {int} */ lineno, /* {int} */
	                            col_offset)
	{
	    this.type = type;
	    this.name = name;
	    this.body = body;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function arguments_(/* {asdl_seq *} */ args, /* {identifier} */ vararg, /*
	                         {identifier} */ kwarg, /* {asdl_seq *} */ defaults)
	{
	    this.args = args;
	    this.vararg = vararg;
	    this.kwarg = kwarg;
	    this.defaults = defaults;
	    return this;
	}

	/** @constructor */
	function keyword(/* {identifier} */ arg, /* {expr_ty} */ value)
	{
	    goog.asserts.assert(arg !== null && arg !== undefined);
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.arg = arg;
	    this.value = value;
	    return this;
	}

	/** @constructor */
	function alias(/* {identifier} */ name, /* {identifier} */ asname)
	{
	    goog.asserts.assert(name !== null && name !== undefined);
	    this.name = name;
	    this.asname = asname;
	    return this;
	}


	Module.prototype._astname = "Module";
	Module.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	Interactive.prototype._astname = "Interactive";
	Interactive.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	Expression.prototype._astname = "Expression";
	Expression.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	Suite.prototype._astname = "Suite";
	Suite.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	FunctionDef.prototype._astname = "FunctionDef";
	FunctionDef.prototype._fields = [
	    "name", function(n) { return n.name; },
	    "args", function(n) { return n.args; },
	    "body", function(n) { return n.body; },
	    "decorator_list", function(n) { return n.decorator_list; }
	];
	ClassDef.prototype._astname = "ClassDef";
	ClassDef.prototype._fields = [
	    "name", function(n) { return n.name; },
	    "bases", function(n) { return n.bases; },
	    "body", function(n) { return n.body; },
	    "decorator_list", function(n) { return n.decorator_list; }
	];
	Return_.prototype._astname = "Return";
	Return_.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Delete_.prototype._astname = "Delete";
	Delete_.prototype._fields = [
	    "targets", function(n) { return n.targets; }
	];
	Assign.prototype._astname = "Assign";
	Assign.prototype._fields = [
	    "targets", function(n) { return n.targets; },
	    "value", function(n) { return n.value; }
	];
	AugAssign.prototype._astname = "AugAssign";
	AugAssign.prototype._fields = [
	    "target", function(n) { return n.target; },
	    "op", function(n) { return n.op; },
	    "value", function(n) { return n.value; }
	];
	Print.prototype._astname = "Print";
	Print.prototype._fields = [
	    "dest", function(n) { return n.dest; },
	    "values", function(n) { return n.values; },
	    "nl", function(n) { return n.nl; }
	];
	For_.prototype._astname = "For";
	For_.prototype._fields = [
	    "target", function(n) { return n.target; },
	    "iter", function(n) { return n.iter; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	While_.prototype._astname = "While";
	While_.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	If_.prototype._astname = "If";
	If_.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	With_.prototype._astname = "With";
	With_.prototype._fields = [
	    "context_expr", function(n) { return n.context_expr; },
	    "optional_vars", function(n) { return n.optional_vars; },
	    "body", function(n) { return n.body; }
	];
	Raise.prototype._astname = "Raise";
	Raise.prototype._fields = [
	    "type", function(n) { return n.type; },
	    "inst", function(n) { return n.inst; },
	    "tback", function(n) { return n.tback; }
	];
	TryExcept.prototype._astname = "TryExcept";
	TryExcept.prototype._fields = [
	    "body", function(n) { return n.body; },
	    "handlers", function(n) { return n.handlers; },
	    "orelse", function(n) { return n.orelse; }
	];
	TryFinally.prototype._astname = "TryFinally";
	TryFinally.prototype._fields = [
	    "body", function(n) { return n.body; },
	    "finalbody", function(n) { return n.finalbody; }
	];
	Assert.prototype._astname = "Assert";
	Assert.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "msg", function(n) { return n.msg; }
	];
	Import_.prototype._astname = "Import";
	Import_.prototype._fields = [
	    "names", function(n) { return n.names; }
	];
	ImportFrom.prototype._astname = "ImportFrom";
	ImportFrom.prototype._fields = [
	    "module", function(n) { return n.module; },
	    "names", function(n) { return n.names; },
	    "level", function(n) { return n.level; }
	];
	Exec.prototype._astname = "Exec";
	Exec.prototype._fields = [
	    "body", function(n) { return n.body; },
	    "globals", function(n) { return n.globals; },
	    "locals", function(n) { return n.locals; }
	];
	Global.prototype._astname = "Global";
	Global.prototype._fields = [
	    "names", function(n) { return n.names; }
	];
	Expr.prototype._astname = "Expr";
	Expr.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Pass.prototype._astname = "Pass";
	Pass.prototype._fields = [
	];
	Break_.prototype._astname = "Break";
	Break_.prototype._fields = [
	];
	Continue_.prototype._astname = "Continue";
	Continue_.prototype._fields = [
	];
	Debugger_.prototype._astname = "Debugger";
	Debugger_.prototype._fields = [
	];
	BoolOp.prototype._astname = "BoolOp";
	BoolOp.prototype._fields = [
	    "op", function(n) { return n.op; },
	    "values", function(n) { return n.values; }
	];
	BinOp.prototype._astname = "BinOp";
	BinOp.prototype._fields = [
	    "left", function(n) { return n.left; },
	    "op", function(n) { return n.op; },
	    "right", function(n) { return n.right; }
	];
	UnaryOp.prototype._astname = "UnaryOp";
	UnaryOp.prototype._fields = [
	    "op", function(n) { return n.op; },
	    "operand", function(n) { return n.operand; }
	];
	Lambda.prototype._astname = "Lambda";
	Lambda.prototype._fields = [
	    "args", function(n) { return n.args; },
	    "body", function(n) { return n.body; }
	];
	IfExp.prototype._astname = "IfExp";
	IfExp.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	Dict.prototype._astname = "Dict";
	Dict.prototype._fields = [
	    "keys", function(n) { return n.keys; },
	    "values", function(n) { return n.values; }
	];
	Set.prototype._astname = "Set";
	Set.prototype._fields = [
	    "elts", function(n) { return n.elts; }
	];
	ListComp.prototype._astname = "ListComp";
	ListComp.prototype._fields = [
	    "elt", function(n) { return n.elt; },
	    "generators", function(n) { return n.generators; }
	];
	SetComp.prototype._astname = "SetComp";
	SetComp.prototype._fields = [
	    "elt", function(n) { return n.elt; },
	    "generators", function(n) { return n.generators; }
	];
	DictComp.prototype._astname = "DictComp";
	DictComp.prototype._fields = [
	    "key", function(n) { return n.key; },
	    "value", function(n) { return n.value; },
	    "generators", function(n) { return n.generators; }
	];
	GeneratorExp.prototype._astname = "GeneratorExp";
	GeneratorExp.prototype._fields = [
	    "elt", function(n) { return n.elt; },
	    "generators", function(n) { return n.generators; }
	];
	Yield.prototype._astname = "Yield";
	Yield.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Compare.prototype._astname = "Compare";
	Compare.prototype._fields = [
	    "left", function(n) { return n.left; },
	    "ops", function(n) { return n.ops; },
	    "comparators", function(n) { return n.comparators; }
	];
	Call.prototype._astname = "Call";
	Call.prototype._fields = [
	    "func", function(n) { return n.func; },
	    "args", function(n) { return n.args; },
	    "keywords", function(n) { return n.keywords; },
	    "starargs", function(n) { return n.starargs; },
	    "kwargs", function(n) { return n.kwargs; }
	];
	Repr.prototype._astname = "Repr";
	Repr.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Num.prototype._astname = "Num";
	Num.prototype._fields = [
	    "n", function(n) { return n.n; }
	];
	Str.prototype._astname = "Str";
	Str.prototype._fields = [
	    "s", function(n) { return n.s; }
	];
	Attribute.prototype._astname = "Attribute";
	Attribute.prototype._fields = [
	    "value", function(n) { return n.value; },
	    "attr", function(n) { return n.attr; },
	    "ctx", function(n) { return n.ctx; }
	];
	Subscript.prototype._astname = "Subscript";
	Subscript.prototype._fields = [
	    "value", function(n) { return n.value; },
	    "slice", function(n) { return n.slice; },
	    "ctx", function(n) { return n.ctx; }
	];
	Name.prototype._astname = "Name";
	Name.prototype._fields = [
	    "id", function(n) { return n.id; },
	    "ctx", function(n) { return n.ctx; }
	];
	List.prototype._astname = "List";
	List.prototype._fields = [
	    "elts", function(n) { return n.elts; },
	    "ctx", function(n) { return n.ctx; }
	];
	Tuple.prototype._astname = "Tuple";
	Tuple.prototype._fields = [
	    "elts", function(n) { return n.elts; },
	    "ctx", function(n) { return n.ctx; }
	];
	Load.prototype._astname = "Load";
	Load.prototype._isenum = true;
	Store.prototype._astname = "Store";
	Store.prototype._isenum = true;
	Del.prototype._astname = "Del";
	Del.prototype._isenum = true;
	AugLoad.prototype._astname = "AugLoad";
	AugLoad.prototype._isenum = true;
	AugStore.prototype._astname = "AugStore";
	AugStore.prototype._isenum = true;
	Param.prototype._astname = "Param";
	Param.prototype._isenum = true;
	Ellipsis.prototype._astname = "Ellipsis";
	Ellipsis.prototype._fields = [
	];
	Slice.prototype._astname = "Slice";
	Slice.prototype._fields = [
	    "lower", function(n) { return n.lower; },
	    "upper", function(n) { return n.upper; },
	    "step", function(n) { return n.step; }
	];
	ExtSlice.prototype._astname = "ExtSlice";
	ExtSlice.prototype._fields = [
	    "dims", function(n) { return n.dims; }
	];
	Index.prototype._astname = "Index";
	Index.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	And.prototype._astname = "And";
	And.prototype._isenum = true;
	Or.prototype._astname = "Or";
	Or.prototype._isenum = true;
	Add.prototype._astname = "Add";
	Add.prototype._isenum = true;
	Sub.prototype._astname = "Sub";
	Sub.prototype._isenum = true;
	Mult.prototype._astname = "Mult";
	Mult.prototype._isenum = true;
	Div.prototype._astname = "Div";
	Div.prototype._isenum = true;
	Mod.prototype._astname = "Mod";
	Mod.prototype._isenum = true;
	Pow.prototype._astname = "Pow";
	Pow.prototype._isenum = true;
	LShift.prototype._astname = "LShift";
	LShift.prototype._isenum = true;
	RShift.prototype._astname = "RShift";
	RShift.prototype._isenum = true;
	BitOr.prototype._astname = "BitOr";
	BitOr.prototype._isenum = true;
	BitXor.prototype._astname = "BitXor";
	BitXor.prototype._isenum = true;
	BitAnd.prototype._astname = "BitAnd";
	BitAnd.prototype._isenum = true;
	FloorDiv.prototype._astname = "FloorDiv";
	FloorDiv.prototype._isenum = true;
	Invert.prototype._astname = "Invert";
	Invert.prototype._isenum = true;
	Not.prototype._astname = "Not";
	Not.prototype._isenum = true;
	UAdd.prototype._astname = "UAdd";
	UAdd.prototype._isenum = true;
	USub.prototype._astname = "USub";
	USub.prototype._isenum = true;
	Eq.prototype._astname = "Eq";
	Eq.prototype._isenum = true;
	NotEq.prototype._astname = "NotEq";
	NotEq.prototype._isenum = true;
	Lt.prototype._astname = "Lt";
	Lt.prototype._isenum = true;
	LtE.prototype._astname = "LtE";
	LtE.prototype._isenum = true;
	Gt.prototype._astname = "Gt";
	Gt.prototype._isenum = true;
	GtE.prototype._astname = "GtE";
	GtE.prototype._isenum = true;
	Is.prototype._astname = "Is";
	Is.prototype._isenum = true;
	IsNot.prototype._astname = "IsNot";
	IsNot.prototype._isenum = true;
	In_.prototype._astname = "In";
	In_.prototype._isenum = true;
	NotIn.prototype._astname = "NotIn";
	NotIn.prototype._isenum = true;
	comprehension.prototype._astname = "comprehension";
	comprehension.prototype._fields = [
	    "target", function(n) { return n.target; },
	    "iter", function(n) { return n.iter; },
	    "ifs", function(n) { return n.ifs; }
	];
	ExceptHandler.prototype._astname = "ExceptHandler";
	ExceptHandler.prototype._fields = [
	    "type", function(n) { return n.type; },
	    "name", function(n) { return n.name; },
	    "body", function(n) { return n.body; }
	];
	arguments_.prototype._astname = "arguments";
	arguments_.prototype._fields = [
	    "args", function(n) { return n.args; },
	    "vararg", function(n) { return n.vararg; },
	    "kwarg", function(n) { return n.kwarg; },
	    "defaults", function(n) { return n.defaults; }
	];
	keyword.prototype._astname = "keyword";
	keyword.prototype._fields = [
	    "arg", function(n) { return n.arg; },
	    "value", function(n) { return n.value; }
	];
	alias.prototype._astname = "alias";
	alias.prototype._fields = [
	    "name", function(n) { return n.name; },
	    "asname", function(n) { return n.asname; }
	];




	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/ast.js ---- */ 

	//
	// This is pretty much a straight port of ast.c from CPython 2.6.5.
	//
	// The previous version was easier to work with and more JS-ish, but having a
	// somewhat different ast structure than cpython makes testing more difficult.
	//
	// This way, we can use a dump from the ast module on any arbitrary python
	// code and know that we're the same up to ast level, at least.
	//

	var SYM = Sk.ParseTables.sym;
	var TOK = Sk.Tokenizer.Tokens;
	var COMP_GENEXP = 0;
	var COMP_SETCOMP = 1;

	/** @constructor */
	function Compiling (encoding, filename, c_flags) {
	    this.c_encoding = encoding;
	    this.c_filename = filename;
	    this.c_flags = c_flags || 0;
	}

	/**
	 * @return {number}
	 */
	function NCH (n) {
	    goog.asserts.assert(n !== undefined);
	    if (n.children === null) {
	        return 0;
	    }
	    return n.children.length;
	}

	function CHILD (n, i) {
	    goog.asserts.assert(n !== undefined);
	    goog.asserts.assert(i !== undefined);
	    return n.children[i];
	}

	function REQ (n, type) {
	    goog.asserts.assert(n.type === type, "node wasn't expected type");
	}

	function strobj (s) {
	    goog.asserts.assert(typeof s === "string", "expecting string, got " + (typeof s));
	    return new Sk.builtin.str(s);
	}

	/** @return {number} */
	function numStmts (n) {
	    var ch;
	    var i;
	    var cnt;
	    switch (n.type) {
	        case SYM.single_input:
	            if (CHILD(n, 0).type === TOK.T_NEWLINE) {
	                return 0;
	            }
	            else {
	                return numStmts(CHILD(n, 0));
	            }
	        case SYM.file_input:
	            cnt = 0;
	            for (i = 0; i < NCH(n); ++i) {
	                ch = CHILD(n, i);
	                if (ch.type === SYM.stmt) {
	                    cnt += numStmts(ch);
	                }
	            }
	            return cnt;
	        case SYM.stmt:
	            return numStmts(CHILD(n, 0));
	        case SYM.compound_stmt:
	            return 1;
	        case SYM.simple_stmt:
	            return Math.floor(NCH(n) / 2); // div 2 is to remove count of ;s
	        case SYM.suite:
	            if (NCH(n) === 1) {
	                return numStmts(CHILD(n, 0));
	            }
	            else {
	                cnt = 0;
	                for (i = 2; i < NCH(n) - 1; ++i) {
	                    cnt += numStmts(CHILD(n, i));
	                }
	                return cnt;
	            }
	            break;
	        default:
	            goog.asserts.fail("Non-statement found");
	    }
	    return 0;
	}

	function forbiddenCheck (c, n, x, lineno) {
	    if (x === "None") {
	        throw new Sk.builtin.SyntaxError("assignment to None", c.c_filename, lineno, [], {node: n});
	    }
	    if (x === "True" || x === "False") {
	        throw new Sk.builtin.SyntaxError("assignment to True or False is forbidden", c.c_filename, lineno, [], {node: n});
	    }
	}

	/**
	 * Set the context ctx for e, recursively traversing e.
	 *
	 * Only sets context for expr kinds that can appear in assignment context as
	 * per the asdl file.
	 */
	function setContext (c, e, ctx, n) {
	    var i;
	    var exprName;
	    var s;
	    goog.asserts.assert(ctx !== AugStore && ctx !== AugLoad);
	    s = null;
	    exprName = null;

	    switch (e.constructor) {
	        case Attribute:
	        case Name:
	            if (ctx === Store) {
	                forbiddenCheck(c, n, e.attr, n.lineno);
	            }
	            e.ctx = ctx;
	            break;
	        case Subscript:
	            e.ctx = ctx;
	            break;
	        case List:
	            e.ctx = ctx;
	            s = e.elts;
	            break;
	        case Tuple:
	            if (e.elts.length === 0) {
	                throw new Sk.builtin.SyntaxError("can't assign to ()", c.c_filename, n.lineno, ctx, {node: n});
	            }
	            e.ctx = ctx;
	            s = e.elts;
	            break;
	        case Lambda:
	            exprName = "lambda";
	            break;
	        case Call:
	            exprName = "function call";
	            break;
	        case BoolOp:
	        case BinOp:
	        case UnaryOp:
	            exprName = "operator";
	            break;
	        case GeneratorExp:
	            exprName = "generator expression";
	            break;
	        case Yield:
	            exprName = "yield expression";
	            break;
	        case ListComp:
	            exprName = "list comprehension";
	            break;
	        case SetComp:
	            exprName = "set comprehension";
	            break;
	        case DictComp:
	            exprName = "dict comprehension";
	            break;
	        case Dict:
	        case Set:
	        case Num:
	        case Str:
	            exprName = "literal";
	            break;
	        case Compare:
	            exprName = "comparison";
	            break;
	        case Repr:
	            exprName = "repr";
	            break;
	        case IfExp:
	            exprName = "conditional expression";
	            break;
	        default:
	            goog.asserts.fail("unhandled expression in assignment");
	    }
	    if (exprName) {
	        throw new Sk.builtin.SyntaxError("can't " + (ctx === Store ? "assign to" : "delete") + " " + exprName, c.c_filename, n.lineno, [], {node: n});
	    }

	    if (s) {
	        for (i = 0; i < s.length; ++i) {
	            setContext(c, s[i], ctx, n);
	        }
	    }
	}

	var operatorMap = {};
	(function () {
	    operatorMap[TOK.T_VBAR] = BitOr;
	    operatorMap[TOK.T_CIRCUMFLEX] = BitXor;
	    operatorMap[TOK.T_AMPER] = BitAnd;
	    operatorMap[TOK.T_LEFTSHIFT] = LShift;
	    operatorMap[TOK.T_RIGHTSHIFT] = RShift;
	    operatorMap[TOK.T_PLUS] = Add;
	    operatorMap[TOK.T_MINUS] = Sub;
	    operatorMap[TOK.T_STAR] = Mult;
	    operatorMap[TOK.T_SLASH] = Div;
	    operatorMap[TOK.T_DOUBLESLASH] = FloorDiv;
	    operatorMap[TOK.T_PERCENT] = Mod;
	}());

	function getOperator (n) {
	    goog.asserts.assert(operatorMap[n.type] !== undefined);
	    return operatorMap[n.type];
	}

	function astForCompOp (c, n) {
	    /* comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'
	     |'is' 'not'
	     */
	    REQ(n, SYM.comp_op);
	    if (NCH(n) === 1) {
	        n = CHILD(n, 0);
	        switch (n.type) {
	            case TOK.T_LESS:
	                return Lt;
	            case TOK.T_GREATER:
	                return Gt;
	            case TOK.T_EQEQUAL:
	                return Eq;
	            case TOK.T_LESSEQUAL:
	                return LtE;
	            case TOK.T_GREATEREQUAL:
	                return GtE;
	            case TOK.T_NOTEQUAL:
	                return NotEq;
	            case TOK.T_NAME:
	                if (n.value === "in") {
	                    return In_;
	                }
	                if (n.value === "is") {
	                    return Is;
	                }
	        }
	    }
	    else if (NCH(n) === 2) {
	        if (CHILD(n, 0).type === TOK.T_NAME) {
	            if (CHILD(n, 1).value === "in") {
	                return NotIn;
	            }
	            if (CHILD(n, 0).value === "is") {
	                return IsNot;
	            }
	        }
	    }
	    goog.asserts.fail("invalid comp_op");
	}

	function seqForTestlist (c, n) {
	    /* testlist: test (',' test)* [','] */
	    var i;
	    var seq = [];
	    goog.asserts.assert(n.type === SYM.testlist ||
	        n.type === SYM.listmaker ||
	        n.type === SYM.testlist_comp ||
	        n.type === SYM.testlist_safe ||
	        n.type === SYM.testlist1);
	    for (i = 0; i < NCH(n); i += 2) {
	        goog.asserts.assert(CHILD(n, i).type === SYM.test || CHILD(n, i).type === SYM.old_test);
	        seq[i / 2] = astForExpr(c, CHILD(n, i));
	    }
	    return seq;
	}

	function astForSuite (c, n) {
	    /* suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT */
	    var j;
	    var num;
	    var i;
	    var end;
	    var ch;
	    var pos;
	    var seq;
	    REQ(n, SYM.suite);
	    seq = [];
	    pos = 0;
	    if (CHILD(n, 0).type === SYM.simple_stmt) {
	        n = CHILD(n, 0);
	        /* simple_stmt always ends with an NEWLINE and may have a trailing
	         * SEMI. */
	        end = NCH(n) - 1;
	        if (CHILD(n, end - 1).type === TOK.T_SEMI) {
	            end -= 1;
	        }
	        for (i = 0; i < end; i += 2) // by 2 to skip ;
	        {
	            seq[pos++] = astForStmt(c, CHILD(n, i));
	        }
	    }
	    else {
	        for (i = 2; i < NCH(n) - 1; ++i) {
	            ch = CHILD(n, i);
	            REQ(ch, SYM.stmt);
	            num = numStmts(ch);
	            if (num === 1) {
	                // small_stmt or compound_stmt w/ only 1 child
	                seq[pos++] = astForStmt(c, ch);
	            }
	            else {
	                ch = CHILD(ch, 0);
	                REQ(ch, SYM.simple_stmt);
	                for (j = 0; j < NCH(ch); j += 2) {
	                    if (NCH(CHILD(ch, j)) === 0) {
	                        goog.asserts.assert(j + 1 === NCH(ch));
	                        break;
	                    }
	                    seq[pos++] = astForStmt(c, CHILD(ch, j));
	                }
	            }
	        }
	    }
	    goog.asserts.assert(pos === numStmts(n));
	    return seq;
	}

	function astForExceptClause (c, exc, body) {
	    /* except_clause: 'except' [test [(',' | 'as') test]] */
	    var e;
	    REQ(exc, SYM.except_clause);
	    REQ(body, SYM.suite);
	    if (NCH(exc) === 1) {
	        return new ExceptHandler(null, null, astForSuite(c, body), exc.lineno, exc.col_offset);
	    }
	    else if (NCH(exc) === 2) {
	        return new ExceptHandler(astForExpr(c, CHILD(exc, 1)), null, astForSuite(c, body), exc.lineno, exc.col_offset);
	    }
	    else if (NCH(exc) === 4) {
	        e = astForExpr(c, CHILD(exc, 3));
	        setContext(c, e, Store, CHILD(exc, 3));
	        return new ExceptHandler(astForExpr(c, CHILD(exc, 1)), e, astForSuite(c, body), exc.lineno, exc.col_offset);
	    }
	    goog.asserts.fail("wrong number of children for except clause");
	}

	function astForTryStmt (c, n) {
	    var exceptSt;
	    var i;
	    var handlers;
	    var nc = NCH(n);
	    var nexcept = (nc - 3) / 3;
	    var body, orelse = [],
	        finally_ = null;

	    REQ(n, SYM.try_stmt);
	    body = astForSuite(c, CHILD(n, 2));
	    if (CHILD(n, nc - 3).type === TOK.T_NAME) {
	        if (CHILD(n, nc - 3).value === "finally") {
	            if (nc >= 9 && CHILD(n, nc - 6).type === TOK.T_NAME) {
	                /* we can assume it's an "else",
	                 because nc >= 9 for try-else-finally and
	                 it would otherwise have a type of except_clause */
	                orelse = astForSuite(c, CHILD(n, nc - 4));
	                nexcept--;
	            }

	            finally_ = astForSuite(c, CHILD(n, nc - 1));
	            nexcept--;
	        }
	        else {
	            /* we can assume it's an "else",
	             otherwise it would have a type of except_clause */
	            orelse = astForSuite(c, CHILD(n, nc - 1));
	            nexcept--;
	        }
	    }
	    else if (CHILD(n, nc - 3).type !== SYM.except_clause) {
	        throw new Sk.builtin.SyntaxError("malformed 'try' statement", c.c_filename, n.lineno);
	    }

	    if (nexcept > 0) {
	        handlers = [];
	        for (i = 0; i < nexcept; ++i) {
	            handlers[i] = astForExceptClause(c, CHILD(n, 3 + i * 3), CHILD(n, 5 + i * 3));
	        }
	        exceptSt = new TryExcept(body, handlers, orelse, n.lineno, n.col_offset);

	        if (!finally_) {
	            return exceptSt;
	        }

	        /* if a 'finally' is present too, we nest the TryExcept within a
	         TryFinally to emulate try ... except ... finally */
	        body = [exceptSt];
	    }

	    goog.asserts.assert(finally_ !== null);
	    return new TryFinally(body, finally_, n.lineno, n.col_offset);
	}


	function astForDottedName (c, n) {
	    var i;
	    var e;
	    var id;
	    var col_offset;
	    var lineno;
	    REQ(n, SYM.dotted_name);
	    lineno = n.lineno;
	    col_offset = n.col_offset;
	    id = strobj(CHILD(n, 0).value);
	    e = new Name(id, Load, lineno, col_offset);
	    for (i = 2; i < NCH(n); i += 2) {
	        id = strobj(CHILD(n, i).value);
	        e = new Attribute(e, id, Load, lineno, col_offset);
	    }
	    return e;
	}

	function astForDecorator (c, n) {
	    /* decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE */
	    var nameExpr;
	    REQ(n, SYM.decorator);
	    REQ(CHILD(n, 0), TOK.T_AT);
	    REQ(CHILD(n, NCH(n) - 1), TOK.T_NEWLINE);
	    nameExpr = astForDottedName(c, CHILD(n, 1));
	    if (NCH(n) === 3) // no args
	    {
	        return nameExpr;
	    }
	    else if (NCH(n) === 5) // call with no args
	    {
	        return new Call(nameExpr, [], [], null, null, n.lineno, n.col_offset);
	    }
	    else {
	        return astForCall(c, CHILD(n, 3), nameExpr);
	    }
	}

	function astForDecorators (c, n) {
	    var i;
	    var decoratorSeq;
	    REQ(n, SYM.decorators);
	    decoratorSeq = [];
	    for (i = 0; i < NCH(n); ++i) {
	        decoratorSeq[i] = astForDecorator(c, CHILD(n, i));
	    }
	    return decoratorSeq;
	}

	function astForDecorated (c, n) {
	    var thing;
	    var decoratorSeq;
	    REQ(n, SYM.decorated);
	    decoratorSeq = astForDecorators(c, CHILD(n, 0));
	    goog.asserts.assert(CHILD(n, 1).type === SYM.funcdef || CHILD(n, 1).type === SYM.classdef);

	    thing = null;
	    if (CHILD(n, 1).type === SYM.funcdef) {
	        thing = astForFuncdef(c, CHILD(n, 1), decoratorSeq);
	    }
	    else if (CHILD(n, 1) === SYM.classdef) {
	        thing = astForClassdef(c, CHILD(n, 1), decoratorSeq);
	    }
	    if (thing) {
	        thing.lineno = n.lineno;
	        thing.col_offset = n.col_offset;
	    }
	    return thing;
	}

	//note: with statements need to be updated to 2.7
	//see: ast.c lines: 3127 -> 3185

	function astForWithVar (c, n) {
	    REQ(n, SYM.with_item);
	    return astForExpr(c, CHILD(n, 1));
	}

	function astForWithStmt (c, n) {
	    /* with_stmt: 'with' test [ with_var ] ':' suite */
	    var optionalVars;
	    var contextExpr;
	    var suiteIndex = 3; // skip with, test, :
	    goog.asserts.assert(n.type === SYM.with_stmt);
	    contextExpr = astForExpr(c, CHILD(n, 1));
	    if (CHILD(n, 2).type === SYM.with_item) {
	        optionalVars = astForWithVar(c, CHILD(n, 2));
	        setContext(c, optionalVars, Store, n);
	        suiteIndex = 4;
	    }
	    return new With_(contextExpr, optionalVars, astForSuite(c, CHILD(n, suiteIndex)), n.lineno, n.col_offset);
	}

	function astForExecStmt (c, n) {
	    var expr1, globals = null, locals = null;
	    var nchildren = NCH(n);
	    goog.asserts.assert(nchildren === 2 || nchildren === 4 || nchildren === 6);

	    /* exec_stmt: 'exec' expr ['in' test [',' test]] */
	    REQ(n, SYM.exec_stmt);
	    expr1 = astForExpr(c, CHILD(n, 1));
	    if (nchildren >= 4) {
	        globals = astForExpr(c, CHILD(n, 3));
	    }
	    if (nchildren === 6) {
	        locals = astForExpr(c, CHILD(n, 5));
	    }
	    return new Exec(expr1, globals, locals, n.lineno, n.col_offset);
	}

	function astForIfStmt (c, n) {
	    /* if_stmt: 'if' test ':' suite ('elif' test ':' suite)*
	     ['else' ':' suite]
	     */
	    var off;
	    var i;
	    var orelse;
	    var hasElse;
	    var nElif;
	    var decider;
	    var s;
	    REQ(n, SYM.if_stmt);
	    if (NCH(n) === 4) {
	        return new If_(
	            astForExpr(c, CHILD(n, 1)),
	            astForSuite(c, CHILD(n, 3)),
	            [], n.lineno, n.col_offset);
	    }

	    s = CHILD(n, 4).value;
	    decider = s.charAt(2); // elSe or elIf
	    if (decider === "s") {
	        return new If_(
	            astForExpr(c, CHILD(n, 1)),
	            astForSuite(c, CHILD(n, 3)),
	            astForSuite(c, CHILD(n, 6)),
	            n.lineno, n.col_offset);
	    }
	    else if (decider === "i") {
	        nElif = NCH(n) - 4;
	        hasElse = false;
	        orelse = [];

	        /* must reference the child nElif+1 since 'else' token is third, not
	         * fourth child from the end. */
	        if (CHILD(n, nElif + 1).type === TOK.T_NAME &&
	            CHILD(n, nElif + 1).value.charAt(2) === "s") {
	            hasElse = true;
	            nElif -= 3;
	        }
	        nElif /= 4;

	        if (hasElse) {
	            orelse = [
	                new If_(
	                    astForExpr(c, CHILD(n, NCH(n) - 6)),
	                    astForSuite(c, CHILD(n, NCH(n) - 4)),
	                    astForSuite(c, CHILD(n, NCH(n) - 1)),
	                    CHILD(n, NCH(n) - 6).lineno,
	                    CHILD(n, NCH(n) - 6).col_offset)];
	            nElif--;
	        }

	        for (i = 0; i < nElif; ++i) {
	            off = 5 + (nElif - i - 1) * 4;
	            orelse = [
	                new If_(
	                    astForExpr(c, CHILD(n, off)),
	                    astForSuite(c, CHILD(n, off + 2)),
	                    orelse,
	                    CHILD(n, off).lineno,
	                    CHILD(n, off).col_offset)];
	        }
	        return new If_(
	            astForExpr(c, CHILD(n, 1)),
	            astForSuite(c, CHILD(n, 3)),
	            orelse, n.lineno, n.col_offset);
	    }

	    goog.asserts.fail("unexpected token in 'if' statement");
	}

	function astForExprlist (c, n, context) {
	    var e;
	    var i;
	    var seq;
	    REQ(n, SYM.exprlist);
	    seq = [];
	    for (i = 0; i < NCH(n); i += 2) {
	        e = astForExpr(c, CHILD(n, i));
	        seq[i / 2] = e;
	        if (context) {
	            setContext(c, e, context, CHILD(n, i));
	        }
	    }
	    return seq;
	}

	function astForDelStmt (c, n) {
	    /* del_stmt: 'del' exprlist */
	    REQ(n, SYM.del_stmt);
	    return new Delete_(astForExprlist(c, CHILD(n, 1), Del), n.lineno, n.col_offset);
	}

	function astForGlobalStmt (c, n) {
	    /* global_stmt: 'global' NAME (',' NAME)* */
	    var i;
	    var s = [];
	    REQ(n, SYM.global_stmt);
	    for (i = 1; i < NCH(n); i += 2) {
	        s[(i - 1) / 2] = strobj(CHILD(n, i).value);
	    }
	    return new Global(s, n.lineno, n.col_offset);
	}

	function astForAssertStmt (c, n) {
	    /* assert_stmt: 'assert' test [',' test] */
	    REQ(n, SYM.assert_stmt);
	    if (NCH(n) === 2) {
	        return new Assert(astForExpr(c, CHILD(n, 1)), null, n.lineno, n.col_offset);
	    }
	    else if (NCH(n) === 4) {
	        return new Assert(astForExpr(c, CHILD(n, 1)), astForExpr(c, CHILD(n, 3)), n.lineno, n.col_offset);
	    }
	    goog.asserts.fail("improper number of parts to assert stmt");
	}

	function aliasForImportName (c, n) {
	    /*
	     import_as_name: NAME ['as' NAME]
	     dotted_as_name: dotted_name ['as' NAME]
	     dotted_name: NAME ('.' NAME)*
	     */

	    var i;
	    var a;
	    var name;
	    var str;
	    loop: while (true) {
	        switch (n.type) {
	            case SYM.import_as_name:
	                str = null;
	                name = strobj(CHILD(n, 0).value);
	                if (NCH(n) === 3) {
	                    str = CHILD(n, 2).value;
	                }
	                return new alias(name, str == null ? null : strobj(str));
	            case SYM.dotted_as_name:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue loop;
	                }
	                else {
	                    a = aliasForImportName(c, CHILD(n, 0));
	                    goog.asserts.assert(!a.asname);
	                    a.asname = strobj(CHILD(n, 2).value);
	                    return a;
	                }
	                break;
	            case SYM.dotted_name:
	                if (NCH(n) === 1) {
	                    return new alias(strobj(CHILD(n, 0).value), null);
	                }
	                else {
	                    // create a string of the form a.b.c
	                    str = "";
	                    for (i = 0; i < NCH(n); i += 2) {
	                        str += CHILD(n, i).value + ".";
	                    }
	                    return new alias(strobj(str.substr(0, str.length - 1)), null);
	                }
	                break;
	            case TOK.T_STAR:
	                return new alias(strobj("*"), null);
	            default:
	                throw new Sk.builtin.SyntaxError("unexpected import name", c.c_filename, n.lineno);
	        }
	        break;
	    }
	}

	function astForImportStmt (c, n) {
	    /*
	     import_stmt: import_name | import_from
	     import_name: 'import' dotted_as_names
	     import_from: 'from' ('.'* dotted_name | '.') 'import'
	     ('*' | '(' import_as_names ')' | import_as_names)
	     */
	    var modname;
	    var idx;
	    var nchildren;
	    var ndots;
	    var mod;
	    var i;
	    var aliases;
	    var col_offset;
	    var lineno;
	    REQ(n, SYM.import_stmt);
	    lineno = n.lineno;
	    col_offset = n.col_offset;
	    n = CHILD(n, 0);
	    if (n.type === SYM.import_name) {
	        n = CHILD(n, 1);
	        REQ(n, SYM.dotted_as_names);
	        aliases = [];
	        for (i = 0; i < NCH(n); i += 2) {
	            aliases[i / 2] = aliasForImportName(c, CHILD(n, i));
	        }
	        return new Import_(aliases, lineno, col_offset);
	    }
	    else if (n.type === SYM.import_from) {
	        mod = null;
	        ndots = 0;

	        for (idx = 1; idx < NCH(n); ++idx) {
	            if (CHILD(n, idx).type === SYM.dotted_name) {
	                mod = aliasForImportName(c, CHILD(n, idx));
	                idx++;
	                break;
	            }
	            else if (CHILD(n, idx).type !== TOK.T_DOT) {
	                break;
	            }
	            ndots++;
	        }
	        ++idx; // skip the import keyword
	        switch (CHILD(n, idx).type) {
	            case TOK.T_STAR:
	                // from ... import
	                n = CHILD(n, idx);
	                nchildren = 1;
	                break;
	            case TOK.T_LPAR:
	                // from ... import (x, y, z)
	                n = CHILD(n, idx + 1);
	                nchildren = NCH(n);
	                break;
	            case SYM.import_as_names:
	                // from ... import x, y, z
	                n = CHILD(n, idx);
	                nchildren = NCH(n);
	                if (nchildren % 2 === 0) {
	                    throw new Sk.builtin.SyntaxError("trailing comma not allowed without surrounding parentheses", c.c_filename, n.lineno);
	                }
	                break;
	            default:
	                throw new Sk.builtin.SyntaxError("Unexpected node-type in from-import", c.c_filename, n.lineno);
	        }
	        aliases = [];
	        if (n.type === TOK.T_STAR) {
	            aliases[0] = aliasForImportName(c, n);
	        }
	        else {
	            for (i = 0; i < NCH(n); i += 2) {
	                aliases[i / 2] = aliasForImportName(c, CHILD(n, i));
	            }
	        }
	        modname = mod ? mod.name.v : "";
	        return new ImportFrom(strobj(modname), aliases, ndots, lineno, col_offset);
	    }
	    throw new Sk.builtin.SyntaxError("unknown import statement", c.c_filename, n.lineno);
	}

	function astForTestlistComp(c, n) {
	    /* testlist_comp: test ( comp_for | (',' test)* [','] ) */
	    /* argument: test [comp_for] */
	    goog.asserts.assert(n.type === SYM.testlist_comp || n.type === SYM.argument);
	    if (NCH(n) > 1 && CHILD(n, 1).type === SYM.comp_for) {
	        return astForGenExpr(c, n);
	    }
	    return astForTestlist(c, n);
	}

	function astForListcomp (c, n) {
	    /* listmaker: test ( list_for | (',' test)* [','] )
	     list_for: 'for' exprlist 'in' testlist_safe [list_iter]
	     list_iter: list_for | list_if
	     list_if: 'if' test [list_iter]
	     testlist_safe: test [(',' test)+ [',']]
	     */

	    function countListFors (c, n) {
	        var nfors = 0;
	        var ch = CHILD(n, 1);
	        count_list_for: while (true) {
	            nfors++;
	            REQ(ch, SYM.list_for);
	            if (NCH(ch) === 5) {
	                ch = CHILD(ch, 4);
	            }
	            else {
	                return nfors;
	            }
	            count_list_iter: while (true) {
	                REQ(ch, SYM.list_iter);
	                ch = CHILD(ch, 0);
	                if (ch.type === SYM.list_for) {
	                    continue count_list_for;
	                }
	                else if (ch.type === SYM.list_if) {
	                    if (NCH(ch) === 3) {
	                        ch = CHILD(ch, 2);
	                        continue count_list_iter;
	                    }
	                    else {
	                        return nfors;
	                    }
	                }
	                break;
	            }
	            break;
	        }
	    }

	    function countListIfs (c, n) {
	        var nifs = 0;
	        while (true) {
	            REQ(n, SYM.list_iter);
	            if (CHILD(n, 0).type === SYM.list_for) {
	                return nifs;
	            }
	            n = CHILD(n, 0);
	            REQ(n, SYM.list_if);
	            nifs++;
	            if (NCH(n) == 2) {
	                return nifs;
	            }
	            n = CHILD(n, 2);
	        }
	    }

	    var j;
	    var ifs;
	    var nifs;
	    var lc;
	    var expression;
	    var t;
	    var forch;
	    var i;
	    var ch;
	    var listcomps;
	    var nfors;
	    var elt;
	    REQ(n, SYM.listmaker);
	    goog.asserts.assert(NCH(n) > 1);
	    elt = astForExpr(c, CHILD(n, 0));
	    nfors = countListFors(c, n);
	    listcomps = [];
	    ch = CHILD(n, 1);
	    for (i = 0; i < nfors; ++i) {
	        REQ(ch, SYM.list_for);
	        forch = CHILD(ch, 1);
	        t = astForExprlist(c, forch, Store);
	        expression = astForTestlist(c, CHILD(ch, 3));
	        if (NCH(forch) === 1) {
	            lc = new comprehension(t[0], expression, []);
	        }
	        else {
	            lc = new comprehension(new Tuple(t, Store, ch.lineno, ch.col_offset), expression, []);
	        }

	        if (NCH(ch) === 5) {
	            ch = CHILD(ch, 4);
	            nifs = countListIfs(c, ch);
	            ifs = [];
	            for (j = 0; j < nifs; ++j) {
	                REQ(ch, SYM.list_iter);
	                ch = CHILD(ch, 0);
	                REQ(ch, SYM.list_if);
	                ifs[j] = astForExpr(c, CHILD(ch, 1));
	                if (NCH(ch) === 3) {
	                    ch = CHILD(ch, 2);
	                }
	            }
	            if (ch.type === SYM.list_iter) {
	                ch = CHILD(ch, 0);
	            }
	            lc.ifs = ifs;
	        }
	        listcomps[i] = lc;
	    }
	    return new ListComp(elt, listcomps, n.lineno, n.col_offset);
	}

	function astForFactor (c, n) {
	    /* some random peephole thing that cpy does */
	    var expression;
	    var pnum;
	    var patom;
	    var ppower;
	    var pfactor;
	    if (CHILD(n, 0).type === TOK.T_MINUS && NCH(n) === 2) {
	        pfactor = CHILD(n, 1);
	        if (pfactor.type === SYM.factor && NCH(pfactor) === 1) {
	            ppower = CHILD(pfactor, 0);
	            if (ppower.type === SYM.power && NCH(ppower) === 1) {
	                patom = CHILD(ppower, 0);
	                if (patom.type === SYM.atom) {
	                    pnum = CHILD(patom, 0);
	                    if (pnum.type === TOK.T_NUMBER) {
	                        pnum.value = "-" + pnum.value;
	                        return astForAtom(c, patom);
	                    }
	                }
	            }
	        }
	    }

	    expression = astForExpr(c, CHILD(n, 1));
	    switch (CHILD(n, 0).type) {
	        case TOK.T_PLUS:
	            return new UnaryOp(UAdd, expression, n.lineno, n.col_offset);
	        case TOK.T_MINUS:
	            return new UnaryOp(USub, expression, n.lineno, n.col_offset);
	        case TOK.T_TILDE:
	            return new UnaryOp(Invert, expression, n.lineno, n.col_offset);
	    }

	    goog.asserts.fail("unhandled factor");
	}

	function astForForStmt (c, n) {
	    /* for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite] */
	    var target;
	    var _target;
	    var nodeTarget;
	    var seq = [];
	    REQ(n, SYM.for_stmt);
	    if (NCH(n) === 9) {
	        seq = astForSuite(c, CHILD(n, 8));
	    }
	    nodeTarget = CHILD(n, 1);
	    _target = astForExprlist(c, nodeTarget, Store);
	    if (NCH(nodeTarget) === 1) {
	        target = _target[0];
	    }
	    else {
	        target = new Tuple(_target, Store, n.lineno, n.col_offset);
	    }

	    return new For_(target,
	        astForTestlist(c, CHILD(n, 3)),
	        astForSuite(c, CHILD(n, 5)),
	        seq, n.lineno, n.col_offset);
	}

	function astForCall (c, n, func) {
	    /*
	      arglist: (argument ',')* (argument [',']| '*' test [',' '**' test]
	               | '**' test)
	      argument: test [comp_for] | test '=' test       # Really [keyword '='] test
	    */
	    var tmp;
	    var k;
	    var key;
	    var e;
	    var kwarg;
	    var vararg;
	    var keywords;
	    var args;
	    var ch;
	    var i;
	    var ngens;
	    var nkeywords;
	    var nargs;

	    REQ(n, SYM.arglist);
	    nargs = 0;
	    nkeywords = 0;
	    ngens = 0;
	    for (i = 0; i < NCH(n); i++) {
	        ch = CHILD(n, i);
	        if (ch.type === SYM.argument) {
	            if (NCH(ch) === 1) {
	                nargs++;
	            }
	            else if (CHILD(ch, 1).type === SYM.comp_for) {
	                ngens++;
	            }
	            else {
	                nkeywords++;
	            }
	        }
	    }
	    if (ngens > 1 || (ngens && (nargs || nkeywords))) {
	        throw new Sk.builtin.SyntaxError("Generator expression must be parenthesized if not sole argument", c.c_filename, n.lineno);
	    }
	    if (nargs + nkeywords + ngens > 255) {
	        throw new Sk.builtin.SyntaxError("more than 255 arguments", c.c_filename, n.lineno);
	    }
	    args = [];
	    keywords = [];
	    nargs = 0;
	    nkeywords = 0;
	    vararg = null;
	    kwarg = null;
	    for (i = 0; i < NCH(n); i++) {
	        ch = CHILD(n, i);
	        if (ch.type === SYM.argument) {
	            if (NCH(ch) === 1) {
	                if (nkeywords) {
	                    throw new Sk.builtin.SyntaxError("non-keyword arg after keyword arg", c.c_filename, n.lineno);
	                }
	                if (vararg) {
	                    throw new Sk.builtin.SyntaxError("only named arguments may follow *expression", c.c_filename, n.lineno);
	                }
	                args[nargs++] = astForExpr(c, CHILD(ch, 0));
	            }
	            else if (CHILD(ch, 1).type === SYM.comp_for) {
	                args[nargs++] = astForGenExpr(c, ch);
	            }
	            else {
	                e = astForExpr(c, CHILD(ch, 0));
	                if (e.constructor === Lambda) {
	                    throw new Sk.builtin.SyntaxError("lambda cannot contain assignment", c.c_filename, n.lineno);
	                }
	                else if (e.constructor !== Name) {
	                    throw new Sk.builtin.SyntaxError("keyword can't be an expression", c.c_filename, n.lineno);
	                }
	                key = e.id;
	                forbiddenCheck(c, CHILD(ch, 0), key, n.lineno);
	                for (k = 0; k < nkeywords; ++k) {
	                    tmp = keywords[k].arg;
	                    if (tmp === key) {
	                        throw new Sk.builtin.SyntaxError("keyword argument repeated", c.c_filename, n.lineno);
	                    }
	                }
	                keywords[nkeywords++] = new keyword(key, astForExpr(c, CHILD(ch, 2)));
	            }
	        }
	        else if (ch.type === TOK.T_STAR) {
	            vararg = astForExpr(c, CHILD(n, ++i));
	        }
	        else if (ch.type === TOK.T_DOUBLESTAR) {
	            kwarg = astForExpr(c, CHILD(n, ++i));
	        }
	    }
	    return new Call(func, args, keywords, vararg, kwarg, func.lineno, func.col_offset);
	}

	function astForTrailer (c, n, leftExpr) {
	    /* trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME 
	     subscriptlist: subscript (',' subscript)* [',']
	     subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
	     */
	    var e;
	    var elts;
	    var slc;
	    var j;
	    var slices;
	    var simple;
	    REQ(n, SYM.trailer);
	    if (CHILD(n, 0).type === TOK.T_LPAR) {
	        if (NCH(n) === 2) {
	            return new Call(leftExpr, [], [], null, null, n.lineno, n.col_offset);
	        }
	        else {
	            return astForCall(c, CHILD(n, 1), leftExpr);
	        }
	    }
	    else if (CHILD(n, 0).type === TOK.T_DOT) {
	        return new Attribute(leftExpr, strobj(CHILD(n, 1).value), Load, n.lineno, n.col_offset);
	    }
	    else {
	        REQ(CHILD(n, 0), TOK.T_LSQB);
	        REQ(CHILD(n, 2), TOK.T_RSQB);
	        n = CHILD(n, 1);
	        if (NCH(n) === 1) {
	            return new Subscript(leftExpr, astForSlice(c, CHILD(n, 0)), Load, n.lineno, n.col_offset);
	        }
	        else {
	            /* The grammar is ambiguous here. The ambiguity is resolved 
	             by treating the sequence as a tuple literal if there are
	             no slice features.
	             */
	            simple = true;
	            slices = [];
	            for (j = 0; j < NCH(n); j += 2) {
	                slc = astForSlice(c, CHILD(n, j));
	                if (slc.constructor !== Index) {
	                    simple = false;
	                }
	                slices[j / 2] = slc;
	            }
	            if (!simple) {
	                return new Subscript(leftExpr, new ExtSlice(slices), Load, n.lineno, n.col_offset);
	            }
	            elts = [];
	            for (j = 0; j < slices.length; ++j) {
	                slc = slices[j];
	                goog.asserts.assert(slc.constructor === Index && slc.value !== null && slc.value !== undefined);
	                elts[j] = slc.value;
	            }
	            e = new Tuple(elts, Load, n.lineno, n.col_offset);
	            return new Subscript(leftExpr, new Index(e), Load, n.lineno, n.col_offset);
	        }
	    }
	}

	function astForFlowStmt (c, n) {
	    /*
	     flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt
	     | yield_stmt
	     break_stmt: 'break'
	     continue_stmt: 'continue'
	     return_stmt: 'return' [testlist]
	     yield_stmt: yield_expr
	     yield_expr: 'yield' testlist
	     raise_stmt: 'raise' [test [',' test [',' test]]]
	     */
	    var ch;
	    REQ(n, SYM.flow_stmt);
	    ch = CHILD(n, 0);
	    switch (ch.type) {
	        case SYM.break_stmt:
	            return new Break_(n.lineno, n.col_offset);
	        case SYM.continue_stmt:
	            return new Continue_(n.lineno, n.col_offset);
	        case SYM.yield_stmt:
	            return new Expr(astForExpr(c, CHILD(ch, 0)), n.lineno, n.col_offset);
	        case SYM.return_stmt:
	            if (NCH(ch) === 1) {
	                return new Return_(null, n.lineno, n.col_offset);
	            }
	            else {
	                return new Return_(astForTestlist(c, CHILD(ch, 1)), n.lineno, n.col_offset);
	            }
	            break;
	        case SYM.raise_stmt:
	            if (NCH(ch) === 1) {
	                return new Raise(null, null, null, n.lineno, n.col_offset);
	            }
	            else if (NCH(ch) === 2) {
	                return new Raise(astForExpr(c, CHILD(ch, 1)), null, null, n.lineno, n.col_offset);
	            }
	            else if (NCH(ch) === 4) {
	                return new Raise(
	                    astForExpr(c, CHILD(ch, 1)),
	                    astForExpr(c, CHILD(ch, 3)),
	                    null, n.lineno, n.col_offset);
	            }
	            else if (NCH(ch) === 6) {
	                return new Raise(
	                    astForExpr(c, CHILD(ch, 1)),
	                    astForExpr(c, CHILD(ch, 3)),
	                    astForExpr(c, CHILD(ch, 5)),
	                    n.lineno, n.col_offset);
	            }
	            break;
	        default:
	            goog.asserts.fail("unexpected flow_stmt");
	    }
	    goog.asserts.fail("unhandled flow statement");
	}

	function astForArguments (c, n) {
	    /* parameters: '(' [varargslist] ')'
	     varargslist: (fpdef ['=' test] ',')* ('*' NAME [',' '**' NAME]
	     | '**' NAME) | fpdef ['=' test] (',' fpdef ['=' test])* [',']
	     */
	    var parenthesized;
	    var id;
	    var complexArgs;
	    var k;
	    var j;
	    var i;
	    var foundDefault;
	    var defaults;
	    var args;
	    var ch;
	    var vararg = null;
	    var kwarg = null;
	    if (n.type === SYM.parameters) {
	        if (NCH(n) === 2) // () as arglist
	        {
	            return new arguments_([], null, null, []);
	        }
	        n = CHILD(n, 1);
	    }
	    REQ(n, SYM.varargslist);

	    args = [];
	    defaults = [];

	    /* fpdef: NAME | '(' fplist ')'
	     fplist: fpdef (',' fpdef)* [',']
	     */
	    foundDefault = false;
	    i = 0;
	    j = 0; // index for defaults
	    k = 0; // index for args
	    while (i < NCH(n)) {
	        ch = CHILD(n, i);
	        switch (ch.type) {
	            case SYM.fpdef:
	                complexArgs = 0;
	                parenthesized = 0;
	                handle_fpdef: while (true) {
	                    if (i + 1 < NCH(n) && CHILD(n, i + 1).type === TOK.T_EQUAL) {
	                        defaults[j++] = astForExpr(c, CHILD(n, i + 2));
	                        i += 2;
	                        foundDefault = true;
	                    }
	                    else if (foundDefault) {
	                        /* def f((x)=4): pass should raise an error.
	                         def f((x, (y))): pass will just incur the tuple unpacking warning. */
	                        if (parenthesized && !complexArgs) {
	                            throw new Sk.builtin.SyntaxError("parenthesized arg with default", c.c_filename, n.lineno);
	                        }
	                        throw new Sk.builtin.SyntaxError("non-default argument follows default argument", c.c_filename, n.lineno);
	                    }

	                    if (NCH(ch) === 3) {
	                        ch = CHILD(ch, 1);
	                        // def foo((x)): is not complex, special case.
	                        if (NCH(ch) !== 1) {
	                            throw new Sk.builtin.SyntaxError("tuple parameter unpacking has been removed", c.c_filename, n.lineno);
	                        }
	                        else {
	                            /* def foo((x)): setup for checking NAME below. */
	                            /* Loop because there can be many parens and tuple
	                             unpacking mixed in. */
	                            parenthesized = true;
	                            ch = CHILD(ch, 0);
	                            goog.asserts.assert(ch.type === SYM.fpdef);
	                            continue handle_fpdef;
	                        }
	                    }
	                    if (CHILD(ch, 0).type === TOK.T_NAME) {
	                        forbiddenCheck(c, n, CHILD(ch, 0).value, n.lineno);
	                        id = strobj(CHILD(ch, 0).value);
	                        args[k++] = new Name(id, Param, ch.lineno, ch.col_offset);
	                    }
	                    i += 2;
	                    if (parenthesized) {
	                        throw new Sk.builtin.SyntaxError("parenthesized argument names are invalid", c.c_filename, n.lineno);
	                    }
	                    break;
	                }
	                break;
	            case TOK.T_STAR:
	                forbiddenCheck(c, CHILD(n, i + 1), CHILD(n, i + 1).value, n.lineno);
	                vararg = strobj(CHILD(n, i + 1).value);
	                i += 3;
	                break;
	            case TOK.T_DOUBLESTAR:
	                forbiddenCheck(c, CHILD(n, i + 1), CHILD(n, i + 1).value, n.lineno);
	                kwarg = strobj(CHILD(n, i + 1).value);
	                i += 3;
	                break;
	            default:
	                goog.asserts.fail("unexpected node in varargslist");
	        }
	    }
	    return new arguments_(args, vararg, kwarg, defaults);
	}

	function astForFuncdef (c, n, decoratorSeq) {
	    /* funcdef: 'def' NAME parameters ':' suite */
	    var body;
	    var args;
	    var name;
	    REQ(n, SYM.funcdef);
	    name = strobj(CHILD(n, 1).value);
	    forbiddenCheck(c, CHILD(n, 1), CHILD(n, 1).value, n.lineno);
	    args = astForArguments(c, CHILD(n, 2));
	    body = astForSuite(c, CHILD(n, 4));
	    return new FunctionDef(name, args, body, decoratorSeq, n.lineno, n.col_offset);
	}

	function astForClassBases (c, n) {
	    /* testlist: test (',' test)* [','] */
	    goog.asserts.assert(NCH(n) > 0);
	    REQ(n, SYM.testlist);
	    if (NCH(n) === 1) {
	        return [ astForExpr(c, CHILD(n, 0)) ];
	    }
	    return seqForTestlist(c, n);
	}

	function astForClassdef (c, n, decoratorSeq) {
	    /* classdef: 'class' NAME ['(' testlist ')'] ':' suite */
	    var s;
	    var bases;
	    var classname;
	    REQ(n, SYM.classdef);
	    forbiddenCheck(c, n, CHILD(n, 1).value, n.lineno);
	    classname = strobj(CHILD(n, 1).value);
	    if (NCH(n) === 4) {
	        return new ClassDef(classname, [], astForSuite(c, CHILD(n, 3)), decoratorSeq, n.lineno, n.col_offset);
	    }
	    if (CHILD(n, 3).type === TOK.T_RPAR) {
	        return new ClassDef(classname, [], astForSuite(c, CHILD(n, 5)), decoratorSeq, n.lineno, n.col_offset);
	    }

	    bases = astForClassBases(c, CHILD(n, 3));
	    s = astForSuite(c, CHILD(n, 6));
	    return new ClassDef(classname, bases, s, decoratorSeq, n.lineno, n.col_offset);
	}

	function astForLambdef (c, n) {
	    /* lambdef: 'lambda' [varargslist] ':' test */
	    var args;
	    var expression;
	    if (NCH(n) === 3) {
	        args = new arguments_([], null, null, []);
	        expression = astForExpr(c, CHILD(n, 2));
	    }
	    else {
	        args = astForArguments(c, CHILD(n, 1));
	        expression = astForExpr(c, CHILD(n, 3));
	    }
	    return new Lambda(args, expression, n.lineno, n.col_offset);
	}

	function astForComprehension(c, n) {
	    /* testlist_comp: test ( comp_for | (',' test)* [','] )
	       argument: test [comp_for] | test '=' test       # Really [keyword '='] test */
	    
	    var j;
	    var ifs;
	    var nifs;
	    var ge;
	    var expression;
	    var t;
	    var forch;
	    var i;
	    var ch;
	    var genexps;
	    var nfors;
	    var elt;
	    var comps;
	    var comp;

	    function countCompFors(c, n) {
	        var nfors = 0;
	        count_comp_for: while (true) {
	            nfors++;
	            REQ(n, SYM.comp_for);
	            if (NCH(n) === 5) {
	                n = CHILD(n, 4);
	            } else {
	                return nfors;
	            }
	            count_comp_iter: while (true) {
	                REQ(n, SYM.comp_iter);
	                n = CHILD(n, 0);
	                if (n.type === SYM.comp_for) {
	                    continue count_comp_for;
	                } else if (n.type === SYM.comp_if) {
	                    if (NCH(n) === 3) {
	                        n = CHILD(n, 2);
	                        continue count_comp_iter;
	                    } else {
	                        return nfors;
	                    }
	                }
	                break;
	            }
	            break;
	        }
	        goog.asserts.fail("logic error in countCompFors");
	    }

	    function countCompIfs(c, n) {
	        var nifs = 0;
	        while (true) {
	            REQ(n, SYM.comp_iter);
	            if (CHILD(n, 0).type === SYM.comp_for) {
	                return nifs;
	            }
	            n = CHILD(n, 0);
	            REQ(n, SYM.comp_if);
	            nifs++;
	            if (NCH(n) == 2) {
	                return nifs;
	            }
	            n = CHILD(n, 2);
	        }
	    }

	    nfors = countCompFors(c, n);
	    comps = [];
	    for (i = 0; i < nfors; ++i) {
	        REQ(n, SYM.comp_for);
	        forch = CHILD(n, 1);
	        t = astForExprlist(c, forch, Store);
	        expression = astForExpr(c, CHILD(n, 3));
	        if (NCH(forch) === 1) {
	            comp = new comprehension(t[0], expression, []);
	        } else {
	            comp = new comprehension(new Tuple(t, Store, n.lineno, n.col_offset), expression, []);
	        }
	        if (NCH(n) === 5) {
	            n = CHILD(n, 4);
	            nifs = countCompIfs(c, n);
	            ifs = [];
	            for (j = 0; j < nifs; ++j) {
	                REQ(n, SYM.comp_iter);
	                n = CHILD(n, 0);
	                REQ(n, SYM.comp_if);
	                expression = astForExpr(c, CHILD(n, 1));
	                ifs[j] = expression;
	                if (NCH(n) === 3) {
	                    n = CHILD(n, 2);
	                }
	            }
	            if (n.type === SYM.comp_iter) {
	                n = CHILD(n, 0);
	            }
	            comp.ifs = ifs;
	        }
	        comps[i] = comp;
	    }
	    return comps;
	}

	function astForIterComp(c, n, type) {
	    var elt, comps;
	    goog.asserts.assert(NCH(n) > 1);
	    elt = astForExpr(c, CHILD(n, 0));
	    comps = astForComprehension(c, CHILD(n, 1));
	    if (type === COMP_GENEXP) {
	        return new GeneratorExp(elt, comps, n.lineno, n.col_offset);
	    } else if (type === COMP_SETCOMP) {
	        return new SetComp(elt, comps, n.lineno, n.col_offset);
	    }
	}

	function astForDictComp(c, n) {
	    var key, value;
	    var comps = [];
	    goog.asserts.assert(NCH(n) > 3);
	    REQ(CHILD(n, 1), TOK.T_COLON);
	    key = astForExpr(c, CHILD(n, 0));
	    value = astForExpr(c, CHILD(n, 2));
	    comps = astForComprehension(c, CHILD(n, 3));
	    return new DictComp(key, value, comps, n.lineno, n.col_offset);
	}

	function astForGenExpr(c, n) {
	    goog.asserts.assert(n.type === SYM.testlist_comp || n.type === SYM.argument);
	    return astForIterComp(c, n, COMP_GENEXP);
	}

	function astForSetComp(c, n) {
	    goog.asserts.assert(n.type === SYM.dictorsetmaker);
	    return astForIterComp(c, n, COMP_SETCOMP);
	}

	function astForWhileStmt (c, n) {
	    /* while_stmt: 'while' test ':' suite ['else' ':' suite] */
	    REQ(n, SYM.while_stmt);
	    if (NCH(n) === 4) {
	        return new While_(astForExpr(c, CHILD(n, 1)), astForSuite(c, CHILD(n, 3)), [], n.lineno, n.col_offset);
	    }
	    else if (NCH(n) === 7) {
	        return new While_(astForExpr(c, CHILD(n, 1)), astForSuite(c, CHILD(n, 3)), astForSuite(c, CHILD(n, 6)), n.lineno, n.col_offset);
	    }
	    goog.asserts.fail("wrong number of tokens for 'while' stmt");
	}

	function astForAugassign (c, n) {
	    REQ(n, SYM.augassign);
	    n = CHILD(n, 0);
	    switch (n.value.charAt(0)) {
	        case "+":
	            return Add;
	        case "-":
	            return Sub;
	        case "/":
	            if (n.value.charAt(1) === "/") {
	                return FloorDiv;
	            }
	            return Div;
	        case "%":
	            return Mod;
	        case "<":
	            return LShift;
	        case ">":
	            return RShift;
	        case "&":
	            return BitAnd;
	        case "^":
	            return BitXor;
	        case "|":
	            return BitOr;
	        case "*":
	            if (n.value.charAt(1) === "*") {
	                return Pow;
	            }
	            return Mult;
	        default:
	            goog.asserts.fail("invalid augassign");
	    }
	}

	function astForBinop (c, n) {
	    /* Must account for a sequence of expressions.
	     How should A op B op C by represented?
	     BinOp(BinOp(A, op, B), op, C).
	     */
	    var tmp;
	    var newoperator;
	    var nextOper;
	    var i;
	    var result = new BinOp(
	        astForExpr(c, CHILD(n, 0)),
	        getOperator(CHILD(n, 1)),
	        astForExpr(c, CHILD(n, 2)),
	        n.lineno, n.col_offset);
	    var nops = (NCH(n) - 1) / 2;
	    for (i = 1; i < nops; ++i) {
	        nextOper = CHILD(n, i * 2 + 1);
	        newoperator = getOperator(nextOper);
	        tmp = astForExpr(c, CHILD(n, i * 2 + 2));
	        result = new BinOp(result, newoperator, tmp, nextOper.lineno, nextOper.col_offset);
	    }
	    return result;

	}


	function astForTestlist(c, n) {
	    /* this doesn't show up in Grammar.txt never did: testlist_gexp: test (',' test)* [','] */
	    /* testlist_comp: test (',' test)* [','] */
	    /* testlist: test (',' test)* [','] */
	    /* testlist_safe: test (',' test)+ [','] */
	    /* testlist1: test (',' test)* */
	    goog.asserts.assert(NCH(n) > 0);
	    if (n.type === SYM.testlist_comp) {
	        if (NCH(n) > 1) {
	            goog.asserts.assert(CHILD(n, 1).type !== SYM.comp_for);
	        }
	    }
	    else {
	        goog.asserts.assert(n.type === SYM.testlist || n.type === SYM.testlist_safe || n.type === SYM.testlist1);
	    }

	    if (NCH(n) === 1) {
	        return astForExpr(c, CHILD(n, 0));
	    }
	    else {
	        return new Tuple(seqForTestlist(c, n), Load, n.lineno, n.col_offset);
	    }

	}

	function astForExprStmt (c, n) {
	    var expression;
	    var value;
	    var e;
	    var i;
	    var targets;
	    var expr2;
	    var varName;
	    var expr1;
	    var ch;
	    REQ(n, SYM.expr_stmt);
	    /* expr_stmt: testlist (augassign (yield_expr|testlist) 
	     | ('=' (yield_expr|testlist))*)
	     testlist: test (',' test)* [',']
	     augassign: '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^='
	     | '<<=' | '>>=' | '**=' | '//='
	     test: ... here starts the operator precendence dance
	     */
	    if (NCH(n) === 1) {
	        return new Expr(astForTestlist(c, CHILD(n, 0)), n.lineno, n.col_offset);
	    }
	    else if (CHILD(n, 1).type === SYM.augassign) {
	        ch = CHILD(n, 0);
	        expr1 = astForTestlist(c, ch);
	        switch (expr1.constructor) {
	            case GeneratorExp:
	                throw new Sk.builtin.SyntaxError("augmented assignment to generator expression not possible", c.c_filename, n.lineno);
	            case Yield:
	                throw new Sk.builtin.SyntaxError("augmented assignment to yield expression not possible", c.c_filename, n.lineno);
	            case Name:
	                varName = expr1.id;
	                forbiddenCheck(c, ch, varName, n.lineno);
	                break;
	            case Attribute:
	            case Subscript:
	                break;
	            default:
	                throw new Sk.builtin.SyntaxError("illegal expression for augmented assignment", c.c_filename, n.lineno);
	        }
	        setContext(c, expr1, Store, ch);

	        ch = CHILD(n, 2);
	        if (ch.type === SYM.testlist) {
	            expr2 = astForTestlist(c, ch);
	        }
	        else {
	            expr2 = astForExpr(c, ch);
	        }

	        return new AugAssign(expr1, astForAugassign(c, CHILD(n, 1)), expr2, n.lineno, n.col_offset);
	    }
	    else {
	        // normal assignment
	        REQ(CHILD(n, 1), TOK.T_EQUAL);
	        targets = [];
	        for (i = 0; i < NCH(n) - 2; i += 2) {
	            ch = CHILD(n, i);
	            if (ch.type === SYM.yield_expr) {
	                throw new Sk.builtin.SyntaxError("assignment to yield expression not possible", c.c_filename, n.lineno);
	            }
	            e = astForTestlist(c, ch);
	            setContext(c, e, Store, CHILD(n, i));
	            targets[i / 2] = e;
	        }
	        value = CHILD(n, NCH(n) - 1);
	        if (value.type === SYM.testlist) {
	            expression = astForTestlist(c, value);
	        }
	        else {
	            expression = astForExpr(c, value);
	        }
	        return new Assign(targets, expression, n.lineno, n.col_offset);
	    }
	}

	function astForIfexpr (c, n) {
	    /* test: or_test 'if' or_test 'else' test */
	    goog.asserts.assert(NCH(n) === 5);
	    return new IfExp(
	        astForExpr(c, CHILD(n, 2)),
	        astForExpr(c, CHILD(n, 0)),
	        astForExpr(c, CHILD(n, 4)),
	        n.lineno, n.col_offset);
	}

	/**
	 * s is a python-style string literal, including quote characters and u/r/b
	 * prefixes. Returns decoded string object.
	 */
	function parsestr (c, s) {
	    var encodeUtf8 = function (s) {
	        return unescape(encodeURIComponent(s));
	    };
	    var decodeUtf8 = function (s) {
	        return decodeURIComponent(escape(s));
	    };
	    var decodeEscape = function (s, quote) {
	        var d3;
	        var d2;
	        var d1;
	        var d0;
	        var c;
	        var i;
	        var len = s.length;
	        var ret = "";
	        for (i = 0; i < len; ++i) {
	            c = s.charAt(i);
	            if (c === "\\") {
	                ++i;
	                c = s.charAt(i);
	                if (c === "n") {
	                    ret += "\n";
	                }
	                else if (c === "\\") {
	                    ret += "\\";
	                }
	                else if (c === "t") {
	                    ret += "\t";
	                }
	                else if (c === "r") {
	                    ret += "\r";
	                }
	                else if (c === "b") {
	                    ret += "\b";
	                }
	                else if (c === "f") {
	                    ret += "\f";
	                }
	                else if (c === "v") {
	                    ret += "\v";
	                }
	                else if (c === "0") {
	                    ret += "\0";
	                }
	                else if (c === '"') {
	                    ret += '"';
	                }
	                else if (c === '\'') {
	                    ret += '\'';
	                }
	                else if (c === "\n") /* escaped newline, join lines */ {
	                }
	                else if (c === "x") {
	                    d0 = s.charAt(++i);
	                    d1 = s.charAt(++i);
	                    ret += String.fromCharCode(parseInt(d0 + d1, 16));
	                }
	                else if (c === "u" || c === "U") {
	                    d0 = s.charAt(++i);
	                    d1 = s.charAt(++i);
	                    d2 = s.charAt(++i);
	                    d3 = s.charAt(++i);
	                    ret += String.fromCharCode(parseInt(d0 + d1, 16), parseInt(d2 + d3, 16));
	                }
	                else {
	                    // Leave it alone
	                    ret += "\\" + c;
	                    // goog.asserts.fail("unhandled escape: '" + c.charCodeAt(0) + "'");
	                }
	            }
	            else {
	                ret += c;
	            }
	        }
	        return ret;
	    };

	    //print("parsestr", s);

	    var quote = s.charAt(0);
	    var rawmode = false;
	    var unicode = false;

	    // treats every sequence as unicodes even if they are not treated with uU prefix
	    // kinda hacking though working for most purposes
	    if((c.c_flags & Parser.CO_FUTURE_UNICODE_LITERALS || Sk.python3 === true)) {
	        unicode = true;
	    }

	    if (quote === "u" || quote === "U") {
	        s = s.substr(1);
	        quote = s.charAt(0);
	        unicode = true;
	    }
	    else if (quote === "r" || quote === "R") {
	        s = s.substr(1);
	        quote = s.charAt(0);
	        rawmode = true;
	    }
	    goog.asserts.assert(quote !== "b" && quote !== "B", "todo; haven't done b'' strings yet");

	    goog.asserts.assert(quote === "'" || quote === '"' && s.charAt(s.length - 1) === quote);
	    s = s.substr(1, s.length - 2);
	    if (unicode) {
	        s = encodeUtf8(s);
	    }

	    if (s.length >= 4 && s.charAt(0) === quote && s.charAt(1) === quote) {
	        goog.asserts.assert(s.charAt(s.length - 1) === quote && s.charAt(s.length - 2) === quote);
	        s = s.substr(2, s.length - 4);
	    }

	    if (rawmode || s.indexOf("\\") === -1) {
	        return strobj(decodeUtf8(s));
	    }
	    return strobj(decodeEscape(s, quote));
	}

	function parsestrplus (c, n) {
	    var i;
	    var ret;
	    REQ(CHILD(n, 0), TOK.T_STRING);
	    ret = new Sk.builtin.str("");
	    for (i = 0; i < NCH(n); ++i) {
	        try {
	            ret = ret.sq$concat(parsestr(c, CHILD(n, i).value));
	        } catch (x) {
	            throw new Sk.builtin.SyntaxError("invalid string (possibly contains a unicode character)", c.c_filename, CHILD(n, i).lineno);
	        }
	    }
	    return ret;
	}

	function parsenumber (c, s, lineno) {
	    var neg;
	    var val;
	    var tmp;
	    var end = s.charAt(s.length - 1);

	    // call internal complex type constructor for complex strings
	    if (end === "j" || end === "J") {
	        return Sk.builtin.complex.complex_subtype_from_string(s);
	    }

	    // Handle longs
	    if (end === "l" || end === "L") {
	        return Sk.longFromStr(s.substr(0, s.length - 1), 0);
	    }

	    // todo; we don't currently distinguish between int and float so
	    // str is wrong for these.
	    if (s.indexOf(".") !== -1) {
	        return new Sk.builtin.float_(parseFloat(s));
	    }

	    // Handle integers of various bases
	    tmp = s;
	    neg = false;
	    if (s.charAt(0) === "-") {
	        tmp = s.substr(1);
	        neg = true;
	    }

	    if (tmp.charAt(0) === "0" && (tmp.charAt(1) === "x" || tmp.charAt(1) === "X")) {
	        // Hex
	        tmp = tmp.substring(2);
	        val = parseInt(tmp, 16);
	    } else if ((s.indexOf("e") !== -1) || (s.indexOf("E") !== -1)) {
	        // Float with exponent (needed to make sure e/E wasn't hex first)
	        return new Sk.builtin.float_(parseFloat(s));
	    } else if (tmp.charAt(0) === "0" && (tmp.charAt(1) === "b" || tmp.charAt(1) === "B")) {
	        // Binary
	        tmp = tmp.substring(2);
	        val = parseInt(tmp, 2);
	    } else if (tmp.charAt(0) === "0") {
	        if (tmp === "0") {
	            // Zero
	            val = 0;
	        } else {
	            // Octal
	            tmp = tmp.substring(1);
	            if ((tmp.charAt(0) === "o") || (tmp.charAt(0) === "O")) {
	                tmp = tmp.substring(1);
	            }
	            val = parseInt(tmp, 8);
	        }
	    }
	    else {
	        // Decimal
	        val = parseInt(tmp, 10);
	    }

	    // Convert to long
	    if (val > Sk.builtin.int_.threshold$ &&
	        Math.floor(val) === val &&
	        (s.indexOf("e") === -1 && s.indexOf("E") === -1)) {
	        return Sk.longFromStr(s, 0);
	    }

	    // Small enough, return parsed number
	    if (neg) {
	        return new Sk.builtin.int_(-val);
	    } else {
	        return new Sk.builtin.int_(val);
	    }
	}

	function astForSlice (c, n) {
	    var n2;
	    var step;
	    var upper;
	    var lower;
	    var ch;
	    REQ(n, SYM.subscript);

	    /*
	     subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
	     sliceop: ':' [test]
	     */
	    ch = CHILD(n, 0);
	    lower = null;
	    upper = null;
	    step = null;
	    if (ch.type === TOK.T_DOT) {
	        return new Ellipsis();
	    }
	    if (NCH(n) === 1 && ch.type === SYM.test) {
	        return new Index(astForExpr(c, ch));
	    }
	    if (ch.type === SYM.test) {
	        lower = astForExpr(c, ch);
	    }
	    if (ch.type === TOK.T_COLON) {
	        if (NCH(n) > 1) {
	            n2 = CHILD(n, 1);
	            if (n2.type === SYM.test) {
	                upper = astForExpr(c, n2);
	            }
	        }
	    }
	    else if (NCH(n) > 2) {
	        n2 = CHILD(n, 2);
	        if (n2.type === SYM.test) {
	            upper = astForExpr(c, n2);
	        }
	    }

	    ch = CHILD(n, NCH(n) - 1);
	    if (ch.type === SYM.sliceop) {
	        if (NCH(ch) === 1) {
	            ch = CHILD(ch, 0);
	            step = new Name(strobj("None"), Load, ch.lineno, ch.col_offset);
	        }
	        else {
	            ch = CHILD(ch, 1);
	            if (ch.type === SYM.test) {
	                step = astForExpr(c, ch);
	            }
	        }
	    }
	    return new Slice(lower, upper, step);
	}

	function astForAtom(c, n) {
	    /* atom: ('(' [yield_expr|testlist_comp] ')' |
	       '[' [listmaker] ']' |
	       '{' [dictorsetmaker] '}' |
	       '`' testlist1 '`' |
	       NAME | NUMBER | STRING+)
	    */
	    var i;
	    var values;
	    var keys;
	    var size;
	    var ch = CHILD(n, 0);
	    var elts;
	    switch (ch.type) {
	        case TOK.T_NAME:
	            // All names start in Load context, but may be changed later
	            return new Name(strobj(ch.value), Load, n.lineno, n.col_offset);
	        case TOK.T_STRING:
	            return new Str(parsestrplus(c, n), n.lineno, n.col_offset);
	        case TOK.T_NUMBER:
	            return new Num(parsenumber(c, ch.value, n.lineno), n.lineno, n.col_offset);
	        case TOK.T_LPAR: // various uses for parens
	            ch = CHILD(n, 1);
	            if (ch.type === TOK.T_RPAR) {
	                return new Tuple([], Load, n.lineno, n.col_offset);
	            }
	            if (ch.type === SYM.yield_expr) {
	                return astForExpr(c, ch);
	            }
	            //            if (NCH(ch) > 1 && CHILD(ch, 1).type === SYM.comp_for) {
	            //                return astForComprehension(c, ch);
	            //            }
	            return astForTestlistComp(c, ch);
	        case TOK.T_LSQB: // list or listcomp
	            ch = CHILD(n, 1);
	            if (ch.type === TOK.T_RSQB) {
	                return new List([], Load, n.lineno, n.col_offset);
	            }
	            REQ(ch, SYM.listmaker);
	            if (NCH(ch) === 1 || CHILD(ch, 1).type === TOK.T_COMMA) {
	                return new List(seqForTestlist(c, ch), Load, n.lineno, n.col_offset);
	            } 
	            return astForListcomp(c, ch);
	            
	        case TOK.T_LBRACE:
	            /* dictorsetmaker: 
	             *     (test ':' test (comp_for : (',' test ':' test)* [','])) |
	             *     (test (comp_for | (',' test)* [',']))
	             */
	            keys = [];
	            values = [];
	            ch = CHILD(n, 1);
	            if (n.type === TOK.T_RBRACE) {
	                //it's an empty dict
	                return new Dict([], null, n.lineno, n.col_offset);
	            } 
	            else if (NCH(ch) === 1 || (NCH(ch) !== 0 && CHILD(ch, 1).type === TOK.T_COMMA)) {
	                //it's a simple set
	                elts = [];
	                size = Math.floor((NCH(ch) + 1) / 2);
	                for (i = 0; i < NCH(ch); i += 2) {
	                    var expression = astForExpr(c, CHILD(ch, i));
	                    elts[i / 2] = expression;
	                }
	                return new Set(elts, n.lineno, n.col_offset);
	            } 
	            else if (NCH(ch) !== 0 && CHILD(ch, 1).type == SYM.comp_for) {
	                //it's a set comprehension
	                return astForSetComp(c, ch);
	            } 
	            else if (NCH(ch) > 3 && CHILD(ch, 3).type === SYM.comp_for) {
	                //it's a dict compr. I think.
	                return astForDictComp(c, ch);
	            } 
	            else {
	                size = Math.floor((NCH(ch) + 1) / 4); // + 1 for no trailing comma case
	                for (i = 0; i < NCH(ch); i += 4) {
	                    keys[i / 4] = astForExpr(c, CHILD(ch, i));
	                    values[i / 4] = astForExpr(c, CHILD(ch, i + 2));
	                }
	                return new Dict(keys, values, n.lineno, n.col_offset);
	            }
	        case TOK.T_BACKQUOTE:
	            //throw new Sk.builtin.SyntaxError("backquote not supported, use repr()", c.c_filename, n.lineno);
	            return new Repr(astForTestlist(c, CHILD(n, 1)), n.lineno, n.col_offset);
	        default:
	            goog.asserts.fail("unhandled atom", ch.type);

	    }
	}

	function astForPower (c, n) {
	    /* power: atom trailer* ('**' factor)*
	     */
	    var f;
	    var tmp;
	    var ch;
	    var i;
	    var e;
	    REQ(n, SYM.power);
	    e = astForAtom(c, CHILD(n, 0));
	    if (NCH(n) === 1) {
	        return e;
	    }
	    for (i = 1; i < NCH(n); ++i) {
	        ch = CHILD(n, i);
	        if (ch.type !== SYM.trailer) {
	            break;
	        }
	        tmp = astForTrailer(c, ch, e);
	        tmp.lineno = e.lineno;
	        tmp.col_offset = e.col_offset;
	        e = tmp;
	    }
	    if (CHILD(n, NCH(n) - 1).type === SYM.factor) {
	        f = astForExpr(c, CHILD(n, NCH(n) - 1));
	        e = new BinOp(e, Pow, f, n.lineno, n.col_offset);
	    }
	    return e;
	}

	function astForExpr (c, n) {
	    /* handle the full range of simple expressions
	     test: or_test ['if' or_test 'else' test] | lambdef
	     or_test: and_test ('or' and_test)*
	     and_test: not_test ('and' not_test)*
	     not_test: 'not' not_test | comparison
	     comparison: expr (comp_op expr)*
	     expr: xor_expr ('|' xor_expr)*
	     xor_expr: and_expr ('^' and_expr)*
	     and_expr: shift_expr ('&' shift_expr)*
	     shift_expr: arith_expr (('<<'|'>>') arith_expr)*
	     arith_expr: term (('+'|'-') term)*
	     term: factor (('*'|'/'|'%'|'//') factor)*
	     factor: ('+'|'-'|'~') factor | power
	     power: atom trailer* ('**' factor)*

	     As well as modified versions that exist for backward compatibility,
	     to explicitly allow:
	     [ x for x in lambda: 0, lambda: 1 ]
	     (which would be ambiguous without these extra rules)

	     old_test: or_test | old_lambdef
	     old_lambdef: 'lambda' [vararglist] ':' old_test

	     */

	    var exp;
	    var cmps;
	    var ops;
	    var i;
	    var seq;
	    LOOP: while (true) {
	        switch (n.type) {
	            case SYM.test:
	            case SYM.old_test:
	                if (CHILD(n, 0).type === SYM.lambdef || CHILD(n, 0).type === SYM.old_lambdef) {
	                    return astForLambdef(c, CHILD(n, 0));
	                }
	                else if (NCH(n) > 1) {
	                    return astForIfexpr(c, n);
	                }
	            // fallthrough
	            case SYM.or_test:
	            case SYM.and_test:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                seq = [];
	                for (i = 0; i < NCH(n); i += 2) {
	                    seq[i / 2] = astForExpr(c, CHILD(n, i));
	                }
	                if (CHILD(n, 1).value === "and") {
	                    return new BoolOp(And, seq, n.lineno, n.col_offset);
	                }
	                goog.asserts.assert(CHILD(n, 1).value === "or");
	                return new BoolOp(Or, seq, n.lineno, n.col_offset);
	            case SYM.not_test:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                else {
	                    return new UnaryOp(Not, astForExpr(c, CHILD(n, 1)), n.lineno, n.col_offset);
	                }
	                break;
	            case SYM.comparison:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                else {
	                    ops = [];
	                    cmps = [];
	                    for (i = 1; i < NCH(n); i += 2) {
	                        ops[(i - 1) / 2] = astForCompOp(c, CHILD(n, i));
	                        cmps[(i - 1) / 2] = astForExpr(c, CHILD(n, i + 1));
	                    }
	                    return new Compare(astForExpr(c, CHILD(n, 0)), ops, cmps, n.lineno, n.col_offset);
	                }
	                break;
	            case SYM.expr:
	            case SYM.xor_expr:
	            case SYM.and_expr:
	            case SYM.shift_expr:
	            case SYM.arith_expr:
	            case SYM.term:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                return astForBinop(c, n);
	            case SYM.yield_expr:
	                exp = null;
	                if (NCH(n) === 2) {
	                    exp = astForTestlist(c, CHILD(n, 1));
	                }
	                return new Yield(exp, n.lineno, n.col_offset);
	            case SYM.factor:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                return astForFactor(c, n);
	            case SYM.power:
	                return astForPower(c, n);
	            default:
	                goog.asserts.fail("unhandled expr", "n.type: %d", n.type);
	        }
	        break;
	    }
	}

	function astForPrintStmt (c, n) {
	    /* print_stmt: 'print' ( [ test (',' test)* [','] ]
	     | '>>' test [ (',' test)+ [','] ] )
	     */
	    var nl;
	    var i, j;
	    var seq;
	    var start = 1;
	    var dest = null;
	    REQ(n, SYM.print_stmt);
	    if (NCH(n) >= 2 && CHILD(n, 1).type === TOK.T_RIGHTSHIFT) {
	        dest = astForExpr(c, CHILD(n, 2));
	        start = 4;
	    }
	    seq = [];
	    for (i = start, j = 0; i < NCH(n); i += 2, ++j) {
	        seq[j] = astForExpr(c, CHILD(n, i));
	    }
	    nl = (CHILD(n, NCH(n) - 1)).type === TOK.T_COMMA ? false : true;
	    return new Print(dest, seq, nl, n.lineno, n.col_offset);
	}

	function astForStmt (c, n) {
	    var ch;
	    if (n.type === SYM.stmt) {
	        goog.asserts.assert(NCH(n) === 1);
	        n = CHILD(n, 0);
	    }
	    if (n.type === SYM.simple_stmt) {
	        goog.asserts.assert(numStmts(n) === 1);
	        n = CHILD(n, 0);
	    }
	    if (n.type === SYM.small_stmt) {
	        REQ(n, SYM.small_stmt);
	        n = CHILD(n, 0);
	        /* small_stmt: expr_stmt | print_stmt  | del_stmt | pass_stmt
	         | flow_stmt | import_stmt | global_stmt | exec_stmt
	         | assert_stmt
	         */
	        switch (n.type) {
	            case SYM.expr_stmt:
	                return astForExprStmt(c, n);
	            case SYM.print_stmt:
	                return astForPrintStmt(c, n);
	            case SYM.del_stmt:
	                return astForDelStmt(c, n);
	            case SYM.pass_stmt:
	                return new Pass(n.lineno, n.col_offset);
	            case SYM.flow_stmt:
	                return astForFlowStmt(c, n);
	            case SYM.import_stmt:
	                return astForImportStmt(c, n);
	            case SYM.global_stmt:
	                return astForGlobalStmt(c, n);
	            case SYM.exec_stmt:
	                return astForExecStmt(c, n);
	            case SYM.assert_stmt:
	                return astForAssertStmt(c, n);
	            case SYM.debugger_stmt:
	                return new Debugger_(n.lineno, n.col_offset);
	            default:
	                goog.asserts.fail("unhandled small_stmt");
	        }
	    }
	    else {
	        /* compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt
	         | funcdef | classdef | decorated
	         */
	        ch = CHILD(n, 0);
	        REQ(n, SYM.compound_stmt);
	        switch (ch.type) {
	            case SYM.if_stmt:
	                return astForIfStmt(c, ch);
	            case SYM.while_stmt:
	                return astForWhileStmt(c, ch);
	            case SYM.for_stmt:
	                return astForForStmt(c, ch);
	            case SYM.try_stmt:
	                return astForTryStmt(c, ch);
	            case SYM.with_stmt:
	                return astForWithStmt(c, ch);
	            case SYM.funcdef:
	                return astForFuncdef(c, ch, []);
	            case SYM.classdef:
	                return astForClassdef(c, ch, []);
	            case SYM.decorated:
	                return astForDecorated(c, ch);
	            default:
	                goog.asserts.assert("unhandled compound_stmt");
	        }
	    }
	}

	Sk.astFromParse = function (n, filename, c_flags) {
	    var j;
	    var num;
	    var ch;
	    var i;
	    var c = new Compiling("utf-8", filename, c_flags);
	    var stmts = [];
	    var k = 0;
	    switch (n.type) {
	        case SYM.file_input:
	            for (i = 0; i < NCH(n) - 1; ++i) {
	                ch = CHILD(n, i);
	                if (n.type === TOK.T_NEWLINE) {
	                    continue;
	                }
	                REQ(ch, SYM.stmt);
	                num = numStmts(ch);
	                if (num === 1) {
	                    stmts[k++] = astForStmt(c, ch);
	                }
	                else {
	                    ch = CHILD(ch, 0);
	                    REQ(ch, SYM.simple_stmt);
	                    for (j = 0; j < num; ++j) {
	                        stmts[k++] = astForStmt(c, CHILD(ch, j * 2));
	                    }
	                }
	            }
	            return new Module(stmts);
	        case SYM.eval_input:
	            goog.asserts.fail("todo;");
	        case SYM.single_input:
	            goog.asserts.fail("todo;");
	        default:
	            goog.asserts.fail("todo;");
	    }
	};

	Sk.astDump = function (node) {
	    var spaces = function (n) // todo; blurgh
	    {
	        var i;
	        var ret = "";
	        for (i = 0; i < n; ++i) {
	            ret += " ";
	        }
	        return ret;
	    };

	    var _format = function (node, indent) {
	        var ret;
	        var elemsstr;
	        var x;
	        var elems;
	        var fieldstr;
	        var field;
	        var attrs;
	        var fieldlen;
	        var b;
	        var a;
	        var i;
	        var fields;
	        var namelen;
	        if (node === null) {
	            return indent + "None";
	        }
	        else if (node.prototype && node.prototype._astname !== undefined && node.prototype._isenum) {
	            return indent + node.prototype._astname + "()";
	        }
	        else if (node._astname !== undefined) {
	            namelen = spaces(node._astname.length + 1);
	            fields = [];
	            for (i = 0; i < node._fields.length; i += 2) // iter_fields
	            {
	                a = node._fields[i]; // field name
	                b = node._fields[i + 1](node); // field getter func
	                fieldlen = spaces(a.length + 1);
	                fields.push([a, _format(b, indent + namelen + fieldlen)]);
	            }
	            attrs = [];
	            for (i = 0; i < fields.length; ++i) {
	                field = fields[i];
	                attrs.push(field[0] + "=" + field[1].replace(/^\s+/, ""));
	            }
	            fieldstr = attrs.join(",\n" + indent + namelen);
	            return indent + node._astname + "(" + fieldstr + ")";
	        }
	        else if (goog.isArrayLike(node)) {
	            //Sk.debugout("arr", node.length);
	            elems = [];
	            for (i = 0; i < node.length; ++i) {
	                x = node[i];
	                elems.push(_format(x, indent + " "));
	            }
	            elemsstr = elems.join(",\n");
	            return indent + "[" + elemsstr.replace(/^\s+/, "") + "]";
	        }
	        else {
	            if (node === true) {
	                ret = "True";
	            }
	            else if (node === false) {
	                ret = "False";
	            }
	            else if (node instanceof Sk.builtin.lng) {
	                ret = node.tp$str().v;
	            }
	            else if (node instanceof Sk.builtin.str) {
	                ret = node["$r"]().v;
	            }
	            else {
	                ret = "" + node;
	            }
	            return indent + ret;
	        }
	    };

	    return _format(node, "");
	};

	goog.exportSymbol("Sk.astFromParse", Sk.astFromParse);
	goog.exportSymbol("Sk.astDump", Sk.astDump);



	/* ---- /Users/rob/skulpty/lib/afterword.js ---- */ 

	function wrapAstThing(fx, argpos, debug) {
		argpos = argpos || 2;
		return function(x) {
			var n = arguments[argpos-1];
			var result = fx.apply(undefined, arguments);
			result.range = n.range;
			result.str = n.str;
			result.loc = n.loc;
			if ( debug ) {
				console.log(n);
				console.log(result);
			}
			return result;
		};
	}

	astForAtom = wrapAstThing(astForAtom);
	astForCompOp = wrapAstThing(astForCompOp);
	astForSuite = wrapAstThing(astForSuite);
	astForExceptClause = wrapAstThing(astForExceptClause);
	astForDottedName = wrapAstThing(astForDottedName);
	astForDecorator = wrapAstThing(astForDecorator);
	astForDecorators = wrapAstThing(astForDecorators);
	astForDecorated = wrapAstThing(astForDecorated);
	astForWithVar = wrapAstThing(astForWithVar);
	astForWithStmt = wrapAstThing(astForWithStmt);
	astForExecStmt = wrapAstThing(astForExecStmt);
	astForIfStmt = wrapAstThing(astForIfStmt);
	astForExprlist = wrapAstThing(astForExprlist);
	astForDelStmt = wrapAstThing(astForDelStmt);
	astForGlobalStmt = wrapAstThing(astForGlobalStmt);
	astForAssertStmt = wrapAstThing(astForAssertStmt);
	astForImportStmt = wrapAstThing(astForImportStmt);
	astForTestlistComp = wrapAstThing(astForTestlistComp);
	astForListcomp = wrapAstThing(astForListcomp);
	astForFactor = wrapAstThing(astForFactor);
	astForForStmt = wrapAstThing(astForForStmt);
	astForTrailer = wrapAstThing(astForTrailer);
	astForFlowStmt = wrapAstThing(astForFlowStmt);
	astForArguments = wrapAstThing(astForArguments);
	astForFuncdef = wrapAstThing(astForFuncdef);
	astForClassBases = wrapAstThing(astForClassBases);
	astForClassdef = wrapAstThing(astForClassdef);
	astForLambdef = wrapAstThing(astForLambdef);
	astForComprehension = wrapAstThing(astForComprehension);
	astForIterComp = wrapAstThing(astForIterComp);
	astForDictComp = wrapAstThing(astForDictComp);
	astForGenExpr = wrapAstThing(astForGenExpr);
	astForSetComp = wrapAstThing(astForSetComp);
	astForWhileStmt = wrapAstThing(astForWhileStmt);
	astForAugassign = wrapAstThing(astForAugassign);
	astForBinop = wrapAstThing(astForBinop);
	astForTestlist = wrapAstThing(astForTestlist);
	astForExprStmt = wrapAstThing(astForExprStmt);
	astForIfexpr = wrapAstThing(astForIfexpr);
	astForExpr = wrapAstThing(astForExpr);
	Sk.astFromParse = wrapAstThing(Sk.astFromParse, 1);

	Sk.nameForToken = function(v) {
		if ( typeof v === "string" ) return v;
		for ( var name in Sk.Tokenizer.Tokens ) {
			if ( Sk.Tokenizer.Tokens[name] == v ) return name;
		}
		if ( v in Sk.ParseTables.number2symbol ) {
			return Sk.ParseTables.number2symbol[v];
		}

		return '???:' + v;
	};

	//Sk.python3 = true;
	Sk.Parser = Parser;
	Sk.builtin.str.prototype.valueOf = function() { return this.v; };
	Sk.builtin.str.prototype.toString = function() { return this.v; };

	Sk.builtin.SyntaxError = function(str, file, line, ctx, extra) {
		var err = new SyntaxError(str, file, line);
		err.context = ctx;
		err.extra = extra;
		err.line = line;
		return err;
	};

	Sk.builtin.IndentationError = function(str, file, line, row, extra) {
		var err = new SyntaxError('Indentation Error: ' + str, file, line);
		err.context = [[line, row], [line, row]];
		err.extra = {
		};
		err.line = line;
		return err;
	};


	module.exports = Sk;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	'use strict';

	var isArray = Array.isArray;

	function getOpName(op) {
		if (op.prototype._astname) {
			return op.prototype._astname;
		}
		throw new Error("Coudlnt decode operator name for: " + (op.name || op.toString()));
	}

	function abort(why) {
		console.log(new Error("ABORT:" + why).stack);
		throw new Error(why);
	}

	function isExpression(n) {
		return /Expression$/.test(n.type);
	}

	var idx = 0;
	function createTempName(hint) {
		return '__temp$' + hint + '$' + idx++;
	}

	function ensureStatement(s) {
		var f = s;
		if ( !isArray(s) ) f = [f];
		for ( var i = 0; i < f.length; ++i ) {
			var v = f[i];
			if ( isExpression(v) ) {
				f[i] = {type: "ExpressionStatement", expression: v};
			}
		}

		if ( isArray(s) ) return s;
		else return f[0];
	}

	function ident(n) {
		return {type: "Identifier", name: n.valueOf()};
	}

	function member(o, p) {
		return {
			type: "MemberExpression",
			object: o,
			property: p,
			computed: false
		};
	}

	function literal(v) {
		if ( typeof v === 'object' ) v = v.valueOf();

		if ( typeof v === 'number' && (1 / v !== 1 / Math.abs(v)) ) {
			return {type: "UnaryExpression", argument: literal(-v), operator: '-' };
		}

		return {type: "Literal", value: v, raw: JSON.stringify(v)};
	}

	function binOp(left, op, right) {
		return {
			type: "BinaryExpression",
			left: left,
			right: right,
			operator: op
		};
	}

	function logicOp(left, op, right) {
		return {
			type: "LogicalExpression",
			left: left,
			right: right,
			operator: op
		};
	}

	function ternary(cond, a, b) {
		return {
			type: "ConditionalExpression",
			test: cond,
			consequent: a,
			alternate: b
		};
	}

	function var_(name, init) {
		return {
			type: "VariableDeclaration",
			kind: 'var',
			declarations: [{
				type: "VariableDeclarator",
				id: name,
				init: init ? init : undefined
			}]
		};
	}

	function transform(node, ctx) {
		//console.log(node.lineno, node.col_offset);
		var result = dispatch(node, ctx);
		if ( node.range ) result.range = [node.range[0], node.range[1]];
		if ( node.loc ) result.loc = node.loc;
		result.str = node.str;
		return result;
	}

	function dispatch(node, ctx) {
		if ( !ctx.locals ) ctx.locals = Object.create(null);

		if ( !node ) {
			console.log("WAT!", new Error().stack);
			throw new Error("What?");
		}
		if ( isArray(node) ) {
			var body = [];
			for ( var i = 0; i < node.length; ++i ) {
				var r = transform(node[i], ctx);
				if ( isArray(r) ) body.push.apply(body, r);
				else body.push(r);
			}
			return body;
		}
		switch (node._astname) {
			case 'Attribute': return transformAttribute(node, ctx);
			case 'Assign': return transformAssign(node, ctx);
			case 'AugAssign': return transformAugAssign(node, ctx);
			case 'BinOp': return transformBinOp(node, ctx);
			case 'BoolOp': return transformBoolOp(node, ctx);
			case 'Break': return transformBreak(node, ctx);
			case 'Call': return transformCall(node, ctx);
			case 'ClassDef': return transformClassDef(node, ctx);
			case 'Continue': return tranformContinue(node, ctx);
			case 'Compare': return transformCompare(node, ctx);
			case 'Dict': return transformDict(node, ctx);
			case 'Delete': return transformDel(node, ctx);
			case 'Expr': return transformExpr(node, ctx);
			case 'For': return transformFor(node, ctx);
			case 'FunctionDef': return transformFunctionDef(node, ctx);
			case 'GeneratorExp': return transformListComp(node, ctx); //TODO: Make this seperate
			case 'Global': return transformGlobal(node, ctx);
			case 'If': return transformIf(node, ctx);
			case 'Import': return NoOp();
			case 'Lambda': return transformLambda(node, ctx);
			case 'List': return transformList(node, ctx);
			case 'ListComp': return transformListComp(node, ctx);
			case 'Module': return transformModule(node, ctx);
			case 'Name': return transformName(node, ctx);
			case 'Print': return transformPrint(node, ctx);
			case 'Return': return transformReturn(node, ctx);
			case 'Str': return transformStr(node, ctx);
			case 'Subscript': return transformSubscript(node, ctx);
			case 'Tuple': return transformTuple(node, ctx);
			case 'Num': return transformNum(node, ctx);
			case 'Pass': return transformPass(node, ctx);
			case 'UnaryOp': return transformUnaryOp(node, ctx);
			case 'While': return transformWhile(node, ctx);
			default:
				console.log("Dont know how to transform: " + node._astname);
				console.log(JSON.stringify(node, null, '  '));
				throw new Error("Dont know how to transform: " + node._astname);
		}
	}

	function NoOp() { return []; }



	function makeVariableName(name) {
		var parts = Array.isArray(name) ? name : name.split(/\./g);
		if ( parts.length === 1 ) return ident(name);
		var prop = parts.pop();
		return member(makeVariableName(parts), ident(prop));
	}

	function transformAttribute(node, ctx) {
		var n = node.attr;
		if ( n._astname ) n = transform(n, ctx);
		else n = {type: 'Identifier', name: n.valueOf()};
		return member(transform(node.value, ctx), n);
	}

	function transformAugAssign(node, ctx) {
		//TODO: We need to not inject left into the code twice
		//as it could have side effects.
		var right = transform(node.value, ctx);
		var left = transform(node.target, ctx);
		var tn = createTempName("left");
		var opName = getOpName(node.op);
		return [
			var_(ident(tn), left),
			ensureStatement({
				type: "AssignmentExpression",
				operator: '=',
				left: left,
				right: createBinOp(left, opName, right)
			})
		];
	}

	function transformAssign(node, ctx) {

		var results = [];
		for ( var i = 0; i < node.targets.length; ++i ) {
			var left = node.targets[i];
			if ( ctx.writeTarget ) {
				left = member(ctx.writeTarget, transform(left,ctx));
			}
			results.push.apply(results,createTupleUnpackingAssign(left, transform(node.value, ctx), ctx));
		
		}
		if ( results.length == 1 ) return results[0];
		return {type: "BlockStatement", body: results}; 
	}

	function createBinOp(left, op, right) {

		if ( op === 'FloorDiv' ) {
			return {
				type: "CallExpression",
				callee: makeVariableName('Math.floor'),
				arguments: [{
					type: "BinaryExpression",
					left: left,
					right: right,
					operator: '/'
				}]
			};
		}

		var fxOps = {
			"Add": "__pythonRuntime.ops.add",
			"Mult": "__pythonRuntime.ops.multiply",
			"Pow": "Math.pow"
		};

		if ( op in fxOps  ) {
			var call = {
				type: "CallExpression",
				callee: makeVariableName(fxOps[op]),
				arguments: [left, right]
			};
			return call;
		}

		var operators = {
			"Add": "+",
			"Sub": "-",
			"Mod": "%",
			"Div": "/",
			"BitAnd": "&",
			"BitOr": "|",
			'BitXor': '^',
			"LShift": "<<",
			"RShift": ">>"

		};

		if ( !(op in operators) ) abort("Unknown binary operator: " + op);

		return binOp(left, operators[op], right);
	}

	function transformBinOp(node, ctx) {
		var left = transform(node.left, ctx);
		var right = transform(node.right, ctx);
		return createBinOp(left, getOpName(node.op), right);
	}

	function transformBoolOp(node, ctx) {
		var fvals = new Array(node.values.length);
		for ( var i = 0; i < node.values.length; ++i ) {
			fvals[i] = transform(node.values[i], ctx);
		}
		var opName = getOpName(node.op);
		var operators = {
			'And': '&&',
			'Or': '||'
		};

		if ( !(opName in operators ) ) abort("Unknown bool opeartor: " + opName);
		var opstr = operators[opName];

		var result = fvals.pop();
		while ( fvals.length > 0 ) {
			result = logicOp(fvals.pop(), opstr, result);
		}


		//TODO: Support || as well?
		return result;
	}

	function transformBreak(node, ctx) {
		return {type: "BreakStatement"};
	}

	function transformCall(node, ctx) {
		var builtins = ['len'];
		if ( node.func._astname == 'Name' ) {
			switch ( node.func.id.v ) {
				case 'len':
					return {
						type: "MemberExpression",
						object: transform(node.args[0], ctx),
						property: {type: "Identifier", name: "length"}
					};
				case 'all': case 'ord':
				case 'sum': case 'any':
				case 'str': case 'chr':
				case 'ascii': case 'divmod':
				case 'range': case 'enumerate':
				case 'round': case 'filter':
				case 'abs': case 'float':
				case 'int': case 'hex':
				case 'tuple': case  'map':
				case 'bool': case 'max':
				case 'sorted': case 'min':
				case 'list': case 'oct':
				case 'pow': case  'reversed':
				case 'repr':
					return {
						type: 'CallExpression',
						callee: makeVariableName('__pythonRuntime.functions.' + node.func.id.v),
						arguments: transform(node.args, ctx)
					};
				case 'dict':
					var args = [];
					for ( var i = 0; i < node.keywords.length; ++i ) {
						args.push({
							type: "ArrayExpression",
							elements: [
								literal(node.keywords[i].arg.v),
								transform(node.keywords[i].value, ctx)
							]
						});
					}
					return {
						type: "NewExpression",
						callee: makeVariableName('__pythonRuntime.objects.dict'),
						arguments: args
					};

			}
		}

		var args = transform(node.args, ctx);

		if ( node.keywords.length > 0 ) {
			var paramsDict = {
				type: "ObjectExpression",
				properties: [{
					type: "Property",
					key: ident("__kwp"),
					value: literal(true)
				}]
			};

			for ( var i = 0; i < node.keywords.length; ++i ) {
				var k = node.keywords[i];
				paramsDict.properties.push({
					type: "Property",
					key: ident(k.arg.v),
					value: transform(k.value, ctx)
				});
			}

			var extraArg = {
				type: "CallExpression",
				callee: makeVariableName('__pythonRuntime.utils.createParamsObj'),
				arguments: [paramsDict]
			};

			args.push(extraArg);
		}

		return {
			type: "CallExpression",
			callee: transform(node.func, ctx),
			arguments: args
		};
	}

	function transformClassDef(node, ctx) {
		var body = [];
		var proto = member(ident(node.name), ident('prototype'));
		var nctx = {
			writeTarget: proto,
			inClass: true,
			locals: Object.create(null)
		};

		if ( node.bases.length > 1 ) alert("Multiple base classes not supported.");

		var base = (node.bases.length > 0) ? transform(node.bases[0], ctx) : undefined;

		var ctorBody = [];
		ctorBody.push({
			type: "VariableDeclaration",
			kind: 'var',
			declarations: [{
				type: "VariableDeclarator",
				id: ident('that'),
				init: {type: "ThisExpression"}
			}]
		});

		ctorBody.push({
			type: "IfStatement",
			test: {
				type:"UnaryExpression",
				argument: binOp(ident('that'), "instanceof", ident(node.name)),
				operator: "!"
			},
			consequent: ensureStatement({
				type: "AssignmentExpression",
				left: ident('that'),
				right: {
					type:  "CallExpression",
					callee: makeVariableName('Object.create'),
					arguments: [ proto ]
				},
				operator: '='
			})
		});

		ctorBody.push({
			type: "IfStatement",
			test: {
				type: "CallExpression",
				callee: member(proto, ident('hasOwnProperty')),
				arguments: [literal('__init__')]
			},
			consequent: ensureStatement({
				type: "CallExpression",
				callee: member(member(proto, ident('__init__')), ident('apply')),
				arguments: [ident('that'), ident('arguments')]
			})
		});

		if ( base ) {
			ctorBody.push(ensureStatement({
				type: "CallExpression",
				callee: {
					type: "MemberExpression",
					object: base,
					property: ident('apply'),
					computed: false
				},
				arguments: [ident('that'), ident('arguments')]
			}));
		}

		ctorBody.push({
			type: "ReturnStatement",
			argument: ident('that')
		});


		body.push({
			type: "FunctionDeclaration",
			id: ident(node.name),
			params: [],
			body: {type: "BlockStatement", body:ctorBody}
		});

		if ( base ) {
			body.push({
				type: "AssignmentExpression",
				left: proto,
				right: {
					type:  "CallExpression",
					callee: makeVariableName('Object.create'),
					arguments: [ member(base, ident('prototype')) ]
				},
				operator: "="
			});
		}

		body = body.concat(transform(node.body, nctx));

		body.push({
			type: "ReturnStatement",
			argument: ident(node.name)
		});

		return {
			"type": "VariableDeclaration",
			"declarations": [
			{
			  "type": "VariableDeclarator",
			  "id": ident(node.name),
			  "init": {
			  	type: "CallExpression",
			  	callee: {
			  		type: "FunctionExpression",
			  		params: [],
			  		body: {type: "BlockStatement", body: ensureStatement(body)}
			  	},
			  	arguments: []
			  }
			}],
			"kind": ctx.varType || 'var'
		};
	}


	function tranformContinue(node, ctx) {
		return {type: "ContinueStatement"};
	}

	function makeCop(left, op, right) {

		var fxOps = {
			"In_": "in",
			"In": "in",
			"NotIn": "in"
		};
		var opName = getOpName(op);
		if ( opName in fxOps  ) {
			var call = {
				type: "CallExpression",
				callee: makeVariableName("__pythonRuntime.ops." + fxOps[opName]),
				arguments: [left, right]
			};

			if ( opName == "NotIn" ) {
				return {
					type: "UnaryExpression",
					argument: call,
					operator: "!"
				};
			} else {
				return call;	
			} 
		}

		
		var operators = {
			"Eq": "===",
			"NotEq": "!==",
			"LtE": "<=",
			"Lt": "<",
			"GtE": ">=",
			"Gt": ">",
			"Is": "===",
			"IsNot": "!=="
		};
		
		if ( !(opName in operators) ) abort("Unsuported Compare operator: " + opName);
		return binOp(left, operators[opName], right);
	}

	function transformCompare(node, ctx) {
		var left = transform(node.left, ctx);
		var result;

		for ( var i = 0; i < node.comparators.length; ++i ) {
			var right = transform(node.comparators[i], ctx);
			var cop = makeCop(left, node.ops[i], right);
			if ( result ) {
				result = logicOp(result, '&&', cop);
			} else {
				result = cop;
			}
			left = right;
		}

		

		return result;
		
	}

	function transformDel(node, ctx) {
		var result = [];
		for ( var i = 0; i < node.targets.length; ++i ) {
			var st = node.targets[i];
			var partial = transform(st, ctx);
			result.push({
				type: "AssignmentExpression",
				operator: "=",
				left: partial,
				right: {
					type: "UnaryExpression",
					argument: literal(0),
					operator: 'void',
					prefix: true
				}
			});
		}
		return ensureStatement({
			type: "SequenceExpression",
			expressions: result
		});
	}

	function transformDict(node, ctx) {
		var args = [];
		for ( var i = 0; i < node.keys.length; ++i ) {
			args.push({
				type: "ArrayExpression",
				elements: [
					transform(node.keys[i], ctx),
					transform(node.values[i], ctx)
				]
			});
		}
		return {
			type: "NewExpression",
			callee: makeVariableName("__pythonRuntime.objects.dict"),
			arguments: args
		};
	}

	function transformExpr(node, ctx) {
		return {
			type: "ExpressionStatement",
			expression: transform(node.value, ctx)
		};
	}

	function assignPossiblyWithDeclaration(target, value, ctx) {
		var left = target._astname ? transform(target, ctx) : target;
		var varible;

		if ( left.type === "Identifier" ) varible = left.name;

		if ( !varible || !ctx || !ctx.locals || ctx.locals[varible] ) {
			return {type: "ExpressionStatement", expression: {
				type: "AssignmentExpression",
				operator: "=",
				left: left,
				right: value
			}};
		}

		ctx.locals[varible] = true;

		return {
			type: "VariableDeclaration",
			declarations: [{
				type: "VariableDeclarator",
				id: left,
				init: value
			}],
			kind: ctx.varType || 'var'
		};
	}

	function createTupleUnpackingAssign(target, value, ctx) {

		if ( target._astname === 'Tuple' ) {
			var result = [];
			var tn = createTempName("right");
			result.push({
				type: "VariableDeclaration",
				kind: "var",
				declarations: [{
					type: "VariableDeclarator",
					id: ident(tn),
					init: value
				}]
			});
			for ( var i = 0; i < target.elts.length; ++i ) {
				result.push.apply(result,createTupleUnpackingAssign(
					target.elts[i],
					{type: "MemberExpression", object: ident(tn), property: literal(i),  computed: true}
				,ctx));
			}
			return result;
		}

		return [assignPossiblyWithDeclaration(target, value, ctx)];
	}

	function createForLoop(iident, tident, iter, target, body, ctx) {

		body = createTupleUnpackingAssign(
			target, 
			{type: "MemberExpression", object: tident, property: iident, computed: true},
			ctx
		).concat(body);

		var riter = ternary(
			{type: "CallExpression", callee: makeVariableName("Array.isArray"), arguments:[iter]},
			iter,
			{type: "CallExpression", callee: makeVariableName("Object.keys"), arguments:[iter]}
		);

		return {
			type: "ForStatement",
			init: {
				"type": "VariableDeclaration",
				"declarations": [
				{
				  "type": "VariableDeclarator",
				  "id": iident,
				  "init": literal(0)
				},
				{
				  "type": "VariableDeclarator",
				  "id": tident,
				  "init": riter
				}],
				"kind": ctx.varType
			},
			test: binOp(iident, '<', {
				type: "MemberExpression", object: tident, property: {type: "Identifier", name: "length"}
			}),
			update: {
				"type": "UpdateExpression",
				"operator": "++",
				"prefix": true,
				"argument": iident
			},
			body: {type: "BlockStatement", body: body}
		};
	}

	function transformFor(node, ctx) {
		var name = createTempName('idx');
		var iident = ident(name);
		var tname = createTempName('target');
		var tident = {type: "Identifier", name: tname};
		var iter = transform(node.iter, ctx);
		var body = ensureStatement(transform(node.body, ctx));

		if ( node.orelse && node.orelse.length > 0 ) abort("else: for-else statement unsupported.");
		return createForLoop(iident, tident, iter, node.target, body, ctx);
	}

	function prepareFunctionBody(node, ctx) {
		var args = node.args.args.slice(0);
		if  ( ctx.inClass ) {
			//TODO: Make sure it's named self, maybe?
			args.shift();
		}
		var hasAnyArguments = args.length > 0 || node.args.vararg || node.args.kwarg;
		var nctx = {
			locals: Object.create(null),
			varType: ctx.varType
		};
		var body = ensureStatement(transform(node.body, nctx));
		var premble = [];

		if ( ctx.inClass ) {
			premble.push({
				"type": "VariableDeclaration",
				"declarations": [{
					"type": "VariableDeclarator",
					"id": ident('self'),
					"init": {type: "ThisExpression"}
				}],
				"kind": "var"
			});
		}

		if ( hasAnyArguments ) {
			
			var hasParams = createTempName('hasParams');
			var param0 = createTempName('param0');
			var realArgCount = createTempName('realArgCount');
			var argLen = makeVariableName('arguments.length');
			var argN = {type: "MemberExpression", object: ident('arguments'), property: binOp(argLen, '-', literal(1)), computed: true};
			var argNKeywords = {type: "MemberExpression", object: argN, property: ident('keywords'), computed: false};

			premble.push({
				"type": "VariableDeclaration",
				"declarations": [
				{
				  "type": "VariableDeclarator",
				  "id": ident(hasParams),
				  "init": logicOp(binOp(argLen, '>', literal(0)), '&&', logicOp(argN, '&&', argNKeywords))
				}],
				"kind":  "var"
			});

			var main = [];
			main.push({
				"type": "VariableDeclaration",
				"declarations": [{
					"type": "VariableDeclarator",
					"id": ident(param0),
					"init": ternary(ident(hasParams), argNKeywords, {type: "ObjectExpression", properties: []})
				},{
					"type": "VariableDeclarator",
					"id": ident(realArgCount),
					"init": binOp(argLen, '-', ternary(ident(hasParams), literal(1), literal(0)))
				}],
				"kind": "var"
			});

			for ( var i = 0; i < args.length; ++i ) {
				var a = node.args.args[i];
				var didx = i - (node.args.args.length - node.args.defaults.length);
				var def = didx >= 0 ? transform(node.args.defaults[didx], ctx) : ident('undefined');

				main.push({
					type: "IfStatement",
					test: binOp(ident(realArgCount), '<', literal(i+1)),
					consequent: ensureStatement({
						type: "AssignmentExpression",
						operator: "=",
						left: ident(a.id),
						right: ternary(
							binOp(literal(a.id), 'in', ident(param0)),
							{type: "MemberExpression", object: ident(param0), property: ident(a.id), computed: false},
							def
						)
					})
				});
			}

			if ( node.args.vararg ) {
				main.push({
					"type": "VariableDeclaration",
					"declarations": [{
						"type": "VariableDeclarator",
						"id": ident(node.args.vararg),
						"init": {
							type: "CallExpression",
							callee: makeVariableName("Array.prototype.slice.call"),
							arguments: [ident('arguments'), literal(node.args.args.length), hasAnyArguments ? ident(realArgCount) : undefined]
						}
					}],
					"kind": "var"
				});
			}

			if ( node.args.kwarg ) {
				for ( var i = 0; i < node.args.args.length; ++i ) {
					main.push(ensureStatement({
						type: "UnaryExpression",
						operator: "delete",
						argument: {
							type: "MemberExpression",
							object: ident(param0),
							property: ident(node.args.args[i].id),
							computed: false
						}
					}));
				}
				main.push({
					"type": "VariableDeclaration",
					"declarations": [{
						"type": "VariableDeclarator",
						"id": ident(node.args.kwarg),
						"init": ident(param0)
					}],
					"kind": "var"
				});
			}

			premble = premble.concat(main); //TODO: If we dont have defauts, we can guard this with __hasParams	
		}


		body = premble.concat(body);
		var params = transform(args, ctx);
		return {
			premble: premble,
			body: body,
			params: params
		};

	}

	function transformFunctionDef(node, ctx) {
		var data = prepareFunctionBody(node, ctx);



		if ( ctx.writeTarget ) {
			return ensureStatement({
				type: "AssignmentExpression",
				left: {type: "MemberExpression", object: ctx.writeTarget, property: ident(node.name)},
				right: {
					type: "FunctionExpression",
					name: ident(node.name),
					params: data.params,
					body: {type: "BlockStatement", body: data.body}
				},
				operator: '='
			});
		} else {
			return {
				type: "FunctionDeclaration",
				id: {type: "Identifier", name: node.name.v},
				params: data.params,
				body: {type: "BlockStatement", body: data.body}
			};
		}
	}

	function transformGlobal(node, ctx) {
		for ( var i = 0; i < node.names.length; ++i ) {
			ctx.locals[node.names[i].v] = true;
		}
		return [];
	}

	function transformIf(node, ctx) {
		var body = ensureStatement(transform(node.body, ctx));
		return {
			type: "IfStatement",
			test: transform(node.test, ctx),
			consequent: {type: "BlockStatement", body: body},
			alternate: (node.orelse && node.orelse.length > 0) ? {type: "BlockStatement", body: ensureStatement(transform(node.orelse, ctx))} : undefined
		};
	}

	function transformLambda(node, ctx) {
		var data = prepareFunctionBody(node, ctx);
		
		//TODO: This is pretty sketchy.
		var last = data.body[data.body.length - 1];
		data.body[data.body.length - 1] = {type: "ReturnStatement", argument: last.expression};

		return {
			type: "FunctionExpression",
			params: data.params,
			body: {type: "BlockStatement", body: data.body}
		};
	}

	function transformList(node, ctx) {
		var call = {
			type: "CallExpression",
			callee: makeVariableName("__pythonRuntime.objects.list"),
			arguments: transform(node.elts, ctx)
		};
		return call;
	}

	function transformListComp(node, ctx) {	
		var body = [];
		var aggrigator = createTempName('result');

		body.push({
			"type": "VariableDeclaration",
			"declarations": [{
				"type": "VariableDeclarator",
				"id": ident(aggrigator),
				"init": {
					type: "NewExpression",
					callee: makeVariableName('__pythonRuntime.objects.list'),
					arguments: []
				}
			}],
			"kind": "var"
		});

		var insideBody = [];

		insideBody.push(ensureStatement({
			type: "CallExpression",
			callee: {type: "MemberExpression", object: ident(aggrigator), property: ident('push'), computed: false},
			arguments: [transform(node.elt, ctx)]
		}));

		//if ( node.generators.length !== 1 ) abort("Unsuported number of generators");
		var gen = node.generators[0];

		for ( var g = node.generators.length - 1; g >= 0; --g ) {
			var idxName = createTempName('idx');
			var listName = createTempName("list" + g);
			var iterName = createTempName('iter');
			var gen = node.generators[g];
			for ( var i = 0; i < gen.ifs.length; ++i ) {
				insideBody.unshift({
					type: "IfStatement",
					test: {type: "UnaryExpression", argument: transform(gen.ifs[i], ctx), operator: "!"},
					consequent: {type: "ContinueStatement"}
				});
			}

			insideBody = [
				{
					type: "VariableDeclaration",
					kind: "var",
					declarations: [{
						type: "VariableDeclarator",
						id: ident(listName),
						init: transform(gen.iter, ctx)
					}]
				},
				createForLoop(ident(idxName), ident(iterName), ident(listName), gen.target, insideBody, ctx)
			];
		}

		body.push.apply(body, insideBody);
		body.push({
			type: "ReturnStatement",
			argument: ident(aggrigator)
		});

		var expr = {
			type: "FunctionExpression",
			params: [],
			body: {type: "BlockStatement", body: body}
		};

		return {
			type: "CallExpression",
			callee: expr,
			arguments: []
		};
	}

	function transformModule(node, ctx) {
		return {
			type: "Program",
			body: ensureStatement(transform(node.body, ctx))
		};
	}

	function transformName(node, ctx) {
		if ( node.id.v === 'True' ) return {type: "Literal", value: true, raw: "true"};
		if ( node.id.v === 'False' ) return {type: "Literal", value: false, raw: "false"};
		if ( node.id.v === 'None' ) return {type: "Literal", value: null, raw: "null"};

		if ( node.id.v === 'random' ) return makeVariableName('__pythonRuntime.imports.random');
		return ident(node.id);
	}

	function transformNum(node, ctx) {
		return literal(node.n);
	}

	function transformPrint(node, ctx) {
		return {
			type: "CallExpression",
			callee: makeVariableName("console.log"),
			arguments: transform(node.values, ctx)
		};
	}

	function transformReturn(node, ctx) {
		return {
			type: "ReturnStatement",
			argument: node.value ? transform(node.value, ctx) : undefined
		};
	}

	function transformStr(node, ctx) {
		return literal(node.s.valueOf());
	}

	function transformTuple(node, ctx) {
		var call = {
			type: "CallExpression",
			callee: makeVariableName("__pythonRuntime.objects.tuple"),
			arguments: transform(node.elts, ctx)
		};
		return call;
	}

	function transformSubscript(node, ctx) {
		//TODO: Do silly pythonic list offset logic
		var val = transform(node.value, ctx);
		if ( node.slice.value ) {
			var lu = transform(node.slice.value, ctx);
			lu = {
				type: "CallExpression",
				callee: makeVariableName("__pythonRuntime.ops.subscriptIndex"),
				arguments: [val, lu]
			};
			return {
				type: "MemberExpression",
				computed: true,
				object: val,
				property: lu
			};
		}

		return {
			type: "CallExpression",
			callee: makeVariableName('__pythonRuntime.internal.slice'),
			arguments:[
				val,
				node.slice.lower ? transform(node.slice.lower, ctx) : ident('undefined'),
				node.slice.upper ? transform(node.slice.upper, ctx) : ident('undefined'),
				node.slice.step ? transform(node.slice.step, ctx) : ident('undefined'),
			]
		};
	}

	function transformPass(node, ctx) {
		return {type: "EmptyStatement"};
	}

	function transformUnaryOp(node, ctx) {
		var argument = transform(node.operand, ctx);

		var fxOps = {
			"Add": "add",
			"Mult": "multiply",
		};
		var opName = getOpName(node.op);

		if ( opName in fxOps  ) {
			var call = {
				type: "CallExpression",
				callee: makeVariableName("__pythonRuntime.ops." + fxOps[opName]),
				arguments: [argument]
			};
			return call;
		}

		var operators = {
			"Not": "!",
			"USub": "-",
			"Invert": "~"
		};

		if ( !(opName in operators) ) abort("Unknown unary operator: " + opName);

		return {
			type: "UnaryExpression",
			argument: argument,
			operator: operators[opName]
		};
		
	}

	function transformWhile(node, ctx) {
		if ( node.orelse && node.orelse.length > 0 ) abort("else: statement for while unsupported.");
		return {
			type: "WhileStatement",
			test: transform(node.test, ctx),
			body: {type: "BlockStatement", body: ensureStatement(transform(node.body, ctx))}
		};	
	}

	module.exports = transform;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var Sk = __webpack_require__(1);

	function splat(e) {
		console.log("GOT ERROR!");
		console.log(e, e.extra);
		console.log(JSON.stringify(e.extra.node, function(k,  o) {
			if ( k == 'type' ) return Sk.nameForToken(o);
			else if ( k == 'children' ) return o;
			else if ( k ===  '' ) return o;
			else if ( !isNaN(parseInt(k)) ) return o;
			else return undefined;
		}, '  '));
	}

	function improveError(e, options, code) {
		var r;
		if ( e.context && e.context.length >0 ) {
			r = e.context[0];	
		}

		if ( e.extra && e.extra.node ) {
			if ( !r ) {
				r = [e.extra.node.loc.start.line,e.extra.node.loc.start.column];
			}
		}

		if ( r ) {
			setErrorPos(e, r[0], r[1]);
		}

		if ( options.friendlyErrors && e.extra ) {
			e.message = makeErrorFriendly(e, code);
		}
	}

	function setErrorPos(e, line, col) {
		e.loc = {line: line, column: col};
		e.line = line;
		e.column = col;
	}

	function friendlyString(s) {
		switch (s) {
		case 'if_stmt': return 'if statement';
		case 'while_stmt': return 'while statement';
		case 'funcdef': return 'function';
		default: return '?' + s + '?';
		} 
	}

	function nodeToType(n) {
		var type = Sk.nameForToken(n.type);
		if ( type === 'suite' ) return nodeToType(n.children[0]);
		return friendlyString(type);
	}

	function makeErrorFriendly(e, code) {
		//console.log("EX", e.message, e.extra);
		if ( e.extra.kind == "DAG_MISS" ) {
			if ( e.extra.expected.indexOf('T_COLON') !== -1 ) {
				//We might be missing a colon.
				var after = (e.context && e.context[2] ? e.context[2] : e.extra.found_val).replace(/\s+$/,'');
				var lc = e.extra.node.children[e.extra.node.children.length-1];
				if ( lc.value === 'else' ) after = 'else';

				if ( e.extra.found == 'T_SEMI' ) {
					return "Replace the `;` at the end of `" + after + "` with a `:`";
				} else if ( e.extra.found == 'T_NEWLINE' ) {
					return "Need a `:` on the end of the line following `" + after + "`.";
				} else if ( e.extra.found == 'T_NAME' ) {
					return "Need a `:` after `" + after + "`.";
				} else if ( e.extra.found == 'T_EQUAL' ) {
					return "Can't assign to a variable within the condition of an " + friendlyString(e.extra.inside) + ".  Did you mean to use `==` instead of `=`?";
				}
			}

			if ( e.extra.expected.indexOf('T_DEDENT') !== -1 ) {
				if ( e.extra.found_val.toLowerCase() === 'else' ) {
					return "`else` needs to line up with its `if`.";
				} else {
					return "Indentation error.";
				}
			}

			if ( e.extra.expected.indexOf('T_INDENT') !== -1 ) {
				var lc = e.extra.parent || e.extra.node;
				var name  = nodeToType(lc);
				if ( name === 'if statement' ) {
					//Scan for the most recent part of the ifstatement.
					for ( var i = 0; i < lc.children.length; ++i ) {
						if ( ["if", "elif", "else"].indexOf(lc.children[i].value) !== -1 ) {
							name = lc.children[i].value + ' statement';
						}
					}
				}
				if ( lc.value === 'else' ) name = 'else statement';
				return 'Empty ' + name + '. Put 4 spaces in front of statements inside the ' + name + '.';
			}

			if ( e.extra.found === 'T_NAME' ) {
				switch ( e.extra.found_val ) {
					case 'else':
					case 'elif':
						return '`' + e.extra.found_val + '` must be paired with an `if`';
					case 'elseif':
						return '`elseif` should be shortened to `elif`';
				} 
			}

			if ( e.extra.found === 'T_AMPER' && e.extra.inside == 'and_expr' ) {
				return 'Python uses the word `and` instead of `&&` for boolean AND expressions.';
			}


			if ( e.extra.inside === 'trailer' ) {
				//We are parsing either an arglist or a subscript.
				if ( e.extra.expected.indexOf('T_RPAR') === 0 ) {
					//Expected ), must be a arglsit;
					if ( e.line > e.extra.node.lineno ) {
						//Our arglist is incomplete, and we have made it to the next line,.
						//Likely they just forgot to close their ()'s
						setErrorPos(e, e.extra.node.lineno, e.extra.node.col_offset);
						var t = e.extra.node.loc;
						e.context = [
							[t.start.line,t.start.column],
							[t.end.line,t.end.column]
						];
						return 'Unclosed `(` in function arguments.' + e.extra.node.lineno;

					}
					return 'Function calls paramaters must be seperated by `,`s';
				}
			}

			if ( e.extra.found === 'T_INDENT' ) {
				if ( e.extra.expected.indexOf('stmt') !== -1 ) {
					return 'Too much indentation at the beginning of this line.';
				}
			}

			if ( e.extra.expected.indexOf('subscriptlist') === 0 ) {
				return "Malformed subscript";
			}

			if ( e.extra.expected.indexOf('T_NEWLINE') !== -1 ) {
				var n = e.extra.node;
				
				if ( e.extra.node.children[0] ) {
					var n = e.extra.node.children[0];
					var previousType = Sk.nameForToken(n.type);
				
					if ( previousType == 'small_stmt' ) {
						while ( n.children && n.children.length == 1 ) n = n.children[0];
						var what = code.substring(n.range[0], n.range[1]);
						return 'If you want to call `' + what +'` as function, you need `()`\'s';
					}
				}
			}

			return 'Unexpected token: ' + e.message;
		} else if ( e.extra.kind == "CLASSIFY" ) {
			if ( e.extra.value === '"' ) return 'Unterminated string. Add a matching `"` at the end of your string.';
			return 'Unterminated `' + e.extra.value + '`';
		} else if ( e.extra.kind == "STRING_EOF" ) {
			return 'Unterminated muti-line string. Add a matching `"""` at the end of your string.';
		} else if ( e.extra.kind == "STATEMENT_EOF" ) {
			if ( e.extra.parenlev > 0 ) {
				var top = e.extra.parenstack[e.extra.parenstack.length-1];
				var kind = top[0];
				var types = '([{';
				var pair = ')]}';
				var close = pair[types.indexOf(kind)];
				setErrorPos(e, top[1], top[2]-1);
				return 'Unmatched `' + kind + '`.  Every opening `' + kind + '` needs a closing `' + close + '` to match it.';
			}
			return e.message;
		}

		return e.message;
		
		
	}

	module.exports = improveError;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	(function (root, factory) {
	  'use strict';
	  if(true)
	    module.exports = factory();
	  else {}
	}(this, function() {
	  'use strict';
	  var pythonRuntime = {
	    internal: {
	      // Only used within runtime
	      isSeq: function (a) { return a && (a._type === "list" || a._type === "tuple"); },
	      slice: function (obj, start, end, step) {
	        var slice;
	        if ( typeof obj === 'string' ) slice = function(x,y) { return obj.substring(x,y); }
	        else slice = obj.slice.bind(obj);

	        if (step == null || step === 0) step = 1; // TODO: step === 0 is a runtime error
	        if (start == null) {
	          if (step < 0) start = obj.length - 1;
	          else start = 0;
	        } else if (start < 0) start += obj.length;
	        if (end == null) {
	          if (step < 0) end = -1;
	          else end = obj.length;
	        } else if (end < 0) end += obj.length;

	        var ret = new pythonRuntime.objects.list(), tmp, i;
	        if (step < 0) {
	          tmp = slice(end + 1, start + 1);
	          for (i = tmp.length - 1; i >= 0; i += step) ret.append(tmp[i]);
	        } else {
	          tmp = slice(start, end);
	          if (step === 1 && typeof tmp !== 'string') ret = pythonRuntime.utils.createList(tmp);
	          else for (i = 0; i < tmp.length; i += step) ret.append(tmp[i]);
	        }
	        if ( typeof obj === 'string' ) return ret.join('');
	        return ret;
	      },
	      isJSArray: Array.isArray || function(obj) {
	        return toString.call(obj) === '[object Array]';
	      }
	    },

	    utils: {
	      createDict: function () {
	        var ret = new pythonRuntime.objects.dict();
	        if (arguments.length === 1 && arguments[0] instanceof Object)
	          for (var k in arguments[0]) ret[k] = arguments[0][k];
	        else
	          throw TypeError("createDict expects a single JavaScript object");
	        return ret;
	      },
	      createParamsObj: function () {
	        // In: expr, expr, ..., {id:expr, __kwp:true}, {id:expr, __kwp:true}, ...
	        // Out: {formals:[expr, expr, ...], keywords:{id:expr, id:expr, ...}}
	        var params = { formals: new pythonRuntime.objects.list(), keywords: new PythonDict() };
	        for (var i = 0; i < arguments.length; i++) {
	          if (arguments[i] && arguments[i].__kwp === true) {
	            for (var k in arguments[i])
	              if (k !== '__kwp') params.keywords[k] = arguments[i][k];
	          }
	          else params.formals.push(arguments[i]);
	        }
	        return params;
	      },
	      convertToList: function (list) {
	        Object.defineProperties(list, pythonRuntime.utils.listPropertyDescriptor);
	        return list;
	      },
	      convertToDict: function (dict) {
	        Object.defineProperties(dict, pythonRuntime.utils.dictPropertyDescriptor);
	        return dict;
	      }, 
	      listPropertyDescriptor: {
	          "_type": {
	            value: 'list',
	            writable: false,
	            enumerable: false
	          },
	          "_isPython": {
	            value: true,
	            writable: false,
	            enumerable: false
	          },
	          "append": {
	            value: function (x) {
	              this.push(x);
	            },
	            enumerable: false
	          },
	          "clear": {
	            value: function () {
	              this.splice(0, this.length);
	            },
	            enumerable: false
	          },
	          "copy": {
	            value: function () {
	              return this.slice(0);
	            },
	            enumerable: false
	          },
	          "count": {
	            value: function (x) {
	              var c = 0;
	              for (var i = 0; i < this.length; i++)
	                if (this[i] === x) c++;
	              return c;
	            },
	            enumerable: false
	          },
	          "equals": {
	            value: function (x) {
	              try {
	                if (this.length !== x.length) return false;
	                for (var i = 0; i < this.length; i++) {
	                  if (this[i].hasOwnProperty("equals")) {
	                    if (!this[i].equals(x[i])) return false;
	                  } else if (this[i] !== x[i]) return false;
	                }
	                return true;
	              }
	              catch (e) { }
	              return false;
	            },
	            enumerable: false
	          },
	          "extend": {
	            value: function (L) {
	              for (var i = 0; i < L.length; i++) this.push(L[i]);
	            },
	            enumerable: false
	          },
	          "index": {
	            value: function (x) {
	              return this.indexOf(x);
	            },
	            enumerable: false
	          },
	          "indexOf": {
	            value: function (x, fromIndex) {
	              try {
	                for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {
	                  if (this[i].hasOwnProperty("equals")) {
	                    if (this[i].equals(x)) return i;
	                  } else if (this[i] === x) return i;
	                }
	              }
	              catch (e) { }
	              return -1;
	            },
	            enumerable: false
	          },
	          "insert": {
	            value: function (i, x) {
	              this.splice(i, 0, x);
	            },
	            enumerable: false
	          },
	          "pop": {
	            value: function (i) {
	              if (arguments.length<1) i = this.length - 1;
	              var item = this[i];
	              this.splice(i, 1);
	              return item;
	            },
	            enumerable: false
	          },
	          "_pySlice": {
	            value: function (start, end, step) {
	              return pythonRuntime.internal.slice(this, start, end, step);
	            },
	            enumerable: false
	          },
	          "remove": {
	            value: function (x) {
	              this.splice(this.indexOf(x), 1);
	            },
	            enumerable: false
	          },
	          "sort": {
	            value: function(x, reverse) {
	              var list2 = this.slice(0);
	              var apply_key = function(a, numerical) {
	                var list3 = list2.map(x);
	                // construct a dict that maps the listay before and after the map
	                var mapping = {};
	                for(var i in list3) mapping[list3[i]] = list2[i];
	                if(numerical)
	                  list3.sort(function(a, b) { return a - b; });
	                else
	                  list3.sort();
	                for(var i in a) a[i] = mapping[list3[i]];
	              };
	              for(var i in this) {
	                if(typeof this[i] !== 'number' || !isFinite(this[i])) {
	                  if(typeof x != 'undefined') {
	                    apply_key(this, false);
	                  }
	                  else {
	                    list2.sort();
	                    for (var j in this) this[j] = list2[j];
	                  }
	                  if(reverse)
	                    this.reverse();
	                  return;
	                }
	              }
	              if(typeof x != 'undefined') {
	                apply_key(this, true);
	              }
	              else {
	                list2.sort(function(a, b) { return a - b; });
	                for(var i in this) this[i] = list2[i];
	              }
	              if(reverse)
	                this.reverse();
	            },
	            enumerable: false
	          },
	          "toString": {
	            value: function () {
	              return '[' + this.join(', ') + ']';
	            },
	            enumerable: false
	          }
	      },
	      createList: function () {
	        var ret = new pythonRuntime.objects.list();
	        if (arguments.length === 1 && arguments[0] instanceof Array)
	          for (var i in arguments[0]) ret.push(arguments[0][i]);
	        else
	          for (var i in arguments) ret.push(arguments[i]);
	        return ret;
	      },
	      dictPropertyDescriptor: {
	        "_type": {
	          value: 'dict',
	          writable: false
	        },
	        "_isPython": {
	          value: true,
	          enumerable: false
	        },
	        "items": {
	          value: function () {
	            var items = new pythonRuntime.objects.list();
	            for (var k in this) items.append(new pythonRuntime.objects.tuple(k, this[k]));
	            return items;
	          },
	          enumerable: false
	        },
	        "length": {
	          get: function () {
	            return Object.keys(this).length;
	          },
	          enumerable: false
	        },
	        "clear": {
	          value: function () {
	            for (var i in this) delete this[i];
	          },
	          enumerable: false
	        },
	        "get": {
	          value: function (key, def) {
	            if (key in this) return this[key];
	            else if (def !== undefined) return def;
	            return null;
	          },
	          enumerable: false
	        },
	        "keys": {
	          value: function () {
	            return Object.keys(this);
	          },
	          enumerable: false
	        },
	        "pop": {
	          value: function (key, def) {
	            var value;
	            if (key in this) {
	              value = this[key];
	              delete this[key];
	            } else if (def !== undefined) value = def;
	            else return new Error("KeyError");
	            return value;
	          },
	          enumerable: false
	        }, "values": {
	          value: function () {
	            var values = new pythonRuntime.objects.list();
	            for (var key in this) values.append(this[key]);
	            return values;
	          },
	          enumerable: false
	        }
	      }
	    },
	    ops: {
	      add: function (a, b) {
	        if (typeof a === 'object' && pythonRuntime.internal.isSeq(a) && pythonRuntime.internal.isSeq(b)) {
	          if (a._type !== b._type)
	            throw TypeError("can only concatenate " + a._type + " (not '" + b._type + "') to " + a._type);
	          var ret;
	          if (a._type === 'list') ret = new pythonRuntime.objects.list();
	          else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();
	          if (ret) {
	            for (var i = 0; i < a.length; i++) ret.push(a[i]);
	            for (var i = 0; i < b.length; i++) ret.push(b[i]);
	            return ret;
	          }
	        }
	        return a + b;
	      },
	      in: function (a, b, n) {
	        var r = b.hasOwnProperty('indexOf') ? b.indexOf(a) >= 0 : a in b;
	        return n ? !r : r;
	      },
	      multiply: function (a, b) {
	        // TODO: non-sequence operand must be an integer
	        if ( typeof a === 'object' ) {
	          if (pythonRuntime.internal.isSeq(a) && !isNaN(parseInt(b))) {
	            var ret;
	            if (a._type === 'list') ret = new pythonRuntime.objects.list();
	            else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();
	            if (ret) {
	              for (var i = 0; i < b; i++)
	                for (var j = 0; j < a.length; j++) ret.push(a[j]);
	              return ret;
	            }
	          } else if (pythonRuntime.internal.isSeq(b) && !isNaN(parseInt(a))) {
	            var ret;
	            if (b._type === 'list') ret = new pythonRuntime.objects.list();
	            else if (b._type === 'tuple') ret = new pythonRuntime.objects.tuple();
	            if (ret) {
	              for (var i = 0; i < a; i++)
	                for (var j = 0; j < b.length; j++) ret.push(b[j]);
	              return ret;
	            }
	          }
	        }
	        return a * b;
	      },
	      subscriptIndex: function (o, i) {
	        if ( i >= 0 ) return i;
	        if ( pythonRuntime.internal.isSeq(o) ) return o.length + i;
	        if ( pythonRuntime.internal.isJSArray(o) ) return o.length + i;
	        if ( typeof o === "string" ) return o.length + i;
	        return i;
	      }
	    },

	    objects: {
	      dict: function () {
	        var obj = new PythonDict();
	        for (var i = 0; i < arguments.length; ++i ) obj[arguments[i][0]] = arguments[i][1];
	        return obj;
	      },
	      list: function () {
	        var arr = [];
	        arr.push.apply(arr, arguments);
	        pythonRuntime.utils.convertToList(arr);
	        return arr;
	      },
	      tuple: function () {
	        var arr = [];
	        arr.push.apply(arr, arguments);
	        Object.defineProperty(arr, "_type",
	        {
	          get: function () { return 'tuple'; },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "_isPython",
	        {
	          get: function () { return true; },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "count",
	        {
	          value: function (x) {
	            var c = 0;
	            for (var i = 0; i < this.length; i++)
	              if (this[i] === x) c++;
	            return c;
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "equals",
	        {
	          value: function (x) {
	            try {
	              if (this.length !== x.length) return false;
	              for (var i = 0; i < this.length; i++) {
	                if (this[i].hasOwnProperty("equals")) {
	                  if (!this[i].equals(x[i])) return false;
	                } else if (this[i] !== x[i]) return false;
	              }
	              return true;
	            }
	            catch (e) { }
	            return false;
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "index",
	        {
	          value: function (x) {
	            return this.indexOf(x);
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "indexOf",
	        {
	          value: function (x, fromIndex) {
	            try {
	              for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {
	                if (this[i].hasOwnProperty("equals")) {
	                  if (this[i].equals(x)) return i;
	                } else if (this[i] === x) return i;
	              }
	            }
	            catch (e) { }
	            return -1;
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "_pySlice",
	        {
	          value: function (start, end, step) { 
	            return pythonRuntime.internal.slice(this, start, end, step);
	          },
	            enumerable: false
	        });
	        Object.defineProperty(arr, "toString",
	        {
	          value: function () {
	            var s = '(' + this.join(', ');
	            if (this.length === 1) s += ',';
	            s += ')';
	            return s;
	          },
	          enumerable: false
	        });
	        return arr;
	      }
	    },

	    // Python built-in functions

	    functions: {
	      abs: function(x) {
	        return Math.abs(x);
	      },
	      all: function(iterable) {
	        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) !== true) return false;
	        return true;
	      },
	      any: function(iterable) {
	        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) === true) return true;
	        return false;
	      },
	      ascii: function(obj) {
	        var s = pythonRuntime.functions.repr(obj),
	            asc = "",
	            code;
	        for (var i = 0; i < s.length; i++) {
	          code = s.charCodeAt(i);
	          if (code <= 127) asc += s[i];
	          else if (code <= 0xFF) asc += "\\x" + code.toString(16);
	          else if (0xD800 <= code && code <= 0xDBFF) { // UCS-2 for the astral chars
	            // if (i+1 >= s.length) throw "High surrogate not followed by low surrogate"; // Is this needed?
	            code = ((code-0xD800)*0x400)+(s.charCodeAt(++i)-0xDC00)+0x10000;
	            asc += "\\U" + ("000"+code.toString(16)).slice(-8);
	          } else if (code <= 0xFFFF) asc += "\\u" + ("0"+code.toString(16)).slice(-4);
	          else if (code <= 0x10FFFF) asc += "\\U" + ("000"+code.toString(16)).slice(-8);
	          else; // Invalid value, should probably throw something. It should never get here though as strings shouldn't contain them in the first place
	        }
	        return asc;
	      },
	      bool: function(x) {
	        return !(x === undefined || // No argument
	                 x === null || // None
	                 x === false || // False
	                 x === 0 || // Zero
	                 x.length === 0 || // Empty Sequence
	                 // TODO: Empty Mapping, needs more support for python mappings first
	                 (x.__bool__ !== undefined && x.__bool__() === false) || // If it has bool conversion defined
	                 (x.__len__ !== undefined && (x.__len__() === false || x.__len__() === 0))); // If it has length conversion defined
	      },
	      chr: function(i) {
	        return String.fromCharCode(i); // TODO: Error code for not 0 <= i <= 1114111
	      },
	      divmod: function(a, b) {
	        return pythonRuntime.objects.tuple(Math.floor(a/b), a%b);
	      },
	      enumerate: function(iterable, start) {
	        start = start || 0;
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) ret.push(new pythonRuntime.objects.tuple(start++, iterable[i]));
	        return ret;
	      },
	      filter: function(fn, iterable) {
	        fn = fn || function () { return true; };
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) if (fn(iterable[i])) ret.push(iterable[i]);
	        return ret;
	      },
	      float: function(x) {
	        if (x === undefined) return 0.0;
	        else if (typeof x == "string") { // TODO: Fix type check
	          x = x.trim().toLowerCase();
	          if ((/^[+-]?inf(inity)?$/i).exec(x) !== null) return Infinity*(x[0]==="-"?-1:1);
	          else if ((/^nan$/i).exec(x) !== null) return NaN;
	          else return parseFloat(x);
	        } else if (typeof x == "number") { // TODO: Fix type check
	          return x; // TODO: Get python types working right so we can return an actual float
	        } else {
	          if (x.__float__ !== undefined) return x.__float__();
	          else return null; // TODO: Throw TypeError: float() argument must be a string or a number, not '<type of x>'
	        }
	      },
	      hex: function(x) {
	        return x.toString(16);
	      },
	      int: function (s) {
	        return parseInt(s);
	      },
	      len: function (o) {
	        return o.length;
	      },
	      list: function (iterable) {
	        var ret = new pythonRuntime.objects.list();
	        if ( arguments.length == 0 ) return ret;
	        if ( arguments.length > 1 ) throw new TypeError('list() takes at most 1 argument (' + arguments.length + ' given)');
	        if (iterable instanceof Array) for (var i in iterable) ret.push(iterable[i]);
	        else for (var i in iterable) ret.push(i);
	        return ret;
	      },
	      map: function(fn, iterable) {
	        // TODO: support additional iterables passed
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) ret.push(fn(iterable[i]));
	        return ret;
	      },
	      max: function(arg1, arg2) {
	        // TODO: support optional keyword-only arguments
	        // TODO: empty iterable raises Python ValueError
	        if (!arg2) { // iterable
	          var max = null;
	          for (var i in arg1) if (max === null || arg1[i] > max) max = arg1[i];
	          return max;
	        } else return arg1 >= arg2 ? arg1 : arg2;
	      },
	      min: function(arg1, arg2) {
	        // TODO: support optional keyword-only arguments
	        // TODO: empty iterable raises Python ValueError
	        if (!arg2) { // iterable
	          var max = null;
	          for (var i in arg1) if (max === null || arg1[i] < max) max = arg1[i];
	          return max;
	        } else return arg1 <= arg2 ? arg1 : arg2;
	      },
	      oct: function(x) {
	        return x.toString(8);
	      },
	      ord: function(c) {
	        return c.charCodeAt(0);
	      },
	      pow: function(x, y, z) {
	        return z ? Math.pow(x, y) % z : Math.pow(x, y);
	      },
	      print: function () {
	        var s = "";
	        for (var i = 0; i < arguments.length; i++)
	          s += i === 0 ? arguments[i] : " " + arguments[i];
	        console.log(s);
	      },
	      range: function (start, stop, step) {
	        if (stop === undefined) {
	          stop = start;
	          start = 0;
	          step = 1;
	        }
	        else if (step === undefined) step = 1;
	        var len = ~~((stop - start) / step); //~~ is a fast floor
	        if ( len < 0 ) return pythonRuntime.utils.convertToList([]);
	        var r = new Array(len);
	        var element = 0;

	        var i = start;
	        while (i < stop && step > 0 || i > stop && step < 0) {
	          r[element++] = i;
	          i += step;
	        }

	        pythonRuntime.utils.convertToList(r);
	        return r;
	      },
	      repr: function (obj) {
	        if (typeof obj === 'string') return "'" + obj + "'"; // TODO: Patch until typesystem comes up.
	        if (obj.__repr__ !== undefined) return obj.__repr__();
	        else if (obj.__class__ !== undefined && obj.__class__.module !== undefined && obj.__class__.__name__) {
	          return '<'+obj.__class__.__module__+'.'+obj.__class__.__name__+' object>';
	        } else return obj.toString(); // Raise a please report warning here, we should never reach this piece of code
	      },
	      reversed: function (seq) {
	        var ret = new pythonRuntime.objects.list();
	        for (var i in seq) ret.push(seq[i]);
	        return ret.reverse();
	      },
	      round: function (num, ndigits) {
	        if (ndigits) {
	          var scale = Math.pow(10, ndigits);
	          return Math.round(num * scale) / scale;
	        }
	        return Math.round(num);
	      },
	      sorted: function (iterable, key, reverse) {
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) ret.push(iterable[i]);
	        if(key) ret.sort(key); else ret.sort();
	        if (reverse) ret.reverse();
	        return ret;
	      },
	      str: function (obj) {
	        return obj.toString();
	      },
	      sum: function (iterable, start) {
	        // TODO: start can't be a string
	        var ret = start || 0;
	        for (var i in iterable) ret += iterable[i];
	        return ret;
	      },
	      tuple: function (iterable) {
	        var ret = new pythonRuntime.objects.tuple();
	        for (var i in iterable) ret.push(iterable[i]);
	        return ret;
	      }
	    },

	    // Python imports
	    // TODO: from x import y, z

	    imports: {
	      random: {
	        random: function () { return Math.random(); }
	      }
	    }
	  };

	  function PythonDict() {

	  }

	  Object.defineProperties(PythonDict.prototype, pythonRuntime.utils.dictPropertyDescriptor);
	  return pythonRuntime;
	}));



/***/ })
/******/ ])
});
;

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {

var fs = __webpack_require__(55);
var path = __webpack_require__(13);

var str = void 0;

if (fs.readFileSync) str = fs.readFileSync(path.join(__dirname, 'node_modules', 'skulpty', 'lib', 'stdlib.js'), 'utf8');else str = __webpack_require__(294);

module.exports = str.replace(/^var pythonRuntime = module.exports/, 'var __pythonRuntime');
/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),
/* 294 */
/***/ (function(module, exports) {

module.exports = "(function (root, factory) {\n  'use strict';\n  if(typeof exports === 'object' && typeof module === 'object')\n    module.exports = factory();\n  else if(typeof define === 'function' && define.amd)\n    define([], factory);\n  else if(typeof exports === 'object')\n    exports[\"__pythonRuntime\"] = factory();\n  else\n    root[\"__pythonRuntime\"] = factory();\n}(this, function() {\n  'use strict';\n  var pythonRuntime = {\n    internal: {\n      // Only used within runtime\n      isSeq: function (a) { return a && (a._type === \"list\" || a._type === \"tuple\"); },\n      slice: function (obj, start, end, step) {\n        var slice;\n        if ( typeof obj === 'string' ) slice = function(x,y) { return obj.substring(x,y); }\n        else slice = obj.slice.bind(obj);\n\n        if (step == null || step === 0) step = 1; // TODO: step === 0 is a runtime error\n        if (start == null) {\n          if (step < 0) start = obj.length - 1;\n          else start = 0;\n        } else if (start < 0) start += obj.length;\n        if (end == null) {\n          if (step < 0) end = -1;\n          else end = obj.length;\n        } else if (end < 0) end += obj.length;\n\n        var ret = new pythonRuntime.objects.list(), tmp, i;\n        if (step < 0) {\n          tmp = slice(end + 1, start + 1);\n          for (i = tmp.length - 1; i >= 0; i += step) ret.append(tmp[i]);\n        } else {\n          tmp = slice(start, end);\n          if (step === 1 && typeof tmp !== 'string') ret = pythonRuntime.utils.createList(tmp);\n          else for (i = 0; i < tmp.length; i += step) ret.append(tmp[i]);\n        }\n        if ( typeof obj === 'string' ) return ret.join('');\n        return ret;\n      },\n      isJSArray: Array.isArray || function(obj) {\n        return toString.call(obj) === '[object Array]';\n      }\n    },\n\n    utils: {\n      createDict: function () {\n        var ret = new pythonRuntime.objects.dict();\n        if (arguments.length === 1 && arguments[0] instanceof Object)\n          for (var k in arguments[0]) ret[k] = arguments[0][k];\n        else\n          throw TypeError(\"createDict expects a single JavaScript object\");\n        return ret;\n      },\n      createParamsObj: function () {\n        // In: expr, expr, ..., {id:expr, __kwp:true}, {id:expr, __kwp:true}, ...\n        // Out: {formals:[expr, expr, ...], keywords:{id:expr, id:expr, ...}}\n        var params = { formals: new pythonRuntime.objects.list(), keywords: new PythonDict() };\n        for (var i = 0; i < arguments.length; i++) {\n          if (arguments[i] && arguments[i].__kwp === true) {\n            for (var k in arguments[i])\n              if (k !== '__kwp') params.keywords[k] = arguments[i][k];\n          }\n          else params.formals.push(arguments[i]);\n        }\n        return params;\n      },\n      convertToList: function (list) {\n        Object.defineProperties(list, pythonRuntime.utils.listPropertyDescriptor);\n        return list;\n      },\n      convertToDict: function (dict) {\n        Object.defineProperties(dict, pythonRuntime.utils.dictPropertyDescriptor);\n        return dict;\n      }, \n      listPropertyDescriptor: {\n          \"_type\": {\n            value: 'list',\n            writable: false,\n            enumerable: false\n          },\n          \"_isPython\": {\n            value: true,\n            writable: false,\n            enumerable: false\n          },\n          \"append\": {\n            value: function (x) {\n              this.push(x);\n            },\n            enumerable: false\n          },\n          \"clear\": {\n            value: function () {\n              this.splice(0, this.length);\n            },\n            enumerable: false\n          },\n          \"copy\": {\n            value: function () {\n              return this.slice(0);\n            },\n            enumerable: false\n          },\n          \"count\": {\n            value: function (x) {\n              var c = 0;\n              for (var i = 0; i < this.length; i++)\n                if (this[i] === x) c++;\n              return c;\n            },\n            enumerable: false\n          },\n          \"equals\": {\n            value: function (x) {\n              try {\n                if (this.length !== x.length) return false;\n                for (var i = 0; i < this.length; i++) {\n                  if (this[i].hasOwnProperty(\"equals\")) {\n                    if (!this[i].equals(x[i])) return false;\n                  } else if (this[i] !== x[i]) return false;\n                }\n                return true;\n              }\n              catch (e) { }\n              return false;\n            },\n            enumerable: false\n          },\n          \"extend\": {\n            value: function (L) {\n              for (var i = 0; i < L.length; i++) this.push(L[i]);\n            },\n            enumerable: false\n          },\n          \"index\": {\n            value: function (x) {\n              return this.indexOf(x);\n            },\n            enumerable: false\n          },\n          \"indexOf\": {\n            value: function (x, fromIndex) {\n              try {\n                for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {\n                  if (this[i].hasOwnProperty(\"equals\")) {\n                    if (this[i].equals(x)) return i;\n                  } else if (this[i] === x) return i;\n                }\n              }\n              catch (e) { }\n              return -1;\n            },\n            enumerable: false\n          },\n          \"insert\": {\n            value: function (i, x) {\n              this.splice(i, 0, x);\n            },\n            enumerable: false\n          },\n          \"pop\": {\n            value: function (i) {\n              if (arguments.length<1) i = this.length - 1;\n              var item = this[i];\n              this.splice(i, 1);\n              return item;\n            },\n            enumerable: false\n          },\n          \"_pySlice\": {\n            value: function (start, end, step) {\n              return pythonRuntime.internal.slice(this, start, end, step);\n            },\n            enumerable: false\n          },\n          \"remove\": {\n            value: function (x) {\n              this.splice(this.indexOf(x), 1);\n            },\n            enumerable: false\n          },\n          \"sort\": {\n            value: function(x, reverse) {\n              var list2 = this.slice(0);\n              var apply_key = function(a, numerical) {\n                var list3 = list2.map(x);\n                // construct a dict that maps the listay before and after the map\n                var mapping = {};\n                for(var i in list3) mapping[list3[i]] = list2[i];\n                if(numerical)\n                  list3.sort(function(a, b) { return a - b; });\n                else\n                  list3.sort();\n                for(var i in a) a[i] = mapping[list3[i]];\n              };\n              for(var i in this) {\n                if(typeof this[i] !== 'number' || !isFinite(this[i])) {\n                  if(typeof x != 'undefined') {\n                    apply_key(this, false);\n                  }\n                  else {\n                    list2.sort();\n                    for (var j in this) this[j] = list2[j];\n                  }\n                  if(reverse)\n                    this.reverse();\n                  return;\n                }\n              }\n              if(typeof x != 'undefined') {\n                apply_key(this, true);\n              }\n              else {\n                list2.sort(function(a, b) { return a - b; });\n                for(var i in this) this[i] = list2[i];\n              }\n              if(reverse)\n                this.reverse();\n            },\n            enumerable: false\n          },\n          \"toString\": {\n            value: function () {\n              return '[' + this.join(', ') + ']';\n            },\n            enumerable: false\n          }\n      },\n      createList: function () {\n        var ret = new pythonRuntime.objects.list();\n        if (arguments.length === 1 && arguments[0] instanceof Array)\n          for (var i in arguments[0]) ret.push(arguments[0][i]);\n        else\n          for (var i in arguments) ret.push(arguments[i]);\n        return ret;\n      },\n      dictPropertyDescriptor: {\n        \"_type\": {\n          value: 'dict',\n          writable: false\n        },\n        \"_isPython\": {\n          value: true,\n          enumerable: false\n        },\n        \"items\": {\n          value: function () {\n            var items = new pythonRuntime.objects.list();\n            for (var k in this) items.append(new pythonRuntime.objects.tuple(k, this[k]));\n            return items;\n          },\n          enumerable: false\n        },\n        \"length\": {\n          get: function () {\n            return Object.keys(this).length;\n          },\n          enumerable: false\n        },\n        \"clear\": {\n          value: function () {\n            for (var i in this) delete this[i];\n          },\n          enumerable: false\n        },\n        \"get\": {\n          value: function (key, def) {\n            if (key in this) return this[key];\n            else if (def !== undefined) return def;\n            return null;\n          },\n          enumerable: false\n        },\n        \"keys\": {\n          value: function () {\n            return Object.keys(this);\n          },\n          enumerable: false\n        },\n        \"pop\": {\n          value: function (key, def) {\n            var value;\n            if (key in this) {\n              value = this[key];\n              delete this[key];\n            } else if (def !== undefined) value = def;\n            else return new Error(\"KeyError\");\n            return value;\n          },\n          enumerable: false\n        }, \"values\": {\n          value: function () {\n            var values = new pythonRuntime.objects.list();\n            for (var key in this) values.append(this[key]);\n            return values;\n          },\n          enumerable: false\n        }\n      }\n    },\n    ops: {\n      add: function (a, b) {\n        if (typeof a === 'object' && pythonRuntime.internal.isSeq(a) && pythonRuntime.internal.isSeq(b)) {\n          if (a._type !== b._type)\n            throw TypeError(\"can only concatenate \" + a._type + \" (not '\" + b._type + \"') to \" + a._type);\n          var ret;\n          if (a._type === 'list') ret = new pythonRuntime.objects.list();\n          else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();\n          if (ret) {\n            for (var i = 0; i < a.length; i++) ret.push(a[i]);\n            for (var i = 0; i < b.length; i++) ret.push(b[i]);\n            return ret;\n          }\n        }\n        return a + b;\n      },\n      in: function (a, b, n) {\n        var r = b.hasOwnProperty('indexOf') ? b.indexOf(a) >= 0 : a in b;\n        return n ? !r : r;\n      },\n      multiply: function (a, b) {\n        // TODO: non-sequence operand must be an integer\n        if ( typeof a === 'object' ) {\n          if (pythonRuntime.internal.isSeq(a) && !isNaN(parseInt(b))) {\n            var ret;\n            if (a._type === 'list') ret = new pythonRuntime.objects.list();\n            else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();\n            if (ret) {\n              for (var i = 0; i < b; i++)\n                for (var j = 0; j < a.length; j++) ret.push(a[j]);\n              return ret;\n            }\n          } else if (pythonRuntime.internal.isSeq(b) && !isNaN(parseInt(a))) {\n            var ret;\n            if (b._type === 'list') ret = new pythonRuntime.objects.list();\n            else if (b._type === 'tuple') ret = new pythonRuntime.objects.tuple();\n            if (ret) {\n              for (var i = 0; i < a; i++)\n                for (var j = 0; j < b.length; j++) ret.push(b[j]);\n              return ret;\n            }\n          }\n        }\n        return a * b;\n      },\n      subscriptIndex: function (o, i) {\n        if ( i >= 0 ) return i;\n        if ( pythonRuntime.internal.isSeq(o) ) return o.length + i;\n        if ( pythonRuntime.internal.isJSArray(o) ) return o.length + i;\n        if ( typeof o === \"string\" ) return o.length + i;\n        return i;\n      }\n    },\n\n    objects: {\n      dict: function () {\n        var obj = new PythonDict();\n        for (var i = 0; i < arguments.length; ++i ) obj[arguments[i][0]] = arguments[i][1];\n        return obj;\n      },\n      list: function () {\n        var arr = [];\n        arr.push.apply(arr, arguments);\n        pythonRuntime.utils.convertToList(arr);\n        return arr;\n      },\n      tuple: function () {\n        var arr = [];\n        arr.push.apply(arr, arguments);\n        Object.defineProperty(arr, \"_type\",\n        {\n          get: function () { return 'tuple'; },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"_isPython\",\n        {\n          get: function () { return true; },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"count\",\n        {\n          value: function (x) {\n            var c = 0;\n            for (var i = 0; i < this.length; i++)\n              if (this[i] === x) c++;\n            return c;\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"equals\",\n        {\n          value: function (x) {\n            try {\n              if (this.length !== x.length) return false;\n              for (var i = 0; i < this.length; i++) {\n                if (this[i].hasOwnProperty(\"equals\")) {\n                  if (!this[i].equals(x[i])) return false;\n                } else if (this[i] !== x[i]) return false;\n              }\n              return true;\n            }\n            catch (e) { }\n            return false;\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"index\",\n        {\n          value: function (x) {\n            return this.indexOf(x);\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"indexOf\",\n        {\n          value: function (x, fromIndex) {\n            try {\n              for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {\n                if (this[i].hasOwnProperty(\"equals\")) {\n                  if (this[i].equals(x)) return i;\n                } else if (this[i] === x) return i;\n              }\n            }\n            catch (e) { }\n            return -1;\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"_pySlice\",\n        {\n          value: function (start, end, step) { \n            return pythonRuntime.internal.slice(this, start, end, step);\n          },\n            enumerable: false\n        });\n        Object.defineProperty(arr, \"toString\",\n        {\n          value: function () {\n            var s = '(' + this.join(', ');\n            if (this.length === 1) s += ',';\n            s += ')';\n            return s;\n          },\n          enumerable: false\n        });\n        return arr;\n      }\n    },\n\n    // Python built-in functions\n\n    functions: {\n      abs: function(x) {\n        return Math.abs(x);\n      },\n      all: function(iterable) {\n        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) !== true) return false;\n        return true;\n      },\n      any: function(iterable) {\n        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) === true) return true;\n        return false;\n      },\n      ascii: function(obj) {\n        var s = pythonRuntime.functions.repr(obj),\n            asc = \"\",\n            code;\n        for (var i = 0; i < s.length; i++) {\n          code = s.charCodeAt(i);\n          if (code <= 127) asc += s[i];\n          else if (code <= 0xFF) asc += \"\\\\x\" + code.toString(16);\n          else if (0xD800 <= code && code <= 0xDBFF) { // UCS-2 for the astral chars\n            // if (i+1 >= s.length) throw \"High surrogate not followed by low surrogate\"; // Is this needed?\n            code = ((code-0xD800)*0x400)+(s.charCodeAt(++i)-0xDC00)+0x10000;\n            asc += \"\\\\U\" + (\"000\"+code.toString(16)).slice(-8);\n          } else if (code <= 0xFFFF) asc += \"\\\\u\" + (\"0\"+code.toString(16)).slice(-4);\n          else if (code <= 0x10FFFF) asc += \"\\\\U\" + (\"000\"+code.toString(16)).slice(-8);\n          else; // Invalid value, should probably throw something. It should never get here though as strings shouldn't contain them in the first place\n        }\n        return asc;\n      },\n      bool: function(x) {\n        return !(x === undefined || // No argument\n                 x === null || // None\n                 x === false || // False\n                 x === 0 || // Zero\n                 x.length === 0 || // Empty Sequence\n                 // TODO: Empty Mapping, needs more support for python mappings first\n                 (x.__bool__ !== undefined && x.__bool__() === false) || // If it has bool conversion defined\n                 (x.__len__ !== undefined && (x.__len__() === false || x.__len__() === 0))); // If it has length conversion defined\n      },\n      chr: function(i) {\n        return String.fromCharCode(i); // TODO: Error code for not 0 <= i <= 1114111\n      },\n      divmod: function(a, b) {\n        return pythonRuntime.objects.tuple(Math.floor(a/b), a%b);\n      },\n      enumerate: function(iterable, start) {\n        start = start || 0;\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) ret.push(new pythonRuntime.objects.tuple(start++, iterable[i]));\n        return ret;\n      },\n      filter: function(fn, iterable) {\n        fn = fn || function () { return true; };\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) if (fn(iterable[i])) ret.push(iterable[i]);\n        return ret;\n      },\n      float: function(x) {\n        if (x === undefined) return 0.0;\n        else if (typeof x == \"string\") { // TODO: Fix type check\n          x = x.trim().toLowerCase();\n          if ((/^[+-]?inf(inity)?$/i).exec(x) !== null) return Infinity*(x[0]===\"-\"?-1:1);\n          else if ((/^nan$/i).exec(x) !== null) return NaN;\n          else return parseFloat(x);\n        } else if (typeof x == \"number\") { // TODO: Fix type check\n          return x; // TODO: Get python types working right so we can return an actual float\n        } else {\n          if (x.__float__ !== undefined) return x.__float__();\n          else return null; // TODO: Throw TypeError: float() argument must be a string or a number, not '<type of x>'\n        }\n      },\n      hex: function(x) {\n        return x.toString(16);\n      },\n      int: function (s) {\n        return parseInt(s);\n      },\n      len: function (o) {\n        return o.length;\n      },\n      list: function (iterable) {\n        var ret = new pythonRuntime.objects.list();\n        if ( arguments.length == 0 ) return ret;\n        if ( arguments.length > 1 ) throw new TypeError('list() takes at most 1 argument (' + arguments.length + ' given)');\n        if (iterable instanceof Array) for (var i in iterable) ret.push(iterable[i]);\n        else for (var i in iterable) ret.push(i);\n        return ret;\n      },\n      map: function(fn, iterable) {\n        // TODO: support additional iterables passed\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) ret.push(fn(iterable[i]));\n        return ret;\n      },\n      max: function(arg1, arg2) {\n        // TODO: support optional keyword-only arguments\n        // TODO: empty iterable raises Python ValueError\n        if (!arg2) { // iterable\n          var max = null;\n          for (var i in arg1) if (max === null || arg1[i] > max) max = arg1[i];\n          return max;\n        } else return arg1 >= arg2 ? arg1 : arg2;\n      },\n      min: function(arg1, arg2) {\n        // TODO: support optional keyword-only arguments\n        // TODO: empty iterable raises Python ValueError\n        if (!arg2) { // iterable\n          var max = null;\n          for (var i in arg1) if (max === null || arg1[i] < max) max = arg1[i];\n          return max;\n        } else return arg1 <= arg2 ? arg1 : arg2;\n      },\n      oct: function(x) {\n        return x.toString(8);\n      },\n      ord: function(c) {\n        return c.charCodeAt(0);\n      },\n      pow: function(x, y, z) {\n        return z ? Math.pow(x, y) % z : Math.pow(x, y);\n      },\n      print: function () {\n        var s = \"\";\n        for (var i = 0; i < arguments.length; i++)\n          s += i === 0 ? arguments[i] : \" \" + arguments[i];\n        console.log(s);\n      },\n      range: function (start, stop, step) {\n        if (stop === undefined) {\n          stop = start;\n          start = 0;\n          step = 1;\n        }\n        else if (step === undefined) step = 1;\n        var len = ~~((stop - start) / step); //~~ is a fast floor\n        if ( len < 0 ) return pythonRuntime.utils.convertToList([]);\n        var r = new Array(len);\n        var element = 0;\n\n        var i = start;\n        while (i < stop && step > 0 || i > stop && step < 0) {\n          r[element++] = i;\n          i += step;\n        }\n\n        pythonRuntime.utils.convertToList(r);\n        return r;\n      },\n      repr: function (obj) {\n        if (typeof obj === 'string') return \"'\" + obj + \"'\"; // TODO: Patch until typesystem comes up.\n        if (obj.__repr__ !== undefined) return obj.__repr__();\n        else if (obj.__class__ !== undefined && obj.__class__.module !== undefined && obj.__class__.__name__) {\n          return '<'+obj.__class__.__module__+'.'+obj.__class__.__name__+' object>';\n        } else return obj.toString(); // Raise a please report warning here, we should never reach this piece of code\n      },\n      reversed: function (seq) {\n        var ret = new pythonRuntime.objects.list();\n        for (var i in seq) ret.push(seq[i]);\n        return ret.reverse();\n      },\n      round: function (num, ndigits) {\n        if (ndigits) {\n          var scale = Math.pow(10, ndigits);\n          return Math.round(num * scale) / scale;\n        }\n        return Math.round(num);\n      },\n      sorted: function (iterable, key, reverse) {\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) ret.push(iterable[i]);\n        if(key) ret.sort(key); else ret.sort();\n        if (reverse) ret.reverse();\n        return ret;\n      },\n      str: function (obj) {\n        return obj.toString();\n      },\n      sum: function (iterable, start) {\n        // TODO: start can't be a string\n        var ret = start || 0;\n        for (var i in iterable) ret += iterable[i];\n        return ret;\n      },\n      tuple: function (iterable) {\n        var ret = new pythonRuntime.objects.tuple();\n        for (var i in iterable) ret.push(iterable[i]);\n        return ret;\n      }\n    },\n\n    // Python imports\n    // TODO: from x import y, z\n\n    imports: {\n      random: {\n        random: function () { return Math.random(); }\n      }\n    }\n  };\n\n  function PythonDict() {\n\n  }\n\n  Object.defineProperties(PythonDict.prototype, pythonRuntime.utils.dictPropertyDescriptor);\n  return pythonRuntime;\n}));\n\n"

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(65);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(205);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(208);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(215);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(209);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var esper = __webpack_require__(63);
var Value = esper.Value;
var CompletionRecord = esper.CompletionRecord;

var debug = function debug() {};
//const debug = console.log.bind(console);


var PointerValue = function (_esper$ObjectValue) {
	(0, _inherits3.default)(PointerValue, _esper$ObjectValue);

	function PointerValue(base, offset, realm) {
		(0, _classCallCheck3.default)(this, PointerValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (PointerValue.__proto__ || (0, _getPrototypeOf2.default)(PointerValue)).call(this, realm));

		_this.setPrototype(realm.PointerPrototype);
		_this.base = base;
		_this.offset = offset;
		return _this;
	}

	(0, _createClass3.default)(PointerValue, [{
		key: 'get',
		value: /*#__PURE__*/_regenerator2.default.mark(function get(k, realm) {
			var nk, p2;
			return _regenerator2.default.wrap(function get$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							nk = parseInt(k);

							if (!(nk === nk)) {
								_context.next = 6;
								break;
							}

							return _context.delegateYield(this.add(esper.Value.fromNative(k)), 't0', 3);

						case 3:
							p2 = _context.t0;
							return _context.delegateYield(p2.derefrence(), 't1', 5);

						case 5:
							return _context.abrupt('return', _context.t1);

						case 6:
							return _context.delegateYield((0, _get3.default)(PointerValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(PointerValue.prototype), 'get', this).call(this, k, realm), 't2', 7);

						case 7:
							return _context.abrupt('return', _context.t2);

						case 8:
						case 'end':
							return _context.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'set',
		value: /*#__PURE__*/_regenerator2.default.mark(function set(k, v, realm) {
			var nk, p2;
			return _regenerator2.default.wrap(function set$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(k === 'value')) {
								_context2.next = 3;
								break;
							}

							this.base.properties[this.offset].value = v;
							return _context2.abrupt('return', v);

						case 3:
							nk = parseInt(k);

							if (!(nk === nk)) {
								_context2.next = 9;
								break;
							}

							return _context2.delegateYield(this.add(esper.Value.fromNative(k)), 't0', 6);

						case 6:
							p2 = _context2.t0;
							return _context2.delegateYield(p2.set("value", v, realm), 't1', 8);

						case 8:
							return _context2.abrupt('return', _context2.t1);

						case 9:
							return _context2.delegateYield((0, _get3.default)(PointerValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(PointerValue.prototype), 'set', this).call(this, k, v, realm), 't2', 10);

						case 10:
							return _context2.abrupt('return', _context2.t2);

						case 11:
						case 'end':
							return _context2.stop();
					}
				}
			}, set, this);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.PointerPrototype;
		}
	}, {
		key: 'constructorFor',
		value: function constructorFor(realm) {
			return realm.PointerPrototype;
		}
	}, {
		key: 'add',
		value: /*#__PURE__*/_regenerator2.default.mark(function add(what) {
			var result;
			return _regenerator2.default.wrap(function add$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.delegateYield(esper.Value.fromNative(this.offset).add(what), 't0', 1);

						case 1:
							result = _context3.t0;
							return _context3.abrupt('return', new PointerValue(this.base, result.toNative(), this.realm));

						case 3:
						case 'end':
							return _context3.stop();
					}
				}
			}, add, this);
		})
	}, {
		key: 'derefrence',
		value: /*#__PURE__*/_regenerator2.default.mark(function derefrence(realm) {
			return _regenerator2.default.wrap(function derefrence$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							if (!(this.base.jsTypeName !== 'object')) {
								_context4.next = 3;
								break;
							}

							return _context4.delegateYield(this.base.get(this.offset), 't0', 2);

						case 2:
							return _context4.abrupt('return', _context4.t0);

						case 3:
							return _context4.abrupt('return', this.base.properties[this.offset].value);

						case 4:
						case 'end':
							return _context4.stop();
					}
				}
			}, derefrence, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			return "[-> " + this.base.properties[this.offset].value.debugString;
		}
	}]);
	return PointerValue;
}(esper.ObjectValue);

PointerValue.prototype.clazz = 'Pointer';

var PointerPrototypeValue = function (_esper$EasyObjectValu) {
	(0, _inherits3.default)(PointerPrototypeValue, _esper$EasyObjectValu);

	function PointerPrototypeValue() {
		(0, _classCallCheck3.default)(this, PointerPrototypeValue);
		return (0, _possibleConstructorReturn3.default)(this, (PointerPrototypeValue.__proto__ || (0, _getPrototypeOf2.default)(PointerPrototypeValue)).apply(this, arguments));
	}

	(0, _createClass3.default)(PointerPrototypeValue, null, [{
		key: 'value$eg',
		value: /*#__PURE__*/_regenerator2.default.mark(function value$eg(thiz, args, realm) {
			return _regenerator2.default.wrap(function value$eg$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.delegateYield(thiz.derefrence(), 't0', 1);

						case 1:
							return _context5.abrupt('return', _context5.t0);

						case 2:
						case 'end':
							return _context5.stop();
					}
				}
			}, value$eg, this);
		})
	}]);
	return PointerPrototypeValue;
}(esper.EasyObjectValue);

var RefrenceFunction = function (_esper$ObjectValue2) {
	(0, _inherits3.default)(RefrenceFunction, _esper$ObjectValue2);

	function RefrenceFunction() {
		(0, _classCallCheck3.default)(this, RefrenceFunction);
		return (0, _possibleConstructorReturn3.default)(this, (RefrenceFunction.__proto__ || (0, _getPrototypeOf2.default)(RefrenceFunction)).apply(this, arguments));
	}

	(0, _createClass3.default)(RefrenceFunction, [{
		key: 'rawCall',
		value: /*#__PURE__*/_regenerator2.default.mark(function rawCall(n, evalu, scope) {
			var a1, ref, base, offset;
			return _regenerator2.default.wrap(function rawCall$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							if (!(n.arguments.length == 0)) {
								_context6.next = 2;
								break;
							}

							return _context6.abrupt('return', CompletionRecord.makeTypeError(realm, "No argument to refrence."));

						case 2:
							a1 = n.arguments[0];
							ref = null;
							_context6.t0 = a1.type;
							_context6.next = _context6.t0 === "Identifier" ? 7 : _context6.t0 === "MemberExpression" ? 8 : 27;
							break;

						case 7:
							return _context6.abrupt('return', new PointerValue(scope.object, a1.name, scope.realm));

						case 8:
							return _context6.delegateYield(evalu.branch(a1.object, scope), 't1', 9);

						case 9:
							base = _context6.t1;
							offset = void 0;

							if (!a1.computed) {
								_context6.next = 16;
								break;
							}

							return _context6.delegateYield(evalu.branch(a1.property, scope), 't2', 13);

						case 13:
							offset = _context6.t2.toNative();
							_context6.next = 26;
							break;

						case 16:
							if (!(a1.property.type == 'Identifier')) {
								_context6.next = 20;
								break;
							}

							offset = a1.property.name;
							_context6.next = 26;
							break;

						case 20:
							if (!(a1.property.type == 'Literal')) {
								_context6.next = 25;
								break;
							}

							return _context6.delegateYield(evalu.branch(a1.property, scope).toNative(), 't3', 22);

						case 22:
							offset = _context6.t3;
							_context6.next = 26;
							break;

						case 25:
							return _context6.abrupt('return', CompletionRecord.makeTypeError(scope.realm, "Unimplemented property type"));

						case 26:
							return _context6.abrupt('return', new PointerValue(base, offset, scope.realm));

						case 27:
							return _context6.abrupt('return', CompletionRecord.makeTypeError(scope.realm, "Unimplemented"));

						case 28:
						case 'end':
							return _context6.stop();
					}
				}
			}, rawCall, this);
		})
	}, {
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var val;
			return _regenerator2.default.wrap(function call$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							val = Value.undef;

							if (!(args.length < 1)) {
								_context7.next = 3;
								break;
							}

							return _context7.abrupt('return', CompletionRecord.makeTypeError(realm, "No argument to refrence."));

						case 3:
							return _context7.abrupt('return', CompletionRecord.makeTypeError(scope.realm, "Can't call refrence like that."));

						case 4:
						case 'end':
							return _context7.stop();
					}
				}
			}, call, this);
		})
	}]);
	return RefrenceFunction;
}(esper.ObjectValue);

var DerefrenceFunction = function (_esper$ObjectValue3) {
	(0, _inherits3.default)(DerefrenceFunction, _esper$ObjectValue3);

	function DerefrenceFunction() {
		(0, _classCallCheck3.default)(this, DerefrenceFunction);
		return (0, _possibleConstructorReturn3.default)(this, (DerefrenceFunction.__proto__ || (0, _getPrototypeOf2.default)(DerefrenceFunction)).apply(this, arguments));
	}

	(0, _createClass3.default)(DerefrenceFunction, [{
		key: 'call',
		value: /*#__PURE__*/_regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var val;
			return _regenerator2.default.wrap(function call$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							val = Value.undef;

							if (!(args.length < 1)) {
								_context8.next = 3;
								break;
							}

							return _context8.abrupt('return', CompletionRecord.makeTypeError(scope.realm, "No argument to derefrence."));

						case 3:
							if (!(args[0] instanceof PointerValue)) {
								_context8.next = 8;
								break;
							}

							return _context8.delegateYield(args[0].derefrence(), 't0', 5);

						case 5:
							return _context8.abrupt('return', _context8.t0);

						case 8:
							return _context8.abrupt('return', CompletionRecord.makeTypeError(scope.realm, "Tried to derefrence non pointer"));

						case 9:
						case 'end':
							return _context8.stop();
					}
				}
			}, call, this);
		})
	}]);
	return DerefrenceFunction;
}(esper.ObjectValue);

var PointerObjValue = function (_esper$EasyObjectValu2) {
	(0, _inherits3.default)(PointerObjValue, _esper$EasyObjectValu2);

	function PointerObjValue(realm) {
		(0, _classCallCheck3.default)(this, PointerObjValue);

		var _this5 = (0, _possibleConstructorReturn3.default)(this, (PointerObjValue.__proto__ || (0, _getPrototypeOf2.default)(PointerObjValue)).call(this, realm));

		_this5.setImmediate("refrence", new RefrenceFunction(realm));
		_this5.setImmediate("derefrence", new DerefrenceFunction(realm));
		return _this5;
	}

	return PointerObjValue;
}(esper.EasyObjectValue);

var plugin = module.exports = {
	name: 'pointers',
	setupEngine: function setupEngine(esper, engine) {
		engine.realm.PointerPrototype = new PointerPrototypeValue(engine.realm);
		engine.realm.globalScope.add("Pointer", new PointerObjValue(engine.realm));
	},
	init: function init() {
		esper.hooks.setupEngine.push(this.setupEngine);
	}
};

/***/ }),
/* 296 */
/***/ (function(module, exports) {

module.exports = {"ast-css":"bundle","lang-python":"bundle","lang-coffeescript":"bundle","lang-lua":"bundle","babylon":"opt-in","pointers":"bundle"};

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _promise = __webpack_require__(121);

var _promise2 = _interopRequireDefault(_promise);

var _chai = __webpack_require__(15);

var _astParser = __webpack_require__(59);

var parser = _interopRequireWildcard(_astParser);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("Async", function () {
	it("should accept promises for returned values", function (done) {
		var env = SandBoxr.createEnvironment();
		env.init();

		var foo = env.objectFactory.createFunction(function () {
			var promise = new _promise2.default(function (resolve) {
				setTimeout(function () {
					var result = env.objectFactory.createPrimitive(50);
					resolve(result);
				}, 4);
			});

			return promise;
		});

		env.global.define("foo", foo);

		var ast = parser.parse("foo()===50;");
		var sandbox = SandBoxr.create(ast);
		var result = sandbox.resolve(env);

		result.then(function (value) {
			(0, _chai.expect)(value.toNative()).to.be.true;
			done();
		});
	});

	it("should return a promise as a result", function (done) {
		var ast = parser.parse("true===true;");
		var sandbox = SandBoxr.create(ast);

		sandbox.resolve().then(function (value) {
			(0, _chai.expect)(value.toNative()).to.be.true;
			done();
		});
	});
});

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Expressions", function () {
	describe("Binary Expressions", function () {
		var left = 1;
		var right = 2;

		var operators = [{ op: "==", name: "Equals operator", expected: left == right }, { op: "!=", name: "Not equals operator", expected: left != right }, { op: "===", name: "Strict equals operator", expected: left === right }, { op: "!==", name: "Strict not equals operator", expected: left !== right }, { op: "<", name: "Less than operator", expected: left < right }, { op: "<=", name: "Less than or equals operator", expected: left <= right }, { op: ">", name: "Greater than operator", expected: left > right }, { op: ">=", name: "Greater than or equals operator", expected: left >= right }, { op: "<<", name: "Left shift operator", expected: left << right }, { op: ">>", name: "Right shift operator", expected: left >> right }, { op: ">>>", name: "Unsigned right shift operator", expected: left >>> right }, { op: "+", name: "Addition operator", expected: left + right }, { op: "-", name: "Subtraction operator", expected: left - right }, { op: "*", name: "Multiply operator", expected: left * right }, { op: "/", name: "Divide operator", expected: left / right }, { op: "%", name: "Remainder operator", expected: left % right }, { op: "|", name: "Bitwise AND operator", expected: left | right }, { op: "^", name: "Bitwise XOR operator", expected: left ^ right }, { op: "&", name: "Bitwise OR operator", expected: left & right }];

		operators.forEach(function (current) {
			it("should apply " + current.op, function (done) {
				var code = "(" + left + " " + current.op + " " + right + ") === (" + current.expected + ");";
				runner.confirmBlock(code, done);
			});
		});

		it("should show that a property is in the object if it is", function (done) {
			runner.confirmBlock("var a = { foo: 1 };\n'foo' in a;", done);
		});

		it("should show that a property is not in the object if it is not", function (done) {
			runner.confirmBlock("var a = { foo: 1 };\n!('bar' in a);", done);
		});

		describe("Quirks", function () {
			it("should convert to string if left is string", function (done) {
				runner.confirmBlock("'1' + 2 === '12';", done);
			});

			it("should convert to string if right is string", function (done) {
				runner.confirmBlock("1 + '2' === '12'", done);
			});

			it("should convert to number for subtraction operator", function (done) {
				runner.confirmBlock("'1' - 2 === -1;", done);
			});
		});

		describe("instanceof", function () {
			it("should return true for an object", function (done) {
				runner.confirmBlock("({} instanceof Object);", done);
			});

			it("should return false for not an object", function (done) {
				runner.confirmBlock("!({} instanceof String);", done);
			});

			it("should respect inheritance", function (done) {
				runner.confirmBlock("function C(){}\nfunction D(){}\nD.prototype = new C();\nvar o = new D();(o instanceof C) && (o instanceof D);", done);
			});

			it("should return false for primitive", function (done) {
				runner.confirmBlock("!('foo' instanceof String);", done);
			});
		});
	});
});

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;
var expect = __webpack_require__(15).expect;

function createRunner(text) {
	return runner.runBlock(text);
}

describe("Eval", function () {
	it("should eval expression if parser is defined", function () {
		var result = createRunner("eval('1 + 1')===2;");
		expect(result.toNative()).to.be.true;
	});

	it("should be able to add variables to current scope", function () {
		var result = createRunner("eval('var i = 2;');i==2;");
		expect(result.toNative()).to.be.true;
	});

	describe("with Function constructor", function () {
		it("should return a function instance", function () {
			var result = createRunner("typeof (new Function('return 1+2')) === 'function'");
			expect(result.toNative()).to.be.true;
		});

		it("should resolve parsed code when called", function () {
			var result = createRunner("(new Function('return 1+2'))() === 3;");
			expect(result.toNative()).to.be.true;
		});

		it("should allow arguments to be defined", function () {
			var result = createRunner("(new Function('a', 'b', 'return a + b'))(1,2) === 3;");
			expect(result.toNative()).to.be.true;
		});

		it("should run in the global scope", function () {
			var result = createRunner("function a() { return new Function('return this;'); }\na()() === this;");
			expect(result.toNative()).to.be.true;
		});

		it("should be able to call constructor with `call`", function () {
			var result = createRunner("(Function.call(this, 'return 1+2;'))()==3;");
			expect(result.toNative()).to.be.true;
		});
	});
});

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Functions", function () {
	it("Function should have a prototype of function", function (done) {
		runner.confirmBlock("Object.getPrototypeOf(Function)===Function.prototype;", done);
	});

	it("should return a value from a named function", function (done) {
		runner.confirmBlock("function a() { return 50; }\na()==50;", done);
	});

	it("should return a value from a function assigned to variable", function (done) {
		runner.confirmBlock("var a = function () { return 50; };\na()==50;", done);
	});

	it("should pass parameters into function", function (done) {
		runner.confirmBlock("var a = function (b) { return b; };\na(50)==50;", done);
	});

	it("should be able to access variable in outer scope", function (done) {
		runner.confirmBlock("var a = 50;\nfunction b() { return a; }\nb()==50;", done);
	});

	it("should be able to `call` a function", function (done) {
		runner.confirmBlock("function a(x, y) { return x + y; }\na.call(null, 10, 40)==50;", done);
	});

	it("should be able to control `this` with `call`", function (done) {
		runner.confirmBlock("var a = {};function b() { return this === a; }\nb.call(a)==true;", done);
	});

	it("should be able to `apply` a function", function (done) {
		runner.confirmBlock("function a(x, y) { return x + y; }\na.apply(null, [10, 40])==50;", done);
	});

	it("should not alter `this` when provided through apply for builtin", function (done) {
		runner.confirmBlock("Object.prototype.toString.apply(null, []) == '[object Null]';", done);
	});

	it("should be able to coercively compare functions", function (done) {
		runner.confirmBlock("var a = function(){};var b = a;a == b;", done);
	});

	it("should link arguments object to the named parameters", function (done) {
		runner.confirmBlock("(function (a) { a++;return a===arguments[0]; })(1)==true;", done);
	});

	it("should allow function prototype to be called", function (done) {
		runner.confirmBlock("Function.prototype()===undefined;", done);
	});

	describe("Function.prototype.bind", function () {
		it("should return a function", function (done) {
			runner.confirmBlock("var a = function () {};typeof a.bind({}) === 'function';", done);
		});

		it("should return a new function", function (done) {
			runner.confirmBlock("var a = function () {};var b = a.bind({});a !== b;", done);
		});

		it("should set the scope of the new function", function (done) {
			runner.confirmBlock("var a = {};var b = function () { return this === a; };b.bind(a)()==true;", done);
		});

		it("should use the arguments assigned, along with those provided at call time", function (done) {
			runner.confirmBlock("var a = function (a,b,c) { return a + b + c; };a.bind(null,2,3)(-5)==0;", done);
		});
	});

	describe("scope", function () {
		it("should be able to read value from parent scope", function (done) {
			runner.confirmBlock("var a = (function(global) { return function (value) { return global.String(value); }; })(this);\na('foo')=='foo';", done);
		});
	});
});

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("If", function () {
	it("should execute body when passing", function () {
		runner.confirmBlock("var a = 10;\nif (1 == 1) { a = 50; }\na==50;");
	});

	it("should not execute body when failing", function () {
		runner.confirmBlock("var a = 10;\nif (1 != 1) { a = 50; }\na==10;");
	});

	it("should not execute alternate when failing", function () {
		runner.confirmBlock("var a = 10;\nif (1 != 1) { a = 50; } else { a = 20; }\na==20;");
	});

	it("should evaluate true ternary expression", function () {
		runner.confirmBlock("true ? true : false;");
	});

	it("should evaluate false ternary expression", function () {
		runner.confirmBlock("false ? false : true;");
	});
});

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _testRunner = __webpack_require__(62);

var _chai = __webpack_require__(15);

describe("Imports", function () {
	it("should allow named imports", function () {
		var lib = {
			name: "lib",
			ast: _testRunner.es6.parse("export function square (x) { return x * x; }")
		};

		var ast = _testRunner.es6.parse("import {square} from 'lib';square(2)===4");
		var sandbox = SandBoxr.create(ast, { imports: [lib] });

		var result = sandbox.execute();
		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should allow default imports", function () {
		var lib = {
			name: "lib",
			ast: _testRunner.es6.parse("export default function (x) { return x * x; }")
		};

		var ast = _testRunner.es6.parse("import square from 'lib';square(2)===4");
		var sandbox = SandBoxr.create(ast, { imports: [lib] });

		var result = sandbox.execute();
		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should allow default and named exports", function () {
		var lib = {
			name: "lib",
			ast: _testRunner.es6.parse("export default 1;\nexport const named = 1;")
		};

		var ast = _testRunner.es6.parse("import {default as unnamed, named} from 'lib';\nnamed===unnamed;");
		var sandbox = SandBoxr.create(ast, { imports: [lib] });

		var result = sandbox.execute();
		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should allow exports to be aliased", function () {
		var lib = {
			name: "lib",
			ast: _testRunner.es6.parse("var foo = 1, b = 1;\nexport {foo as a, b}")
		};

		var ast = _testRunner.es6.parse("import {a, b} from 'lib';\na===b;");
		var sandbox = SandBoxr.create(ast, { imports: [lib] });

		var result = sandbox.execute();
		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should export bindings", function () {
		var lib = {
			name: "lib",
			ast: _testRunner.es6.parse("\n\t\t\texport let counter = 0;\n    \texport function inc() {\n        counter++;\n    \t}")
		};

		var ast = _testRunner.es6.parse("import { inc, counter } from 'lib';inc();counter===1;");
		var sandbox = SandBoxr.create(ast, { imports: [lib] });

		var result = sandbox.execute();
		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should not import unused modules", function () {
		var lib = {
			name: "lib",
			ast: _testRunner.es6.parse("throw Error('lib should not be called')")
		};

		var ast = _testRunner.es6.parse("true;");
		var sandbox = SandBoxr.create(ast, { imports: [lib] });

		var result = sandbox.execute();
		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should allow wildcard exports", function () {
		var lib1 = {
			name: "lib1",
			ast: _testRunner.es6.parse("export const a = 1;")
		};

		var lib2 = {
			name: "lib2",
			ast: _testRunner.es6.parse("export * from 'lib1';")
		};

		var ast = _testRunner.es6.parse("import {a} from 'lib2';a===1;");
		var sandbox = SandBoxr.create(ast, { imports: [lib1, lib2] });

		var result = sandbox.execute();
		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should allow aliasing external exports", function () {
		var lib1 = {
			name: "lib1",
			ast: _testRunner.es6.parse("export const a = 1;")
		};

		var lib2 = {
			name: "lib2",
			ast: _testRunner.es6.parse("export {a as b} from 'lib1';")
		};

		var ast = _testRunner.es6.parse("import {b} from 'lib2';b===1;");
		var sandbox = SandBoxr.create(ast, { imports: [lib1, lib2] });

		var result = sandbox.execute();
		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should allow wildcard imports", function () {
		var lib = {
			name: "lib",
			ast: _testRunner.es6.parse("var a = 1, b = 1;\nexport {a, b}")
		};

		var ast = _testRunner.es6.parse("import * as foo from 'lib';\nfoo.a===foo.b;");
		var sandbox = SandBoxr.create(ast, { imports: [lib] });

		var result = sandbox.execute();
		(0, _chai.expect)(result.value).to.be.true;
	});

	it("should allow import without assignments", function () {
		var lib = {
			name: "lib",
			ast: _testRunner.es6.parse("this.a = 1;")
		};

		var ast = _testRunner.es6.parse("import 'lib';\nthis.a===1;");
		var sandbox = SandBoxr.create(ast, { imports: [lib] });

		var result = sandbox.execute();
		(0, _chai.expect)(result.value).to.be.true;
	});
});

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("JSON", function () {
	describe("stringify", function () {
		it("should process string as expected", function () {
			runner.confirmBlock("JSON.stringify('foo')=='\"foo\"'");
		});

		it("should process number as expected", function () {
			runner.confirmBlock("JSON.stringify(123)=='123'");
		});

		it("should process boolean as expected", function () {
			runner.confirmBlock("JSON.stringify(true)=='true'");
		});

		xit("should process date as expected", function () {
			runner.confirmBlock("JSON.stringify(new Date(2000,1,1))=='\"' + (new Date(2000,1,1)).toJSON() + '\"'");
		});

		it("should process array as expected", function () {
			runner.confirmBlock("JSON.stringify([42])=='[42]'");
		});

		xit("should use replacer with array", function () {
			runner.confirmBlock("JSON.stringify([42], function (k,v) { return v===42?'fourtytwo':v; })=='[\"fourtytwo\"]'");
		});

		it("should throw type error for circular object", function () {
			runner.confirmError("var o={};o.prop=o;JSON.stringify(o);", TypeError);
		});

		it("should throw type error for circular array", function () {
			runner.confirmError("var a=[];a[0]=a;JSON.stringify(a);", TypeError);
		});

		it("should throw type error for nested circular reference", function () {
			runner.confirmError("var o={};o.a=[];o.a[0]=o;JSON.stringify(o);", TypeError);
		});

		it("should replace undefined values with null in sparse array", function () {
			runner.confirmBlock("JSON.stringify([,,])=='[null,null]'");
		});

		xit("should use an array for replacer if provided", function () {
			runner.confirmBlock("JSON.stringify({foo:'bar',bar:false},['foo'])=='{\"foo\":\"bar\"}';");
		});

		it("should serialize a regex as an empty object", function () {
			runner.confirmBlock("JSON.stringify(/abc/)=='{}';");
		});

		it("should serialize an Error as an empty object", function () {
			runner.confirmBlock("JSON.stringify(new Error('foo'))=='{}';");
		});

		it("should add a space for formatting when provided", function () {
			runner.confirmBlock("JSON.stringify({foo:1},null,2)=='{\\n  \"foo\": 1\\n}';");
		});

		it("should add a tab for formatting when provided", function () {
			runner.confirmBlock("JSON.stringify({foo:1},null,'\\t')=='{\\n\\t\"foo\": 1\\n}';");
		});
	});

	describe("parse", function () {
		it("should parse null correctly", function () {
			runner.confirmBlock("JSON.parse('null')===null;");
		});

		it("should parse number correctly", function () {
			runner.confirmBlock("JSON.parse('1.55')===1.55;");
		});

		it("should parse boolean correctly", function () {
			runner.confirmBlock("JSON.parse('true')===true;");
		});

		it("should parse string correctly", function () {
			runner.confirmBlock("JSON.parse('\"foo\"')==='foo';");
		});

		it("should parse array correctly", function () {
			runner.confirmBlock("JSON.parse('[1,2,3]').length===3;");
		});

		it("should parse object correctly", function () {
			runner.confirmBlock("JSON.parse('{\"foo\":true}').foo===true;");
		});

		xit("should parse with reviver correctly", function () {
			runner.confirmBlock("JSON.parse('{\"foo\":1}', function(k,v){return k=='foo'?v*2:v;}).foo===2;");
		});
	});
});

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Label Statements", function () {
	it("should break to outer loop when expected", function (done) {
		var code = "\n\t\tvar i, j, result='';\n\t\tloop1:\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\tloop2:\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tif (i == 1 && j == 1) {\n\t\t\t\t\tcontinue loop1;\n\t\t\t\t}\n\n\t\t\t\tresult += i + ' ' + j;\n\t\t\t}\n\t\t}\n\n\t\tresult=='0 00 10 21 02 02 12 2';";

		runner.confirmBlock(code, done);
	});
});

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Expressions", function () {
	describe("Logical", function () {
		it("should evaluate && as true if both sides are true", function (done) {
			runner.confirmBlock("true && true;", done);
		});

		it("should evaluate && as false if one side is false", function (done) {
			runner.confirmBlock("!(true && false);", done);
		});

		it("should evaluate && as false if both sides are false", function (done) {
			runner.confirmBlock("!(false && false);", done);
		});

		it("should evaluate || as false if both sides are false", function (done) {
			runner.confirmBlock("!(false || false);", done);
		});

		it("should evaluate || as true if one side is true", function (done) {
			runner.confirmBlock("false || true;", done);
		});

		it("should evaluate || as true if both sides are true", function (done) {
			runner.confirmBlock("true || true;", done);
		});
	});
});

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Expression", function () {
	describe("Loops", function () {
		describe("For loops", function () {
			it("should iterate through items", function (done) {
				var code = "var a = 0;\nfor (var i = 0; i < 10; i++) { a++; }\na==10;";
				runner.confirmBlock(code, done);
			});

			it("should stop iterating when break", function (done) {
				var code = "var a = 0;\nfor (var i = 0; i < 10; i++) { a++; if (a > 1) { break; } }\na==2;";
				runner.confirmBlock(code, done);
			});

			it("should use continue to skip statements", function (done) {
				var code = "var a = 0;\nfor (var i = 0; i < 10; i++) { if (a > 0) { continue; } a++; }\na==1;";
				runner.confirmBlock(code, done);
			});
		});

		describe("For-in loops", function () {
			it("should iterate through properties", function (done) {
				runner.confirmBlock("var a = {a:1,b:2,c:3},b='';\nfor(var prop in a) { b += prop; }\nb=='abc';", done);
			});

			it("should not iterate through nonenumerable properties", function (done) {
				runner.confirmBlock("var a = {a:1,b:2,c:3},passed=true;\nfor(var prop in a) { if (prop == 'hasOwnProperty') { passed=false; } }\npassed;", done);
			});

			it("should iterate through child properties", function (done) {
				var code = "var triangle = {a:1, b:2, c:3};\nfunction ColoredTriangle() {\n  this.color = 'red';\n}\n\nColoredTriangle.prototype = triangle;\n\nvar obj = new ColoredTriangle();\nvar passed = false;\n\nfor (var prop in obj) {\n	if (prop === 'a') {\n\n	passed = true;\n	}\n}\npassed;";
				runner.confirmBlock(code, done);
			});
		});

		describe("Do while loops", function () {
			it("should execute until false", function (done) {
				runner.confirmBlock("var counter=0;while (counter < 5) { counter++; }\ncounter==5;", done);
			});

			it("should never execute if the test is never true", function (done) {
				runner.confirmBlock("var counter=10;while (counter < 5) { counter = 20; }\ncounter==10;", done);
			});

			it("should keep executing until first time it because false for do-while", function (done) {
				runner.confirmBlock("var counter=10;do { counter = 20; } while (counter < 5)\ncounter==20;", done);
			});
		});
	});
});

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Prototype tests", function () {
	it("should create a new object", function (done) {
		runner.confirmBlock("function FooObj() {};var o=new FooObj();typeof o=='object';", done);
	});

	it("should inherit from object", function (done) {
		runner.confirmBlock("function foo() {};foo.prototype.bar = 'empty';\nvar o = new foo();\no.bar=='empty';", done);
	});
});

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var expect = __webpack_require__(15).expect;
var runner = __webpack_require__(62).es5;

describe("Scope", function () {
	xdescribe("strict mode", function () {
		it("should detect 'use strict' literal and set scope to strict mode", function () {
			var scope = runner.getScope("'use strict';");
			expect(scope.isStrict()).toBe(true);
		});
	});

	describe("Global variables", function () {
		it("undefined exists", function () {
			runner.confirmBlock("typeof undefined==='undefined';");
		});

		it("Infinity exists", function () {
			runner.confirmBlock("typeof Infinity==='number';");
		});

		it("NaN exists", function () {
			runner.confirmBlock("NaN!==NaN;");
		});

		it("global this exists", function () {
			runner.confirmBlock("var x;'x' in this;");
		});

		it("`this` should refer to global object", function () {
			runner.confirmBlock("this.String === String");
		});

		it("a variable attached to global this is in the global", function () {
			runner.confirmBlock("this.foo = 2;this.foo === foo;");
		});

		it("should generate a reference error if variable does not exists", function () {
			runner.confirmError("foo;", ReferenceError);
		});

		it("should assign undeclared variable to global", function () {
			runner.confirmBlock("var obj = {};__ref = obj;__ref !== undefined;");
		});

		it("should create functions before they are called", function () {
			runner.confirmBlock("function f() { var x;return x;function x() {}\n}\ntypeof f() === 'function'");
		});

		it("should ignore debugger statements", function () {
			runner.confirmBlock("debugger;1==1;");
		});
	});
});

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Expressions", function () {
	describe("Sequence", function () {
		it("should assign to last value in sequence", function (done) {
			runner.confirmBlock("var a = (7, 5);a===5;", done);
		});
	});
});

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Switch Statement", function () {
	it("should execute the match block", function (done) {
		runner.confirmBlock("var a = 5;switch(a) { case 5: a = 10; break; default: a = 1; break; }\na==10;", done);
	});

	it("should execute default block if no matches", function (done) {
		runner.confirmBlock("var a = 5;switch(a) { case 1: a = 10; break; default: a = 1; break; }\na==1;", done);
	});

	it("should go to the next block if the case is empty", function (done) {
		runner.confirmBlock("var a = 5;switch(a) { case 1: case 2: case 5: a = 1; break; default: a = 10; break; }\na==1;", done);
	});

	it("should continue executing blocks if a passing block does not break", function (done) {
		runner.confirmBlock("var a = 1;switch(a) { case 1: a = 2; case 2: a = 3; break; default: a = 4; break; }\na==3;", done);
	});

	it("should allow return to break out of a switch", function (done) {
		var code = "function a(value) { switch (value) { case 1: return true; default: return false; } }\na(1)";
		runner.confirmBlock(code, done);
	});
});

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Try-Catch-Finally", function () {
	it("should not throw an exception if an error occurs in a try-block", function () {
		runner.confirmBlock("try { var a = {}; a.b(); } catch (err) { }\ntrue==true;");
	});

	it("should throw an exception if an error occurs outside of a try-block", function () {
		runner.confirmError("var a = {}; a.b();", TypeError);
	});

	it("should not execute the catch block if no error is thrown", function () {
		runner.confirmBlock("var passed = true;try {;} catch (err) { passed = false; }\npassed==true;");
	});

	it("should execute the catch block if error is thrown", function () {
		runner.confirmBlock("var passed = false;try { a(); } catch (err) { passed = true; }\npassed==true;");
	});

	it("should execute the finalizer when no error occurs", function () {
		runner.confirmBlock("var passed = false;try { } finally { passed = true; }\npassed==true;");
	});

	it("should continue executing code outside of the try block.", function () {
		runner.confirmBlock("var passed = false;try { a(); } catch (err) {;}\npassed = true;passed==true;");
	});

	// it("should stop executing code within the try block.", () => {
	// 	let code = "var passed=true;try {\nvar object = {valueOf: function() {throw 'error'}, toString: function() {return 1}};\n~object;passed=false;}\ncatch (e) {;}\npassed==true;";
	// 	runner.confirmBlock(code);
	// });

	it("should prefer return from finalizer", function () {
		runner.confirmBlock("function f() { try { return false; } finally { return true; }\n}\nf();");
	});

	it("should be able to determine instanceof thrown error", function () {
		runner.confirmBlock("var result = false;try { throw new TypeError() } catch (err) { result = err instanceof TypeError; }\nresult==true;");
	});

	it("should bubble up exception from uncaught from a function", function () {
		runner.confirmError("function a() {\ntry { throw new TypeError(); } finally { }\n}\na();", TypeError);
	});
});

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Type: Array", function () {
	it("should create an array for an array literal", function (done) {
		runner.confirmBlock("Array.isArray([]);", done);
	});

	it("should have a length of 0 with empty array", function (done) {
		runner.confirmBlock("[].length==0;", done);
	});

	it("should add items to array literal", function (done) {
		runner.confirmBlock("var a = [1,2,3];a[2]==3;", done);
	});

	it("should set length based on array length", function (done) {
		runner.confirmBlock("var a = [1,2,3];a.length==3;", done);
	});

	describe("Array.prototype.push", function () {
		it("should add item to array", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.push(4);a[3]==4;", done);
		});

		it("should update length", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.push(4);a.length==4;", done);
		});

		it("should return the new length", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.push(4)==4;", done);
		});
	});

	describe("Array.prototype.pop", function () {
		it("should return the last item from the array", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.pop()==3;", done);
		});

		it("should update the length", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.pop();a.length==2;", done);
		});

		it("should return undefined for an empty array", function (done) {
			runner.confirmBlock("[].pop()===undefined;", done);
		});

		it("should not affect length of empty array", function (done) {
			runner.confirmBlock("var a = [];a.pop();a.length==0", done);
		});
	});

	describe("Array.prototype.shift", function () {
		it("should return the first item in the array", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.shift()==1;", done);
		});

		it("should remove the first item from the array", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.shift();a[0]==2;", done);
		});

		it("should update the array length", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.shift();a.length==2;", done);
		});

		it("should update the array indexes", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.shift();a[2]===undefined;", done);
		});
	});

	describe("Array.prototype.unshift", function () {
		it("should insert the items to the beginning of the array", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.unshift(-1, 0);a[1]==0", done);
		});

		it("should move the other items in the array", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.unshift(-1, 0);a[2]==1;", done);
		});

		it("should return new length of array", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.unshift(-1, 0)==5;", done);
		});

		it("should update length of array", function (done) {
			runner.confirmBlock("var a = [1,2,3];a.unshift(-1, 0);a.length==5;", done);
		});
	});

	describe("Array.prototype.slice", function () {
		it("should return a new array", function (done) {
			runner.confirmBlock("Array.isArray([1,2,3].slice(0, 3))", done);
		});

		it("should contain the items in the range", function (done) {
			runner.confirmBlock("var a = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'].slice(1, 3);a[1]=='Lemon';", done);
		});

		it("should contain only those items", function (done) {
			runner.confirmBlock("var a = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'].slice(1, 3);a.length==2;", done);
		});

		it("should extract until end if end is undefined", function (done) {
			runner.confirmBlock("var a = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'].slice(1);a.length==4;", done);
		});

		it("should extract the entire array if begin is undefined", function (done) {
			runner.confirmBlock("var a = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'].slice();a.length==5;", done);
		});

		it("should offset from the end if a negative begin", function (done) {
			runner.confirmBlock("var a = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'].slice(-2);a[0]=='Apple';", done);
		});

		it("should extract until up to end - negative end", function (done) {
			runner.confirmBlock("var a = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'].slice(0, -1);a.length==4;", done);
		});
	});

	describe("Array.prototype.splice", function () {
		it("should insert the item at the position specified", function (done) {
			runner.confirmBlock("var a = ['angel', 'clown', 'mandarin', 'surgeon'];var b=a.splice(2, 0, 'drum');a[2]=='drum' && a.length==5 && b.length==0;", done);
		});

		it("should remove count specified from array", function (done) {
			runner.confirmBlock("var a = ['angel', 'clown', 'drum', 'mandarin', 'surgeon'];var b=a.splice(3, 1);b.length==1 && a[3]=='surgeon';", done);
		});

		it("should insert new item in deleted position", function (done) {
			runner.confirmBlock("var a = ['angel', 'clown', 'drum', 'surgeon'];a.splice(2, 1, 'trumpet');a[2]=='trumpet';", done);
		});

		it("should insert all items, even if delete count is less", function (done) {
			runner.confirmBlock("var a = ['angel', 'clown', 'trumpet', 'surgeon'];var b=a.splice(0, 2, 'parrot', 'anemone', 'blue');b.length=2 && a.length==5 && a[0]=='parrot' && a[2]=='blue';", done);
		});

		it("should remove elements until end if delete count exceeds length", function (done) {
			runner.confirmBlock("var a = ['parrot', 'anemone', 'blue', 'trumpet', 'surgeon'];var b=a.splice(3, Number.MAX_VALUE);b.length==2 && a.length==3;", done);
		});
	});

	describe("Array.prototype.concat", function () {
		it("should combine 2 arrays", function (done) {
			runner.confirmBlock("var a = ['a', 'b', 'c'];var b=a.concat([1, 2, 3]);b.length==6 && b[3]==1;", done);
		});

		it("should combine multiple arrays", function (done) {
			runner.confirmBlock("var num1 = [1, 2, 3],num2 = [4, 5, 6],num3 = [7, 8, 9];var a=num1.concat(num2,num3);a.length==9 && a[3]==4 && a[6]==7;", done);
		});

		it("should combine flatten arrays/values", function (done) {
			runner.confirmBlock("var a = ['a', 'b', 'c'];var b=a.concat(1, [2, 3]);b.length==6 && b[3]==1 && b[4]==2;", done);
		});
	});

	describe("Array.prototype.indexOf", function () {
		it("should return -1 if item is not found", function (done) {
			runner.confirmBlock("[1,2,3].indexOf(4)==-1;", done);
		});

		it("should return index if found", function (done) {
			runner.confirmBlock("[1,2,3].indexOf(2)==1;", done);
		});

		it("should search using fromIndex if supplied", function (done) {
			runner.confirmBlock("[1,2,3,2,1].indexOf(2, 2)==3", done);
		});
	});

	describe("Array.prototype.lastIndexOf", function () {
		it("should return last index if found", function (done) {
			runner.confirmBlock("[2, 5, 9, 2].lastIndexOf(2)==3;", done);
		});

		it("should return -1 if not found", function (done) {
			runner.confirmBlock("[2, 5, 9, 2].lastIndexOf(7)==-1;", done);
		});

		it("should use from index if supplied", function (done) {
			runner.confirmBlock("[2, 5, 9, 2].lastIndexOf(2, 2)==0;", done);
		});

		it("should offset for negative index if supplied", function (done) {
			runner.confirmBlock("[2, 5, 9, 2].lastIndexOf(2, -2)==0;", done);
		});

		it("should offset for negative index is below 0 -1 is returned", function (done) {
			runner.confirmBlock("[2, 5, 9, 2].lastIndexOf(2, -10)==-1;", done);
		});
	});

	describe("Array.prototype.join", function () {
		it("should join values with a comma if no separator is specified", function (done) {
			runner.confirmBlock("['Wind', 'Rain', 'Fire'].join()=='Wind,Rain,Fire'", done);
		});

		it("should join values with a no separator if empty string is specified", function (done) {
			runner.confirmBlock("['Wind', 'Rain', 'Fire'].join('')=='WindRainFire';", done);
		});

		it("should join values with separator if specified", function (done) {
			runner.confirmBlock("['Wind', 'Rain', 'Fire'].join('--')=='Wind--Rain--Fire'", done);
		});
	});

	describe("Array.prototype.forEach", function () {
		it("should iterate over the array", function (done) {
			runner.confirmBlock("var counter=0;[1,2,3].forEach(function() { counter++; });counter==3;", done);
		});

		it("should pass in expected arguments", function (done) {
			runner.confirmBlock("var a = [1,2,3], passed = true;a.forEach(function(value, index, arr) { passed = (passed && value == a[index] && arr === a); });passed==true;", done);
		});

		it("should use expected scope", function (done) {
			runner.confirmBlock("var a = [1,2,3], passed = true, scope = {};a.forEach(function(value, index, arr) { passed = (passed && this === scope); }, scope);passed==true;", done);
		});

		it("should skip missing values in sparse array", function (done) {
			runner.confirmBlock("var counter=0;var a = [1,2]; a[10] = 10;a.forEach(function() { counter++; });counter==3;", done);
		});
	});

	describe("Array.prototype.map", function () {
		it("should return the mapped values", function (done) {
			runner.confirmBlock("var a=[1,2,3].map(function (i) { return i * 2; });a.length==3 && a[0]==2 && a[2]==6;", done);
		});
	});

	describe("Array.prototype.filter", function () {
		it("should filter values from the array", function (done) {
			runner.confirmBlock("var a=[12, 5, 8, 130, 44].filter(function (v) { return v >= 10; });a.length==3 && a[0]==12 && a[1]==130;", done);
		});
	});

	describe("Array.prototype.every", function () {
		it("should return true for an empty array", function (done) {
			runner.confirmBlock("[].every(function () { return true; });", done);
		});

		it("should return true if all elements match predicate", function (done) {
			runner.confirmBlock("[1,2,3].every(function (v) { return v > 0; });", done);
		});

		it("should return false if any element does not match predicate", function (done) {
			runner.confirmBlock("!([-1,2,3].every(function (v) { return v > 0; }));", done);
		});
	});

	describe("Array.prototype.some", function () {
		it("should return false for an empty array", function (done) {
			runner.confirmBlock("!([].some(function() { return true; }));", done);
		});

		it("should return false if all items fail", function (done) {
			runner.confirmBlock("!([1,2,3].some(function(v) { return v < 0; }));", done);
		});

		it("should return true if any items passes", function (done) {
			runner.confirmBlock("[-1,2,3].some(function(v) { return v < 0; });", done);
		});
	});

	describe("Array.prototype.reduce", function () {
		it("should execute reduce callback", function (done) {
			runner.confirmBlock("var a=[0, 1, 2, 3].reduce(function(a, b) { return a + b; });a==6;", done);
		});

		it("should execute reduce callback with initial value if provided", function (done) {
			runner.confirmBlock("var a=[0, 1, 2, 3].reduce(function(a, b) { return a + b; }, -6);a==0;", done);
		});
	});

	describe("Array.prototype.reverse", function () {
		it("should reverse the items in the array", function (done) {
			runner.confirmBlock("var a=['one', 'two', 'three'].reverse();a[0]=='three' && a[2]=='one';", done);
		});

		it("should pass a reference to the same array back", function (done) {
			runner.confirmBlock("var a = ['one', 'two', 'three'];a.reverse() === a;", done);
		});
	});

	describe("Array.prototype.sort", function () {
		it("should return a reference to the array", function (done) {
			runner.confirmBlock("var a = [1,2,3];a === a.sort()", done);
		});

		it("should sort the array without a compare function", function (done) {
			runner.confirmBlock("var a=['cherries', 'apples', 'bananas'];a.sort();a[0]=='apples' && a[2]=='cherries';", done);
		});

		it("should sort by default converting to string", function (done) {
			runner.confirmBlock("var a = [1, 10, 21, 2];a.sort();a[0]==1 && a[1]==10 && a[3]==21;", done);
		});

		it("should sort using a comparer function if provided", function (done) {
			runner.confirmBlock("var a=[4, 2, 5, 1, 3];a.sort(function(a, b) { return a - b; });a[0]==1 && a[4]==5;", done);
		});
	});

	describe("Array.prototype.toString", function () {
		it("should return a string representation of the array", function (done) {
			runner.confirmBlock("['Jan', 'Feb', 'Mar', 'Apr'].toString()=='Jan,Feb,Mar,Apr';", done);
		});
	});
});

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Type: Number", function () {
	it("should show 'number' as typeof", function () {
		return runner.confirmBlock("typeof 5==='number';");
	});
	it("should evaluate signed numbers per spec", function () {
		return runner.confirmBlock("1/+0 !== 1/-0;");
	});

	["MIN_VALUE", "MAX_VALUE", "NEGATIVE_INFINITY", "POSITIVE_INFINITY"].forEach(function (name) {
		it("should have constants: " + name, function () {
			return runner.confirmBlock("Number." + name + " == " + Number[name] + ";");
		});
	});

	describe("as object", function () {
		it("should return as object if called with `new`", function () {
			return runner.confirmBlock("typeof new Number(1) == 'object';");
		});
		it("should not strictly equal a number primitive", function () {
			return runner.confirmBlock("!(1 === new Number(1));");
		});
		it("should implicitly equal a number primitive", function () {
			return runner.confirmBlock("1 == new Number(1);");
		});
	});

	describe("when converting", function () {
		it("should create number when called as function", function () {
			return runner.confirmBlock("Number(5)===5");
		});

		it("should use toString if valueOf does not return number", function () {
			runner.confirmBlock("var __obj = {toString: function() {return '1'}, valueOf: function() {return new Object();}};Number(__obj)===1;");
		});

		it("should convert to string when calling toString", function () {
			return runner.confirmBlock("(5).toString()==='5';");
		});
	});
});

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Type: Object", function () {
	it("should show `typeof` as 'object'", function (done) {
		runner.confirmBlock("typeof {}=='object';", done);
	});

	it("should be able to be created from object literal", function (done) {
		runner.confirmBlock("var a = {};typeof a == 'object';", done);
	});

	it("should have properties assigned in literal", function (done) {
		runner.confirmBlock("var a = { foo: 1 };a.foo==1;", done);
	});

	it("should be able to reference property via bracket notation", function (done) {
		runner.confirmBlock("var a = { foo: 1 };\na['foo'] ==1;", done);
	});

	it("should show `hasOwnProperty` as true for property", function (done) {
		runner.confirmBlock("var a = { foo: 1 };\na.hasOwnProperty('foo');", done);
	});

	it("should show `typeof` undefined as 'undefined'", function (done) {
		runner.confirmBlock("typeof undefined == 'undefined';", done);
	});

	describe("when deleting property", function () {
		it("should be able to delete a property", function (done) {
			runner.confirmBlock("var a = { foo: 1 }; delete a.foo; a.foo === undefined;", done);
		});

		it("should be able to delete a property using bracket notation", function (done) {
			runner.confirmBlock("var a = { foo: 1 }; delete a['foo']; a.foo===undefined;", done);
		});
	});

	describe("Object.freeze", function () {
		it("should show isFrozen as false if not frozen", function (done) {
			runner.confirmBlock("!Object.isFrozen({});", done);
		});

		it("should show isFrozen as true if it has been frozen", function (done) {
			runner.confirmBlock("var a = {};Object.freeze(a);Object.isFrozen(a);", done);
		});

		it("should indicate that the object is not extensible", function (done) {
			runner.confirmBlock("var a = {};Object.freeze(a);!Object.isExtensible(a)", done);
		});

		it("should return the object", function (done) {
			runner.confirmBlock("var a = {};a === Object.freeze(a);", done);
		});

		it("should not allow property to be altered", function (done) {
			runner.confirmBlock("var a = { foo: 'bar' };Object.freeze(a);a.foo = 'baz';a.foo=='bar';", done);
		});

		it("should not allow property to be removed", function (done) {
			runner.confirmBlock("var a = { foo: 'bar' };Object.freeze(a);delete a.foo;a.foo=='bar';", done);
		});
	});

	describe("Object.preventExtensions", function () {
		it("Object.preventExtensions returns the object being made non-extensible.", function (done) {
			runner.confirmBlock("var obj = {};var obj2 = Object.preventExtensions(obj);obj === obj2;", done);
		});

		it("Objects are extensible by default.", function (done) {
			runner.confirmBlock("var empty = {};Object.isExtensible(empty);", done);
		});

		it("An object can be made not extensible", function (done) {
			runner.confirmBlock("var empty = {};Object.preventExtensions(empty);Object.isExtensible(empty)===false;", done);
		});

		it("Should not allow new properties to be added after prevent extensions have been applied", function (done) {
			runner.confirmBlock("var obj = {};Object.preventExtensions(obj);obj.foo = 'bar';obj.foo === undefined;", done);
		});
	});

	describe("Object.seal", function () {
		it("should return the object being modified", function (done) {
			runner.confirmBlock("var obj1={};var obj2=Object.seal(obj1);obj1===obj2;", done);
		});

		it("should show isSealed when object is sealed", function (done) {
			runner.confirmBlock("var obj = {};Object.seal(obj);Object.isSealed(obj);", done);
		});

		it("should not show isSealed for unsealed object", function (done) {
			runner.confirmBlock("Object.isSealed({})===false;", done);
		});

		it("should not add new properties to object", function (done) {
			runner.confirmBlock("var obj={};Object.seal(obj);obj.foo='bar';!('foo' in obj);", done);
		});

		it("should allow values to be changed on existing properties", function (done) {
			runner.confirmBlock("var obj={foo:'bar'};Object.seal(obj);obj.foo='baz';obj.foo=='baz';", done);
		});

		it("should not allow properties to be deleted", function (done) {
			runner.confirmBlock("var obj={foo:'bar'};Object.seal(obj);delete obj.foo;obj.hasOwnProperty('foo');", done);
		});
	});

	describe("Object.keys", function () {
		it("should return an array of the objects enumerable properties", function (done) {
			runner.confirmBlock("var a=Object.keys({a:1,b:2,c:3});a[0]=='a'&&a[1]=='b'&&a[2]=='c';", done);
		});
	});

	describe("Object.getOwnPropertyNames", function () {
		it("should return an array", function (done) {
			runner.confirmBlock("Array.isArray(Object.getOwnPropertyNames({}));", done);
		});

		it("should return the properties within an object", function (done) {
			runner.confirmBlock("Object.getOwnPropertyNames({foo:1,bar:2}).sort().join()=='bar,foo';", done);
		});

		it("should return expected properties for an array", function (done) {
			runner.confirmBlock("Object.getOwnPropertyNames([1,2,3]).sort().join()=='0,1,2,length';", done);
		});

		it("should throw a TypeError for primitives", function (done) {
			runner.confirmError("Object.getOwnPropertyNames('foo');", TypeError, done);
		});
	});

	describe("Object.defineProperty", function () {
		it("should add the property to the object", function (done) {
			runner.confirmBlock("var a = {}; Object.defineProperty(a, 'foo', { value: 42 }); 'foo' in a;", done);
		});

		it("should set the value if provided", function (done) {
			runner.confirmBlock("var a = {}; Object.defineProperty(a, 'foo', { value: 42 }); a.foo==42;", done);
		});

		it("should allow getter to be defined", function (done) {
			runner.confirmBlock("var a = {}; Object.defineProperty(a, 'foo', { get: function() { return 42; } });a.foo==42;", done);
		});

		it("should allow a setter to be defined", function (done) {
			runner.confirmBlock("var a = {}, realValue = 1; Object.defineProperty(a, 'foo', { get: function () { return realValue; }, set: function (value) { realValue = value * 2; } });a.foo = 21;a.foo==42;", done);
		});

		it("should use the correct context for the getter/setter", function (done) {
			runner.confirmBlock("var a = {foo:true};Object.defineProperty(a, 'bar', { get: function () { return this.foo; } });a.bar==true;", done);
		});
	});

	describe("Object.prototype.toString", function () {
		it("should return expected value", function (done) {
			runner.confirmBlock("({}).toString()=='[object Object]';", done);
		});
	});

	describe("Object.getPrototypeOf", function () {
		it("should return the expected prototype", function (done) {
			runner.confirmBlock("Object.getPrototypeOf({}) === Object.prototype;", done);
		});
	});

	describe("Object.prototype.propertyIsEnumerable", function () {
		it("should return true if the property is enumerable", function (done) {
			runner.confirmBlock("var a={foo:1};a.propertyIsEnumerable('foo');", done);
		});

		it("should return false if the property is not enumerable", function (done) {
			runner.confirmBlock("var a={};Object.defineProperty(a,'foo',{enumerable:false});a.propertyIsEnumerable('foo')===false;", done);
		});

		it("should be callable on a function", function (done) {
			runner.confirmBlock("Object.propertyIsEnumerable('prototype')===false;", done);
		});
	});
});

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Type: RegExp", function () {
	it("should evaluate as typeof object", function () {
		runner.confirmBlock("typeof /a/ == 'object';");
	});

	describe("RegExp.prototype.test", function () {
		it("should return true when the string matches", function () {
			runner.confirmBlock("/a/.test('abc');");
		});

		it("should return false when the string does not match", function () {
			runner.confirmBlock("/a/.test('xyz')===false;");
		});
	});

	describe("RegExp.prototype.exec", function () {
		it("should return an array if matches", function () {
			runner.confirmBlock("Array.isArray(/a/.exec('abc'));");
		});

		it("should return a null if no matches", function () {
			runner.confirmBlock("/a/.exec('xyz')===null;");
		});

		it("should have the matches in the array", function () {
			var re = /quick\s(brown).+?(jumps)/ig;
			var expected = re.exec("The Quick Brown Fox Jumps Over The Lazy Dog");

			var actual = runner.runBlock("(/quick\\s(brown).+?(jumps)/ig).exec('The Quick Brown Fox Jumps Over The Lazy Dog')").toNative();
			for (var i = 0, ln = expected.length; i < ln; i++) {
				expect(actual[i]).to.equal(expected[i]);
			}
			expect(actual.index).to.equal(expected.index);
			expect(actual.input).to.equal(expected.input);
		});

		it("should update the lastIndex when a match is made", function () {
			var re = /quick\s(brown).+?(jumps)/ig;
			re.exec("The Quick Brown Fox Jumps Over The Lazy Dog");

			runner.confirmBlock("var re = /quick\\s(brown).+?(jumps)/ig;re.exec('The Quick Brown Fox Jumps Over The Lazy Dog');re.lastIndex===" + re.lastIndex + ";");
		});
	});
});

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;
var wrapArgs = __webpack_require__(62).wrapArgs;

describe("Type: String", function () {
	[{ fn: "charAt", args: [1] }, { fn: "charAt", args: [99] }, { fn: "charCodeAt", args: [1] }, { fn: "concat", args: ["bar"] }, { fn: "concat", args: ["bar", "baz"] }, { fn: "indexOf", args: ["Foo"] }, { fn: "indexOf", args: ["Foo", 0] }, { fn: "indexOf", args: ["b"] }, { fn: "indexOf", args: ["b", 1] }, { fn: "indexOf", args: ["", 10] }, { fn: "lastIndexOf", args: ["o"] }, { fn: "lastIndexOf", args: ["o", 2] }, { fn: "lastIndexOf", args: ["b"] }, { fn: "localeCompare", args: ["Foo"] }, { fn: "localeCompare", args: ["foo"] }, { fn: "localeCompare", args: ["bar"] },

	//{source: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", fn: "match", args: [/[A-E]/gi]},
	//{source: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", fn: "match", args: [/[0-9]/gi]},

	//{source: "Apples are round, and apples are juicy.", fn: "replace", args: [/apples/gi, "oranges"]},
	// {source: "ApplesAreRoundAndApplesAreJuicy", fn: "replace", args: [/[A-Z]/g, (match, p1) => " " + p1]},

	{ source: "The morning is upon us.", fn: "search", args: [/morn/] }, { source: "The morning is upon us.", fn: "search", args: [/[0-9]/] }, { source: "The morning is upon us.", fn: "slice", args: [4, -2] }, { source: "The morning is upon us.", fn: "slice", args: [-3] }, { source: "The morning is upon us.", fn: "slice", args: [-3, -1] }, { source: "The morning is upon us.", fn: "slice", args: [0, -1] }, { source: "Oh brave new world that has such people in it.", fn: "split", args: [" "] }, { source: "Oh brave new world that has such people in it.", fn: "split", args: [] }, { source: "Hello World. How are you doing?", fn: "split", args: [" ", 3] }, { source: "Hello World. How are you doing?", fn: "split", args: [/\s/g] }, { source: "abcdefghij", fn: "substr", args: [1, 2] }, { source: "abcdefghij", fn: "substr", args: [-3, 2] }, { source: "abcdefghij", fn: "substr", args: [-3] }, { source: "abcdefghij", fn: "substr", args: [-20, 2] }, { source: "abcdefghij", fn: "substr", args: [20, 2] }, { source: "abcdefghij", fn: "substring", args: [0, 3] }, { source: "abcdefghij", fn: "substring", args: [3, 0] }, { source: "abcdefghij", fn: "substring", args: [4, 7] }, { source: "abcdefghij", fn: "substring", args: [7, 4] }, { source: "ABCD", fn: "toLocaleLowerCase", args: [] }, { source: "abcd", fn: "toLocaleUpperCase", args: [] }, { source: "ABCD", fn: "toLowerCase", args: [] }, { source: "abcd", fn: "toUpperCase", args: [] }, { fn: "toString", args: [] }, { source: "    foo     ", fn: "trim", args: [] }, { source: "foo    ", fn: "trim", args: [] }, { fn: "valueOf", args: [] }].forEach(function (testCase) {
		it("String.prototype." + testCase.fn + ": should return expected results with args: " + wrapArgs(testCase.args), function () {
			var source = testCase.source || "Foo";
			var expected = source[testCase.fn].apply(source, testCase.args);
			var code = "'" + source + "'." + testCase.fn + "(" + wrapArgs(testCase.args) + ");";

			var result = runner.runBlock(code);

			if (Array.isArray(expected)) {
				expect(result.toNative().length).to.equal(expected.length);
				expected.forEach(function (value, index) {
					expect(result.toNative()[index]).to.equal(value);
				});
			} else {
				expect(result.toNative()).to.equal(expected);
			}
		});
	});

	describe("String.fromCharCode", function () {
		it("should return expected value", function () {
			return runner.confirmBlock("String.fromCharCode(65, 66, 67)=='ABC';");
		});
	});

	describe("String.prototype.length", function () {
		it("should return the length of the string.", function () {
			return runner.confirmBlock("'foo'.length==3;");
		});
		it("should ignore when length is set", function () {
			return runner.confirmBlock("var a = 'foo';a.length = 2;a.length==3;");
		});
	});

	describe("When using bracket notation", function () {
		it("should return character at that position", function () {
			return runner.confirmBlock("'foo'[1] == 'o';");
		});
		it("should return undefined if position is not in array", function () {
			return runner.confirmBlock("'foo'[99] === undefined;");
		});
		it("should not allow character to be replaced by position", function () {
			return runner.confirmBlock("var a = 'foo'; a[1] = 'f';a === 'foo';");
		});
	});

	describe("When converting", function () {
		it("should use overridden `toString` if set.", function () {
			runner.confirmBlock("var a = {toString:function() { return 'foo'; } };String(a) == 'foo';");
		});

		it("should throw a type error if overridden `toString` returns an object", function () {
			runner.confirmError("var a = {toString:function() { return {}; } };String(a);", TypeError);
		});
	});

	describe("as object", function () {
		it("should show typeof `object` when creating use `new`", function () {
			return runner.confirmBlock("typeof new String('foo') == 'object';");
		});
		it("should not strictly equal a primitive string", function () {
			return runner.confirmBlock("new String('foo') !== 'foo';");
		});
		it("should implicitly equal a primitive string", function () {
			return runner.confirmBlock("new String('foo') == 'foo';");
		});
	});
});

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Unary Expressions", function () {
	describe("typeof operator", function () {
		it("should return `undefined` for undefined variable", function () {
			runner.confirmBlock("typeof a === 'undefined';");
		});

		it("should return `undefined` for undefined property", function () {
			runner.confirmBlock("var a = {};typeof a.foo=='undefined';");
		});
	});

	describe("- operator", function () {
		it("should negate value", function () {
			runner.confirmBlock("-(2)===-2;");
		});
	});

	describe("+ operator", function () {
		it("should convert value to number", function () {
			runner.confirmBlock("+(2)===2;");
		});
	});

	describe("! operator", function () {
		it("should convert value to a boolean", function () {
			runner.confirmBlock("typeof(!{})==='boolean';");
		});

		it("should convert a primitive wrapper object to appropriate boolean", function () {
			runner.confirmBlock("!(new String())===false");
		});

		it("should negate a boolean value", function () {
			runner.confirmBlock("!false");
		});
	});

	describe("delete operator", function () {
		it("should return true for non-reference", function () {
			runner.confirmBlock("delete 42;");
		});

		it("should return true for non-existant variable", function () {
			runner.confirmBlock("delete a;");
		});

		it("should return false when deleting non-configurable property", function () {
			runner.confirmBlock("delete NaN===false;");
		});

		it("should not delete a variable", function () {
			runner.confirmBlock("(function() { var a = [];var d = delete a; return d === false && Array.isArray(a); })()");
		});

		it("should throw a reference error if object doesn't exists", function () {
			runner.confirmError("delete o.a;", ReferenceError);
		});
	});
});

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var runner = __webpack_require__(62).es5;

describe("Update Expressions", function () {
	describe("++ operator", function () {
		it("should increment a value", function (done) {
			runner.confirmBlock("var a = 0;a++;a==1;", done);
		});

		it("should be NaN for undefined", function (done) {
			runner.confirmBlock("var a;isNaN(++a);", done);
		});

		it("should add the property to an object if it doesn't exist", function (done) {
			runner.confirmBlock("var a = {};a.foo++;'foo' in a;", done);
		});
	});

	describe("-- operator", function () {
		it("should decrement a value", function (done) {
			runner.confirmBlock("var a = 0;a--;a==-1;", done);
		});
	});
});

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var es5 = __webpack_require__(62).es5;
var es6 = __webpack_require__(62).es6;

describe("Variables", function () {
	describe("with `var`", function () {
		it("should assign a variable to scope", function () {
			return es5.confirmBlock("var a = 1;a==1;");
		});
		it("should be unassigned for a variable that is not initialized", function () {
			return es5.confirmBlock("var a;a===undefined;");
		});
		it("should not add a property to an object during a check", function () {
			return es5.confirmBlock("var a = {};if (a.notexist !== undefined) {}\n!('notexist' in a);");
		});
		it("should hoist variables", function () {
			return es5.confirmBlock("(function () {return a===undefined;var a=1;})()");
		});
	});

	describe("with `const`", function () {
		it("should declare the variable", function () {
			return es6.confirmBlock("const a=true;a;");
		});
		it("should keep value if reassigned", function () {
			return es6.confirmBlock("const a=1;a=2;a===1;");
		});

		it("should throw TypeError on reasignment in strict mode", function () {
			return es6.confirmError("'use strict';const a=1;a=2;", TypeError);
		});
	});

	describe("with `let`", function () {
		it("should declare the variable", function () {
			return es6.confirmBlock("let a=1;a===1;");
		});
		it("should not allow let variables to be accessed before defined", function () {
			return es6.confirmError("(function () {return a;let a=1;})()", ReferenceError);
		});
	});
});

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _testRunner = __webpack_require__(62);

describe("WithStatement", function () {
	it("should use the object in the scope", function (done) {
		_testRunner.es5.confirmBlock("var o={foo:true}, result;with(o){result = foo}\nresult==true;", done);
	});
});

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* globals mochaPhantomJS: true, window: true */
// eslint-disable-next-line prefer-arrow-callback
process.nextTick(function tick() {
  delete __webpack_require__.c[module.i];
  if (typeof window !== 'undefined' && window.mochaPhantomJS) {
    mochaPhantomJS.run();
  } else {
    mocha.run();
  }
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(14)))

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(2);
if(typeof window !== 'undefined' && window.initMochaPhantomJS) { window.initMochaPhantomJS(); }
mocha.setup({"ui":"bdd"});
__webpack_require__(323)
__webpack_require__(321);
if(false) {}

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {

var fs = __webpack_require__(55);
var path = __webpack_require__(13);
var dir = path.join(__dirname, '..', 'contrib', 'test-suites', 'jerry');
var expect = __webpack_require__(15).expect;

describe('Jerry Tests', function () {
	if (fs.existsSync && !fs.existsSync(dir)) return;
	var files;
	if (fs.readdirSync) files = fs.readdirSync(dir);else files = __webpack_require__(324);

	for (var i = 0; i < files.length; ++i) {
		var file = files[i];
		if (!/.js$/.test(file)) continue;

		if (/assdfadsfd/.test(file)) {} //Whitelist
		else if (/date|^array\.|array-prototype-(push|slice|splice|tolocal)|string-prototype-(match|replace|split)|-with-blocks|object-prototype-(ispro|propertyis|tolocal)|number-prototype|json|global-|function-construct/.test(file) || /builtin-cons|object_|object-(get-own-property-descriptor|literal-2|define|getprototypeof)|eval|compact-profile|regexp-simple|label|regression-test-issue-(122|164|212|245|285|316|566|642|798|736)/.test(file)) {
				xit(file, function () {});
				continue;
			}

		(function (file) {

			var Engine = __webpack_require__(63);
			var src;
			if (fs.readFileSync) src = fs.readFileSync(path.join(dir, file), 'utf8');else src = __webpack_require__(325)("./" + file.replace(/\.js$/, '') + ".js");

			it(file, function () {
				//console.log("\n");
				//console.log(file);
				//this.timeout(5000);
				var engine = new Engine({ strict: false, executionLimit: 100000 });
				engine.evalSync(src);
				expect(true).to.be.true;
			});
		})(files[i]);
	}
});
/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),
/* 324 */
/***/ (function(module, exports) {

module.exports = ["LICENSE","N.compact-profile-error.js","and-or.js","arguments.js","arithmetics-2.js","arithmetics-bignums.js","arithmetics.js","array-prototype-concat.js","array-prototype-every.js","array-prototype-filter.js","array-prototype-foreach.js","array-prototype-indexof.js","array-prototype-join.js","array-prototype-lastindexof.js","array-prototype-map.js","array-prototype-pop.js","array-prototype-push.js","array-prototype-reduce-right.js","array-prototype-reduce.js","array-prototype-reverse.js","array-prototype-shift.js","array-prototype-slice.js","array-prototype-some.js","array-prototype-sort.js","array-prototype-splice.js","array-prototype-tolocalestring.js","array-prototype-tostring.js","array-prototype-unshift.js","array.js","assignments.js","auto.list","bitwise-logic.js","break-continue-nested-to-try-with-blocks.js","builtin-constructor-class.js","date-annexb.js","date-construct.js","date-getters.js","date-parse.js","date-setters.js","date-tostring.js","date-utc.js","delete.js","empty-varg.js","equality.js","error.js","escape-sequences.js","eval.js","fail","for-in.js","for.js","func-decl.js","function-args.js","function-construct.js","function-prototype-apply.js","function-prototype-bind.js","function-return.js","function-scopes.js","function.js","function.prototype.js","gc.js","get-value.js","global-escaping.js","global-parsefloat.js","global-parseint.js","global-uri-coding.js","global.js","hash.js","if-else.js","insert-semicolon.js","json-parse.js","json-stringify.js","labelled-statements.js","logical.js","math-abs.js","math-exp.js","math-log.js","math-max.js","math-min.js","math-pow.js","math-round.js","math-trig.js","nested-function.js","new-line-in-literal.js","number-prototype-to-exponential.js","number-prototype-to-fixed.js","number-prototype-to-precision.js","number-prototype-to-string.js","object-create.js","object-define-properties.js","object-defineproperty.js","object-get-own-property-descriptor.js","object-get-own-property-names.js","object-getprototypeof.js","object-is-extensible.js","object-keys.js","object-literal-2.js","object-literal.js","object-prototype-hasownproperty.js","object-prototype-isprototypeof.js","object-prototype-propertyisenumerable.js","object-prototype-tolocalestring.js","object_freeze.js","object_seal.js","octal.js","regexp-alternatives.js","regexp-assertions.js","regexp-backreference.js","regexp-capture-groups.js","regexp-character-class.js","regexp-construct.js","regexp-literal.js","regexp-non-capture-groups.js","regexp-routines.js","regexp-simple-atom-and-iterations.js","regression-test-issue-112.js","regression-test-issue-113.js","regression-test-issue-114.js","regression-test-issue-115.js","regression-test-issue-116.js","regression-test-issue-117.js","regression-test-issue-121.js","regression-test-issue-122.js","regression-test-issue-128.js","regression-test-issue-129.js","regression-test-issue-130.js","regression-test-issue-132.js","regression-test-issue-156.js","regression-test-issue-164.js","regression-test-issue-195.js","regression-test-issue-212.js","regression-test-issue-245.js","regression-test-issue-255.js","regression-test-issue-257.js","regression-test-issue-260.js","regression-test-issue-261.js","regression-test-issue-262.js","regression-test-issue-263.js","regression-test-issue-264.js","regression-test-issue-265.js","regression-test-issue-266.js","regression-test-issue-267.js","regression-test-issue-274.js","regression-test-issue-276.js","regression-test-issue-279.js","regression-test-issue-280.js","regression-test-issue-281.js","regression-test-issue-285.js","regression-test-issue-312.js","regression-test-issue-316.js","regression-test-issue-339.js","regression-test-issue-340.js","regression-test-issue-341.js","regression-test-issue-359.js","regression-test-issue-381.js","regression-test-issue-429.js","regression-test-issue-440.js","regression-test-issue-453.js","regression-test-issue-541.js","regression-test-issue-563.js","regression-test-issue-566.js","regression-test-issue-612.js","regression-test-issue-613.js","regression-test-issue-614.js","regression-test-issue-639.js","regression-test-issue-640.js","regression-test-issue-642.js","regression-test-issue-644.js","regression-test-issue-646.js","regression-test-issue-652.js","regression-test-issue-653.js","regression-test-issue-654.js","regression-test-issue-655.js","regression-test-issue-667.js","regression-test-issue-669.js","regression-test-issue-686.js","regression-test-issue-689.js","regression-test-issue-703.js","regression-test-issue-725.js","regression-test-issue-736.js","regression-test-issue-737.js","regression-test-issue-741.js","regression-test-issue-745.js","regression-test-issue-798.js","regression-test-issues-43-183.js","relational.js","shift.js","sqrt.js","strict.js","string-prototype-charat.js","string-prototype-charcodeat.js","string-prototype-concat.js","string-prototype-indexof.js","string-prototype-lastindexof.js","string-prototype-localecompare.js","string-prototype-match.js","string-prototype-replace.js","string-prototype-search.js","string-prototype-slice.js","string-prototype-split.js","string-prototype-substr.js","string-prototype-substring.js","string-prototype-trim.js","string-prototype.js","string-surrogates-concat.js","string-upper-lower-case-conversion.js","string.js","switch-case.js","test-new-string.js","this-arg.js","try-catch-finally.js","typeof.js","unary-plus-minus.js","var-decl.js","variables.js","zero-character.js"]

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./N.compact-profile-error.js": 326,
	"./and-or.js": 327,
	"./arguments.js": 328,
	"./arithmetics-2.js": 329,
	"./arithmetics-bignums.js": 330,
	"./arithmetics.js": 331,
	"./array-prototype-concat.js": 332,
	"./array-prototype-every.js": 333,
	"./array-prototype-filter.js": 334,
	"./array-prototype-foreach.js": 335,
	"./array-prototype-indexof.js": 336,
	"./array-prototype-join.js": 337,
	"./array-prototype-lastindexof.js": 338,
	"./array-prototype-map.js": 339,
	"./array-prototype-pop.js": 340,
	"./array-prototype-push.js": 341,
	"./array-prototype-reduce-right.js": 342,
	"./array-prototype-reduce.js": 343,
	"./array-prototype-reverse.js": 344,
	"./array-prototype-shift.js": 345,
	"./array-prototype-slice.js": 346,
	"./array-prototype-some.js": 347,
	"./array-prototype-sort.js": 348,
	"./array-prototype-splice.js": 349,
	"./array-prototype-tolocalestring.js": 350,
	"./array-prototype-tostring.js": 351,
	"./array-prototype-unshift.js": 352,
	"./array.js": 353,
	"./assignments.js": 354,
	"./bitwise-logic.js": 355,
	"./break-continue-nested-to-try-with-blocks.js": 356,
	"./builtin-constructor-class.js": 357,
	"./date-annexb.js": 358,
	"./date-construct.js": 359,
	"./date-getters.js": 360,
	"./date-parse.js": 361,
	"./date-setters.js": 362,
	"./date-tostring.js": 363,
	"./date-utc.js": 364,
	"./delete.js": 365,
	"./empty-varg.js": 366,
	"./equality.js": 367,
	"./error.js": 368,
	"./escape-sequences.js": 369,
	"./eval.js": 370,
	"./fail/1/arguments-assignment-strict.js": 371,
	"./fail/1/arguments-catch-strict.js": 372,
	"./fail/1/arguments-in-prop-set-param-list-strict.js": 373,
	"./fail/1/arguments-in-var-decl-strict.js": 374,
	"./fail/1/arguments-param-strict.js": 375,
	"./fail/1/arguments-postfix-strict.js": 376,
	"./fail/1/arguments-prefix-strict.js": 377,
	"./fail/1/delete-strict.js": 378,
	"./fail/1/escape-sequences-invalid-hex.js": 379,
	"./fail/1/escape-sequences-invalid-unicode.js": 380,
	"./fail/1/escape-sequences-invalid-variable.js": 381,
	"./fail/1/eval-assignment-strict.js": 382,
	"./fail/1/eval-catch-strict.js": 383,
	"./fail/1/eval-in-prop-set-param-list-strict.js": 384,
	"./fail/1/eval-in-var-decl-strict.js": 385,
	"./fail/1/eval-param-strict.js": 386,
	"./fail/1/eval-postfix-strict.js": 387,
	"./fail/1/eval-prefix-strict.js": 388,
	"./fail/1/func-expr-strict.js": 389,
	"./fail/1/labelled-statements-break-across-function.js": 390,
	"./fail/1/labelled-statements-duplicate-label.js": 391,
	"./fail/1/labelled-statements-no-label.js": 392,
	"./fail/1/let-strict.js": 393,
	"./fail/1/object-get-data.js": 394,
	"./fail/1/object-get-get.js": 395,
	"./fail/1/object-several-prop-names-strict.js": 396,
	"./fail/1/octal-strict.js": 397,
	"./fail/1/param-duplication-strict.js": 398,
	"./fail/1/with-strict.js": 399,
	"./for-in.js": 400,
	"./for.js": 401,
	"./func-decl.js": 402,
	"./function-args.js": 403,
	"./function-construct.js": 404,
	"./function-prototype-apply.js": 405,
	"./function-prototype-bind.js": 406,
	"./function-return.js": 407,
	"./function-scopes.js": 408,
	"./function.js": 409,
	"./function.prototype.js": 410,
	"./gc.js": 411,
	"./get-value.js": 412,
	"./global-escaping.js": 413,
	"./global-parsefloat.js": 414,
	"./global-parseint.js": 415,
	"./global-uri-coding.js": 416,
	"./global.js": 417,
	"./hash.js": 418,
	"./if-else.js": 419,
	"./insert-semicolon.js": 420,
	"./json-parse.js": 421,
	"./json-stringify.js": 422,
	"./labelled-statements.js": 423,
	"./logical.js": 424,
	"./math-abs.js": 425,
	"./math-exp.js": 426,
	"./math-log.js": 427,
	"./math-max.js": 428,
	"./math-min.js": 429,
	"./math-pow.js": 430,
	"./math-round.js": 431,
	"./math-trig.js": 432,
	"./nested-function.js": 433,
	"./new-line-in-literal.js": 434,
	"./number-prototype-to-exponential.js": 435,
	"./number-prototype-to-fixed.js": 436,
	"./number-prototype-to-precision.js": 437,
	"./number-prototype-to-string.js": 438,
	"./object-create.js": 439,
	"./object-define-properties.js": 440,
	"./object-defineproperty.js": 441,
	"./object-get-own-property-descriptor.js": 442,
	"./object-get-own-property-names.js": 443,
	"./object-getprototypeof.js": 444,
	"./object-is-extensible.js": 445,
	"./object-keys.js": 446,
	"./object-literal-2.js": 447,
	"./object-literal.js": 448,
	"./object-prototype-hasownproperty.js": 449,
	"./object-prototype-isprototypeof.js": 450,
	"./object-prototype-propertyisenumerable.js": 451,
	"./object-prototype-tolocalestring.js": 452,
	"./object_freeze.js": 453,
	"./object_seal.js": 454,
	"./octal.js": 455,
	"./regexp-alternatives.js": 456,
	"./regexp-assertions.js": 457,
	"./regexp-backreference.js": 458,
	"./regexp-capture-groups.js": 459,
	"./regexp-character-class.js": 460,
	"./regexp-construct.js": 461,
	"./regexp-literal.js": 462,
	"./regexp-non-capture-groups.js": 463,
	"./regexp-routines.js": 464,
	"./regexp-simple-atom-and-iterations.js": 465,
	"./regression-test-issue-112.js": 466,
	"./regression-test-issue-113.js": 467,
	"./regression-test-issue-114.js": 468,
	"./regression-test-issue-115.js": 469,
	"./regression-test-issue-116.js": 470,
	"./regression-test-issue-117.js": 471,
	"./regression-test-issue-121.js": 472,
	"./regression-test-issue-122.js": 473,
	"./regression-test-issue-128.js": 474,
	"./regression-test-issue-129.js": 475,
	"./regression-test-issue-130.js": 476,
	"./regression-test-issue-132.js": 477,
	"./regression-test-issue-156.js": 478,
	"./regression-test-issue-164.js": 479,
	"./regression-test-issue-195.js": 480,
	"./regression-test-issue-212.js": 481,
	"./regression-test-issue-245.js": 482,
	"./regression-test-issue-255.js": 483,
	"./regression-test-issue-257.js": 484,
	"./regression-test-issue-260.js": 485,
	"./regression-test-issue-261.js": 486,
	"./regression-test-issue-262.js": 487,
	"./regression-test-issue-263.js": 488,
	"./regression-test-issue-264.js": 489,
	"./regression-test-issue-265.js": 490,
	"./regression-test-issue-266.js": 491,
	"./regression-test-issue-267.js": 492,
	"./regression-test-issue-274.js": 493,
	"./regression-test-issue-276.js": 494,
	"./regression-test-issue-279.js": 495,
	"./regression-test-issue-280.js": 496,
	"./regression-test-issue-281.js": 497,
	"./regression-test-issue-285.js": 498,
	"./regression-test-issue-312.js": 499,
	"./regression-test-issue-316.js": 500,
	"./regression-test-issue-339.js": 501,
	"./regression-test-issue-340.js": 502,
	"./regression-test-issue-341.js": 503,
	"./regression-test-issue-359.js": 504,
	"./regression-test-issue-381.js": 505,
	"./regression-test-issue-429.js": 506,
	"./regression-test-issue-440.js": 507,
	"./regression-test-issue-453.js": 508,
	"./regression-test-issue-541.js": 509,
	"./regression-test-issue-563.js": 510,
	"./regression-test-issue-566.js": 511,
	"./regression-test-issue-612.js": 512,
	"./regression-test-issue-613.js": 513,
	"./regression-test-issue-614.js": 514,
	"./regression-test-issue-639.js": 515,
	"./regression-test-issue-640.js": 516,
	"./regression-test-issue-642.js": 517,
	"./regression-test-issue-644.js": 518,
	"./regression-test-issue-646.js": 519,
	"./regression-test-issue-652.js": 520,
	"./regression-test-issue-653.js": 521,
	"./regression-test-issue-654.js": 522,
	"./regression-test-issue-655.js": 523,
	"./regression-test-issue-667.js": 524,
	"./regression-test-issue-669.js": 525,
	"./regression-test-issue-686.js": 526,
	"./regression-test-issue-689.js": 527,
	"./regression-test-issue-703.js": 528,
	"./regression-test-issue-725.js": 529,
	"./regression-test-issue-736.js": 530,
	"./regression-test-issue-737.js": 531,
	"./regression-test-issue-741.js": 532,
	"./regression-test-issue-745.js": 533,
	"./regression-test-issue-798.js": 534,
	"./regression-test-issues-43-183.js": 535,
	"./relational.js": 536,
	"./shift.js": 537,
	"./sqrt.js": 538,
	"./strict.js": 539,
	"./string-prototype-charat.js": 540,
	"./string-prototype-charcodeat.js": 541,
	"./string-prototype-concat.js": 542,
	"./string-prototype-indexof.js": 543,
	"./string-prototype-lastindexof.js": 544,
	"./string-prototype-localecompare.js": 545,
	"./string-prototype-match.js": 546,
	"./string-prototype-replace.js": 547,
	"./string-prototype-search.js": 548,
	"./string-prototype-slice.js": 549,
	"./string-prototype-split.js": 550,
	"./string-prototype-substr.js": 551,
	"./string-prototype-substring.js": 552,
	"./string-prototype-trim.js": 553,
	"./string-prototype.js": 554,
	"./string-surrogates-concat.js": 555,
	"./string-upper-lower-case-conversion.js": 556,
	"./string.js": 557,
	"./switch-case.js": 558,
	"./test-new-string.js": 559,
	"./this-arg.js": 560,
	"./try-catch-finally.js": 561,
	"./typeof.js": 562,
	"./unary-plus-minus.js": 563,
	"./var-decl.js": 564,
	"./variables.js": 565,
	"./zero-character.js": 566
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 325;

/***/ }),
/* 326 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar catched = false;\n\nfunction f1()\n{\n  var arguments = 1;\n}\n\ntry\n{\n  f1();\n} catch (e)\n{\n  assert (e === CompactProfileError);\n\n  catched = true;\n}\n\nassert(catched);\n\ncatched = false;\n\nfunction f2()\n{\n  var a = arguments;\n}\n\ntry\n{\n  f2();\n} catch (e)\n{\n  assert (e === CompactProfileError);\n\n  catched = true;\n}\n\nassert(catched);\n\ncatched = false;\n\ntry\n{\n  eval('abc');\n} catch (e)\n{\n  assert (e === CompactProfileError);\n\n  catched = true;\n}\n\nassert(catched);\n\ncatched = false;\n\ntry\n{\n  Function('abc');\n} catch (e)\n{\n  assert (e === CompactProfileError);\n\n  catched = true;\n}\n\nassert(catched);\n\ncatched = false;\n\ntry\n{\n  new Function('abc');\n} catch (e)\n{\n  assert (e === CompactProfileError);\n\n  catched = true;\n}\n\nassert(catched);\n\ncatched = false;\n\ntry\n{\n  var a = Date.now();\n} catch (e)\n{\n  assert (e === CompactProfileError);\n\n  catched = true;\n}\n\nassert(catched);\n"

/***/ }),
/* 327 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction fail() {\n  assert (0);\n  return true;\n}\n\nif (false && fail()) {\n  assert (0);\n}\n\nif (true && false && fail()) {\n  assert (0);\n}\n\nif (true || fail()) {\n} else {\n  assert (0);\n}\n\nif (false || true || fail()) {\n} else {\n  assert (0);\n}\n"

/***/ }),
/* 328 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f_arg (arguments)\n{\n  return arguments;\n}\nassert (f_arg (1) === 1);\n\nfunction f (a, b, c)\n{\n  return arguments;\n}\n\nargs = f();\nassert (args[0] === undefined);\n\nargs = f (1, 2, 3, 4, 5);\nassert (args[0] === 1);\nassert (args[1] === 2);\nassert (args[2] === 3);\nassert (args[3] === 4);\nassert (args[4] === 5);\nassert (args[5] === undefined);\n\nassert (args.callee === f);\nassert (typeof args.caller === 'undefined');\n\nfunction g (a, b, c)\n{\n  assert (arguments[0] === 1);\n  assert (arguments[1] === undefined);\n  assert (arguments[2] === undefined);\n\n  a = 'a';\n  b = 'b';\n  c = 'c';\n\n  assert (arguments[0] === 'a');\n  assert (arguments[1] === 'b');\n  assert (arguments[2] === 'c');\n\n  arguments [0] = 1;\n  arguments [1] = 2;\n  arguments [2] = 3;\n\n  assert (a === 1);\n  assert (b === 2);\n  assert (c === 3);\n\n  delete arguments [0];\n  arguments[0] = 'new value';\n  assert (a === 1);\n\n  a = 'a';\n  b = 'b';\n  c = 'c';\n\n  assert (arguments[0] === 'new value');\n  assert (arguments[1] === 'b');\n  assert (arguments[2] === 'c');\n}\n\ng (1);\n\nfn_expr = function (a, b, c)\n{\n  'use strict';\n\n  assert (arguments[0] === 1);\n  assert (arguments[1] === undefined);\n  assert (arguments[2] === undefined);\n\n  a = 'a';\n  b = 'b';\n  c = 'c';\n\n  assert (arguments[0] === 1);\n  assert (arguments[1] === undefined);\n  assert (arguments[2] === undefined);\n\n  arguments [0] = 1;\n  arguments [1] = 'p';\n  arguments [2] = 'q';\n\n  assert (a === 'a');\n  assert (b === 'b');\n  assert (c === 'c');\n\n  delete arguments [0];\n  arguments[0] = 'new value';\n  assert (a === 'a');\n\n  a = 'a';\n  b = 'b';\n  c = 'c';\n\n  assert (arguments[0] === 'new value');\n  assert (arguments[1] === 'p');\n  assert (arguments[2] === 'q');\n\n  function check_type_error_for_property (obj, prop) {\n    try {\n      var v = obj[prop];\n      assert (false);\n    }\n    catch (e) {\n      assert (e instanceof TypeError);\n    }\n  }\n\n  //ROB//check_type_error_for_property (arguments, 'caller');\n  //ROB//check_type_error_for_property (arguments, 'callee');\n}\n\nfn_expr (1);\n\n(function () {\n var a = [arguments];\n})();\n"

/***/ }),
/* 329 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a = 21;\nvar b = 10;\nvar c;\n\nc = a + b;\nassert(c == 31);\n\nc = a - b;\nassert(c == 11);\n\nc = a * b;\nassert(c == 210);\n\nc = a / b;\nassert(c >= 2.1 - 0.000001 && c <= 2.1 + 0.000001);\n\nc = a % b;\nassert(c == 1);\n\nc = a++;\nassert(c == 21);\n\nc = a--;\nassert(c == 22);\n\nvar o = { p : 1 };\n\nassert (++o.p === 2);\nassert (o.p === 2);\nassert (--o.p === 1);\nassert (o.p === 1);\n\ntry {\n  eval ('++ ++ a');\n  assert (false);\n}\ncatch (e) {\n  assert (e instanceof ReferenceError);\n}\n"

/***/ }),
/* 330 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2016 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar big = 2147483646;\n\nbig++;\nassert(big == 2147483647);\n\nbig += 1;\nassert(big == 2147483648); // overflow on 32bit numbers\n\nbig++;\nassert(big == 2147483649); // overflow on 32bit numbers\n\nassert ((1152921504606846976).toString() === \"1152921504606847000\")\n\nassert (1.797693134862315808e+308 === Infinity);\n"

/***/ }),
/* 331 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert((1 + 2) == 3);\nassert((2 + 1) == 3);\nassert((2 + 1) != 4);\n\nassert((7 + 7) == 14);\nassert((7 - 7) == 0);\nassert((7 * 7) == 49);\nassert((7 / 7) == 1);\nassert((7 + 7) == 14);\nassert((7 % 7) == 0);\n\nvar number = 81;\nassert((number + 9) == 90);\nassert((number - 9) == 72);\nassert((number * 10) == 810);\nassert((number / 9) == 9);\nassert((number % 79) == 2);\n\nvar num1 = 1234567, num2 = 1234000;\nassert((num1 % num2) == 567);\n\nassert (1 / (-1 % -1) < 0);\nassert (1 / (-1 % 1) < 0);\nassert (1 / (1 % -1) > 0);\nassert (1 / (1 % 1) > 0);\n\nassert (eval (\"x\\n\\n=\\n\\n6\\n\\n/\\n\\n3\") === 2)\n"

/***/ }),
/* 332 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar array = [\"foo\", [], Infinity, 4]\nvar new_arr = array.concat();\n\nassert(new_arr.length === array.length)\nfor (i = 0; i < array.length; i++) {\n  assert(array[i] === new_arr[i]);\n}\n\nvar obj = { concat : Array.prototype.concat };\nvar arr1 = [\"Apple\", 6, \"Peach\"];\nvar arr2 = [obj, \"Cherry\", \"Grape\"];\n\nvar new_array = obj.concat(arr1);\nassert(new_array.length === 4);\nassert(new_array[0] === obj);\nassert(new_array[1] === \"Apple\");\nassert(new_array[2] === 6);\nassert(new_array[3] === \"Peach\");\n\nvar new_array = arr1.concat(arr2, obj, 1);\n\nassert(new_array.length === 8);\nassert(new_array[0] === \"Apple\");\nassert(new_array[1] === 6);\nassert(new_array[2] === \"Peach\");\nassert(new_array[3] === obj);\nassert(new_array[4] === \"Cherry\");\nassert(new_array[5] === \"Grape\");\nassert(new_array[6] === obj);\nassert(new_array[7] === 1);\n\nvar arr1 = [1,2];\nvar arr2 = [4,5,6,7,8];\nvar arr3 = [,,9,10];\nvar arr4 = [];\nvar expected = [1,2,4,5,6,7,8,,,9,10];\n\nvar result = arr1.concat(arr2, arr3, arr4);\n\nassert(result.length === expected.length)\nfor (i = 0; i < result.length; i++) {\n  assert(result[i] === expected[i]);\n}\n\nvar arr1 = [];\narr1.length = 2;\nvar arr2 = [];\narr2.length = 3;\nassert(arr1.concat(arr2).length === arr1.length + arr2.length);\n\n// Checking behavior when unable to get element\nvar arr = []\nObject.defineProperty(arr, '0', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\narr.length = 1;\n\ntry {\n  arr.concat();\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 333 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar array = [\"foo\", [], Infinity, 4];\n\nfunction f(arg1, arg2, arg3) {\n  assert(arg1 === array[arg2]);\n  assert(arg3 === array);\n  return true;\n}\n\nassert(array.every(f) === true);\n\nfunction g(arg1, arg2, arg3) {\n  if (arg1 === 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvar arr1 = [1, 1, 1, 1, 1, 2];\nassert(arr1.every(g) === false);\n\nvar arr2 = [1, 1, 1, 1, 1, 1];\nassert(arr2.every(g) === true);\n\n// Checking behavior when unable to get length\nvar obj = { every : Array.prototype.every };\nObject.defineProperty(obj, 'length', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.every(f);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to get element\nvar obj = { every : Array.prototype.every, length : 1};\nObject.defineProperty(obj, '0', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.every(f);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 334 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar array = [\"foo\", [], Infinity, 4]\n\nfunction f(arg1, arg2, arg3) {\n  assert(arg1 === array[arg2]);\n  assert(arg3 === array);\n  return true;\n}\n\nvar filtered = array.filter(f);\nassert(filtered.length === array.length);\nfor (i = 0; i < filtered.length; i++) {\n  assert(filtered[i] === array[i]);\n}\n\nvar array = [1, 2, 3, 4, 5, 6, 7, 8];\n\nfunction g (arg1, arg2, arg3) {\n  if (arg2 % 2 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfiltered = array.filter(g)\nassert(filtered.length === 4);\nassert(filtered[0] === 1);\nassert(filtered[1] === 3);\nassert(filtered[2] === 5);\nassert(filtered[3] === 7);\n\nvar arr = [1,2];\nArray.prototype[0] = 3;\nvar newArr = arr.filter(function() { return true; });\ndelete Array.prototype[0];\nassert(newArr.hasOwnProperty(\"0\"));\nassert(newArr[0] === 1);\n\n// Checking behavior when unable to get length\nvar obj = {};\nObject.defineProperty(obj, 'length', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\nobj.filter = Array.prototype.filter;\n\ntry {\n  obj.filter(f);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to get element\nvar obj = {}\nobj.length = 1;\nObject.defineProperty(obj, '0', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\nobj.filter = Array.prototype.filter\n\ntry {\n  obj.filter(f);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 335 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar array = [\"foo\", [], Infinity, 4]\n\nfunction f(arg1, arg2, arg3) {\n  assert(arg1 === array[arg2]);\n  assert(arg3 === array);\n}\n\narray.forEach(f);\n\n// Checking behavior when unable to get length\nvar obj = {};\nObject.defineProperty(obj, 'length', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\nobj.forEach = Array.prototype.forEach;\n\ntry {\n  obj.forEach(f);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to get element\nvar obj = {}\nobj.length = 1;\nObject.defineProperty(obj, '0', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\nobj.forEach = Array.prototype.forEach\n\ntry {\n  obj.forEach(f);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 336 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar obj = {};\nvar array = [\"foo\", 19, \"bar\", obj, \"foo\", 29, \"baz\"];\n\nvar index = array.indexOf(\"foo\");\nassert(index === 0);\nassert(array[index] === \"foo\");\n\nassert(array.indexOf(\"foo\", 1) === 4);\nassert(array.indexOf(\"foo\", 5) === -1);\n\nvar index = array.indexOf(\"baz\");\nassert(index === 6);\nassert(array[index] === \"baz\");\n\nassert(array.indexOf(\"baz\", 7) === -1);\n\nvar index = array.indexOf(obj);\nassert(index === 3);\nassert(array[index] === obj);\n\nassert(array.indexOf(\"foo\", NaN) === 0);\nassert(array.indexOf(\"foo\", Infinity) === -1);\nassert(array.indexOf(\"foo\", -Infinity) === 0);\n\nassert([true].indexOf(true, -0) === 0);\n\n// Checking behavior when length is zero\nvar obj = { indexOf : Array.prototype.indexOf, length : 0 };\nassert(obj.indexOf(\"foo\") === -1);\n\n// Checking behavior when start index >= length\nvar arr = [11, 22, 33, 44];\nassert(arr.indexOf(44, 4) === -1);\n\nvar fromIndex = {\n  toString: function () {\n    return {};\n  },\n\n  valueOf: function () {\n    return {};\n  }\n};\n\ntry {\n  [0, 1].indexOf(1, fromIndex);\n  assert(false);\n} catch (e) {\n  assert(e instanceof TypeError);\n}\n\n// Checking behavior when unable to get length\nvar obj = { indexOf : Array.prototype.indexOf}\nObject.defineProperty(obj, 'length', { 'get' : function () { throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.indexOf(\"bar\");\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to get element\nvar obj = { indexOf : Array.prototype.indexOf, length : 1}\nObject.defineProperty(obj, '0', { 'get' : function () { throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.indexOf(\"bar\");\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 337 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert ([].join() === \"\");\nassert ([1].join() === \"1\");\nassert ([1, 2].join() === \"1,2\");\n\n\nassert ([].join('--') === \"\");\nassert ([1].join(\"--\") === \"1\");\nassert ([1, 2].join('--') === \"1--2\");\n\nassert ([1,2,3].join({toString: function() { return \"--\"; }}) === \"1--2--3\");\n\n\n// Join should use 'length' to as the number of elements int the array.\nvar lst = [1,2,3,4];\nlst.length = 3;\nassert (lst.join() === [1,2,3].join());\n\n// Checking behavior when unable to get length.\nvar obj = {};\nObject.defineProperty(obj, 'length', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\nobj.join = Array.prototype.join;\n\ntry {\n  obj.join();\n  // Should not be reached.\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n\n// Check join argument fail.\ntry {\n  [1,2,3].join({toString: function() { throw new ReferenceError (\"foo\"); }});\n  // Should not be reached.\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n\n// Check single join element fail.\ntry {\n  [1, 2, {toString: function() { throw new ReferenceError (\"foo\"); }}, 4].join();\n  // Should not be reached.\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n\n// Check join on different object.\nvar obj_2 = {};\nobj_2.length = 3;\nobj_2[0] = 1;\nobj_2[1] = 2;\nobj_2[2] = 3;\nobj_2[3] = 4;\n\nobj_2.join = Array.prototype.join;\n\nassert (obj_2.join() === \"1,2,3\");\n"

/***/ }),
/* 338 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar obj = {};\nvar array = [\"foo\", 19, \"bar\", obj, \"foo\", 29, \"baz\"];\n\nvar index = array.lastIndexOf(\"foo\");\nassert(index === 4);\nassert(array[index] === \"foo\");\n\nassert(array.lastIndexOf(\"foo\", 3) === 0);\nassert(array.lastIndexOf(\"foo\", -8) === -1);\n\nvar index = array.lastIndexOf(\"baz\");\nassert(index === 6);\nassert(array[index] === \"baz\");\n\nassert(array.lastIndexOf(\"baz\", -2) === -1);\n\nvar index = array.lastIndexOf(obj);\nassert(index === 3);\nassert(array[index] === obj);\n\nassert(array.lastIndexOf(\"foo\", NaN) === 0);\nassert(array.lastIndexOf(\"foo\", Infinity) === 4);\nassert(array.lastIndexOf(\"foo\", -Infinity) === -1);\n\nvar arr = [];\narr[4294967294] = \"foo\";\nassert(arr.lastIndexOf(\"foo\", -1) === 4294967294)\n\nvar arr = [1,2];\nassert(arr.lastIndexOf(2, undefined) === -1);\nassert(arr.lastIndexOf(2) === 1);\n\n// Checking behavior when unable to get length\nvar obj = { lastIndexOf : Array.prototype.lastIndexOf}\nObject.defineProperty(obj, 'length', { 'get' : function () { throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.lastIndexOf(\"bar\");\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to get element\nvar obj = { lastIndexOf : Array.prototype.lastIndexOf, length : 1}\nObject.defineProperty(obj, '0', { 'get' : function () { throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.lastIndexOf(\"bar\");\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 339 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// helper function - simple implementation\nArray.prototype.equals = function (array) {\n  if (this.length != array.length)\n    return false;\n\n  for (var i = 0; i < this.length; i++) {\n    if (this[i] instanceof Array && array[i] instanceof Array) {\n      if (!this[i].equals(array[i]))\n        return false;\n      }\n      else if (this[i] != array[i]) {\n        return false;\n    }\n  }\n\n  return true;\n}\n\n// check function type\ntry {\n  [0].map(new Object());\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// various checks\nassert ([1, 4, 9].map(Math.sqrt).equals([1, 2, 3]));\n\nassert (isNaN([1, 4, \"X\"].map(Number)[2]));\n\nvar func = function(val, idx) {\n  return val + idx;\n};\n\nassert ([1, 4, 9].map(func).equals([1,5,11]));\n\nassert ([1, \"X\", 10].map(func).equals([1, \"X1\", 12]));\n\nvar arr = [1,2,3];\narr.length = 5;\nassert(arr.map(func).length === arr.length);\n\nvar long_array = [0, 1];\nassert (long_array.map(func).equals([0,2]));\n\nlong_array[100] = 1;\nassert (long_array.map(func).equals([0,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,101]));\n\nvar arr = [1,2];\nArray.prototype[0] = 3;\nvar newArr = arr.map(function(value) { return value; });\ndelete Array.prototype[0];\nassert(newArr.hasOwnProperty(\"0\"));\nassert(newArr[0] === 1);\n\n// check behavior when unable to get length\nvar obj = {};\nObject.defineProperty(obj, 'length', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\nobj.map = Array.prototype.map;\n\ntry {\n  obj.map(func);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// check behavior when unable to get element\nvar obj = {}\nobj.length = 1;\nObject.defineProperty(obj, '0', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\nobj.map = Array.prototype.map\n\ntry {\n  obj.map(func);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// check thisArg\nvar thisArg = {add: 10};\nvar func2 = function(value) {\n  return this.add + value;\n}\nassert([1,2].map(func2, thisArg).equals([11, 12]));\n\n// check passed Object\nvar array_example = [1,2];\nObject.defineProperty(array_example, 'const', { 'get' : function () {return \"CT\";} });\nvar func3 = function(value, idx, thisobj) {\n  return value * idx + thisobj.const;\n}\nassert(array_example.map(func3).equals([\"0CT\", \"2CT\"]));\n"

/***/ }),
/* 340 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar array = [\"foo\", [], Infinity, 4]\nassert(array.length === 4);\n\nassert(array.pop() === 4)\nassert(array.length === 3);\n\nassert(array.pop() === Infinity);\nassert(array.length === 2);\n\nvar a = array.pop()\nassert(a instanceof Array);\nassert(array.length === 1);\n\nassert(array.pop() === \"foo\");\nassert(array.length === 0);\n\nassert(array.pop() === undefined);\nassert(array.length === 0);\n\n// Checking behavior when unable to get length\nvar obj = { pop : Array.prototype.pop };\nObject.defineProperty(obj, 'length', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.pop();\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to set length\nvar obj = { pop : Array.prototype.pop };\nObject.defineProperty(obj, 'length', { 'set' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.pop();\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when no length property defined\nvar obj = { pop : Array.prototype.pop };\nassert(obj.length === undefined)\nassert(obj.pop() === undefined)\nassert(obj.length === 0)\n\n// Checking behavior when unable to get element\nvar obj = { pop : Array.prototype.pop, length : 1 };\nObject.defineProperty(obj, '0', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.pop();\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 341 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar len;\nvar d = [];\nassert (d.length === 0);\nlen = d.push();\nassert (d.length === 0);\nassert (d.length === len);\nlen = d.push(1);\nassert (d.length === 1);\nassert (d.length === len);\nlen = d.push(2);\nassert (d.length === 2);\nassert (d.length === len);\nlen = d.push('a');\nassert (d.length === 3);\nassert (d.length === len);\nlen = d.push('b', 'c', 3);\nassert (d.length == 6);\nassert (d.length === len);\nassert (d[0] === 1);\nassert (d[1] === 2);\nassert (d[2] === 'a');\nassert (d[3] === 'b');\nassert (d[4] === 'c');\nassert (d[5] === 3);\n\nvar a = [];\na.length = 4294967294;\nassert(a.push(\"x\") === 4294967295);\nassert(a.length === 4294967295);\nassert(a[4294967294] === \"x\");\n\ntry {\n  a.push(\"y\");\n  assert(false);\n} catch (e) {\n  assert (e instanceof RangeError);\n}\nassert(a.length === 4294967295)\n\n\nvar o = { length : 4294967294, push : Array.prototype.push };\nassert(o.push(\"x\") === 4294967295);\nassert(o.length === 4294967295);\nassert(o[4294967294] === \"x\");\n\ntry {\n  assert(o.push(\"y\") === 4294967296);\n} catch (e) {\n  assert(false);\n}\nassert(o.length === 4294967296);\nassert(o[4294967295] === \"y\");\n\ntry {\n  assert(o.push(\"z\") === 1);\n} catch (e) {\n  assert(false);\n}\nassert(o.length === 1);\nassert(o[0] === \"z\");\n"

/***/ }),
/* 342 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar func = function(a, b) {\n  return a + b;\n}\n\n// check function type\ntry {\n  [0].reduceRight(new Object());\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// check for init value\ntry {\n  [].reduceRight(func);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n/*\ntry {\n  var arg2;\n  [].reduceRight(func, arg2);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n*/\n\ntry {\n  var a = new Array();\n  a.length = 10;\n  a.reduceRight(func);\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError)\n}\n\n// various checks\nassert([].reduceRight(func, 1) === 1);\n\nassert([0].reduceRight(func) === 0);\n\nassert([0, 1].reduceRight(func) === 1);\n\nassert([0, 1].reduceRight(func, 1) === 2);\n\nassert([0, 1, 2, 3].reduceRight(func, 1) === 7);\n\nassert ([\"A\",\"B\"].reduceRight(func) === \"BA\");\n\nassert ([\"A\",\"B\"].reduceRight(func, \"Init:\") === \"Init:BA\");\n\nassert ([0, 1].reduceRight(func, 3.2) === 4.2);\n\nassert ([0, \"x\", 1].reduceRight(func) === \"1x0\");\n\nassert ([0, \"x\", 1].reduceRight(func, 3.2) === \"4.2x0\");\n\nvar long_array = [0, 1];\nassert (long_array.reduceRight(func,10) === 11);\n\nlong_array[10000] = 1;\nassert (long_array.reduceRight(func,10) === 12);\n\nvar accessed = false;\nfunction callbackfn(prevVal, curVal, idx, obj) {\n    accessed = true;\n    return typeof prevVal === \"undefined\";\n}\n\nvar obj = { 0: 11, length: 1 };\n\nassert (Array.prototype.reduceRight.call(obj, callbackfn, undefined) === true && accessed);\n"

/***/ }),
/* 343 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar func = function(a, b) {\n  return a + b;\n}\n\n// check function type\ntry {\n  [0].reduce(new Object());\n  assert(false);\n}\ncatch(e) {\n  assert(e instanceof TypeError);\n}\n\n// check for init value\ntry {\n  [].reduce(func);\n  assert(false);\n}\ncatch(e) {\n  assert(e instanceof TypeError);\n}\n\n// various checks\nassert ([].reduce(func, 1) === 1);\n\nassert ([0].reduce(func) === 0);\n\nassert ([0, 1].reduce(func) === 1);\n\nassert ([0, 1].reduce(func, 1) === 2);\n\nassert ([0, 1, 2, 3].reduce(func, 1) === 7);\n\nassert ([\"A\",\"B\"].reduce(func) === \"AB\");\n\nassert ([\"A\",\"B\"].reduce(func, \"Init:\") === \"Init:AB\");\n\nassert ([0, 1].reduce(func, 3.2) === 4.2);\n\nassert ([0, \"x\", 1].reduce(func) === \"0x1\");\n\nassert ([0, \"x\", 1].reduce(func, 3.2) === \"3.2x1\");\n\nvar long_array = [0, 1];\nassert (long_array.reduce(func,10) === 11);\n\nlong_array[10000] = 1;\nassert (long_array.reduce(func,10) === 12);\n\nvar accessed = false;\nfunction callbackfn(prevVal, curVal, idx, obj) {\n    accessed = true;\n    return typeof prevVal === \"undefined\";\n}\n\nvar obj = { 0: 11, length: 1 };\n\nassert (Array.prototype.reduce.call(obj, callbackfn, undefined) === true && accessed);\n"

/***/ }),
/* 344 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar array = [4, 3, 2, 1, 0]\n\narray.reverse();\n\nfor (i = 0; i < array.length; i++) {\n  assert(array[i] === i);\n}\n\n// Checking behavior when unable to get length\nvar obj = { reverse : Array.prototype.reverse };\nObject.defineProperty(obj, 'length', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.reverse();\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to get element\nvar obj = { reverse : Array.prototype.reverse, length : 3 };\nObject.defineProperty(obj, '0', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.reverse();\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 345 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar array = [\"foo\", [], Infinity, 4]\n\nassert(array.length === 4);\n\nassert(array.shift() === \"foo\");\nassert(array.length === 3);\n\nvar a = array.shift();\nassert(a instanceof Array);\nassert(array.length === 2);\n\nassert(array.shift() === Infinity);\nassert(array.length === 1);\n\nassert(array.shift() === 4);\nassert(array.length === 0);\n\nassert(array.shift() === undefined);\nassert(array.length === 0);\n\nvar referenceErrorThrower = function () {\n  throw new ReferenceError (\"foo\");\n}\n\n// Checking behavior when unable to get length\nvar obj = { shift : Array.prototype.shift };\nObject.defineProperty(obj, 'length', { 'get' : referenceErrorThrower });\n\ntry {\n  obj.shift();\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to set length\nvar obj = { shift : Array.prototype.shift };\nObject.defineProperty(obj, 'length', { 'set' : referenceErrorThrower });\n\ntry {\n  obj.shift();\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when no length property defined\nvar obj = { shift : Array.prototype.shift };\nassert (obj.length === undefined)\nassert (obj.shift() === undefined)\nassert (obj.length === 0)\n\n// Checking behavior when unable to get element\nvar obj = { shift : Array.prototype.shift, length : 1 };\nObject.defineProperty(obj, '0', { 'get' : referenceErrorThrower });\n\ntry {\n  obj.shift();\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 346 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar array = [54, undefined, \"Lemon\", -127];\n\nvar array1 = array.slice();\nvar array2 = array.slice(\"a\", \"3\");\nvar array3 = array.slice(-2);\nvar array4 = array.slice(-12, undefined);\nvar array5 = array.slice(undefined, -3);\nvar array6 = array.slice(Infinity, NaN);\nvar array7 = array.slice(-Infinity, Infinity);\nvar array8 = array.slice(NaN, -Infinity);\n\nassert (array1.length == 4);\nassert (array1[0] == 54);\nassert (array1[1] == undefined);\nassert (array1[2] == \"Lemon\");\nassert (array1[3] == -127);\n\nassert (array2.length == 3);\nassert (array2[0] == 54);\nassert (array2[1] == undefined);\nassert (array2[2] == \"Lemon\");\n\nassert (array3.length == 2);\nassert (array3[0] == \"Lemon\");\nassert (array3[1] == -127);\n\nassert (array4.length == 4);\nassert (array4[0] == 54);\nassert (array4[1] == undefined);\nassert (array4[2] == \"Lemon\");\nassert (array4[3] == -127);\n\nassert (array5.length == 1);\nassert (array5[0] == 54);\n\nassert (array6.length == 0);\n\nassert (array7.length == 4);\nassert (array7[0] == 54);\nassert (array7[1] == undefined);\nassert (array7[2] == \"Lemon\");\nassert (array7[3] == -127);\n\nassert (array8.length == 0);\n\nvar array = [];\narray[4294967293] = \"foo\";\narray.length = 4294967295;\nvar result = array.slice(4294967293, -1)\nassert(result.length === 1)\nassert(result[0] === \"foo\")\n\narray[0] = \"bar\";\nvar result = array.slice(-4294967295, -4294967294)\nassert(result.length === 1)\nassert(result[0] === \"bar\")\n\nvar array = [];\narray[0] = \"foo\";\nvar result = array.slice(4294967296, 4294967297);\nassert(result.length === 0);\n\narray[4294967293] = \"bar\";\nvar result = array.slice(-4294967297, -4294967296);\nassert(result.length === 0);\n\nvar arr = [1,2];\nArray.prototype[0] = 3;\nvar newArr = arr.slice(0, 1);\ndelete Array.prototype[0];\nassert(newArr.hasOwnProperty(\"0\"));\nassert(newArr[0] === 1);\n\n// Checking behavior when unable to get length\nvar obj = { slice : Array.prototype.slice };\nObject.defineProperty(obj, 'length', { 'get' : function () { throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.slice(1, 2);\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to get element\nvar obj = { length : 1, slice : Array.prototype.slice };\nObject.defineProperty(obj, '0', { 'get' : function () { throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.slice(0, 1);\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n"

/***/ }),
/* 347 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar array = [\"foo\", [], Infinity, 4];\n\nfunction f(arg1, arg2, arg3) {\n  assert(arg1 === array[arg2]);\n  assert(arg3 === array);\n  return false;\n}\n\nassert(array.some(f) === false);\n\nfunction g(arg1, arg2, arg3) {\n  if (arg1 === 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvar arr1 = [2, 2, 2, 2, 2, 2];\nassert(arr1.some(g) === false);\n\nvar arr2 = [2, 2, 2, 2, 2, 1];\nassert(arr2.some(g) === true);\n\n// Checking behavior when unable to get length\nvar obj = { some : Array.prototype.some };\nObject.defineProperty(obj, 'length', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.some(f);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to get element\nvar obj = { some : Array.prototype.some, length : 1};\nObject.defineProperty(obj, '0', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.some(f);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 348 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar array = [\"Peach\", \"Apple\", \"Orange\", \"Grape\", \"Cherry\", \"Apricot\", \"Grapefruit\"];\narray.sort();\n\nassert(array[0] === \"Apple\");\nassert(array[1] === \"Apricot\");\nassert(array[2] === \"Cherry\");\nassert(array[3] === \"Grape\");\nassert(array[4] === \"Grapefruit\");\nassert(array[5] === \"Orange\");\nassert(array[6] === \"Peach\");\n\nvar array = [6, 4, 5, 1, 2, 9, 7, 3, 0, 8];\n\n// Default comparison\narray.sort();\nfor (i = 0; i < array.length; i++) {\n  assert(array[i] === i);\n}\n\n// Using custom comparison function\nfunction f(arg1, arg2) {\n  if (arg1 < arg2) {\n    return 1;\n  } else if (arg1 > arg2) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\narray.sort(f);\nfor (i = 0; i < array.length; i++) {\n  assert(array[array.length - i - 1] === i);\n}\n\n// Sorting sparse array\nvar array = [1,,2,,3,,4,undefined,5];\nvar expected = [1,2,3,4,5,undefined,,,,];\n\narray.sort();\n\nassert(array.length === expected.length);\nfor (i = 0; i < array.length; i++) {\n  assert(expected.hasOwnProperty (i) === array.hasOwnProperty (i));\n  assert(array[i] === expected[i]);\n}\n\n// Checking behavior when provided comparefn is not callable\nvar obj = {};\nvar arr = [];\ntry {\n  arr.sort(obj);\n  assert(false);\n} catch (e) {\n  assert(e instanceof TypeError);\n}\n\n// Checking behavior when unable to get length\nvar obj = { sort : Array.prototype.sort}\nObject.defineProperty(obj, 'length', { 'get' : function () { throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.sort();\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to get element\nvar obj = { sort : Array.prototype.sort, length : 1}\nObject.defineProperty(obj, '0', { 'get' : function () { throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.sort();\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 349 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction setDefaultValues()\n{\n  return [54, undefined, -127, \"sunshine\"];\n}\n\nvar array = setDefaultValues();\nvar array1 = array.splice();\n\nassert (array.length == 4);\nassert (array[0] == 54);\nassert (array[1] == undefined);\nassert (array[2] == -127);\nassert (array[3] == \"sunshine\");\nassert (array1.length == 0);\n\n// --------------------------------------------------------\narray = setDefaultValues(); // 54, undefined, -127, \"sunshine\"\nvar array2 = array.splice(2);\n\nassert (array.length == 2);\nassert (array[0] == 54);\nassert (array[1] == undefined);\nassert (array2.length == 2);\nassert (array2[0] == -127);\nassert (array2[1] == \"sunshine\");\n\n// --------------------------------------------------------\narray = setDefaultValues(); // 54, undefined, -127, \"sunshine\"\nvar array3 = array.splice(2, 1);\n\nassert (array.length == 3);\nassert (array[0] == 54);\nassert (array[1] == undefined);\nassert (array[2] == \"sunshine\");\nassert (array3.length == 1);\nassert (array3[0] == -127);\n\n// --------------------------------------------------------\narray = setDefaultValues(); // 54, undefined, -127, \"sunshine\"\nvar array4 = array.splice(0, 3, 6720, \"Szeged\");\n\nassert (array.length == 3);\nassert (array[0] == 6720);\nassert (array[1] == \"Szeged\");\nassert (array[2] == \"sunshine\");\nassert (array4.length == 3);\nassert (array4[0] == 54);\nassert (array4[1] == undefined);\nassert (array4[2] == -127);\n\n// --------------------------------------------------------\narray = setDefaultValues(); // 54, undefined, -127, \"sunshine\"\nvar array5 = array.splice(-2, -2, 6720, \"Szeged\");\n\nassert (array.length == 6);\nassert (array[0] == 54);\nassert (array[1] == undefined);\nassert (array[2] == 6720);\nassert (array[3] == \"Szeged\");\nassert (array[4] == -127);\nassert (array[5] == \"sunshine\");\nassert (array5.length == 0);\n\n// --------------------------------------------------------\narray = setDefaultValues(); // 54, undefined, -127, \"sunshine\"\nvar array6 = array.splice(undefined, undefined, undefined);\n\nassert (array.length == 5);\nassert (array[0] == undefined);\nassert (array[1] == 54);\nassert (array[2] == undefined);\nassert (array[3] == -127);\nassert (array[4] == \"sunshine\");\nassert (array6.length == 0);\n\n// --------------------------------------------------------\narray = setDefaultValues(); // 54, undefined, -127, \"sunshine\"\nvar array7 = array.splice(Infinity, NaN);\nassert (array.length == 4);\nassert (array[0] == 54);\nassert (array[1] == undefined);\nassert (array[2] == -127);\nassert (array[3] == \"sunshine\");\nassert (array7.length == 0);\n\n// --------------------------------------------------------\narray = setDefaultValues(); // 54, undefined, -127, \"sunshine\"\nvar array8 = array.splice(-Infinity, Infinity);\n\nassert (array.length == 0);\nassert (array8.length == 4);\nassert (array8[0] == 54);\nassert (array8[1] == undefined);\nassert (array8[2] == -127);\nassert (array8[3] == \"sunshine\");\n\n// --------------------------------------------------------\narray = setDefaultValues(); // 54, undefined, -127, \"sunshine\"\nvar array9 = array.splice(NaN, -Infinity);\nassert (array.length == 4);\nassert (array[0] == 54);\nassert (array[1] == undefined);\nassert (array[2] == -127);\nassert (array[3] == \"sunshine\");\nassert (array9.length == 0);\n\n// --------------------------------------------------------\narray = setDefaultValues(); // 54, undefined, -127, \"sunshine\"\nvar array10 = array.splice(-3, 4, Infinity, \"university\");\nassert (array.length == 3);\nassert (array[0] == 54);\nassert (array[1] == Infinity);\nassert (array[2] == \"university\");\nassert (array10.length == 3);\nassert (array10[0] == undefined);\nassert (array10[1] == -127);\nassert (array10[2] == \"sunshine\");\n\nvar array = [];\narray[4294967294] = \"foo\";\nvar result = array.splice(4294967294, 1, \"x\")\nassert(result.length === 1)\nassert(result[0] === \"foo\")\nassert(array[4294967294] === \"x\")\n\narray[0] = \"bar\";\nvar result = array.splice(-4294967295, 1, \"y\");\nassert(result.length === 1)\nassert(result[0] === \"bar\")\nassert(array[0] === \"y\")\n\nvar arr = [1,2];\nArray.prototype[0] = 3;\nvar newArr = arr.splice(0, 1);\ndelete Array.prototype[0];\nassert(newArr.hasOwnProperty(\"0\"));\nassert(newArr[0] === 1);\n\n// Checking behavior when unable to get length\nvar obj = {splice : Array.prototype.splice};\nObject.defineProperty(obj, 'length', { 'get' : function () { throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.splice(1, 2, \"item1\", \"item2\");\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to get element\nvar obj = {length : 1, splice : Array.prototype.splice};\nObject.defineProperty(obj, '0', { 'get' : function () { throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.splice(0, 1, \"item1\", \"item2\");\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n"

/***/ }),
/* 350 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert ([].toLocaleString() === \"\");\nassert ([1].toLocaleString() === \"1\");\nassert ([1,2].toLocaleString() === \"1,2\");\nassert ([1,2,3].toLocaleString() === \"1,2,3\");\n\nvar test_ok = {\n  length: 1,\n  toLocaleString: function() { return \"1\"; }\n};\n\nassert ([3, test_ok, 4, test_ok].toLocaleString() === \"3,1,4,1\");\n\n\nvar obj = { toLocaleString: function() {} };\nvar test_non_str_locale = [undefined, obj, null, obj, obj];\n\nassert(test_non_str_locale.toLocaleString() === \",undefined,,undefined,undefined\");\n\nvar test_fail = {\n  toLocaleString: \"FAIL\"\n};\n\ntry {\n  [test_fail].toLocaleString();\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\n\nvar test_fail_call = {\n  toLocaleString: function() { throw new ReferenceError(\"foo\"); }\n};\n\n\ntry {\n  [1, 2, test_fail_call].toLocaleString();\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n"

/***/ }),
/* 351 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Our own join method if the internal join is not implemented.\nfunction join(sep)\n{\n  sep = sep ? sep : \",\";\n  var result = \"\";\n\n  for (var i = 0; i < this.length; ++i) {\n    result += this[i];\n    if (i + 1 < this.length) {\n      result += sep;\n    }\n  }\n\n  return result;\n}\n\n// Force fallback to object.prototype.toString()\nArray.prototype.join = 1;\n\nassert ([1].toString() === \"[object Array]\");\n\nArray.prototype.join = join;\n\nassert ([1, 2].toString() === \"1,2\");\n\nvar test = [1,2,3];\ntest.join = function() { throw ReferenceError (\"foo\"); };\n\ntry {\n  test.toString();\n\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n\n\n// Test if the join returns a ReferenceError\nvar arr = [1,2]\nObject.defineProperty(arr, 'join', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\ntry {\n  arr.toString();\n\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n"

/***/ }),
/* 352 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar array = []\n\nassert(array.length === 0);\n\narray.unshift(\"foo\");\nassert(array.length === 1);\nassert(array[0] === \"foo\");\n\narray.unshift(new Array())\nassert(array.length === 2);\nassert(array[0] instanceof Array);\nassert(array[1] === \"foo\")\n\narray.unshift(Infinity);\nassert(array.length === 3);\nassert(array[0] === Infinity);\nassert(array[1] instanceof Array);\nassert(array[2] === \"foo\")\n\narray.unshift(\"bar\", 0);\nassert(array.length === 5);\nassert(array[0] === \"bar\");\nassert(array[1] === 0);\nassert(array[2] === Infinity);\nassert(array[3] instanceof Array);\nassert(array[4] === \"foo\")\n\n\n// Checking behavior when no length property defined\nvar obj = { unshift : Array.prototype.unshift };\n\nassert(obj.length === undefined);\nobj.unshift(1,2,3);\nassert(obj.length === 3);\n\n// Checking behavior when unable to get length\nvar obj = { unshift : Array.prototype.unshift };\nObject.defineProperty(obj, 'length', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.unshift(1);\n  assert(false)\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable to set length\nvar obj = { unshift : Array.prototype.unshift };\nObject.defineProperty(obj, 'length', { 'set' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.unshift(2);\n  assert(false)\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when unable shift elements\nvar obj = { unshift : Array.prototype.unshift, length : 1 };\nObject.defineProperty(obj, '0', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.unshift(3);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\nvar obj = { unshift : Array.prototype.unshift, length : 1 };\nObject.defineProperty(obj, '0', { 'set' : function () {throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj.unshift(4);\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// Checking behavior when a property is not defined\nvar obj = { '0' : \"foo\", '2' : \"bar\", length : 3, unshift : Array.prototype.unshift };\nassert(obj.unshift(\"baz\") === 4);\nassert(obj[0] === \"baz\");\nassert(obj[1] === \"foo\");\nassert(obj[2] === undefined);\nassert(obj[3] === \"bar\");\n"

/***/ }),
/* 353 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\nassert (cars[0] === \"Saab\");\nassert (cars[1] === \"Volvo\");\nassert (cars[2] === \"BMW\");\n\nvar cars1 = new Array(\"Saab\", \"Volvo\", \"BMW\");\nassert (cars[0] === cars1[0]);\nassert (cars[1] === cars1[1]);\nassert (cars[2] === cars1[2]);\n\nvar a = new Array();\nassert (typeof (a) === \"object\");\nassert (Array.isArray (a));\nassert (Array.isArray ([1, 2, 3]));\n\nvar b = new Array (30000);\nassert(b.length === 30000);\nassert (b[20000] === undefined);\nb[20000] = 1;\nassert (b[20000] === 1);\nb[20000] = 10;\nassert (b[20000] === 10);\n\nassert(b.length === 30000);\nassert(b[10000] === undefined);\nObject.defineProperty (b, '10000', {value : 25, writable : false});\nassert(b[10000] === 25);\nb[10000] = 30;\nassert(b[10000] === 25);\n\nassert(b.length === 30000);\nassert(b[50000] === undefined);\nassert(b.length === 30000);\nb[50000] = 5;\nassert(b.length === 50001);\nassert(b[50000] === 5);\nb[50000] = 10;\nassert(b[50000] === 10);\nObject.defineProperty (b, '50000', {writable : false});\nassert(b[50000] === 10);\nb[50000] = 20;\nassert(b[50000] === 10);\n\nObject.defineProperty (b, '50000', {writable : true});\nassert(b[50000] === 10);\nb[50000] = 30;\nassert(b[50000] === 30);\n\nb.length = 5;\nassert(b[50000] === undefined);\n\nassert(([1, 2, 3]).length === 3);\n\nassert(Array.prototype.constructor === Array);\nassert(Array.prototype.length === 0);\nArray.prototype[0] = 'string value';\nassert(Array.prototype.length === 1);\nassert(Array.prototype[0] === 'string value');\n\nvar c = [0,,,'3'];\nassert (c[0] === 0);\nassert (c[1] === undefined);\nassert (c[2] === undefined);\nassert (c[3] === '3');\n\nb[0] = 1;\nc[0] += b[0];\nassert (c[0] == 1);\n\nvar arr = [\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n  17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\n  65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n  81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n  97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n  113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,\n  129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,\n  145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,\n  161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,\n  177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192,\n  193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,\n  209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,\n  225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,\n  241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256,\n  257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,\n  273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,\n  289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304,\n  305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320,\n  321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,\n  337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352,\n  353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368,\n  369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384,\n  385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400,\n  401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416,\n  417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432,\n  433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448,\n  449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464,\n  465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480,\n  481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496,\n  497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512,\n  513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528,\n  529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544,\n  545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560,\n  561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576,\n  577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592,\n  593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608,\n  609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624,\n  625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640,\n  641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656,\n  657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672,\n  673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688,\n  689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704,\n  705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720,\n  721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736,\n  737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752,\n  753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768,\n  769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784,\n  785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800,\n  801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816,\n  817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832,\n  833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848,\n  849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864,\n  865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880,\n  881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896,\n  897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912,\n  913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928,\n  929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944,\n  945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960,\n  961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976,\n  977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992,\n  993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,\n  1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024 ];\n\nfor (i = 0; i < 1024; i++)\n{\n  assert (arr[i] === i + 1);\n}\n\nvar elision = [0,,2 ,3];\nassert (elision.hasOwnProperty(1) == false);\n"

/***/ }),
/* 354 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar b = 5;\n\nassert((b += 10) == 15);\nassert((b -= 3) == 12);\nassert((b *= 10) == 120);\nassert((b /= 10) == 12);\nassert((b %= 10) == 2);\n"

/***/ }),
/* 355 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert((5 & 2) === 0);\nassert((2 & 2) === 2);\nassert((5 | 2) === 7);\nassert((5 | 5) === 5);\nassert((5 ^ 2) === 7);\nassert((5 ^ 5) === 0);\nassert((~5) == -6);\n"

/***/ }),
/* 356 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* with */\n\nfor (var i = 0; i < 10; i++)\n{\n  with ({})\n  {\n    break;\n\n    assert (false);\n  }\n}\nassert (i === 0);\n\nfor (var i = 0; i < 10; i++)\n{\n  with ({})\n  {\n    continue;\n\n    assert (false);\n  }\n}\nassert (i === 10);\n\n/* try */\nfor (var i = 0; i < 10; i++)\n{\n  try\n  {\n    break;\n\n    assert (false);\n  }\n  catch (e)\n  {\n  }\n}\nassert (i === 0);\n\nfor (var i = 0; i < 10; i++)\n{\n  try\n  {\n    continue;\n\n    assert (false);\n  }\n  catch (e)\n  {\n  }\n}\nassert (i === 10);\n\n/* catch */\nfor (var i = 0; i < 10; i++)\n{\n  try\n  {\n    throw new TypeError ();\n    assert (false);\n  }\n  catch (e)\n  {\n    break;\n    assert (false);\n  }\n}\nassert (i === 0);\n\nfor (var i = 0; i < 10; i++)\n{\n  try\n  {\n    throw new TypeError ();\n    assert (false);\n  }\n  catch (e)\n  {\n    continue;\n    assert (false);\n  }\n}\nassert (i === 10);\n\n\n/* finally */\nfor (var i = 0; i < 10; i++)\n{\n  try\n  {\n    throw new TypeError ();\n    assert (false);\n  }\n  catch (e)\n  {\n  }\n  finally\n  {\n    break;\n    assert (false);\n  }\n}\nassert (i === 0);\n\nfor (var i = 0; i < 10; i++)\n{\n  try\n  {\n    throw new TypeError ();\n    assert (false);\n  }\n  catch (e)\n  {\n  }\n  finally\n  {\n    continue;\n    assert (false);\n  }\n}\nassert (i === 10);\n\n\n/* with - switch */\n\nstr = '';\nfor (var i = 0; i < 10; i++)\n{\n  with ({})\n  {\n    switch (i)\n    {\n      case 0:\n        str += 'A';\n        break;\n      default:\n        str += 'B';\n        continue;\n    }\n\n    str += 'C';\n  }\n}\nassert (str === 'ACBBBBBBBBB');\n"

/***/ }),
/* 357 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nFunction.prototype.toString = Object.prototype.toString;\nassert(Array.toString() === \"[object Function]\");\nassert(Number.toString() === \"[object Function]\");\nassert(String.toString() === \"[object Function]\");\nassert(Boolean.toString() === \"[object Function]\");\nassert(Object.toString() === \"[object Function]\");\nassert(Function.toString() === \"[object Function]\");\nassert(Date.toString() === \"[object Function]\");\nassert(RegExp.toString() === \"[object Function]\");\n\nassert(Math.toString() === \"[object Math]\");\nassert(JSON.toString() === \"[object JSON]\");\n"

/***/ }),
/* 358 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar d = new Date(1999, 1, 1);\nassert (d.getYear() === 99);\nd = new Date(1874, 4, 9);\nassert (d.getYear() === -26);\nd = new Date(2015, 8, 17);\nassert (d.getYear() === 115);\nd = new Date(NaN);\nassert (isNaN (d.getYear()));\n\nvar d = new Date();\nd.setYear(91);\nassert (d.getFullYear() === 1991 && d.getYear() === 91);\n\nd = new Date();\nd.setYear(NaN);\nassert (isNaN(d.valueOf()));\n\nd = new Date();\nd.setYear(2015);\nassert (d.getFullYear() === 2015);\n\nd = new Date(2000, 1, 29);\nd.setYear(2004);\nassert (d.getFullYear() === 2004 && d.getMonth() === 1 && d.getDate() === 29);\nd.setYear(2015);\nassert (d.getFullYear() === 2015 && d.getMonth() === 2 && d.getDate() === 1);\n\nd = new Date(2015, 8, 17);\nassert (d.toGMTString() === \"Thu, 17 Sep 2015 00:00:00 GMT\");\n\nd = new Date(NaN);\nassert (d.toGMTString() === \"Invalid Date\");\n"

/***/ }),
/* 359 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert (Date.length == 7);\nassert (Object.prototype.toString.call (Date.prototype) === '[object Date]');\n\nvar d;\n\ntry\n{\n  d = new Date({toString: function() { throw new Error(\"foo\"); }});\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof Error);\n  assert (e.message === \"foo\");\n}\n\nassert (isNaN(Date.prototype.valueOf.call(Date.prototype)));\n\nd = new Date(\"abcd\");\nassert (isNaN(d.valueOf()));\n\nd = new Date();\nassert (!isNaN(d.valueOf()));\n\nd = new Date(\"2015-01-01\");\nassert (d.valueOf() == 1420070400000);\n\nd = new Date(1420070400000);\nassert (d.valueOf() == 1420070400000);\n\nd = new Date(2015,0,1,0,0,0,0);\nassert (d.valueOf() == 1420070400000);\n\nd = new Date(8.64e+15);\nassert (d.valueOf() == 8.64e+15);\n\nd = new Date(8.64e+15 + 1);\nassert (isNaN(d.valueOf()));\n\nd = new Date(20000000, 0, 1);\nassert (isNaN(d.valueOf()));\n\nd = new Date(0, 20000000, 1);\nassert (isNaN(d.valueOf()));\n\nvar Obj = function (val)\n{\n  this.value = val;\n  this.valueOf = function () { throw new ReferenceError (\"valueOf-\" + this.value); };\n  this.toString = function () { throw new ReferenceError (\"toString-\"+ this.value); };\n};\n\ntry\n{\n  d = new Date (new Obj (1), new Obj (2));\n  // Should not be reached.\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof ReferenceError);\n  assert (e.message === \"valueOf-1\");\n}\n\nassert (typeof Date (2015) == \"string\");\nassert (typeof Date() != typeof (new Date ()));\nassert (Date (Number.NaN) == Date ());\n\n// Fixme: remove this case when Date() gives the current time.\nassert (Date (2015,1,2) == \"Thu Jan 01 1970 00:00:00 GMT+0000\");\n"

/***/ }),
/* 360 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* 1. test case */\nvar d = new Date(2015, 6, 9, 12, 13, 14, 121);\n\nassert (d.getFullYear() == 2015);\nassert (d.getUTCFullYear() == 2015);\nassert (d.getMonth() == 6);\nassert (d.getUTCMonth() == 6);\nassert (d.getDate() == 9);\nassert (d.getUTCDate() == 9);\nassert (d.getDay() == 4);\nassert (d.getUTCDay() == 4);\nassert (d.getHours() == 12);\n// FIXME: Missing timezone adjustment.\n//assert (d.getUTCHours() == (12 + d.getTimezoneOffset() / 60));\nassert (d.getMinutes() == 13);\nassert (d.getUTCMinutes() == 13);\nassert (d.getSeconds() == 14);\nassert (d.getUTCSeconds() == 14);\nassert (d.getMilliseconds() == 121);\nassert (d.getUTCMilliseconds() == 121);\n\n/* 2. test case */\nvar d = new Date(\"2015-07-09T12:13:14.121+01:30\");\n\nassert (d.getFullYear() == 2015);\nassert (d.getUTCFullYear() == 2015);\nassert (d.getMonth() == 6);\nassert (d.getUTCMonth() == 6);\nassert (d.getDate() == 9);\nassert (d.getUTCDate() == 9);\nassert (d.getDay() == 4);\nassert (d.getUTCDay() == 4);\n// FIXME: Missing timezone adjustment.\n//assert (d.getHours() == 12);\n//assert (d.getUTCHours() == (12 + d.getTimezoneOffset() / 60));\nassert (d.getMinutes() == 43);\nassert (d.getUTCMinutes() == 43);\nassert (d.getSeconds() == 14);\nassert (d.getUTCSeconds() == 14);\nassert (d.getMilliseconds() == 121);\nassert (d.getUTCMilliseconds() == 121);\n\n/* 3. test case */\nvar d = new Date(0);\n\nassert (d.getFullYear() == 1970);\nassert (d.getUTCFullYear() == 1970);\nassert (d.getMonth() == 0);\nassert (d.getUTCMonth() == 0);\nassert (d.getDate() == 1);\nassert (d.getUTCDate() == 1);\nassert (d.getDay() == 4);\nassert (d.getUTCDay() == 4);\n// FIXME: Missing timezone adjustment.\n// assert (d.getHours() == 0 - (d.getTimezoneOffset() / 60));\nassert (d.getUTCHours() == 0);\nassert (d.getMinutes() == 0);\nassert (d.getUTCMinutes() == 0);\nassert (d.getSeconds() == 0);\nassert (d.getUTCSeconds() == 0);\nassert (d.getMilliseconds() == 0);\nassert (d.getUTCMilliseconds() == 0);\n\n/* 4. test case */\nvar d = new Date(\"abcd\");\nassert (isNaN (d));\n\nassert (isNaN (d.getFullYear()));\nassert (isNaN (d.getUTCFullYear()));\nassert (isNaN (d.getMonth()));\nassert (isNaN (d.getUTCMonth()));\nassert (isNaN (d.getDate()));\nassert (isNaN (d.getUTCDate()));\nassert (isNaN (d.getDay()));\nassert (isNaN (d.getUTCDay()));\nassert (isNaN (d.getHours()));\nassert (isNaN (d.getUTCHours()));\nassert (isNaN (d.getMinutes()));\nassert (isNaN (d.getUTCMinutes()));\nassert (isNaN (d.getSeconds()));\nassert (isNaN (d.getUTCSeconds()));\nassert (isNaN (d.getMilliseconds()));\nassert (isNaN (d.getUTCMilliseconds()));\nassert (isNaN (d.getTimezoneOffset()));\n\n/* 5. test case */\nassert (new Date(2013, -1).getMonth() === 11);\nassert (new Date(-2, -2).getFullYear() === -3);\nassert (new Date(-1, -1).getFullYear() === -2);\nassert (new Date(-1, -1, -1).getMonth() === 10);\nassert (new Date(-1, -1, -1, -1).getDate() === 28);\nassert (new Date(-1, -1, -1, -1, -1).getHours() === 22);\nassert (new Date(-1, -1, -1, -1, -1, -1).getMinutes() === 58);\nassert (new Date(-1, -1, -1, -1, -1, -1, -1).getSeconds() === 58);\nassert (new Date(-1, -1, -1, -1, -1, -1, -1, -1).getMilliseconds() === 999);\n"

/***/ }),
/* 361 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar wrongFormats = [\"\",\n                    \"2\",\n                    \"20\",\n                    \"201\",\n                    \"2015-\",\n                    \"2015-01-\",\n                    \"2015-01-01-\",\n                    \"qwerty\",\n                    \"2015-01-01T\",\n                    \"2015-01-01T1:1\",\n                    \"2015-01-01T01\",\n                    \"2015-01-01T01\",\n                    \"2015-01-01T01:01F\",\n                    \"T2015\",\n                    \"2015-01-01Z\",\n                    \"2015-01-01+01:00\",\n                    \"2015-01-01T00:00+01\",\n                    \"2015-01-01T00:00+1\",\n                    \"2015-01-01T00:00-01\",\n                    \"2015-01-01T00:00.000\",\n                    \"2015-01-01T00:00:\",\n                    \"2015-01-01T00:\",\n                    \"2015-01-01T00:00:00.1\",\n                    \"2015-01-01T00:00:00.01\",\n                    \"2015-01-01T00:00+01:00Z\",\n                    \"2015/01/01\",\n                    \"2015-01-32\",\n                    \"2015--1\",\n                    \"2015-13\",\n                    \"2015-01--1\",\n                    \"-215\",\n                    \"-215-01-01\",\n                    \"2015-01-00\",\n                    \"2015-01-01T25:00\",\n                    \"2015-01-01T00:60\",\n                    \"2015-01-01T-1:00\",\n                    \"2015-01-01T00:-1\",\n                    \"2e+3\"];\n\nfor (i in wrongFormats) {\n  var d = Date.parse(wrongFormats[i]);\n  assert (isNaN(d));\n}\n\nvar d;\n\nd = Date.parse(undefined);\nassert (isNaN(d));\n\nd = Date.parse({});\nassert (isNaN(d));\n\nd = Date.parse(2000 + 15);\nassert (d == 1420070400000);\n\nd = Date.parse(\"2015\");\nassert (d == 1420070400000);\n\nd = Date.parse(\"2015-01\");\nassert (d == 1420070400000);\n\nd = Date.parse(\"2015-01-01\");\nassert (d == 1420070400000);\n\nd = Date.parse(\"2015-01T00:00\");\nassert (d == 1420070400000);\n\nd = Date.parse(\"2015-01T00:00:00\");\nassert (d == 1420070400000);\n\nd = Date.parse(\"2015-01T00:00:00.000\");\nassert (d == 1420070400000);\n\nd = Date.parse(\"2015-01T24:00:00.000\");\nassert (d == 1420070400000);\n\nd = Date.parse(\"2015-01T00:00:00.000+03:00\");\nassert (d == 1420059600000);\n\nd = Date.parse(\"2015-01T00:00:00.000-03:00\");\nassert (d == 1420081200000);\n\nd = Date.parse(\"2015-07-03T14:35:43.123+01:30\");\nassert (d == 1435928743123);\n"

/***/ }),
/* 362 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar ms = 1;\nvar sec = 1000 * ms;\nvar min = 60 * sec;\nvar hour = 60 * min;\nvar day = 24 * hour; /* 86400000 */\nvar d = new Date();\n\n/* 15.9.5.27 Date.prototype.setTime (time) */\nassert (d.setTime(0) == 0);\nd.setTime(0);\nassert (d.setTime(day) == day);\nassert (d.getDate() == 2);\n\n/* 15.9.5.28 Date.prototype.setMilliseconds (ms) */\nd.setTime(0);\nassert (d.setMilliseconds(1) == ms);\nassert (d.getMilliseconds() == 1);\n\n/* 15.9.5.29 Date.prototype.setUTCMilliseconds (ms) */\nd.setTime(0);\nassert (d.setUTCMilliseconds(1) == ms);\nassert (d.getUTCMilliseconds() == 1);\n\n/* 15.9.5.30 Date.prototype.setSeconds (sec [, ms ] ) */\nd.setTime(0);\nassert (d.setSeconds(1) == sec);\nassert (d.getSeconds() == 1);\nd.setTime(0);\nassert (d.setSeconds(1, 1) == sec + ms);\nassert (d.getSeconds() == 1);\nassert (d.getMilliseconds() == 1);\n\n/* 15.9.5.31 Date.prototype.setUTCSeconds (sec [, ms ] ) */\nd.setTime(0);\nassert (d.setUTCSeconds(1) == sec);\nassert (d.getUTCSeconds() == 1);\nd.setTime(0);\nassert (d.setUTCSeconds(1, 1) == sec + ms);\nassert (d.getUTCSeconds() == 1);\nassert (d.getUTCMilliseconds() == 1);\n\n/* 15.9.5.32 Date.prototype.setMinutes (min [, sec [, ms ] ] ) */\nd.setTime(0);\nassert (d.setMinutes(1) == min);\nassert (d.getMinutes() == 1);\nd.setTime(0);\nassert (d.setMinutes(1, 1) == min + sec);\nassert (d.getMinutes() == 1);\nassert (d.getSeconds() == 1);\nd.setTime(0);\nassert (d.setMinutes(1, 1, 1) == min + sec + ms);\nassert (d.getMinutes() == 1);\nassert (d.getSeconds() == 1);\nassert (d.getMilliseconds() == 1);\n\n/* 15.9.5.33 Date.prototype.setUTCMinutes (min [, sec [, ms ] ] ) */\nd.setTime(0);\nassert (d.setUTCMinutes(1) == min);\nassert (d.getUTCMinutes() == 1);\nd.setTime(0);\nassert (d.setUTCMinutes(1, 1) == min + sec);\nassert (d.getUTCMinutes() == 1);\nassert (d.getUTCSeconds() == 1);\nd.setTime(0);\nassert (d.setUTCMinutes(1, 1, 1) == min + sec + ms);\nassert (d.getUTCMinutes() == 1);\nassert (d.getUTCSeconds() == 1);\nassert (d.getUTCMilliseconds() == 1);\n\n/* 15.9.5.34 Date.prototype.setHours (hour [, min [, sec [, ms ] ] ] ) */\n// FIXME: Missing timezone adjustment.\n//d.setTime(0);\n//assert (d.setHours(1) == hour + d.getTimezoneOffset() * 60000);\n//assert (d.getHours() == 1);\n//d.setTime(0);\n//assert (d.setHours(1, 1) == hour + min + d.getTimezoneOffset() * 60000);\n//assert (d.getHours() == 1);\n//assert (d.getMinutes() == 1);\n//d.setTime(0);\n//assert (d.setHours(1, 1, 1) == hour + min + sec + d.getTimezoneOffset() * 60000);\n//assert (d.getHours() == 1);\n//assert (d.getMinutes() == 1);\n//assert (d.getSeconds() == 1);\n//d.setTime(0);\n//assert (d.setHours(1, 1, 1, 1) == hour + min + sec + ms + d.getTimezoneOffset() * 60000);\n//assert (d.getHours() == 1);\n//assert (d.getMinutes() == 1);\n//assert (d.getSeconds() == 1);\n//assert (d.getMilliseconds() == 1);\n\n/* 15.9.5.35 Date.prototype.setUTCHours (hour [, min [, sec [, ms ] ] ] ) */\nd.setTime(0);\nassert (d.setUTCHours(1) == hour);\nassert (d.getUTCHours() == 1);\nd.setTime(0);\nassert (d.setUTCHours(1, 1) == hour + min);\nassert (d.getUTCHours() == 1);\nassert (d.getUTCMinutes() == 1);\nd.setTime(0);\nassert (d.setUTCHours(1, 1, 1) == hour + min + sec);\nassert (d.getUTCHours() == 1);\nassert (d.getUTCMinutes() == 1);\nassert (d.getUTCSeconds() == 1);\nd.setTime(0);\nassert (d.setUTCHours(1, 1, 1, 1) == hour + min + sec + ms);\nassert (d.getUTCHours() == 1);\nassert (d.getUTCMinutes() == 1);\nassert (d.getUTCSeconds() == 1);\nassert (d.getUTCMilliseconds() == 1);\n\n/* 15.9.5.36 Date.prototype.setDate (date) */\nd.setTime(0);\nassert (d.setDate(0) == -day);\nassert (d.getDate() == 31);\nd.setTime(0);\nassert (d.setDate(1) == 0);\nassert (d.getDate() == 1);\n\n/* 15.9.5.37 Date.prototype.setUTCDate (date) */\nd.setTime(0);\nassert (d.setUTCDate(0) == -day);\nassert (d.getUTCDate() == 31);\nd.setTime(0);\nassert (d.setUTCDate(1) == 0);\nassert (d.getUTCDate() == 1);\n\n/* 15.9.5.38 Date.prototype.setMonth (month [, date ] ) */\nd.setTime(0);\nassert (d.setMonth(0) == 0);\nassert (d.getMonth() == 0);\nd.setTime(0);\nassert (d.setMonth(0, 0) == -day);\nassert (d.getMonth() == 11);\nassert (d.getDate() == 31);\nd.setTime(0);\nassert (d.setMonth(1) == 31 * day);\nassert (d.getMonth() == 1);\nd.setTime(0);\nassert (d.setMonth(12) == 365 * day);\nassert (d.getMonth() == 0);\nd.setTime(0);\nassert (d.setMonth(13) == (365 + 31) * day);\nassert (d.getMonth() == 1);\n\n/* 15.9.5.39 Date.prototype.setUTCMonth (month [, date ] ) */\nd.setTime(0);\nassert (d.setUTCMonth(0) == 0);\nassert (d.getUTCMonth() == 0);\nd.setTime(0);\nassert (d.setUTCMonth(0, 0) == -day);\nassert (d.getUTCMonth() == 11);\nassert (d.getUTCDate() == 31);\nd.setTime(0);\nassert (d.setUTCMonth(1) == 31 * day);\nassert (d.getUTCMonth() == 1);\nd.setTime(0);\nassert (d.setUTCMonth(12) == 365 * day);\nassert (d.getUTCMonth() == 0);\nd.setTime(0);\nassert (d.setUTCMonth(13) == (365 + 31) * day);\nassert (d.getUTCMonth() == 1);\n\n/* 15.9.5.40 Date.prototype.setFullYear (year [, month [, date ] ] ) */\nd.setTime(0);\nassert (d.setFullYear(0) == -62167219200000);\nassert (d.getFullYear() == 0);\nd.setTime(0);\nassert (d.setFullYear(0, 0) == -62167219200000);\nassert (d.getFullYear() == 0);\nassert (d.getMonth() == 0);\nd.setTime(0);\nassert (d.setFullYear(0, 0, 0) == -62167219200000 - day);\nassert (d.getFullYear() == -1);\nassert (d.getMonth() == 11);\nassert (d.getDate() == 31);\nd.setTime(0);\nassert (d.setFullYear(1970) == 0);\nassert (d.getFullYear() == 1970);\n\n/* 15.9.5.41 Date.prototype.setUTCFullYear (year [, month [, date ] ] ) */\nd.setTime(0);\nassert (d.setUTCFullYear(0) == -62167219200000);\nassert (d.getUTCFullYear() == 0);\nd.setTime(0);\nassert (d.setUTCFullYear(0, 0) == -62167219200000);\nassert (d.getUTCFullYear() == 0);\nassert (d.getUTCMonth() == 0);\nd.setTime(0);\nassert (d.setUTCFullYear(0, 0, 0) == -62167219200000 - day);\nassert (d.getUTCFullYear() == -1);\nassert (d.getUTCMonth() == 11);\nassert (d.getUTCDate() == 31);\nd.setTime(0);\nassert (d.setUTCFullYear(1970) == 0);\nassert (d.getUTCFullYear() == 1970);\n\n/* Without argument */\nd = new Date();\nassert (isNaN (d.setTime()));\nassert (isNaN (d.setMilliseconds()));\nassert (isNaN (d.setUTCMilliseconds()));\nassert (isNaN (d.setSeconds()));\nassert (isNaN (d.setUTCSeconds()));\nassert (isNaN (d.setMinutes()));\nassert (isNaN (d.setUTCMinutes()));\nassert (isNaN (d.setHours()));\nassert (isNaN (d.setUTCHours()));\nassert (isNaN (d.setDate()));\nassert (isNaN (d.getUTCDate()));\nassert (isNaN (d.setMonth()));\nassert (isNaN (d.setUTCMonth()));\nassert (isNaN (d.setFullYear()));\nassert (isNaN (d.setUTCFullYear()));\n\nassert (isNaN (Date.prototype.setTime()));\nassert (isNaN (Date.prototype.setMilliseconds()));\nassert (isNaN (Date.prototype.setUTCMilliseconds()));\nassert (isNaN (Date.prototype.setSeconds()));\nassert (isNaN (Date.prototype.setUTCSeconds()));\nassert (isNaN (Date.prototype.setMinutes()));\nassert (isNaN (Date.prototype.setUTCMinutes()));\nassert (isNaN (Date.prototype.setHours()));\nassert (isNaN (Date.prototype.setUTCHours()));\nassert (isNaN (Date.prototype.setDate()));\nassert (isNaN (Date.prototype.getUTCDate()));\nassert (isNaN (Date.prototype.setMonth()));\nassert (isNaN (Date.prototype.setUTCMonth()));\nassert (isNaN (Date.prototype.setFullYear()));\nassert (isNaN (Date.prototype.setUTCFullYear()));\n"

/***/ }),
/* 363 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert (new Date (NaN) == \"Invalid Date\");\nassert (new Date (Infinity, 1, 1, 0, 0, 0) == \"Invalid Date\");\nassert (new Date (2015, Infinity, 1, 0, 0, 0) == \"Invalid Date\");\nassert (new Date (2015, 7, 1, 0, Infinity, 0) == \"Invalid Date\");\nassert (new Date (NaN, 1, 1, 0, 0, 0) == \"Invalid Date\");\nassert (new Date (2015, NaN, 1, 0, 0, 0) == \"Invalid Date\");\nassert (new Date (2015, 7, 1, 0, NaN, 0) == \"Invalid Date\");\nassert (new Date (\"2015-02-13\") == \"Fri Feb 13 2015 00:00:00 GMT+0000\");\nassert (new Date (\"2015-07-08T11:29:05.023\") == \"Wed Jul 08 2015 11:29:05 GMT+0000\");\n\ntry\n{\n  Date.prototype.toString.call(-1);\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n  assert (e.message === \"Incompatible type\");\n}\n\nvar date = new Date(0);\nassert (date.toString() === \"Thu Jan 01 1970 00:00:00 GMT+0000\");\nassert (date.toUTCString() === \"Thu, 01 Jan 1970 00:00:00 GMT\");\nassert (date.toISOString() === \"1970-01-01T00:00:00.000Z\");\n\ndate = new Date(\"2015-08-12T09:40:20.000Z\")\nassert (date.toString() === \"Wed Aug 12 2015 09:40:20 GMT+0000\");\nassert (date.toUTCString() === \"Wed, 12 Aug 2015 09:40:20 GMT\");\nassert (date.toISOString() === \"2015-08-12T09:40:20.000Z\");\n\nassert (new Date (NaN).toDateString () == \"Invalid Date\");\nassert (new Date (\"2015-02-13\").toDateString () == \"2015-02-13\");\nassert (new Date (\"2015-07-08T11:29:05.023\").toDateString () == \"2015-07-08\");\n\ntry\n{\n  Date.prototype.toDateString.call(-1);\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n  assert (e.message === \"Incompatible type\");\n}\n\nassert (new Date (NaN).toTimeString () == \"Invalid Date\");\nassert (new Date (Number.POSITIVE_INFINITY).toString () === \"Invalid Date\");\nassert (new Date (\"2015-02-13\").toTimeString () == \"00:00:00.000\");\nassert (new Date (\"2015-07-08T11:29:05.023\").toTimeString () == \"11:29:05.023\");\n\ntry\n{\n  Date.prototype.toTimeString.call(-1);\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n  assert (e.message === \"Incompatible type\");\n}\n\nassert (new Date (\"2015-07-16\").toISOString () == \"2015-07-16T00:00:00.000Z\");\nassert (new Date (\"2015-07-16T11:29:05.023\").toISOString () == \"2015-07-16T11:29:05.023Z\");\n\ntry\n{\n  new Date (NaN).toISOString ();\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof RangeError);\n}\n\ntry\n{\n  new Date (Number.POSITIVE_INFINITY).toISOString ();\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof RangeError);\n}\n\ntry\n{\n  Date.prototype.toISOString.call(-1);\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n  assert (e.message === \"Incompatible type\");\n}\n\nassert (new Date (NaN).toUTCString () == \"Invalid Date\");\nassert (new Date (\"2015-07-16\").toUTCString () == \"Thu, 16 Jul 2015 00:00:00 GMT\");\nassert (new Date (\"2015-07-16T11:29:05.023\").toUTCString () == \"Thu, 16 Jul 2015 11:29:05 GMT\");\n\ntry\n{\n  Date.prototype.toUTCString.call(-1);\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n  assert (e.message === \"Incompatible type\");\n}\n\nassert (new Date (NaN).toJSON () == null);\nassert (new Date (\"2015-07-16\").toJSON () == \"2015-07-16T00:00:00.000Z\");\nassert (new Date (\"2015-07-16T11:29:05.023\").toJSON () == \"2015-07-16T11:29:05.023Z\");\n\ntry\n{\n  Date.prototype.toJSON.call(-1);\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n}\n\ndate_time = new Date (\"2015-07-08T11:29:05.023\").toJSON ();\nassert (new Date (date_time).toISOString () == \"2015-07-08T11:29:05.023Z\");\n\nassert (typeof Date (2015) == \"string\");\nassert (typeof Date() != typeof (new Date ()));\nassert (Date () == (new Date ()).toString ());\nassert (Date (2015, 1, 1) == (new Date ()).toString ());\nassert (Date (Number.NaN) == Date ());\n\n// Fixme: remove these cases when TZA and DST are supported.\nassert (new Date (\"2015-07-08T11:29:05.023-02:00\").toString () == \"Wed Jul 08 2015 13:29:05 GMT+0000\");\nassert (new Date (\"2015-07-08T11:29:05.023-02:00\").toLocaleString () == \"Wed Jul 08 2015 13:29:05 GMT+0000\");\n\nassert (new Date (\"2015-07-08T11:29:05.023Z\").toISOString() == \"2015-07-08T11:29:05.023Z\");\n"

/***/ }),
/* 364 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the License);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE, 2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an AS IS BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar d;\n\nd = Date.UTC(undefined);\nassert (isNaN(d));\n\nd = Date.UTC({});\nassert (isNaN(d));\n\nd = Date.UTC(2015);\nassert (isNaN(d));\n\nd = Date.UTC(2000 + 15, 0);\nassert (d == 1420070400000);\n\nd = Date.UTC(2015, 0);\nassert (d == 1420070400000);\n\nd = Date.UTC(2015, 0, 1);\nassert (d == 1420070400000);\n\nd = Date.UTC(2015, 0, 1, 0);\nassert (d == 1420070400000);\n\nd = Date.UTC(2015, 0, 1, 0, 0);\nassert (d == 1420070400000);\n\nd = Date.UTC(2015, 0, 1, 0, 0, 0);\nassert (d == 1420070400000);\n\nd = Date.UTC(2015, 0, 1, 0, 0, 0, 0);\nassert (d == 1420070400000);\n\nd = Date.UTC(2015, 6, 3, 14, 35, 43, 123);\nassert (d == 1435934143123);\n"

/***/ }),
/* 365 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* argument is not reference */\nassert (delete 0 === true);\nassert (delete \"0\" === true);\nassert (delete (a = 1) === true);\nassert (delete delete a === true);\n\n/* argument is unresolvable reference */\nassert (delete undefined_variable === true);\n\n/* argument is object-based reference */\nvar a = [1];\nassert (a[0] === 1);\nassert (delete a[0] === true);\nassert (a[0] == undefined);\n\nvar b = {c:0};\nassert (b.c === 0);\nassert (delete b.c === true);\nassert (b.c === undefined);\n\n/* argument is lexical environment-based reference */\nvar a = 1;\nassert (a === 1);\nassert (delete a === false);\nassert (a === 1);\n"

/***/ }),
/* 366 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a = Object();"

/***/ }),
/* 367 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert((5 == 5) == true);\nassert((7 != 2) == true);\n\nvar num = 0;\n//var obj = new String(\"0\");\nvar str = \"0\";\nvar b = false;\n\nassert(num === num);\n//assert(obj === obj);\nassert(str === str);\n\n//assert((num === obj) == false);\nassert((num === str) == false);\n//assert((obj === str) == false);\n//assert((null === undefined) == false);\n//assert((obj === null) == false);\n//assert((obj === undefined) == false);\n"

/***/ }),
/* 368 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar e;\n\n/* Error */\ne = new Error ();\nassert (e.name === \"Error\");\nassert (e.message === \"\");\nassert (e.toString() === \"Error\");\n\ne = new Error(\"some message\");\nassert (e.name === \"Error\");\nassert (e.message === \"some message\");\nassert (e.toString() === \"Error: some message\");\n\ne.name = \"\";\nassert (e.toString() === \"some message\");\ne.message = \"\";\nassert (e.toString() === \"\");\n\nassert (Error.prototype.toString !== Object.prototype.toString);\nassert (Error.prototype.constructor === Error);\nassert (Error.prototype.name === \"Error\");\nassert (Error.prototype.message === \"\");\nassert (Error.prototype.toString() === \"Error\");\n\n/* TypeError */\ne = new TypeError ();\nassert (e.name === \"TypeError\");\nassert (e.message === \"\");\nassert (e.toString() === \"TypeError\");\n\ne = new TypeError(\"some message\");\nassert (e.name === \"TypeError\");\nassert (e.message === \"some message\");\nassert (e.toString() === \"TypeError: some message\");\n\ne.name = \"\";\nassert (e.toString() === \"some message\");\ne.message = \"\";\nassert (e.toString() === \"\");\n\nassert (TypeError.prototype.toString === Error.prototype.toString);\nassert (TypeError.prototype.constructor === TypeError);\nassert (TypeError.prototype.name === \"TypeError\");\nassert (TypeError.prototype.message === \"\");\nassert (TypeError.prototype.toString() === \"TypeError\");\n\ntry\n{\n  null[1] = 'abcd';\n\n  assert (false);\n}\ncatch (e)\n{\n  assert(e instanceof TypeError);\n  assert(e instanceof Error);\n  assert(e instanceof Object);\n\n  assert(!(e instanceof Function));\n}\n\n\n/* ReferenceError */\ne = new ReferenceError ();\nassert (e.name === \"ReferenceError\");\nassert (e.message === \"\");\nassert (e.toString() === \"ReferenceError\");\n\ne = new ReferenceError(\"some message\");\nassert (e.name === \"ReferenceError\");\nassert (e.message === \"some message\");\nassert (e.toString() === \"ReferenceError: some message\");\n\ne.name = \"\";\nassert (e.toString() === \"some message\");\ne.message = \"\";\nassert (e.toString() === \"\");\n\nassert (ReferenceError.prototype.toString === Error.prototype.toString);\nassert (ReferenceError.prototype.constructor === ReferenceError);\nassert (ReferenceError.prototype.name === \"ReferenceError\");\nassert (ReferenceError.prototype.message === \"\");\nassert (ReferenceError.prototype.toString() === \"ReferenceError\");\n\ntry\n{\n  var a = non_existing_variable;\n\n  assert (false);\n}\ncatch (e)\n{\n  assert(e instanceof ReferenceError);\n  assert(e instanceof Error);\n  assert(e instanceof Object);\n\n  assert(!(e instanceof Function));\n}\n\n/* EvalError */\ne = new EvalError ();\nassert (e.name === \"EvalError\");\nassert (e.message === \"\");\nassert (e.toString() === \"EvalError\");\n\ne = new EvalError(\"some message\");\nassert (e.name === \"EvalError\");\nassert (e.message === \"some message\");\nassert (e.toString() === \"EvalError: some message\");\n\ne.name = \"\";\nassert (e.toString() === \"some message\");\ne.message = \"\";\nassert (e.toString() === \"\");\n\nassert (EvalError.prototype.toString === Error.prototype.toString);\nassert (EvalError.prototype.constructor === EvalError);\nassert (EvalError.prototype.name === \"EvalError\");\nassert (EvalError.prototype.message === \"\");\nassert (EvalError.prototype.toString() === \"EvalError\");\n\n/* RangeError */\ne = new RangeError ();\nassert (e.name === \"RangeError\");\nassert (e.message === \"\");\nassert (e.toString() === \"RangeError\");\n\ne = new RangeError(\"some message\");\nassert (e.name === \"RangeError\");\nassert (e.message === \"some message\");\nassert (e.toString() === \"RangeError: some message\");\n\ne.name = \"\";\nassert (e.toString() === \"some message\");\ne.message = \"\";\nassert (e.toString() === \"\");\n\nassert (RangeError.prototype.toString === Error.prototype.toString);\nassert (RangeError.prototype.constructor === RangeError);\nassert (RangeError.prototype.name === \"RangeError\");\nassert (RangeError.prototype.message === \"\");\nassert (RangeError.prototype.toString() === \"RangeError\");\n\n/* SyntaxError */\ne = new SyntaxError ();\nassert (e.name === \"SyntaxError\");\nassert (e.message === \"\");\nassert (e.toString() === \"SyntaxError\");\n\ne = new SyntaxError(\"some message\");\nassert (e.name === \"SyntaxError\");\nassert (e.message === \"some message\");\nassert (e.toString() === \"SyntaxError: some message\");\n\ne.name = \"\";\nassert (e.toString() === \"some message\");\ne.message = \"\";\nassert (e.toString() === \"\");\n\nassert (SyntaxError.prototype.toString === Error.prototype.toString);\nassert (SyntaxError.prototype.constructor === SyntaxError);\nassert (SyntaxError.prototype.name === \"SyntaxError\");\nassert (SyntaxError.prototype.message === \"\");\nassert (SyntaxError.prototype.toString() === \"SyntaxError\");\n\n/* URIError */\ne = new URIError ();\nassert (e.name === \"URIError\");\nassert (e.message === \"\");\nassert (e.toString() === \"URIError\");\n\ne = new URIError(\"some message\");\nassert (e.name === \"URIError\");\nassert (e.message === \"some message\");\nassert (e.toString() === \"URIError: some message\");\n\ne.name = \"\";\nassert (e.toString() === \"some message\");\ne.message = \"\";\nassert (e.toString() === \"\");\n\nassert (URIError.prototype.toString === Error.prototype.toString);\nassert (URIError.prototype.constructor === URIError);\nassert (URIError.prototype.name === \"URIError\");\nassert (URIError.prototype.message === \"\");\nassert (URIError.prototype.toString() === \"URIError\");\n"

/***/ }),
/* 369 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert ('abcd\\\nefgh' === 'abcdefgh');\n\nassert ('\\'' === \"'\");\nassert (\"\\'\" === \"'\");\nassert ('\\\"' === '\"');\nassert (\"\\\"\" === '\"');\n\n//\n// TODO\n//   Extend the test by verifying character codes after String.charCodeAt would be implemented\n//\nassert ((new String ('\\\\')).length === 1);\nassert ((new String ('\\b')).length === 1);\nassert ((new String ('\\f')).length === 1);\nassert ((new String ('\\n')).length === 1);\nassert ((new String ('\\r')).length === 1);\nassert ((new String ('\\t')).length === 1);\nassert ((new String ('\\v')).length === 1);\n\n// 'p' is not SingleEscapeCharacter\nassert ('\\p' === 'p');\n\nvar v\\u0061riable = 'valu\\u0065';\nassert (variable === 'value');\n"

/***/ }),
/* 370 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert (eval () === undefined);\nassert (eval (undefined) === undefined);\nassert (eval (null) === null);\nassert (eval (true) === true);\nassert (eval (false) === false);\nassert (eval (1) === 1);\nassert (eval (eval) === eval);\n\n/* Indirect eval */\nfunction f1()\n{\n var v1 = 'local value';\n\n assert (v1 === 'local value');\n assert (typeof (this.v1) === 'undefined');\n\n r = this.eval ('var v1 = \"global value\";');\n\n assert (v1 === 'local value');\n assert (this.v1 === 'global value');\n assert (r === undefined);\n};\n\nf1 ();\n\n/* Direct eval from strict mode code */\nfunction f2 (global)\n{\n 'use strict';\n var v2 = 'local value';\n\n assert (v2 === 'local value');\n assert (typeof (global.v2) === 'undefined');\n\n r = eval ('var v2 = \"global value\";');\n\n assert (v2 === 'local value');\n assert (typeof (global.v2) === 'undefined');\n assert (r === undefined);\n\n try\n {\n   eval ('arguments = 1;');\n   assert (false);\n }\n catch (e)\n {\n   assert (e instanceof SyntaxError);\n }\n}\n\nf2 (this);\n\nvar y;\n\nfor (var i = 0; i < 100; i++)\n{\n  var r = eval ('var x =' + ' 1;');\n  assert (typeof (x) === 'number');\n  assert (r === undefined);\n\n  delete x;\n  assert (typeof (x) === 'undefined');\n\n  r = eval ('\"use ' + 's' + 't' + 'r' + 'i' + 'c' + 't\"; va' + 'r x = 1;');\n  assert (typeof (x) === 'undefined');\n  assert (r === \"use strict\");\n\n  y = 'str';\n  assert (typeof (y) === 'string');\n\n  delete y;\n  assert (typeof (y) === 'string');\n\n  r = eval ('var y = \"another ' + 'string\";');\n  assert (y === 'another string');\n  assert (r == undefined);\n\n  delete y;\n  assert (typeof (y) === 'string');\n\n  r = eval ('if (true) 3; else 5;');\n  assert (r === 3);\n}\n\n// Check SyntaxError handling\ntry\n{\n  eval ('var var;');\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof SyntaxError);\n}\n\ntry\n{\n  eval (\"v_0 = {a: Math, /[]/};\");\n  assert (false);\n}\ncatch(e)\n{\n  assert (e instanceof SyntaxError);\n}\n\n// nested eval with function expressions\ncode = 'eval(\"(function (){})\")';\ncode = \"eval ('\" + code + \"')\";\neval (code);\n"

/***/ }),
/* 371 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\narguments = 1;\n"

/***/ }),
/* 372 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\ntry{}catch(arguments){};\n"

/***/ }),
/* 373 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\nvar a = { set a(arguments) {} };\n"

/***/ }),
/* 374 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\nvar arguments;\n"

/***/ }),
/* 375 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\nfunction f(arguments) {}\n"

/***/ }),
/* 376 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\narguments++;\n"

/***/ }),
/* 377 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\n++arguments;\n"

/***/ }),
/* 378 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\ndelete a;\n"

/***/ }),
/* 379 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar str = '\\x5t';\n"

/***/ }),
/* 380 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar str = '\\u004t';\n"

/***/ }),
/* 381 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a\\u0028bcd;\n"

/***/ }),
/* 382 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\neval = 1;\n"

/***/ }),
/* 383 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\ntry{}catch(eval){};\n"

/***/ }),
/* 384 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\nvar a = { set a(eval) {} };\n"

/***/ }),
/* 385 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\nvar eval;\n"

/***/ }),
/* 386 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\nfunction f(eval) {}\n"

/***/ }),
/* 387 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\neval++;\n"

/***/ }),
/* 388 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\n++eval;\n"

/***/ }),
/* 389 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\";\n\n(function () {\n  var let = 1;\n})();\n"

/***/ }),
/* 390 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\na: for (var i = 0; i < 10; i++)\n{\n  function f ()\n  {\n    for (var j = 0; n < 10; j++)\n    {\n      break a;\n    }\n  }\n\n  f ();\n}\n"

/***/ }),
/* 391 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\na: a: for (var i = 0; i < 10; i++)\n{\n  break a;\n}\n"

/***/ }),
/* 392 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfor (var i = 0; i < 10; i++)\n{\n  break a;\n}\n"

/***/ }),
/* 393 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\nvar let = 1;\n"

/***/ }),
/* 394 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a = {a:1, get a() {return 1}}\n"

/***/ }),
/* 395 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a = {get a() {return undefined}, get a() {return undefined}}\n"

/***/ }),
/* 396 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\nvar a = {a:1, a:2};\n"

/***/ }),
/* 397 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\nvar a = 07;\n"

/***/ }),
/* 398 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\nfunction f(a, a) {}\n"

/***/ }),
/* 399 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\"\n\nwith (Array) {}\n"

/***/ }),
/* 400 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// 1.\nvar simple_obj = {a: 1, b: 2, c: 3, d: 4};\nfor (var prop_of_simple_obj in simple_obj) {\n    simple_obj[prop_of_simple_obj] += 4;\n}\n\nassert(simple_obj.a === 5\n       && simple_obj.b === 6\n       && simple_obj.c === 7\n       && simple_obj.d === 8);\n\n// 2.\nfor\n    (\n    var\n        prop_of_simple_obj in simple_obj\n    ) {\n    simple_obj[prop_of_simple_obj] -= 4;\n}\n\nassert(simple_obj.a === 1\n       && simple_obj.b === 2\n       && simple_obj.c === 3\n       && simple_obj.d === 4);\n\n// 3.\nfunction test() {\n  var cnt = 0;\n\n  for (var prop_of_simple_obj in simple_obj) {\n    if (prop_of_simple_obj === 'b')\n      continue;\n\n    cnt++;\n\n    simple_obj[prop_of_simple_obj] += 4;\n  }\n\n  return cnt;\n}\n\nvar ret_val = test();\n\nassert((simple_obj.a === 5\n        && simple_obj.b === 2\n        && simple_obj.c === 7\n        && simple_obj.d == 8)\n       && ret_val === 3);\n\n// 4.\nvar array_obj = new Array(1, 2, 3, 4, 5, 6, 7);\nvar prop_of_array_obj;\n\narray_obj.eight = 8;\n\nfor (prop_of_array_obj in array_obj) {\n    array_obj[prop_of_array_obj] += 1;\n}\n\nassert(array_obj[0] === 2\n       && array_obj[1] === 3\n       && array_obj[2] === 4\n       && array_obj[3] === 5\n       && array_obj[4] === 6\n       && array_obj[5] === 7\n       && array_obj[6] === 8\n       && array_obj['eight'] === 9);\n\n// 5.\nvar null_obj = null;\nfor (var prop_of_null_obj in null_obj) {\n    assert(false);\n}\n\n// 6.\nvar empty_object = {};\nfor (var prop_of_empty_object in empty_object) {\n    assert(false);\n}\n\n// 7.\nfor (var i in undefined) {\n    assert(false);\n}\n\n// 8.\nvar base_obj = {base_prop: \"base\"};\n\nfunction constr() {\n    this.derived_prop = \"derived\";\n}\n\nconstr.prototype = base_obj;\n\nvar derived_obj = new constr();\n\nfor (var prop_of_derived_obj in derived_obj) {\n    derived_obj[prop_of_derived_obj] += \"A\";\n}\n\nassert(derived_obj.base_prop === \"baseA\" && derived_obj.derived_prop === \"derivedA\");\n\n// 9.\nlog = {};\ncount = 0;\n\nfor (i in {q : 1})\n{\n  log [i] = true;\n  count++;\n}\n\nassert (count == 1 && 'q' in log);\n\n// 10.\nlog = {};\ncount = 0;\n\nfor (i in {q : 1, p : 2, get f() { ; }, set f (v) { ; }, get t () { }, set c (v) {}})\n{\n  log [i] = true;\n  count++;\n}\n\nassert (count == 5\n        && 'q' in log\n        && 'p' in log\n        && 'f' in log\n        && 't' in log\n        && 'c' in log);\n\n// 11.\nlog = {};\ncount = 0;\n\nvar a = [];\na[5] = 5;\nfor (var x in a)\n{\n  log[x] = true;\n  count++;\n}\n\nassert (count == 1\n        && '5' in log);\n\n// 12.\nlog = {};\ncount = 0;\n\nq = { c : 3, d : 4 };\n\nfunction p_constructor ()\n{\n  this.a = 1;\n  this.b = 2;\n\n  return this;\n}\n\np_constructor.prototype = q;\np = new p_constructor ();\n\nObject.defineProperty (p, 'h', { value : 5, enumerable : false, configurable : true });\nObject.defineProperty (q, 'h', { value : 6, enumerable : true, configurable : true });\n\nfor (var i in p)\n{\n  log[i] = true;\n  count++;\n}\n\nassert (count == 4\n        && 'a' in log\n        && 'b' in log\n        && 'c' in log\n        && 'd' in log);\n\n// 13.\nlog = {};\ncount = 0;\n\nfunction f()\n{\n  var tmp = { a: 1, b: 2, c: 3, d: 4 };\n\n  return tmp;\n}\n\nfor (var i in f())\n{\n  log[i] = true;\n  count++;\n}\n\nassert (count == 4\n        && 'a' in log\n        && 'b' in log\n        && 'c' in log\n        && 'd' in log);\n\n// 14.\nlog = {};\ncount = 0;\n\nb = 'prop';\nc = { prop : 1 };\nBoolean.prototype.boolean_prototype_prop = 1;\n\nfor (a in b in c)\n{\n  log[a] = true;\n  count++;\n}\n\nassert (count == 1\n        && 'boolean_prototype_prop' in log);\n\n// 15.\nlog = {};\ncount = 0;\n\nfor (a in 'prop' in { prop : 1 })\n{\n  log[a] = true;\n  count++;\n}\n\nassert (count == 1\n        && 'boolean_prototype_prop' in log);\n\n// 16.\na = 'str';\nb = {};\nfor ((a in b) ; ; )\n{\n  break;\n}\n\n// 17.\nlog = {};\ncount = 0;\n\nvar base_obj = { base_prop1: \"base1\", base_prop2: \"base2\" };\n\nfunction l () {\n    this.derived_prop1 = \"derived1\";\n    this.derived_prop2 = \"derived2\";\n}\n\nl.prototype = base_obj;\n\nvar derived_obj = new l();\n\nfor (var prop_of_derived_obj in derived_obj) {\n  delete derived_obj.derived_prop1;\n  delete derived_obj.derived_prop2;\n  delete base_obj.base_prop1;\n  delete base_obj.base_prop2;\n\n  log[prop_of_derived_obj] = true;\n  count++;\n}\n\nassert(count == 1\n       && ('base_prop1' in log\n           || 'base_prop2' in log\n           || 'derived_prop1' in log\n           || 'derived_prop2' in log));\n"

/***/ }),
/* 401 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014-2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// 1.\nvar i = 0;\nfor (; i < 100; i++) {\n}\nassert(i == 100);\n\n// 2.\nfor (var j = 0; j < 100; j++) {\n}\nassert(j == 100);\n\n// 3.\nfor (i = 0; ; ) {\n  if (i == 100) {\n    break;\n    assert(false);\n  }\n  i++;\n}\nassert(i == 100);\n\n// 4.\nfor (i = 0; i < 10; i++) {\n  for (j = 0; j < 10; j++) {\n  }\n}\nassert(i != 100);\nassert(j != 100);\nassert(i == 10);\nassert(j == 10);\n\n// 5.\ns = '';\nfor (\nvar i = {x: 0};\n\n i.x < 2\n;\n i.x++\n\n)\n {\n  s += i.x;\n}\n\nassert (s === '01');\n\n// 6.\ns = '';\nfor (\nvar i = {x: 0};\n\n i.x < 2\n;\n\n i.x++\n\n)\n {\n  s += i.x;\n}\n\nassert (s === '01');\n\n// 7.\na = [];\nfor (; a[0]; ) {\n  assert (false);\n}\n"

/***/ }),
/* 402 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f() {\n    return 'foo';\n}\nassert ((function() {\n    'use strict';\n    if (1 === 0) {\n        function f() {\n            return 'bar';\n        }\n    }\n    return f();\n})() === 'foo');\n\nfunction check_syntax_error (s) {\n  try {\n    eval (s);\n    assert (false);\n  }\n  catch (e) {\n    assert (e instanceof SyntaxError);\n  }\n}\n\ncheck_syntax_error (\"'use strict'; function arguments () {}\");\ncheck_syntax_error (\"'use strict'; var l = function arguments () {}\");\n\ncheck_syntax_error (\"function f__strict_mode_duplicate_parameters (p, p) { 'use strict'; }\");\n\nfunction test_strict_mode_propagation_in_func_expr_and_getters_setters () {\n  var p = function () {\n    'use strict';\n\n    return true;\n  }\n\n  var o = { get prop () { 'use strict'; return true; }, set prop (v) { 'use strict'; } };\n\n  function test () {\n    tmp_eval = eval;\n    eval = tmp_eval;\n  }\n}\n"

/***/ }),
/* 403 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f1(x)\n{\n  var c1 = (x >= 1);\n  var c2 = (x <= 10);\n\n  if (c1 === true)\n  {\n    if (c2 === true)\n    {\n      assert(t);\n\n      return;\n    }\n  }\n\n  assert(t === false);\n}\n\nvar i;\nvar t = true;\n\nfor(i = 1; i <= 10; i++)\n{\n  f1(i);\n}\n\nt = false;\n\nfor(i = 11; i <= 20; i++)\n{\n  f1(i);\n}\n\nfunction g (p, p) {\n  assert (p === arguments[1]);\n  assert (p === 'second');\n}\n\ng ('first', 'second');\n\ntry {\n  f1 ({});\n  f1 (undefined_variable);\n  assert (false);\n}\ncatch (e) {\n  assert (e instanceof ReferenceError);\n}\n\nfunction f2 ()\n{\n  return this;\n}\n\n//with ({})\n//{\n//  assert (f2 () === this);\n//}\n"

/***/ }),
/* 404 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar f = new Function ('');\nassert (f () === undefined);\n\nvar f = new Function ('\"use strict\"; f = undefined;');\nassert (f () === undefined && f === undefined);\n\nvar f = new Function ('\"use strict\"; q = undefined;');\ntry\n{\n  f ();\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof ReferenceError);\n}\n\nfor (i = 1; i < 10; i ++)\n{\n  var f = new Function ('a', 'b', 'var q = a; b++; function f (k) {return q + k + b++;}; return f;');\n\n  var fns = new Array ();\n\n  for (var n = 0; n < 10; n++)\n  {\n    var r = f (1, 7);\n    fns[n] = r;\n\n    var check_value = 10;\n\n    for (var m = 0; m < 100; m++)\n    {\n      var value = r (1);\n      assert (check_value++ === value);\n    }\n  }\n\n  var check_value = 109;\n  for (var n = 0; n < 11; n++)\n  {\n    for (var m = 0; m < 10; m++)\n    {\n      var value = fns [m] (m * n);\n      assert (value == check_value + m * n);\n    }\n\n    check_value++;\n  }\n}\n\nvar f = new Function (\"a,b\", \"c\", \"return a + b + c;\");\nassert (f (1,2,3) === 6);\n\nf = new Function (\"a,b\", \"c,d\", \"return a + b + c + d;\");\nassert (f (1,2,3,4) === 10);\n\nf = new Function (\"a\" , \"b\", \"c,d\", \"return a + b + c + d;\");\nassert (f (1,2,3,4) === 10);\n\nvar f = new Function (\" a\\t ,  b\", \"\\u0020c\", \"return a + b + c;\");\nassert (f (1,2,3) === 6);\n\nf = new Function (\"a, \\n b  \\u0020\", \"c \\t, d\\n\", \"return a + b + c + d;\");\nassert (f (1,2,3,4) === 10);\n\nf = new Function (\" a\\t\" , \"\\nb \", \" \\u0020c , d \", \"return a + b + c + d;\");\nassert (f (1,2,3,4) === 10);\n\ntry\n{\n  new Function ({\n    toString : function () {\n      throw new TypeError();\n    },\n    valueOf : function () {\n      throw new TypeError();\n    }\n  });\n\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n}\n\nvar p = { toString : function() { throw 1; } };\nvar body = { toString : function() { throw \"body\"; } };\n\ntry\n{\n  new Function (p, body);\n  // Should not be reached.\n  assert (false);\n}\ncatch (e)\n{\n  assert (e === 1);\n}\n\n// Check SyntaxError handling\ntry\n{\n  new Function ('var var;');\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof SyntaxError);\n}\n\ntry\n{\n  new Function ('a;b', 'return;');\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof SyntaxError);\n}\n"

/***/ }),
/* 405 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// See a general usage: number addition.\nfunction addNum ()\n{\n  var sum = 0;\n  for(var i = 0; i < arguments.length; i++)\n  {\n    sum += arguments[i];\n  }\n  return sum;\n}\n\nvar array = [6720, 4, 42];\nvar obj;\n\nobj = addNum.apply(obj, array);\nassert (obj === 6766);\n\n// If the arguments are missing.\nobj = addNum.apply();\nassert (obj === 0);\n\nobj = addNum.apply(obj);\nassert (obj === 0);\n\n// If the function is a builtin.\nassert (Math.min.apply(null, array) === 4);\nassert (Math.max.apply(null, array) === 6720);\n\n// If the function can't be used as caller.\ntry {\n  obj = new Function.prototype.apply();\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\n// If the called function throws an error.\nfunction throwError ()\n{\n  throw new ReferenceError (\"foo\");\n}\n\ntry {\n  obj = throwError.apply(obj, array);\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n\n// If the array access throws an error.\nObject.defineProperty(array, '0', { 'get' : function () { throw new ReferenceError (\"foo\"); } });\n\ntry {\n  obj = addNum.apply(obj, array);\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n"

/***/ }),
/* 406 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar mul = function(a, b) {\n  return a * b;\n};\n\nvar triple = mul.bind(null, 3);\ndelete mul;\nassert (triple(20) === 60);\nassert (triple.prototype === undefined);\n\nvar dupl = triple.bind({}, 2);\nassert (dupl() === 6);\nassert (dupl.prototype === undefined);\n\ntry {\n  var obj = {};\n  var new_func = obj.bind(null, 'foo');\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\nvar obj1 = {num : 36};\n\nvar f1 = function(a) {\n  return this.num + a;\n}\n\nvar add36 = f1.bind(obj1);\nassert (add36(24) === 60);\n\nvar appendfoo = f1.bind(obj1, \"foo\");\nassert (appendfoo() === \"36foo\");\n\nvar f2 = function(a) {\n  return this.num + a.num;\n}\n\nvar sum = f2.bind(obj1, obj1);\nassert (sum() === 72);\n\nfunction P(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nvar P1 = P.bind({}, 2);\nvar _p1 = new P1();\nassert (_p1.x === 2);\nassert (_p1.y === undefined);\nassert (_p1 instanceof P);\nassert (_p1 instanceof P1);\n\nvar P2 = P1.bind(null);\nvar _p2 = new P2();\nassert (_p2.x === 2);\nassert (_p2.y === undefined);\n\n_p2 = new P2(12, 60);\nassert (_p2.x === 2);\nassert (_p2.y === 12);\n\n_p2 = new P2({}, 12);\nassert (_p2.x === 2);\nassert (Object.getPrototypeOf(_p2.y) === Object.prototype);\nassert (_p2 instanceof P);\nassert (_p2 instanceof P1);\nassert (_p2 instanceof P2);\n\nvar P3 = P2.bind({}, 5);\nvar _p3 = new P3(8);\nassert (_p3.x === 2);\nassert (_p3.y === 5);\nassert (_p3 instanceof P);\nassert (_p3 instanceof P1);\nassert (_p3 instanceof P2);\nassert (_p3 instanceof P3);\n\nvar P4 = P.bind();\nP4(4, 5);\nassert (x === 4);\nassert (y === 5);\n\nvar _x = x;\nvar _y = y;\n\nvar P5 = P.bind(undefined);\nP5(5, 4);\nassert (x === _y);\nassert (y === _x);\n\nvar number = Number.constructor;\nvar bound = number.bind(null, 24);\nvar foo = new bound();\nassert (foo() === undefined);\n\nvar number = Number;\nvar bound = number.bind(null, 3);\nvar foo = new bound();\nassert (foo == 3);\nassert (foo instanceof Number);\nassert (foo.prototype === undefined);\n\nvar func = Number.prototype.toString.bind('foo');\nassert (func instanceof Function);\n\ntry {\n  var math = Math.sin;\n  var bound = math.bind(null, 0);\n  var foo = new bound();\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\nvar foo = function(x, y) { }\n\nvar bound = foo.bind(null);\nassert(bound.length === 2);\n\nbound = foo.bind(null, 9);\nassert(bound.length === 1);\n\nbound = foo.bind(null, 9, 8);\nassert(bound.length === 0);\n\n"

/***/ }),
/* 407 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f_empty()\n{\n  return;\n}\n\nfunction f_42()\n{\n  return 42;\n}\n\nfunction f_expr()\n{\n  var a = 5;\n  var b = 5;\n  return a + b;\n}\n\nassert(f_expr() === 10);\nassert(f_42() === 42);"

/***/ }),
/* 408 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n  (function() {\n    function decl() {}\n  })();\n  decl();\n  assert(false);\n} catch (e) {\n  assert(e instanceof ReferenceError);\n}\n\ntry {\n  var o = {\n    get p() {\n      function decl() {\n      }\n    }\n  };\n  decl();\n  assert(false);\n} catch (e) {\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 409 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert(Function.constructor === Function);\nassert(Function.prototype() === undefined);\nassert(Function.length === 1);\n"

/***/ }),
/* 410 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f (arg1, arg2, arg3)\n{\n  this.string = arg1;\n  this.number = arg2;\n  this.boolean = arg3;\n}\n\nvar this_arg = {};\n\nf.call (this_arg, 's', 1, true, null);\n\nassert (this_arg.string  === 's');\nassert (this_arg.number  === 1);\nassert (this_arg.boolean === true);\n"

/***/ }),
/* 411 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar obj = {}, obj_l;\nobj_l = obj;\n\nfor (var k = 0; k < 1500; k++)\n{\n  obj_l.prop = {};\n  obj_l = obj_l.prop;\n}\n\nfunction f (o, i) {\n  if (--i > 0) {\n    f ({a:o, b:o}, i);\n  }\n}\n\nfor (var i = 0; i < 100; i++)\n{\n  ({} + f ({}, 12));\n}\n"

/***/ }),
/* 412 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/*\n * Check that in case of 'primitive' base, 'this' argument of [[Call]] is the base value, not ToObject (base).\n */\nfunction test_1 ()\n{\n 'use strict';\n\n Object.defineProperty (Number.prototype,\n                        'getter',\n                        { get : function () { return this; }, configurable : true });\n\n assert ((10).getter === 10);\n assert (typeof ((10).getter) === 'number');\n\n delete Number.prototype.getter;\n}\n\ntest_1 ();\n"

/***/ }),
/* 413 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 University of Szeged\n// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Escaping\n\nassert (escape (\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\") ===\n        \"%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F\");\nassert (escape (\"\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\") ===\n        \"%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F\");\nassert (escape (\" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMN\") ===\n        \"%20%21%22%23%24%25%26%27%28%29*+%2C-./0123456789%3A%3B%3C%3D%3E%3F@ABCDEFGHIJKLMN\");\nassert (escape (\"OPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}\\x7F\") ===\n        \"OPQRSTUVWXYZ%5B%5C%5D%5E_%60abcdefghijklmnopqrstuvwxyz%7B%7C%7D%7F\");\n\nassert (escape(\"\\x80\\x95\\xaf\\xfe\\xff\") === \"%80%95%AF%FE%FF\");\nassert (escape(\"\\u0100\\ud800\\udc00\") === \"%u0100%uD800%uDC00\");\n\nassert (escape({}) === \"%5Bobject%20Object%5D\");\nassert (escape(true) === \"true\");\n\n// Unescaping\n\nassert (unescape (\"%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F\") ===\n        \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\");\nassert (unescape(\"%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F\") ===\n        \"\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\");\nassert (unescape(\"%20%21%22%23%24%25%26%27%28%29*+%2C-./0123456789%3A%3B%3C%3D%3E%3F@ABCDEFGHIJKLMN\") ===\n        \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMN\");\nassert (unescape(\"OPQRSTUVWXYZ%5B%5C%5D%5E_%60abcdefghijklmnopqrstuvwxyz%7B%7C%7D%7F\") ===\n        \"OPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}\\x7F\");\nassert (unescape(\"%80%95%AF%FE%FF\") === \"\\x80\\x95\\xaf\\xfe\\xff\");\nassert (unescape(\"%ud800\") === \"\\ud800\");\nassert (unescape(\"\\ud800\") === \"\\ud800\");\nassert (unescape(\"\\ud800\\udc00\") === \"\\ud800\\udc00\");\nassert (unescape(\"%ud800%udc00\") === \"\\ud800\\udc00\");\nassert (unescape(\"\\ud800%udc00\") === \"\\ud800\\udc00\");\nassert (unescape(\"%ud800\\udc00\") === \"\\ud800\\udc00\");\n\nassert (unescape({}) === \"[object Object]\");\nassert (unescape(true) === \"true\")\nassert (unescape() === \"undefined\");\nassert (unescape(1985) === \"1985\");\nassert (unescape(\"%5#%uu\") === \"%5#%uu\");\n\n// Inversion\n\nvar str = \"\\u0001\\u0000\\uFFFF\";\nassert (unescape(escape(str)) === str);\n"

/***/ }),
/* 414 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert(parseFloat(\"1\") === 1);\nassert(parseFloat(\"+1\") === 1);\nassert(parseFloat(\"-1\") === -1);\nassert(parseFloat(\"1.2\") === 1.2);\nassert(parseFloat(\"+1.2\") === 1.2);\nassert(parseFloat(\"-1.2\") === -1.2);\nassert(parseFloat(\"1.2e3\") === 1200);\nassert(parseFloat(\"+1.2e3\") === 1200);\nassert(parseFloat(\"-1.2e3\") === -1200);\nassert(parseFloat(\"   \\n\\t  1.2e3\") === 1200);\nassert(parseFloat(\"03.02e1\") === 30.2);\nassert(parseFloat(\"003.\") === 3);\nassert(parseFloat(\".2e3\") === 200);\nassert(parseFloat(\"1.e3\") === 1000);\nassert(parseFloat(\"1.2e\") === 1.2);\nassert(parseFloat(\"1.e\") === 1);\nassert(parseFloat(\"1.e3\") === 1000);\nassert(parseFloat(\"1e3\") === 1000);\nassert(parseFloat(\"1e\") === 1);\nassert(parseFloat(\"1.2e3foo\") === 1200);\nassert(isNaN(parseFloat(\"foo1.2e3foo\")));\nassert(parseFloat(\"Infinity\") === Infinity);\nassert(parseFloat(\"-Infinity\") === -Infinity);\nassert(parseFloat(\"Infinityfoo\") === Infinity);\nassert(parseFloat(\"-Infinityfoo\") === -Infinity);\nassert(isNaN(parseFloat(\"\")));\nassert(isNaN(parseFloat(\".\")));\nassert(isNaN(parseFloat(\"..\")));\nassert(isNaN(parseFloat(\"+\")));\nassert(isNaN(parseFloat(\"-\")));\nassert(isNaN(parseFloat(\"e\")));\nassert(isNaN(parseFloat(\"a\")));\nassert(isNaN(parseFloat(\"e+\")));\nassert(isNaN(parseFloat(\"+e-\")));\nassert(isNaN(parseFloat(\".e\")));\nassert(isNaN(parseFloat(\".a\")));\nassert(isNaN(parseFloat(\"e3\")));\nassert(isNaN(parseFloat(\".e3\")));\nassert(parseFloat(\"1..2\") === 1);\nassert(parseFloat(\"1.2.3\") === 1.2);\nassert(parseFloat(\"1.2ee3\") === 1.2);\nassert(parseFloat(\"0\") === 0);\nassert(parseFloat(\".0\") === 0);\nassert(parseFloat(\"0.e3\") === 0);\nassert(parseFloat(\"0.0e3\") === 0);\nassert(parseFloat(\"1.2eA\") === 1.2);\nassert(parseFloat(\"1.ae3\") === 1);\nassert(parseFloat(\"\\u00a0\\u00a01.2e3\") === 1200);\nassert(parseFloat(\"\\u2029\\u2029\\u00a01.2e\\u00D0\") === 1.2);\nassert(isNaN(parseFloat(\"\\u2029\\u2029\\u00a0\\u00D01.2e3\")));\nassert(parseFloat(\"\\u2029\\u2029\\u00a01.\\u20292e\\u00D0\") === 1);\nassert(isNaN(parseFloat(\"\\u2029\\u2029\")));\n\nvar obj = new Object();\nvar arr = [3,4,5];\nvar num = 7;\nvar bool = true;\nvar undef;\n\nassert(isNaN(parseFloat(obj)));\nassert(parseFloat(arr) === 3);\nassert(parseFloat(num) === 7);\nassert(isNaN(parseFloat(bool)));\nassert(isNaN(parseFloat(undef)));\n\nvar obj = { toString : function () { throw new ReferenceError(\"foo\") } };\ntry {\n  parseFloat(obj);\n  assert(false);\n} catch (e) {\n  assert(e instanceof ReferenceError);\n  assert(e.message === \"foo\");\n}\n"

/***/ }),
/* 415 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert(parseInt(\"123\") === 123);\nassert(parseInt(\"+123\") === 123);\nassert(parseInt(\"-123\") === -123);\nassert(parseInt(\"0123\") === 123);\nassert(parseInt(\"  123\") === 123);\nassert(parseInt(\" \\n  123\") === 123);\nassert(parseInt(\" \\n  123  \\t\") === 123);\nassert(parseInt(\"0x123\") === 291);\nassert(parseInt(\"0X123\") === 291);\nassert(parseInt(\"123\", 4) === 27);\nassert(parseInt(\"ABC\", 16) === 2748);\nassert(parseInt(\"12A3\") === 12);\nassert(parseInt(\"12.34\") === 12);\nassert(isNaN(parseInt(\"AB\")));\nassert(isNaN(parseInt(\"\")));\nassert(isNaN(parseInt(\"-\")));\nassert(isNaN(parseInt(\"-\", 11)));\nassert(parseInt(\"\\u00a0123\") === 123);\nassert(parseInt(\"\\u20291  123\\u00D0\") === 1);\nassert(parseInt(\"\\u00a0123\", 13) === 198);\nassert(parseInt(\"\\u2029123  1\\u00D0\", 11) === 146);\nassert(isNaN(parseInt(\"\\u0009\")));\nassert(isNaN(parseInt(\"\\u00A0\")));\nassert(parseInt(\"\\u00A0\\u00A0-1\") === parseInt(\"-1\"));\nassert(parseInt(\"\\u00A01\") === parseInt(\"1\"));\n\nvar bool = true;\nvar obj = new Object();\nvar num = 8;\nvar arr = [2,3,4];\nvar undef;\n\nassert(isNaN(parseInt(bool, bool)));\nassert(isNaN(parseInt(bool, obj)));\nassert(isNaN(parseInt(bool, num)));\nassert(isNaN(parseInt(bool, arr)));\n\nassert(isNaN(parseInt(obj, bool)));\nassert(isNaN(parseInt(obj, obj)));\nassert(isNaN(parseInt(obj, num)));\nassert(isNaN(parseInt(obj, arr)));\n\nassert(isNaN(parseInt(num, bool)));\nassert(parseInt(num, obj) === 8);\nassert(isNaN(parseInt(num, num)));\nassert(parseInt(num, arr) === 8);\n\nassert(isNaN(parseInt(arr, bool)));\nassert(parseInt(arr, obj) === 2);\nassert(parseInt(arr, num) === 2);\nassert(parseInt(arr, arr) === 2);\n\nassert(isNaN(parseInt(undef, bool)));\nassert(isNaN(parseInt(undef, obj)));\nassert(isNaN(parseInt(undef, num)));\nassert(isNaN(parseInt(undef, arr)));\n\nvar obj = { toString : function () { throw new ReferenceError(\"foo\") } };\ntry {\n  parseInt(obj);\n  assert(false);\n} catch (e) {\n  assert(e instanceof ReferenceError);\n  assert(e.message === \"foo\");\n}\n"

/***/ }),
/* 416 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 University of Szeged\n// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// URI encoding\n\nfunction checkEncodeURIParseError (str)\n{\n  try {\n    encodeURI (str);\n    assert (false);\n  } catch(e) {\n    assert(e instanceof URIError);\n  }\n}\n\nassert (encodeURI (\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\") ===\n        \"%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F\");\nassert (encodeURI (\"\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\") ===\n        \"%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F\");\nassert (encodeURI (\" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMN\") ===\n         \"%20!%22#$%25&'()*+,-./0123456789:;%3C=%3E?@ABCDEFGHIJKLMN\");\nassert (encodeURI (\"OPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}\\x7F\") ===\n         \"OPQRSTUVWXYZ%5B%5C%5D%5E_%60abcdefghijklmnopqrstuvwxyz%7B%7C%7D%7F\");\n\nassert (encodeURIComponent (\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\") ===\n        \"%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F\");\nassert (encodeURIComponent (\"\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\") ===\n        \"%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F\");\nassert (encodeURIComponent (\" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMN\") ===\n        \"%20!%22%23%24%25%26'()*%2B%2C-.%2F0123456789%3A%3B%3C%3D%3E%3F%40ABCDEFGHIJKLMN\");\nassert (encodeURIComponent (\"OPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}\\x7F\") ===\n        \"OPQRSTUVWXYZ%5B%5C%5D%5E_%60abcdefghijklmnopqrstuvwxyz%7B%7C%7D%7F\");\n\nassert (encodeURI (\"\\xe9\") == \"%C3%A9\");\nassert (encodeURI (\"\\ud7ff\") == \"%ED%9F%BF\");\nassert (encodeURI (\"\\ue000\") == \"%EE%80%80\");\nassert (encodeURI (\"\\ud800\\udc00\") == \"%F0%90%80%80\");\nassert (encodeURI (String.fromCharCode(0xd800, 0xdc00)) == \"%F0%90%80%80\");\n\ncheckEncodeURIParseError (\"\\ud800\");\ncheckEncodeURIParseError (\"\\udfff\");\n\n// URI decoding\n\nfunction checkDecodeURIParseError (str)\n{\n  try {\n    decodeURI (str);\n    assert (false);\n  } catch(e) {\n    assert(e instanceof URIError);\n  }\n}\n\nassert (decodeURI (\"%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F\") ===\n        \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\");\nassert (decodeURI (\"%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F\") ===\n        \"\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\");\nassert (decodeURI (\"%20%21%22%23%24%25%26%27%28%29%2a%2b%2c%2d%2e%2f\") ===\n        \" !\\\"%23%24%%26'()*%2b%2c-.%2f\");\nassert (decodeURI (\"%30%31%32%33%34%35%36%37%38%39%3a%3b%3c%3d%3e%3f\") ===\n        \"0123456789%3a%3b<%3d>%3f\");\nassert (decodeURI (\"%40%41%42%43%44%45%46%47%48%49%4a%4b%4c%4d%4e%4f\") ===\n        \"%40ABCDEFGHIJKLMNO\");\nassert (decodeURI (\"%50%51%52%53%54%55%56%57%58%59%5a%5b%5c%5d%5e%5f\") ===\n        \"PQRSTUVWXYZ[\\\\]^_\");\nassert (decodeURI (\"%60%61%62%63%64%65%66%67%68%69%6a%6b%6c%6d%6e%6f\") ===\n        \"`abcdefghijklmno\");\nassert (decodeURI (\"%70%71%72%73%74%75%76%77%78%79%7a%7b%7c%7d%7e\") ===\n        \"pqrstuvwxyz{|}~\");\n\nassert (decodeURIComponent (\"%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F\") ===\n        \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\");\nassert (decodeURIComponent (\"%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F\") ===\n        \"\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\");\nassert (decodeURIComponent (\"%20%21%22%23%24%25%26%27%28%29%2a%2b%2c%2d%2e%2f\") ===\n        \" !\\\"#$%&'()*+,-./\");\nassert (decodeURIComponent (\"%30%31%32%33%34%35%36%37%38%39%3a%3b%3c%3d%3e%3f\") ===\n        \"0123456789:;<=>?\");\nassert (decodeURIComponent (\"%40%41%42%43%44%45%46%47%48%49%4a%4b%4c%4d%4e%4f\") ===\n        \"@ABCDEFGHIJKLMNO\");\nassert (decodeURIComponent (\"%50%51%52%53%54%55%56%57%58%59%5a%5b%5c%5d%5e%5f\") ===\n        \"PQRSTUVWXYZ[\\\\]^_\");\nassert (decodeURIComponent (\"%60%61%62%63%64%65%66%67%68%69%6a%6b%6c%6d%6e%6f\") ===\n        \"`abcdefghijklmno\");\nassert (decodeURIComponent (\"%70%71%72%73%74%75%76%77%78%79%7a%7b%7c%7d%7e\") ===\n        \"pqrstuvwxyz{|}~\");\n\nassert (decodeURI (\"%6A%6B%6C%6D%6E%6F\") === \"jklmno\");\nassert (decodeURI (\"%C3%A9\") === \"\\xe9\");\nassert (decodeURI (\"%e2%b1%a5\") === \"\\u2c65\");\n/* assert (decodeURI (\"%f0%90%90%a8\") === \"\\ud801\\udc28\"); */\n\ncheckDecodeURIParseError (\"13%\");\ncheckDecodeURIParseError (\"%0g\");\ncheckDecodeURIParseError (\"%1G\");\ncheckDecodeURIParseError (\"%a\");\ncheckDecodeURIParseError (\"%c1%81\");\ncheckDecodeURIParseError (\"a%80b\");\ncheckDecodeURIParseError (\"%f4%90%80%80\");\ncheckDecodeURIParseError (\"%ed%a0%80\");\ncheckDecodeURIParseError (\"%ed%b0%80\");\ncheckDecodeURIParseError (\"%fa%81%82%83%84\");\ncheckDecodeURIParseError (\"%fd%81%82%83%84%85\");\n\n// Coerce (automatic toString()) tests\n\nassert (decodeURI ([1, 2, 3]) === \"1,2,3\");\nassert (decodeURI ({ x:1 }) === \"[object Object]\");\nassert (encodeURI (void 0) === \"undefined\");\nassert (encodeURI (216.000e1) === \"2160\");\n\n// Combining surrogate fragments\n\nassert (decodeURI(\"\\ud800\\udc00 \\ud800 \\udc00\") === \"\\ud800\\udc00 \\ud800 \\udc00\");\nassert (decodeURI(\"%f0%90%80%80\") === \"\\ud800\\udc00\");\nassert (decodeURI(\"\\ud800%f0%90%80%80\\ud800\") === \"\\ud800\\ud800\\udc00\\ud800\");\nassert (decodeURI(\"\\udc00%f0%90%80%80\\udc00\") === \"\\udc00\\ud800\\udc00\\udc00\");\n\ncheckDecodeURIParseError (\"\\ud800%ed%b0%80\");\ncheckDecodeURIParseError (\"%ed%a0%80\\udc00\");\n"

/***/ }),
/* 417 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nassert (this.hasOwnProperty !== undefined);\n"

/***/ }),
/* 418 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\na = {};\na['12345']=1;\na['13345']=3;\na['sss45']=4;\na['1'] = 2;\n\nassert (a[12345] === 1);\nassert (a[1] === 2);\nassert (a[13345] === 3);\nassert (a['sss45'] === 4);\n"

/***/ }),
/* 419 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar was_then = false, was_else = false;\n\nif (true) {\n  was_then = true;\n} else {\n  was_else = true;\n}\n\nassert (was_then && !was_else);\n\nwas_then = false;\nwas_else = false;\n\nif (false) {\n  was_then = true;\n} else {\n  was_else = true;\n}\n\nassert (was_else && !was_then);\n\n"

/***/ }),
/* 420 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar f = new Function ('return a');\n"

/***/ }),
/* 421 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 University of Szeged\n// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Checking primitve types\nvar str;\nvar result;\nvar log;\n\nfunction check_parse_error (str)\n{\n  try {\n    JSON.parse (str);\n    // Should throw a parse error.\n    assert (false);\n  } catch (e) {\n  }\n}\n\nstr = ' null ';\nassert (JSON.parse (str) === null);\nstr = 'true';\nassert (JSON.parse (str) === true);\nstr = 'false';\nassert (JSON.parse (str) === false);\nstr = '-32.5e002';\nassert (JSON.parse (str) == -3250);\nstr = '\"str\"';\nassert (JSON.parse (str) == \"str\");\nstr = '\"\\\\b\\\\f\\\\n\\\\t\\\\r\"'\nassert (JSON.parse (str) === \"\\b\\f\\n\\t\\r\");\n/* Note: \\u is parsed by the lexer, \\\\u is by the JSON parser. */\nstr = '\"\\\\u0000\\\\u001f\"';\nassert (JSON.parse (str) === \"\\x00\\x1f\");\nstr = '\"\\\\ud801\\\\udc00\\\\ud801\\udc00\\ud801\\\\udc00\\ud801\\udc00\"';\nassert (JSON.parse (str) === \"\\ud801\\udc00\\ud801\\udc00\\ud801\\udc00\\ud801\\udc00\");\n/* These surrogates do not form a valid surrogate pairs. */\nstr = '\"\\\\ud801,\\\\udc00,\\\\ud801,\\udc00,\\ud801,\\\\udc00,\\ud801,\\udc00\"';\nassert (JSON.parse (str) === \"\\ud801,\\udc00,\\ud801,\\udc00,\\ud801,\\udc00,\\ud801,\\udc00\");\n\ncheck_parse_error ('undefined');\ncheck_parse_error ('falses');\ncheck_parse_error ('+5');\ncheck_parse_error ('5.');\ncheck_parse_error ('01');\ncheck_parse_error ('0x1');\ncheck_parse_error ('0e-');\ncheck_parse_error ('3e+a');\ncheck_parse_error ('55e4,');\ncheck_parse_error ('5 true');\ncheck_parse_error (\"'str'\");\ncheck_parse_error ('\\x00');\ncheck_parse_error ('\"\\x00\"');\ncheck_parse_error ('\"\\x1f\"');\n\n// Checking objects\nstr = ' { \"x\": 0, \"yy\": null, \"zzz\": { \"A\": 4.0, \"BB\": { \"1\": 63e-1 }, \"CCC\" : false } } ';\nresult = JSON.parse (str);\nassert (typeof result == \"object\");\nassert (result.x === 0);\nassert (result.yy === null);\nassert (typeof result.zzz == \"object\");\nassert (result.zzz.A === 4);\nassert (typeof result.zzz.BB == \"object\");\nassert (result.zzz.BB[\"1\"] === 6.3);\nassert (result.zzz.CCC === false);\n\ncheck_parse_error ('{');\ncheck_parse_error ('{{{}');\ncheck_parse_error ('{x:5}');\ncheck_parse_error ('{true:4}');\ncheck_parse_error ('{\"x\":5 \"y\":6}');\ncheck_parse_error ('{\"x\":5,\"y\":6,}');\ncheck_parse_error ('{\"x\":5,,\"y\":6}');\n\n// Checking arrays\nstr = '[{\"x\":[]},[[]],{}, [ null ] ]';\nresult = JSON.parse (str);\nassert (result.length === 4);\nassert (typeof result === \"object\");\nassert (typeof result[0] === \"object\");\nassert (typeof result[0].x === \"object\");\nassert (result[0].x.length === 0);\nassert (result[1].length === 1);\nassert (result[1][0].length === 0);\nassert (typeof result[2] === \"object\");\nassert (result[3].length === 1);\nassert (result[3][0] === null);\n\ncheck_parse_error ('[');\ncheck_parse_error ('[[[]');\ncheck_parse_error ('[ true null ]');\ncheck_parse_error ('[1,,2]');\ncheck_parse_error ('[1,2,]');\ncheck_parse_error ('[1] [2]');\n\n// Checking parse with different primitive types\n\nassert (JSON.parse (null) == null);\nassert (JSON.parse (true) == true);\nassert (JSON.parse (3) == 3);\n\ntry {\n  JSON.parse (undefined);\n  // Should not be reached.\n  assert (false);\n} catch (e) {\n  assert (e instanceof SyntaxError);\n}\n\n// Checking parse with different object types\n\nobject = { toString: function() { return false; } };\nassert (JSON.parse (object) == false);\n\nobject = {\"a\": 3, \"b\": \"foo\"};\ntry {\n  JSON.parse (object);\n  // Should not be reached.\n  assert (false);\n} catch (e) {\n  assert (e instanceof SyntaxError);\n}\n\narray = [3, \"foo\"];\ntry {\n  JSON.parse (array);\n  // Should not be reached.\n  assert (false);\n} catch (e) {\n  assert (e instanceof SyntaxError);\n}\n\nassert (JSON.parse (new Number (3)) == 3);\nassert (JSON.parse (new Boolean (true)) == true);\n\nobject = new String ('{\"a\": 3, \"b\": \"foo\"}');\nresult = JSON.parse (object);\n\nassert (result.a == 3);\nassert (result.b == \"foo\");\n\n// Checking reviver\n\nfunction toStringReviver(k, v)\n{\n  log += \"<\" + k + \">:\" + (typeof v == \"number\" ? v : \"(obj)\") + \", \";\n  return v;\n}\n\nstr = '{ \"a\":1, \"b\":2, \"c\": { \"d\":4, \"e\": { \"f\":6 } } }';\nlog = \"\";\nJSON.parse (str, toStringReviver);\nassert (log === \"<a>:1, <b>:2, <d>:4, <f>:6, <e>:(obj), <c>:(obj), <>:(obj), \");\n\nstr = '[ 32, 47, 33 ]';\nlog = \"\";\nJSON.parse (str, toStringReviver);\nassert (log === \"<0>:32, <1>:47, <2>:33, <>:(obj), \");\n\n// Defining properties multiple times\n\nstr = ' { \"a\":1, \"b\":2, \"a\":3 } ';\nlog = \"\";\nJSON.parse (str, toStringReviver);\nassert (log === \"<a>:3, <b>:2, <>:(obj), \");\n\nstr = ' { \"a\":1, \"b\":2, \"b\":3 } ';\nlog = \"\";\nJSON.parse (str, toStringReviver);\nassert (log === \"<a>:1, <b>:3, <>:(obj), \");\n\nstr = ' { \"a\":1, \"b\":{}, \"b\":[], \"a\":2, \"b\":3, \"c\":4 } ';\nlog = \"\";\nJSON.parse (str, toStringReviver);\nassert (log === \"<a>:2, <b>:3, <c>:4, <>:(obj), \");\n\n// Changing property value\n\nstr = ' { \"a\":1, \"b\":2, \"c\":3 } ';\nresult = JSON.parse (str, function (k, v) {\n  if (k == \"a\")\n  {\n    return 8;\n  }\n  if (k == \"b\")\n  {\n    return 9;\n  }\n  if (k == \"c\")\n  {\n    return void 0;\n  }\n  return v;\n});\n\nassert (result.a === 8);\nassert (result.b === 9);\nassert (result.c === void 0);\n\n// Adding / deleting properties\n\nstr = ' { \"a\":1, \"b\":2 } ';\nlog = \"\";\nresult = JSON.parse (str, function (k, v) {\n  if (k == \"a\")\n  {\n    // Deleted properties must still be enumerated.\n    delete this[\"b\"];\n    // New properties must not be enumerated.\n    this.c = 4;\n  }\n  if (k != \"\")\n  {\n    log += \"<\" + k + \">:\" + v + \" \";\n  }\n  return v;\n});\n\nassert (log === \"<a>:1 <b>:undefined \");\nassert (result.a === 1);\nassert (result.b === void 0);\nassert (result.c === 4);\n\n// Changing properties to accessors\n\nstr = ' { \"a\":1, \"b\":2, \"c\":3 } ';\nlog = \"\";\nJSON.parse (str, function (k, v) {\n  if (k == \"a\")\n  {\n    Object.defineProperty(this, \"b\", {\n      enumerable: true,\n      configurable: true,\n      get: function() { return 12; }\n    });\n    Object.defineProperty(this, \"c\", {\n      enumerable: true,\n      configurable: true,\n      set: function(val) { }\n    });\n  }\n  if (k != \"\")\n  {\n    log += \"<\" + k + \">:\" + v + \" \";\n  }\n  return v;\n});\nassert (log === \"<a>:1 <b>:12 <c>:undefined \");\n\n// Forcing extra walk steps\n\nstr = ' { \"a\":1, \"b\":2 } ';\nlog = \"\";\nJSON.parse (str, function (k, v) {\n  if (k == \"a\")\n  {\n     this.b = { x:3, y:4 };\n  }\n  if (k != \"\")\n  {\n    log += \"<\" + k + \">:\" + v + \" \";\n  }\n  return v;\n});\nassert (log === \"<a>:1 <x>:3 <y>:4 <b>:[object Object] \");\n\n// Setting a property to read-only, and change its value.\n\nstr = ' { \"a\":1, \"b\":2 } ';\nresult = JSON.parse (str, function (k, v) {\n  if (k == \"a\")\n  {\n    Object.defineProperty(this, \"b\", {\n      enumerable: true,\n      // FIXME: Should work with configurable: true.\n      configurable: false,\n      writable: false,\n      value: 2\n    });\n    return 8;\n  }\n  if (k == \"b\")\n  {\n    return 9;\n  }\n  return v;\n});\n\nassert (result.a === 8);\nassert (result.b === 2);\n\n// Throw error in the reviver\n\ntry {\n  str = ' { \"a\":1, \"b\":2 } ';\n  result = JSON.parse (str, function (k, v) { throw new ReferenceError(\"error\"); } );\n  assert(false);\n} catch (e) {\n  assert (e.message === \"error\");\n  assert (e instanceof ReferenceError);\n}\n\n// Throw error in a getter\n\ntry {\n  str = ' { \"a\":1, \"b\":2 } ';\n  JSON.parse (str, function (k, v) {\n    if (k == \"a\")\n    {\n      Object.defineProperty(this, \"b\", {\n        enumerable: true,\n        configurable: true,\n        get: function() { throw new ReferenceError(\"error\"); }\n      });\n    }\n    return v;\n  });\n  assert(false);\n} catch (e) {\n  assert (e.message === \"error\");\n  assert (e instanceof ReferenceError);\n}\n\n// Checking reviver with different primitive types\n\nstr = ' { \"a\":1 } ';\n\nresult = JSON.parse (str, 4);\nassert (result.a == 1);\n\nresult = JSON.parse (str, null);\nassert (result.a == 1);\n\nresult = JSON.parse (str, undefined);\nassert (result.a == 1);\n\nresult = JSON.parse (str, true);\nassert (result.a == 1);\n\nresult = JSON.parse (str, \"foo\");\nassert (result.a == 1);\n\n// Checking reviver with different object types\n\nstr = ' { \"a\":1 } ';\n\nresult = JSON.parse(str, new Boolean (true));\nassert (result.a == 1);\n\nresult = JSON.parse(str, new String (\"foo\"));\nassert (result.a == 1);\n\nresult = JSON.parse(str, new Number (3));\nassert (result.a == 1);\n\nresult = JSON.parse(str, {\"a\": 2});\nassert (result.a == 1);\n\nresult = JSON.parse(str, [1, 2, 3]);\nassert (result.a == 1);\n"

/***/ }),
/* 422 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Checking quoting strings\nassert (JSON.stringify (\"\") === '\"\"');\n\nnormal_string = \"asdasd\";\nassert (JSON.stringify (normal_string) == '\"asdasd\"');\n\nformat_characters = \"\\ba\\fs\\nd\\ra\\tsd\";\nassert (JSON.stringify (format_characters) == '\"\\\\ba\\\\fs\\\\nd\\\\ra\\\\tsd\"');\n\nctl_string = \"asd\u001fasd\";\nassert (JSON.stringify (ctl_string) == '\"asd\\\\u001fasd\"');\n\nescpad_string = \"\\\"asda\\sd\";\nassert (JSON.stringify (escpad_string) == '\"\\\\\"asdasd\"');\n\nassert (JSON.stringify('\\u2040') == '\"⁀\"');\nassert (JSON.stringify('abc\\u2040\\u2030cba') == '\"abc⁀‰cba\"');\n\n// Checking primitive types\nassert (JSON.stringify (1) === '1');\nassert (JSON.stringify (true) === 'true');\nassert (JSON.stringify (\"foo\") === '\"foo\"');\nassert (JSON.stringify (null) === 'null');\nassert (JSON.stringify (undefined) === undefined);\n\nassert (JSON.stringify (new Number(1)) === '1');\nassert (JSON.stringify (new Boolean(true)) === 'true');\nassert (JSON.stringify (new String(\"foo\")) === '\"foo\"');\n\n// Checking objects\nempty_object = {}\nassert (JSON.stringify (empty_object) == '{}');\n\nempty_object = {};\nempty_object.a = undefined;\n\nassert (JSON.stringify (empty_object) == '{}');\n\np_object = { \"a\": 1, \"b\": true, \"c\": \"foo\", \"d\": null, \"e\": undefined };\nassert (JSON.stringify (p_object) == '{\"a\":1,\"b\":true,\"c\":\"foo\",\"d\":null}');\n\no_object = { \"a\": new Number(1), \"b\": new Boolean(true), \"c\": new String(\"foo\") };\nassert (JSON.stringify (o_object) == '{\"a\":1,\"b\":true,\"c\":\"foo\"}');\n\nchild = { \"a\": 1, \"b\": new String(\"\\nfoo\"), \"c\": undefined };\nparent = { \"a\": true, \"b\": child, \"c\": null};\n\nassert (JSON.stringify (parent) == '{\"a\":true,\"b\":{\"a\":1,\"b\":\"\\\\nfoo\"},\"c\":null}');\n\nrecursive_object = {};\nrecursive_object.a = 2;\nrecursive_object.b = recursive_object;\n\ntry {\n  JSON.stringify (recursive_object)\n  // Should not be reached.\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\n// Checking arrays\nempty_array = [];\nassert (JSON.stringify (empty_array) == '[]');\n\narray = [undefined];\nassert (JSON.stringify (array) == '[null]');\n\np_array = [1, true, \"foo\", null, undefined];\nassert (JSON.stringify (p_array) == '[1,true,\"foo\",null,null]');\n\no_array = [new Number(1), new Boolean(true), new String(\"foo\")];\nassert (JSON.stringify (o_array) == '[1,true,\"foo\"]');\n\nchild = [ 1, new String(\"\\nfoo\"), undefined ];\nparent = [ true, child, null ];\n\nassert (JSON.stringify (parent) == '[true,[1,\"\\\\nfoo\",null],null]');\n\nrecursive_array = [];\nrecursive_array[0] = 2;\nrecursive_array[1] = recursive_array;\n\ntry {\n  JSON.stringify (recursive_array)\n  // Should not be reached.\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\nobject = {\"a\": 1, \"b\": [1, true, {\"a\": \"foo\"}]};\nassert (JSON.stringify (object) == '{\"a\":1,\"b\":[1,true,{\"a\":\"foo\"}]}');\n\nobject = {\"a\": [1], \"b\": {}};\nassert (JSON.stringify(object) === '{\"a\":[1],\"b\":{}}');\n\narray = [1, {\"a\": 2, \"b\": true, c: [3]}];\nassert (JSON.stringify (array) == '[1,{\"a\":2,\"b\":true,\"c\":[3]}]');\n\n// Filtering / replacing\nto_json_object = {};\nto_json_object.a = 2;\nto_json_object.toJSON = function (key) { return 3; };\n\nassert (JSON.stringify (to_json_object) === \"3\");\n\nfunction replacer_function (key, value)\n{\n  if (typeof(value) == \"string\")\n    return \"FOO\";\n  return value;\n}\n\nobject = { \"a\": \"JSON\", \"b\": new String(\"JSON\"), \"c\": 3 };\nassert (JSON.stringify (object, replacer_function) == '{\"a\":\"FOO\",\"b\":\"JSON\",\"c\":3}');\n\nfilter = [\"a\", \"b\"];\nassert (JSON.stringify (object, filter) == '{\"a\":\"JSON\",\"b\":\"JSON\"}');\n\nassert (JSON.stringify ([], [ 'foo', 'foo' ]) === '[]');\n\nnumber = new Number(2.2);\nnumber.toString = {};\nnumber.valueOf = [];\n\ntry\n{\n  JSON.stringify([], [number]);\n  // Should not be reached.\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n}\n\n// Throw error in the replacer function\nfunction replacer_thrower (key, value)\n{\n  throw new ReferenceError(\"foo\");\n  return value;\n}\n\ntry {\n  JSON.stringify (object, replacer_thrower)\n  // Should not be reached.\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n\n// Checking replacer with different primitive types\nobject = { \"a\": 2 };\nassert (JSON.stringify (object, 3) == '{\"a\":2}');\nassert (JSON.stringify (object, true) == '{\"a\":2}');\nassert (JSON.stringify (object, null) == '{\"a\":2}');\nassert (JSON.stringify (object, undefined) == '{\"a\":2}');\nassert (JSON.stringify (object, \"foo\") == '{\"a\":2}');\n\n// Checking replacer with different primitive types\nassert (JSON.stringify (object, new Boolean (true)) == '{\"a\":2}');\nassert (JSON.stringify (object, new Number (3)) == '{\"a\":2}');\nassert (JSON.stringify (object, new String (\"foo\")) == '{\"a\":2}');\nassert (JSON.stringify (object, { \"a\": 3 }) == '{\"a\":2}');\n\n// Checking JSON formatting\nobject = {\"a\": 2};\nassert (JSON.stringify (object, null, \"   \") == '{\\n   \"a\": 2\\n}');\nassert (JSON.stringify (object, null, \"asd\") == '{\\nasd\"a\": 2\\n}');\nassert (JSON.stringify (object, null, \"asd0123456789\") == '{\\nasd0123456\"a\": 2\\n}');\nassert (JSON.stringify (object, null, \"asd\\u20400123456789\") == '{\\nasd⁀012345\"a\": 2\\n}');\nassert (JSON.stringify (object, null, 100) == '{\\n          \"a\": 2\\n}');\nassert (JSON.stringify (object, null, -5) == '{\"a\":2}');\n\narray = [2];\nassert (JSON.stringify (array, null, \"   \") == '[\\n   2\\n]');\nassert (JSON.stringify (array, null, \"asd\") == '[\\nasd2\\n]');\nassert (JSON.stringify (array, null, \"asd0123456789\") == '[\\nasd01234562\\n]');\nassert (JSON.stringify (array, null, \"asd\\u20400123456789\") == '[\\nasd⁀0123452\\n]');\nassert (JSON.stringify (array, null, 100) == '[\\n          2\\n]');\nassert (JSON.stringify (array, null, -5) == '[2]');\n\nnested_object = {\"a\": 2, \"b\": {\"c\": 1, \"d\": true}};\nassert (JSON.stringify (nested_object, null, 2) == '{\\n  \"a\": 2,\\n  \"b\": {\\n    \"c\": 1,\\n    \"d\": true\\n  }\\n}');\n\nnested_array = [2, [1,true]];\nassert (JSON.stringify (nested_array, null, 2) == '[\\n  2,\\n  [\\n    1,\\n    true\\n  ]\\n]');\n\n// Checking space (formatting parameter) with different primititve types\nobject = { \"a\": 2 };\nassert (JSON.stringify (object, null, true) == '{\"a\":2}');\nassert (JSON.stringify (object, null, null) == '{\"a\":2}');\nassert (JSON.stringify (object, null, undefined) == '{\"a\":2}');\n\n// Checking space (formatting parameter) with different object types\nassert (JSON.stringify (object, null, new Boolean (true)) == '{\"a\":2}');\nassert (JSON.stringify (object, null, [1, 2, 3] ) == '{\"a\":2}');\nassert (JSON.stringify (object, null, { \"a\": 3 }) == '{\"a\":2}');\n"

/***/ }),
/* 423 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* 1 */\n\na: a = 1;\n\nstr = '';\n\na: for (j = 0; j < 10; j++)\n{\n  str += 'A';\n\n  b: for (i = 0; i < 10; i++)\n  {\n    str += 'B';\n\n    break a;\n\n    str += 'C';\n  }\n\n  str += 'D';\n}\n\nassert (str === 'AB');\n\n/* 2 */\nstr = '';\n\na: for (j = 0; j < 5; j++)\n{\n  str += 'A';\n\n  b: for (i = 0; i < 5; i++)\n  {\n    str += 'B';\n\n    switch (1)\n    {\n      case 1:\n        continue b;\n      default:\n        break b;\n    }\n\n    str += 'C';\n  }\n\n  str += 'D';\n}\n\nassert (str === 'ABBBBBDABBBBBDABBBBBDABBBBBDABBBBBD');\n\n/* 3 */\nstr = '';\n\na: for (j = 0; j < 5; j++)\n{\n  str += 'A';\n\n  b: for (i = 0; i < 5; i++)\n  {\n    str += 'B';\n\n    switch (1)\n    {\n      case 1:\n        continue a;\n    }\n\n    str += 'C';\n  }\n\n  str += 'D';\n}\n\nassert (str === 'ABABABABAB');\n\n/* 4 */\nstr = '';\n\na: for (j = 0; j < 5; j++)\n{\n  str += 'A';\n\n  b: for (i = 0; i < 5; i++)\n  {\n    str += 'B';\n\n    switch (1)\n    {\n      case 1:\n        break b;\n    }\n\n    str += 'C';\n  }\n\n  str += 'D';\n}\n\nassert (str === 'ABDABDABDABDABD');\n\n/* 5 */\nstr = '';\n\na: for (j = 0; j < 5; j++)\n{\n  str += 'A';\n\n  b: for (i = 0; i < 5; i++)\n  {\n    str += 'B';\n\n    switch (1)\n    {\n      case 1:\n        break a;\n    }\n\n    str += 'C';\n  }\n\n  str += 'D';\n}\n\nassert (str === 'AB');\n\n\n/* 6 */\n/*\nstr = '';\n\na: for (j = 0; j < 5; j++)\n{\n  str += 'A';\n\n  b: for (i = 0; i < 5; i++)\n  {\n    str += 'B';\n\n    with ({})\n    {\n      break b;\n    }\n\n    str += 'C';\n  }\n\n  str += 'D';\n}\n\nassert (str === 'ABDABDABDABDABD');\n*/\n\n/* 7 */\n/*\nstr = '';\n\na: for (j = 0; j < 5; j++)\n{\n  c:\n  {\n    str += 'A';\n\n    b: for (i = 0; i < 5; i++)\n    {\n      str += 'B';\n\n      with ({})\n      {\n        break c;\n      }\n\n      str += 'C';\n    }\n\n    str += 'D';\n  }\n}\n*/\n\nassert (str === 'ABABABABAB');\n\n/* 8 */\n\na: {\n function f ()\n {\n      str = '';\n\n   a: for (i = 0; i < 5; i++)\n      {\n        str += 'A';\n\n        for (j = 0; j < 5; j++)\n        {\n          str += 'B';\n\n          continue a;\n\n          str += 'C';\n        }\n        str += 'D';\n      }\n\n    assert (str === 'ABABABABAB');\n }\n}\n\nf ();\n\n/* 9 */\n\nstr = '';\n\nfor (i = 0; i < 5; i++)\n{\n  str += 'A';\n\n  switch (i)\n  {\n    case 0:\n    {\n      str += '0';\n      break;\n    }\n    case 1:\n    {\n      str += '1';\n      break;\n    }\n    case 2:\n    {\n      str += '2';\n      break;\n    }\n    case 3:\n    {\n      str += '3';\n      break;\n    }\n    case 4:\n    {\n      str += '4';\n      break;\n    }\n  }\n\n  str += 'B';\n}\n\nassert (str === 'A0BA1BA2BA3BA4B');\n\n/* 10 */\n\nstr = '';\n\nfor (i = 0; i < 2; i++)\n{\n  str += '[A]';\n\n  a:\n  for (j = 0; j < 5; j++)\n  {\n    str += '[B]';\n\n    switch (j)\n    {\n      case 0:\n      {\n        str += '[0]';\n        break;\n      }\n      case 1:\n      {\n        str += '[1]';\n        if (i % 2 == 0)\n        {\n          str += '[1.1]';\n          break a;\n        }\n        else\n        {\n          str += '[1.2]';\n        }\n      }\n      case 2:\n      {\n        str += '[2]';\n        continue a;\n      }\n      case 3:\n      {\n        str += '[3]';\n        break;\n      }\n      case 4:\n      {\n        str += '[4]';\n        continue a;\n      }\n    }\n\n    str += '[C]';\n  }\n\n  str += '[D]';\n}\n\nassert (str === '[A][B][0][C][B][1][1.1][D]' +\n                '[A][B][0][C][B][1][1.2][2][B][2][B][3][C][B][4][D]');\n"

/***/ }),
/* 424 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert((!false) === true);\n\nassert((true || true) === true);\nassert((false || true) === true);\nassert((false || false) === false);\nassert((true || false) === true);\n\nassert((true && true) === true);\nassert((true && false) === false);\nassert((false && true) === false);\nassert((false && false) === false);"

/***/ }),
/* 425 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar nan = NaN;\nvar p_zero = 0.0;\nvar m_zero = -p_zero;\nvar p_inf = Infinity;\nvar m_inf = -p_inf;\n\nassert (isNaN(Math['abs'](NaN)));\nassert (Math['abs'](p_zero) === p_zero);\nassert (Math['abs'](m_zero) === p_zero);\nassert (Math['abs'](p_inf) === p_inf);\nassert (Math['abs'](m_inf) === p_inf);\n\nassert (Math['abs'](0.5) === 0.5);\nassert (Math['abs'](-0.5) === 0.5);\nassert (Math['abs'](1.2) === 1.2);\nassert (Math['abs'](1.5) === 1.5);\nassert (Math['abs'](0.7) === 0.7);\nassert (Math['abs'](0.2) === 0.2);\nassert (Math['abs'](-0.2) === 0.2);\nassert (Math['abs'](-0.7) === 0.7);\nassert (Math['abs'](-1.2) === 1.2);\nassert (Math['abs'](-1.7) === 1.7);\nassert (Math['abs'](-1.5) === 1.5);\n"

/***/ }),
/* 426 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert(isNaN(Math['exp'] (NaN)));\nassert(Math['exp'] (0.0) === 1.0);\nassert(Math['exp'] (Infinity) === Infinity);\nassert(Math['exp'] (-Infinity) === 0.0);\n\nassert(Math['exp'] (1) >= 0.999999 * Math['E']);\nassert(Math['exp'] (1) <= 1.000001 * Math['E']);\n\nassert(Math['exp'] (-1) >= 0.999999 * (1 / Math['E']));\nassert(Math['exp'] (-1) <= 1.000001 * (1 / Math['E']));\n\nassert(Math['exp'] (0.5) >= 0.999999 * 1.6487212707);\nassert(Math['exp'] (0.5) <= 1.000001 * 1.6487212707);\n\nassert(Math['exp'] (30) >= 0.999999 * 1.06864745815e+13);\nassert(Math['exp'] (30) <= 1.000001 * 1.06864745815e+13);\n"

/***/ }),
/* 427 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert( isNaN (Math.log(NaN)) );\nassert( isNaN (Math.log (-1)) );\nassert( isNaN (Math.log (-Infinity)) );\n\nassert( Math.log (0) === -Infinity );\nassert( Math.log (1) === 0 );\nassert( Math.log (Infinity) === Infinity );\nassert( Math.log (2) >= Math.LN2 * 0.999999 );\nassert( Math.log (2) <= Math.LN2 * 1.000001 );\n\nvar very_close_to_1_but_greater = 1.0000001;\nassert( very_close_to_1_but_greater > 1.0 );\n\nassert( Math.log (very_close_to_1_but_greater) >= 0.0 );\nassert( Math.log (very_close_to_1_but_greater) <= 0.000001 );\n\nvar very_close_to_1_but_less = 0.999999;\nassert( very_close_to_1_but_less < 1.0 );\n\nassert( Math.log (very_close_to_1_but_less) <= 0.0 );\nassert( Math.log (very_close_to_1_but_less) >= -0.00001 );\n\nassert( Math.log (2.7182818284590452354) >= 0.999999 );\nassert( Math.log (2.7182818284590452354) <= 1.000001 );\n\nassert( Math.log (0.000000001) <= 0.999999 * (-20.7232658369) );\nassert( Math.log (0.000000001) >= 1.000001 * (-20.7232658369) );\n\nassert( Math.log (1.0e+38) >= 0.999999 * 87.4982335338 );\nassert( Math.log (1.0e+38) <= 1.000001 * 87.4982335338 );\n"

/***/ }),
/* 428 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert(isNaN (Math['max'] (1.0, NaN)));\nassert(isNaN (Math['max'] (NaN, 1.0)));\nassert(isNaN (Math['max'] (Infinity, NaN)));\nassert(isNaN (Math['max'] (NaN, Infinity)));\nassert(Math['max'] (1.0, 3.0, 0.0) === 3.0);\nassert(Math['max'] (1.0, 3.0, Infinity) === Infinity);\nassert(Math['max'] (1.0, 3.0, -Infinity) === 3.0);\nassert(Math['max'] (-Infinity, Infinity) === Infinity);\nassert(Math['max'] (Infinity, -Infinity) === Infinity);\nassert(Math['max'] (Infinity, Infinity) === Infinity);\nassert(Math['max'] (-Infinity, -Infinity) === -Infinity);\nassert(Math['max'] () === -Infinity);\n\nassert(Math['max'] (0.0, -0.0) === 0.0);\nassert(Math['max'] (-0.0, 0.0) === 0.0);\n\nassert(Math['max'] (2, Infinity) === Infinity);\nassert(Math['max'] (Infinity, 2) === Infinity);\nassert(Math['max'] (2, -Infinity) === 2);\nassert(Math['max'] (-Infinity, 2) === 2);\n\nassert(Math['max'] (-2, Infinity) === Infinity);\nassert(Math['max'] (Infinity, -2) === Infinity);\nassert(Math['max'] (-2, -Infinity) === -2);\nassert(Math['max'] (-Infinity, -2) === -2);\n"

/***/ }),
/* 429 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert(isNaN (Math['min'] (1.0, NaN)));\nassert(isNaN (Math['min'] (NaN, 1.0)));\nassert(isNaN (Math['min'] (-Infinity, NaN)));\nassert(isNaN (Math['min'] (NaN, -Infinity)));\nassert(Math['min'] (1.0, 3.0, 0.0) === 0.0);\nassert(Math['min'] (1.0, 3.0, Infinity) === 1.0);\nassert(Math['min'] (1.0, 3.0, -Infinity) === -Infinity);\nassert(Math['min'] (-Infinity, Infinity) === -Infinity);\nassert(Math['min'] (Infinity, -Infinity) === -Infinity);\nassert(Math['min'] (Infinity, Infinity) === Infinity);\nassert(Math['min'] (-Infinity, -Infinity) === -Infinity);\nassert(Math['min'] () === Infinity);\n\nassert(Math['min'] (0.0, -0.0) === -0.0);\nassert(Math['min'] (-0.0, 0.0) === -0.0);\n\nassert(Math['min'] (2, -Infinity) === -Infinity);\nassert(Math['min'] (-Infinity, 2) === -Infinity);\nassert(Math['min'] (2, Infinity) === 2);\nassert(Math['min'] (Infinity, 2) === 2);\n\nassert(Math['min'] (-2, Infinity) === -2);\nassert(Math['min'] (Infinity, -2) === -2);\nassert(Math['min'] (-2, -Infinity) === -Infinity);\nassert(Math['min'] (-Infinity, -2) === -Infinity);\n"

/***/ }),
/* 430 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert ( isNaN (Math.pow (0.0 /* any number */, NaN)) );\nassert ( Math.pow (NaN, 0.0) === 1.0 );\n// assert ( Math.pow (NaN, -0.0) === 1.0 );\nassert ( isNaN (Math.pow (NaN, 1.0 /* any non-zero number */)) );\nassert ( Math.pow (2.0, Infinity) === Infinity );\nassert ( Math.pow (2.0, -Infinity) === 0.0 );\nassert ( isNaN (Math.pow (1.0, Infinity)) );\nassert ( isNaN (Math.pow (1.0, -Infinity)) );\nassert ( Math.pow (0.5, Infinity) === 0.0 );\nassert ( Math.pow (0.5, -Infinity) === Infinity );\nassert ( Math.pow (Infinity, 1.0) === Infinity );\nassert ( Math.pow (Infinity, -1.0) === 0 );\nassert ( Math.pow (-Infinity, 3.0) === -Infinity );\nassert ( Math.pow (-Infinity, 2.0) === Infinity );\nassert ( Math.pow (-Infinity, 2.5) === Infinity );\n// assert ( Math.pow (-Infinity, -3.0) === -0.0 );\nassert ( Math.pow (-Infinity, -2.0) === 0.0 );\nassert ( Math.pow (-Infinity, -2.5) === 0.0 );\nassert ( Math.pow (0.0, 1.2) === 0.0 );\nassert ( Math.pow (0.0, -1.2) === Infinity );\n// assert ( Math.pow (-0.0, 3.0) === -0.0 );\n// assert ( Math.pow (-0.0, 2.0) === 0.0 );\n// assert ( Math.pow (-0.0, 2.5) === 0.0 );\n// assert ( Math.pow (-0.0, -3.0) === -Infinity );\n// assert ( Math.pow (-0.0, -2.0) === Infinity );\n// assert ( Math.pow (-0.0, -2.5) === Infinity );\nassert ( isNaN (Math.pow (-3, 2.5)) );\n\nassert(Math.pow (-2, 2) === 4);\nassert(Math.pow (2, 2) === 4);\n\nassert(Math.pow (2, 3) === 8);\nassert(Math.pow (-2, 3) === -8);\n\nassert(Math.pow (5, 3) === 125);\nassert(Math.pow (-5, 3) === -125);\n"

/***/ }),
/* 431 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar nan = NaN;\nvar p_zero = 0.0;\nvar m_zero = -p_zero;\nvar p_inf = Infinity;\nvar m_inf = -p_inf;\n\nassert (isNaN(Math['round'](NaN)));\nassert (Math['round'](p_zero) === p_zero);\nassert (Math['round'](m_zero) === m_zero);\nassert (Math['round'](p_inf) === p_inf);\nassert (Math['round'](m_inf) === m_inf);\n\nassert (Math['round'](0.5) === 1.0);\nassert (Math['round'](-0.5) === -0.0);\nassert (Math['round'](1.2) === 1.0);\nassert (Math['round'](1.5) === 2.0);\nassert (Math['round'](0.7) === 1.0);\nassert (Math['round'](0.2) === 0.0);\nassert (Math['round'](-0.2) === -0.0);\nassert (Math['round'](-0.7) === -1.0);\nassert (Math['round'](-1.2) === -1.0);\nassert (Math['round'](-1.7) === -2.0);\nassert (Math['round'](-1.5) === -1.0);\n"

/***/ }),
/* 432 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar delta = 0.0001;\nvar mod_m = 1.0 - delta;\nvar mod_p = 1.0 + delta;\n\nassert (isNaN (Math.cos (NaN)));\nassert ((Math.cos (+0.0)) == 1.0);\nassert ((Math.cos (-0.0)) == 1.0);\nassert (isNaN (Math.cos (Infinity)));\nassert (isNaN (Math.cos (-Infinity)));\n\nassert (Math.cos (Math.PI) > -1.0 * mod_p);\nassert (Math.cos (Math.PI) < -1.0 * mod_m);\n\nassert (Math.cos (Math.PI / 2) > -delta);\nassert (Math.cos (Math.PI / 2) < +delta);\nassert (Math.cos (-Math.PI / 2) > -delta);\nassert (Math.cos (-Math.PI / 2) < +delta);\n\nassert (Math.cos (Math.PI / 4) > mod_m * Math.SQRT2 / 2);\nassert (Math.cos (Math.PI / 4) < mod_p * Math.SQRT2 / 2);\n\nassert (Math.cos (-Math.PI / 4) > mod_m * Math.SQRT2 / 2);\nassert (Math.cos (-Math.PI / 4) < mod_p * Math.SQRT2 / 2);\n\nassert (isNaN (Math.sin (NaN)));\nassert (1.0 / Math.sin (0.0) == Infinity);\nassert (1.0 / Math.sin (-0.0) == -Infinity);\nassert (isNaN (Math.sin (Infinity)));\nassert (isNaN (Math.sin (-Infinity)));\n\nassert (Math.sin (Math.PI) > -delta);\nassert (Math.sin (Math.PI) < +delta);\n\nassert (Math.sin (Math.PI / 2) > 1.0 * mod_m);\nassert (Math.sin (Math.PI / 2) < 1.0 * mod_p);\n\nassert (Math.sin (-Math.PI / 2) > -1.0 * mod_p);\nassert (Math.sin (-Math.PI / 2) < -1.0 * mod_m);\n\nassert (Math.sin (Math.PI / 4) > mod_m * Math.SQRT2 / 2);\nassert (Math.sin (Math.PI / 4) < mod_p * Math.SQRT2 / 2);\n\nassert (Math.sin (-Math.PI / 4) > -mod_p * Math.SQRT2 / 2);\nassert (Math.sin (-Math.PI / 4) < -mod_m * Math.SQRT2 / 2);\n\nvar step = 0.01;\n\nfor (var x = -2 * Math.PI; x <= 2 * Math.PI; x += step)\n{\n  var s = Math.sin (x);\n  var c = Math.cos (x);\n  var sqr_s = s * s;\n  var sqr_c = c * c;\n\n  assert (sqr_s + sqr_c > mod_m);\n  assert (sqr_s + sqr_c < mod_p);\n}\n"

/***/ }),
/* 433 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f1()\n{\n  function f2()\n    {\n      assert(k > 0);\n      assert(i < 10000);\n\n      if(--k == 0)\n        {\n          return;\n        }\n\n      f2();\n    }\n\n  k = 17;\n\n  f2();\n}\n\nvar k;\nvar i;\n\nfor(i = 0; i < 100; i++)\n{\n  f1();\n}\n"

/***/ }),
/* 434 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert (eval (\"'1\\\\\\r\\n2'\") === '12');\n\nassert (eval (\"'1\\\\\\n2'\") === '12');\n"

/***/ }),
/* 435 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n//This test will not pass on FLOAT32 due to precision issues\n\nassert((123.56).toExponential() === \"1.2356e+2\");\nassert((123.56).toExponential(0) === \"1e+2\");\nassert((123.56).toExponential(1) === \"1.2e+2\");\nassert((123.56).toExponential(5) === \"1.23560e+2\");\nassert((-1.23).toExponential(1) === \"-1.2e+0\");\nassert((0.00023).toExponential(0) === \"2e-4\");\nassert((0.356).toExponential(1) === \"3.6e-1\");\nassert((0.0000356).toExponential(2) === \"3.56e-5\");\nassert((0.000030056).toExponential(2) === \"3.01e-5\");\nassert(Infinity.toExponential(0) === \"Infinity\");\nassert((-Infinity).toExponential(0) === \"-Infinity\");\nassert(NaN.toExponential(0) === \"NaN\");\nassert((0.0).toExponential(0) === \"0e+0\");\nassert((0.0).toExponential(1) === \"0.0e+0\");\nassert((-0.0).toExponential(0) === \"0e+0\");\nassert((-0.0).toExponential(1) === \"0.0e+0\");\n//ROB//assert((123456789012345678901.0).toExponential(20) === \"1.23456789012345680000e+20\");\nassert((123456789012345678901.0).toExponential(\"6\") === \"1.234568e+20\");\nassert((123.45).toExponential(3.2) === \"1.235e+2\");\nassert((123.45).toExponential(-0.1) === \"1e+2\");\n\ntry {\n    (12).toExponential(Number.MAX_VALUE);\n    assert(false);\n} catch (e) {\n    assert(e instanceof RangeError)\n}\n\ntry {\n    (12).toExponential(Infinity);\n    assert(false);\n} catch (e) {\n    assert(e instanceof RangeError)\n}\n\ntry {\n    (12).toExponential(-1);\n    assert(false);\n} catch (e) {\n    assert(e instanceof RangeError)\n}\n\ntry {\n    (12).toExponential(21);\n    assert(false);\n} catch (e) {\n    assert(e instanceof RangeError)\n}\n\ntry {\n    Number.prototype.toExponential.call(new Object());\n    assert(false);\n} catch (e) {\n    assert(e instanceof TypeError)\n}\n"

/***/ }),
/* 436 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n//This test will not pass on FLOAT32 due to precision issues\n\nassert((123.56).toFixed() === \"124\");\nassert((123.56).toFixed(0) === \"124\");\nassert((123.56).toFixed(1) === \"123.6\");\nassert((123.56).toFixed(5) === \"123.56000\");\nassert((1.23e-10).toFixed(2) === \"0.00\");\nassert((1.23e+20).toFixed(2) === \"123000000000000000000.00\");\nassert((1.23e+21).toFixed(2) === \"1.23e+21\");\nassert((-1.23).toFixed(1) === \"-1.2\");\nassert((0.00023).toFixed(0) === \"0\");\nassert((0.356).toFixed(2) === \"0.36\");\nassert((0.0000356).toFixed(5) === \"0.00004\");\nassert((0.000030056).toFixed(7) === \"0.0000301\");\nassert(Infinity.toFixed(0) === \"Infinity\");\nassert((-Infinity).toFixed(0) === \"-Infinity\");\nassert(NaN.toFixed(0) === \"NaN\");\nassert((0.0).toFixed(0) === \"0\");\nassert((0.0).toFixed(1) === \"0.0\");\nassert((-0.0).toFixed(0) === \"-0\");\nassert((-0.0).toFixed(1) === \"-0.0\");\nassert((123456789012345678901.0).toFixed(20) === \"123456789012345680000.00000000000000000000\");\nassert((123.56).toFixed(NaN) === \"124\");\nassert((123.56).toFixed(-0.9) === \"124\");\n\ntry {\n    Number.prototype.toExponential.call(new Object());\n    assert(false);\n} catch (e) {\n    assert(e instanceof TypeError)\n}\n\ntry {\n    (12).toFixed(-1);\n    assert(false);\n} catch (e) {\n    assert(e instanceof RangeError)\n}\n\ntry {\n    (12).toFixed(21);\n    assert(false);\n} catch (e) {\n    assert(e instanceof RangeError)\n}\n"

/***/ }),
/* 437 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n//This test will not pass on FLOAT32 due to precision issues\n\nassert((123.56).toPrecision() === \"123.56\");\nassert((123.56).toPrecision(1) === \"1e+2\");\nassert((123.56).toPrecision(2) === \"1.2e+2\");\nassert((123.56).toPrecision(6) === \"123.560\");\nassert((-1.23).toPrecision(1) === \"-1\");\nassert((0.00023).toPrecision(1) === \"0.0002\");\nassert((0.356).toPrecision(2) === \"0.36\");\nassert((0.0000356).toPrecision(5) === \"0.000035600\");\nassert((0.000030056).toPrecision(4) === \"0.00003006\");\nassert(Infinity.toPrecision(1) === \"Infinity\");\nassert((-Infinity).toPrecision(1) === \"-Infinity\");\nassert(NaN.toPrecision(1) === \"NaN\");\nassert((0.0).toPrecision(1) === \"0\");\nassert((-0.0).toPrecision(1) === \"0\");\nassert((0.0).toPrecision(6) === \"0.00000\");\n//ROB//assert((123456789012345678901.0).toPrecision(20) === \"1.2345678901234568000e+20\");\n//ROB//assert((123456789012345678901.0).toPrecision(21) === \"123456789012345680000\");\n//ROB//assert((123456789012345678901.0).toPrecision(\"6\") === \"1.23457e+20\");\n\nassert((123.56).toPrecision(1.3) === \"1e+2\");\n//ROB//assert((123.56).toPrecision(21.9) === \"123.560000000000000000\");\n\ntry {\n    (12).toPrecision(0);\n    assert(false);\n} catch (e) {\n    assert(e instanceof RangeError)\n}\n\ntry {\n    (12).toPrecision(22);\n    assert(false);\n} catch (e) {\n    assert(e instanceof RangeError)\n}\n\ntry {\n    Number.prototype.toExponential.call(new Object());\n    assert(false);\n} catch (e) {\n    assert(e instanceof TypeError)\n}\n"

/***/ }),
/* 438 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert((NaN).toString() === \"NaN\");\nassert((-Infinity).toString() === \"-Infinity\");\nassert((Infinity).toString() === \"Infinity\");\nassert((NaN).toString(6) === \"NaN\");\nassert((-Infinity).toString(7) === \"-Infinity\");\nassert((Infinity).toString(8) === \"Infinity\");\nassert((16).toString(16) === \"10\");\nassert((15).toString(16) === \"f\");\nassert((12.5).toString(4) === \"30.2\");\nassert((0.005).toString(4) === \"0.000110132232011013223201101323\");\nassert((2000).toString(4) === \"133100\");\nassert((2000).toString(3) === \"2202002\");\nassert((2000).toString(16) === \"7d0\");\nassert((0.03125).toString(2) === \"0.00001\");\nassert((0.03125).toString(16) === \"0.08\");\nassert((0.0001).toString(4) === \"0.000000122031232023223013010030231\")\nassert((0).toString(16) === \"0\");\nassert((-16).toString(16) === \"-10\");\nassert((-15).toString(16) === \"-f\");\nassert((-12.5).toString(4) === \"-30.2\");\nassert((-0.005).toString(4) === \"-0.000110132232011013223201101323\");\nassert((-2000).toString(4) === \"-133100\");\nassert((-2000).toString(3) === \"-2202002\");\nassert((-2000).toString(16) === \"-7d0\");\nassert((-0.03125).toString(2) === \"-0.00001\");\nassert((-0.03125).toString(16) === \"-0.08\");\nassert((-0.0001).toString(4) === \"-0.000000122031232023223013010030231\")\nassert((-0).toString(16) === \"0\");\n//ROB//assert((1e+73).toString(35) === \"2nx1mg1l0w4ujlpt449c5qfrkkmtpgpsfsc2prlaqtnjbli2\")\n//ROB//assert((-1e+73).toString(35) === \"-2nx1mg1l0w4ujlpt449c5qfrkkmtpgpsfsc2prlaqtnjbli2\")\n//ROB//assert((1).toString(undefined) === \"1\")\n\nassert((123400).toString(2) === \"11110001000001000\");\nassert((123400).toString(3) === \"20021021101\");\nassert((123400).toString(4) === \"132020020\");\nassert((123400).toString(5) === \"12422100\");\nassert((123400).toString(6) === \"2351144\");\nassert((123400).toString(7) === \"1022524\");\nassert((123400).toString(8) === \"361010\");\nassert((123400).toString(9) === \"207241\");\nassert((123400).toString(10) === \"123400\");\nassert((123400).toString(11) === \"84792\");\nassert((123400).toString(12) === \"5b4b4\");\nassert((123400).toString(13) === \"44224\");\nassert((123400).toString(14) === \"32d84\");\nassert((123400).toString(15) === \"2686a\");\nassert((123400).toString(16) === \"1e208\");\nassert((123400).toString(17) === \"181ge\");\nassert((123400).toString(18) === \"132fa\");\nassert((123400).toString(19) === \"hife\");\nassert((123400).toString(20) === \"f8a0\");\nassert((123400).toString(21) === \"d6h4\");\nassert((123400).toString(22) === \"bcl2\");\nassert((123400).toString(23) === \"a365\");\nassert((123400).toString(24) === \"8m5g\");\nassert((123400).toString(25) === \"7mb0\");\nassert((123400).toString(26) === \"70e4\");\nassert((123400).toString(27) === \"677a\");\nassert((123400).toString(28) === \"5hb4\");\nassert((123400).toString(29) === \"51l5\");\nassert((123400).toString(30) === \"4h3a\");\nassert((123400).toString(31) === \"44ck\");\nassert((123400).toString(32) === \"3og8\");\nassert((123400).toString(33) === \"3ead\");\nassert((123400).toString(34) === \"34pe\");\nassert((123400).toString(35) === \"2upp\");\nassert((123400).toString(36) === \"2n7s\");\n\nassert((123400).toString(new Number(16)) === \"1e208\");\n\nvar digit_chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n                   'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n                   'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n                   'u', 'v', 'w', 'x', 'y', 'z'];\n\nfor (radix = 2; radix <= 36; radix++) {\n  for (num = 1; num < 100; num++) {\n    var value = num;\n    var str = \"\";\n    while (value > 0) {\n      str = digit_chars[value % radix] + str;\n      value = Math.floor(value / radix);\n    }\n\n    assert(str === (num).toString(radix));\n  }\n}\n\ntry {\n  assert((123).toString(1));\n  assert(false)\n} catch (e) {\n  assert(e instanceof RangeError);\n}\n\ntry {\n  assert((123).toString(37));\n  assert(false)\n} catch (e) {\n  assert(e instanceof RangeError);\n}\n\ntry {\n  assert((123).toString(Infinity));\n  assert(false)\n} catch (e) {\n  assert(e instanceof RangeError);\n}\n"

/***/ }),
/* 439 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Example where we create an object with a couple of sample properties.\n// (Note that the second parameter maps keys to *property descriptors*.)\nvar o = Object.create(Object.prototype, {\n  // foo is a regular 'value property'\n  foo: { writable: true, configurable: true, value: 'hello' },\n  // bar is a getter-and-setter (accessor) property\n  bar: {\n    configurable: false,\n    get: function() { return 10; },\n    set: function(value) { console.log('Setting `o.bar` to', value); }\n  }\n});\n\n// create a new object whose prototype is a new, empty object\n// and a adding single property 'p', with value 42\nvar o = Object.create({}, { p: { value: 42 } });\n// by default properties ARE NOT writable, enumerable or configurable:\no.p = 24;\nassert (o.p === 42);\n\n// to specify an ES3 property\nvar o2 = Object.create({}, {\n  p: {\n    value: 42,\n    writable: true,\n    enumerable: true,\n    configurable: true\n  }\n});\n\nassert (o2.p === 42);\n\n// Shape - superclass\nfunction Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\n// superclass method\nShape.prototype.move = function(x, y) {\n  this.x += x;\n  this.y += y;\n};\n\n// Rectangle - subclass\nfunction Rectangle() {\n  Shape.call(this); // call super constructor.\n}\n\n// subclass extends superclass\nRectangle.prototype = Object.create(Shape.prototype);\nRectangle.prototype.constructor = Rectangle;\n\nvar rect = new Rectangle();\n\nassert (rect instanceof Rectangle);\nassert (rect instanceof Shape);\nrect.move(1, 1);\nassert (rect.x === 1)\nassert (rect.y === 1);\n\nvar obj = {\n  protoFunction: function() {\n    return 3;\n  }\n};\n\nObject.defineProperties(obj, {\n  \"foo\": {\n    value: 42,\n    writable: true,\n  },\n  \"a\": {\n    value: \"b\",\n    configurable: true\n  },\n  \"bar\": {\n    get: function() {\n      return this.foo;\n    },\n  },\n});\n\nvar obj2 = Object.create(obj);\n\nassert (obj2.protoFunction() === 3);\nassert (obj2.foo === 42);\nassert (obj2.a === \"b\");\nassert (obj2.bar === 42);\nassert (Object.getPrototypeOf (obj2) === obj);\n\n\nvar props = {\n    prop1: {\n        value: 1,\n    },\n    hey: function () {\n        return \"ho\";\n    }\n};\n\nvar obj3 = Object.create(obj, props);\nassert (obj3.prop1 === 1);\nassert (obj3.protoFunction() === 3);\ntry {\n  assert (obj3.hey === undefined);\n  obj3.hey();\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\n// Create an object with null as prototype\nvar obj = Object.create(null)\nassert (typeof (obj) === \"object\");\nassert (Object.getPrototypeOf (obj) === null);\n\ntry {\n    Object.create()\n    assert (false);\n} catch (e) {\n    assert (e instanceof TypeError);\n}\n\ntry {\n    Object.create(undefined)\n    assert (false);\n} catch (e) {\n    assert (e instanceof TypeError);\n}\n"

/***/ }),
/* 440 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar obj = {};\nObject.defineProperties(obj, {\n  \"foo\": {\n    value: true,\n    writable: true\n  },\n  \"bar\": {\n    value: \"baz\",\n    writable: false\n  },\n  \"Hello\": {\n    value: \"world\",\n    writable: false\n  },\n  \"inner_object\": {\n    value : {\n      \"a\" : 1,\n      \"b\" : {\n        value: \"foo\"\n      }\n    }\n  }\n});\n\nassert (obj.foo === true);\nassert (obj.bar === \"baz\");\nassert (obj.Hello === \"world\");\nassert (obj.inner_object.a === 1);\nassert (obj.inner_object.b.value === \"foo\");\n\n// These cases should throw TypeError\ntry {\n  Object.defineProperties(obj, undefined);\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\ntry {\n  Object.defineProperties(obj, null);\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\ntry {\n  Object.defineProperties(undefined, {\n    \"foo\": {\n      value: true,\n      writable: true\n    }\n  });\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\n// Check for internal assert, see issue #131.\ntry {\n  Object.defineProperties([], undefined);\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\n// If one of the properties is wrong than it shouldn't update the object.\nvar obj2 = {\n  a: 5\n};\ntry {\n  Object.defineProperties(obj2, {\n    \"foo\": {\n      value: true,\n      writable: true\n    },\n    \"bar\": {\n      value: 3,\n      set: 3\n    },\n    \"Hello\": {\n      value: \"world\",\n      writable: false\n    }\n  });\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n  assert (obj2.foo === undefined);\n  assert (obj2.set === undefined);\n  assert (obj2.Hello === undefined);\n  assert (obj2.a === 5);\n}\n\n// Define accessors\nvar obj = {};\nObject.defineProperties(obj, {\n  \"foo\": {\n    value: 42,\n    writable: true,\n  },\n  \"bar\": {\n    get: function() { return this.foo },\n    set: function(v) { this.foo = v }\n  }\n});\n\nassert (obj.bar === 42);\nobj.bar = \"baz\";\nassert (obj.foo === \"baz\");\n\n// Define get method which throws error\nvar obj = {};\nvar props = {\n  prop1: {\n    value: 1,\n    writable: true,\n  },\n  get bar() {\n    throw new TypeError(\"foo\");\n    return { value : 2, writable : true };\n  },\n  prop2: {\n    value: 3,\n    writable: true,\n  },\n  prop3: {\n    value: 4,\n    writable: true,\n  }\n};\n\ntry {\n  Object.defineProperties(obj, props);\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n  assert (e.message === \"foo\");\n}\n\n// Define get method which deletes a property\nvar obj = {};\nObject.defineProperties(obj, {\n  \"foo\": {\n    value: 42,\n    writable: true,\n  },\n  \"a\": {\n    value: \"b\",\n    configurable: true\n  },\n  \"bar\": {\n    get: function() {\n      delete this.a;\n      return this.foo;\n    },\n  }\n});\n\nassert (obj.a === \"b\");\nassert (obj.bar === 42);\nassert (obj.a === undefined);\n\n// This code should throw TypeError\nvar obj = {};\nvar props = {\n  prop1: {\n    value: 1,\n    writable: true,\n  },\n  get bar() {\n    delete props.prop1;\n    delete props.prop2;\n    return { value : 2, writable : true };\n  },\n  prop2: {\n    value: 3,\n    writable: true,\n  },\n  prop3: {\n    value: 4,\n    writable: true,\n  }\n};\n\ntry {\n  Object.defineProperties(obj, props);\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n"

/***/ }),
/* 441 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar obj = [];\n\nObject.defineProperty (obj, \"prop\", {\n    value: 2010,\n    writable: true,\n    enumerable: true,\n    configurable: false\n});\n\nassert (obj.hasOwnProperty (\"prop\"));\nfunction getFunc() {\n    return 20;\n}\n\ntry {\n    Object.defineProperty (obj, \"prop\", {\n        get: getFunc\n    });\n    assert (false);\n} catch (e) {\n    assert (e instanceof TypeError);\n    var desc = Object.getOwnPropertyDescriptor (obj, \"prop\");\n    assert (desc.value === 2010);\n    assert (typeof (desc.get) === 'undefined');\n}\n\nobj = {};\nvar setter = function () {};\n\nObject.defineProperty(obj, \"prop\", {\n    set: setter,\n    configurable: true\n});\n\nvar desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\nObject.defineProperty(obj, \"prop\", {\n    set: undefined\n});\n\nvar desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\nassert (desc1.set === setter && desc2.set === undefined);\n"

/***/ }),
/* 442 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar obj;\nvar desc;\n\nobj = { bar: 42 };\ndesc = Object.getOwnPropertyDescriptor (obj, 'bar');\n// desc is { configurable: true, enumerable: true, value: 42, writable: true }\nassert (desc.value === 42);\nassert (desc.configurable);\nassert (desc.writable);\nassert (desc.enumerable);\n\nobj = { \"foo\": \"bar\" };\ndesc = Object.getOwnPropertyDescriptor (obj, 'foo');\nassert (desc.value === \"bar\");\n\nobj = {};\nObject.defineProperty (obj, 'baz', { value: 8675309, writable: false, enumerable: false });\ndesc = Object.getOwnPropertyDescriptor (obj, 'baz');\n// desc is { value: 8675309, writable: false, enumerable: false, configurable: false }\nassert (desc.value === 8675309);\nassert (!desc.configurable);\nassert (!desc.writable);\nassert (!desc.enumerable);\n\nobj = { \"0.00001\": 1 };\ndesc = Object.getOwnPropertyDescriptor (obj, 1e-5);\nassert ( desc.value === 1);\n\nobj = { \"123\": 1 };\ndesc = Object.getOwnPropertyDescriptor (obj, 123);\nassert (desc.value === 1);\n\nobj = { \"undefined\": 1 };\nvar desc1 = Object.getOwnPropertyDescriptor (obj, undefined);\nvar desc2 = Object.getOwnPropertyDescriptor (obj, \"undefined\");\nassert (desc1.value === 1 && desc2.value === 1);\n\nobj = { \"0\": 1 };\ndesc = Object.getOwnPropertyDescriptor (obj, -0);\nassert (desc.value === 1);\n\nobj = { \"Hellobj\": 42 };\ndesc = Object.getOwnPropertyDescriptor (obj, new String (\"Hellobj\"));\nassert (desc.value === 42);\n\nobj = {};\ndesc = Object.getOwnPropertyDescriptor (obj, 'baz');\nassert (desc === undefined);\n\nobj = { get foo() { return obj.bar; }, set foo(a) { obj.bar = a; }, bar: 0 };\ndesc = Object.getOwnPropertyDescriptor(obj, 'foo');\n// d is { configurable: true, enumerable: true, get: /*the getter function*/, set: /*the setter function*/ }\nassert (typeof(desc.get) === 'function');\nassert (typeof(desc.set) === 'function');\nassert (desc.configurable);\nassert (desc.enumerable);\nassert (obj.foo === 0)\n\nvar array_desc = Object.getOwnPropertyDescriptor(Array, \"prototype\");\nassert (array_desc.configurable === false);\nassert (array_desc.writable === false);\nassert (array_desc.enumerable === false);\n\nvar obj_undef;\ntry {\n    Object.getOwnPropertyDescriptor (obj_undef, \"fail\");\n    assert (false);\n} catch (e) {\n    assert (e instanceof TypeError);\n}\n"

/***/ }),
/* 443 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Test array\nvar arr = ['a', 'b', 'c'];\nvar props = Object.getOwnPropertyNames(arr);\n// props should contain: 0,1,2,length and the order is not defined!\nassert (props.indexOf(\"0\") !== -1);\nassert (props.indexOf(\"1\") !== -1);\nassert (props.indexOf(\"2\") !== -1);\nassert (props.indexOf(\"length\") !== -1);\nassert (props.length === 4);\n\n// Test object\nvar obj = {key1: 'a', key3: 'b', key2: 'c', key4: 'c', key5: ''};\nprops = Object.getOwnPropertyNames(obj);\n// props should contain: key1,key2,key3,key4,key5 and the order is not defined!\nassert (props.indexOf(\"key1\") !== -1);\nassert (props.indexOf(\"key2\") !== -1);\nassert (props.indexOf(\"key3\") !== -1);\nassert (props.indexOf(\"key4\") !== -1);\nassert (props.indexOf(\"key5\") !== -1);\nassert (props.length === 5);\n\nvar obj2 = {};\nObject.defineProperties(obj2, {\n    key_one: {enumerable: true, value: 'one'},\n    key_two: {enumerable: false, value: 'two'},\n});\n\nprops = Object.getOwnPropertyNames(obj2);\n// props should contain: key_one,key_two and the order is not defined!\nassert (props.indexOf(\"key_one\") !== -1);\nassert (props.indexOf(\"key_two\") !== -1);\nassert (props.length === 2);\n\n// Test prototype chain\nfunction Parent() {}\nParent.prototype.inheritedMethod = function() {};\n\nfunction Child() {\n  this.prop = 5;\n  this.method = function() {};\n}\nChild.prototype = new Parent;\nChild.prototype.prototypeMethod = function() {};\n\nprops = Object.getOwnPropertyNames (new Child());\n// props should contain: prop,method and the order is not defined!\nassert (props.indexOf(\"prop\") !== -1);\nassert (props.indexOf(\"method\") !== -1);\n\nassert (props.length === 2);\n\n// Test non-object argument\ntry {\n  Object.getOwnPrototypeNames(\"hello\");\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n"

/***/ }),
/* 444 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n  var v;\n  Object.getPrototypeOf(v);\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\ntry {\n  Object.getPrototypeOf(\"foo\");\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\ntry {\n  Object.getPrototypeOf(60);\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\ntry {\n  var y = Object.getPrototypeOf(null);\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\nvar obj = { x : \"foo\" };\nassert (Object.getPrototypeOf(obj) === Object.prototype);\n\nvar constructor = function () {};\nconstructor.prototype = obj;\n\nvar d_obj = new constructor();\nassert (Object.getPrototypeOf(d_obj) === obj);\n\nobj = Object.create(null);\nassert (Object.getPrototypeOf(obj) === null);\n"

/***/ }),
/* 445 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// New objects are extensible.\nvar empty = {};\nassert (Object.isExtensible(empty) === true);\n\n// ...but that can be changed.\nObject.preventExtensions(empty);\nassert(Object.isExtensible(empty) === false);\n\n// Call on undefined should throw TypeError.\ntry\n{\n    Object.isExtensible(undefined);\n    assert (false);\n} catch (e) {\n    assert (e instanceof TypeError);\n}\n\ntry\n{\n    Object.preventExtensions(undefined);\n    assert (false);\n} catch (e) {\n    assert (e instanceof TypeError);\n}\n\n// Sealed objects are by definition non-extensible.\nvar sealed = Object.seal({});\nassert (Object.isExtensible(sealed) === false);\n\n// Frozen objects are also by definition non-extensible.\nvar frozen = Object.freeze({});\nassert(Object.isExtensible(frozen) === false);\n"

/***/ }),
/* 446 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Test array\nvar arr = ['a', 'b', 'c'];\nvar props = Object.keys(arr);\n// props should contain: 0,1,2 and the order is not defined!\nassert (props.indexOf(\"0\") !== -1);\nassert (props.indexOf(\"1\") !== -1);\nassert (props.indexOf(\"2\") !== -1);\nassert (props.length === 3);\n\n// Test object\nvar obj = {key1: 'a', key3: 'b', key2: 'c', key4: 'c', key5: ''};\nprops = Object.keys(obj);\n// props should contain: key1,key2,key3,key4,key5 and the order is not defined!\nassert (props.indexOf(\"key1\") !== -1);\nassert (props.indexOf(\"key2\") !== -1);\nassert (props.indexOf(\"key3\") !== -1);\nassert (props.indexOf(\"key4\") !== -1);\nassert (props.indexOf(\"key5\") !== -1);\nassert (props.length === 5);\n\nvar obj2 = {};\nObject.defineProperties(obj2, {\n    key_one: {enumerable: true, value: 'one'},\n    key_two: {enumerable: false, value: 'two'},\n});\n\nprops = Object.keys(obj2);\n// props should contain: key_one\nassert (props.indexOf(\"key_one\") !== -1);\nassert (props.indexOf(\"key_two\") === -1);\nassert (props.length === 1);\n\n// Test prototype chain\nfunction Parent() {}\nParent.prototype.inheritedMethod = function() {};\n\nfunction Child() {\n  this.prop = 5;\n  this.method = function() {};\n}\nChild.prototype = new Parent;\nChild.prototype.prototypeMethod = function() {};\n\nprops = Object.keys (new Child());\n// props should contain: prop,method and the order is not defined!\nassert (props.indexOf(\"prop\") !== -1);\nassert (props.indexOf(\"method\") !== -1);\nassert (props.length === 2);\n\n// Test non-object argument\ntry {\n  Object.keys(\"hello\");\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\nvar o = {};\n\nObject.defineProperty(o, 'a', {\n  value: \"OK\",\n  writable: true,\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(o, 'b', {\n  value: \"NOT_OK\",\n  writable: true,\n  enumerable: false,\n  configurable: true\n});\n\nObject.defineProperty(o, 'c', {\n  value: \"OK\",\n  writable: true,\n  enumerable: true,\n  configurable: true\n});\n\nprops = Object.keys(o);\nassert(props.length === 2);\nassert(o[props[0]] === \"OK\");\nassert(o[props[1]] === \"OK\");\n"

/***/ }),
/* 447 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a = {get a(){return undefined}, set a(b){}}\n\nvar b = {if:0, else:1, try:2, catch:3, finally:4, let:5}\n\nassert (b.if + b.else + b.try + b.catch + b.finally + b.let === 15)\n\nfunction c() {\n  \"use strict\"\n  var b = {let:15, enum:10}\n  assert (b.let + b.enum === 25)\n}\nc();\n\nfunction d () {\n  \"use strict\";\n\n  try {\n    /* 'let' is a FutureReservedWord in strict mode code */\n    eval ('var a = { get prop () { let = 1; } }');\n    assert (false);\n  } catch (e) {\n    assert (e instanceof SyntaxError);\n  }\n}\nd ();\n"

/***/ }),
/* 448 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar person = {\n    firstName:\"John\",\n    lastName:\"Doe\",\n    age:50,\n    eyeColor:\"blue\",\n    \"gender\":\"male\",\n    0:0\n};\n\nassert (person.firstName === \"John\");\nassert (person[\"firstName\"] === \"John\");\nassert (person.lastName === \"Doe\");\nassert (person[\"lastName\"] === \"Doe\");\nassert (person.age === 50);\nassert (person[\"age\"] === 50);\nassert (person.eyeColor === \"blue\");\nassert (person[\"eyeColor\"] === \"blue\");\nassert (person.gender === \"male\");\nassert (person[\"gender\"] === \"male\");\nassert (person[\"0\"] === 0);\n\nvar x = person;\nx.age = 40;\nassert (x.age === 40);\nassert (person.age === 40);\n\nvar john = new Object();\njohn.firstName = \"John\";\njohn.lastName = \"Doe\";\njohn.age = 40;\njohn.eyeColor = \"blue\";\n\nassert (person.firstName === john.firstName);\nassert (person.lastName === john.lastName);\nassert (person.age === john.age);\nassert (person.eyeColor === john.eyeColor);\n\nvar a, b; \nb = 'property1'; \na = { \n  'property1' : 'value1', \n  get property2 () { return 1; }, \n  set property2 (a) {\n    if (true)\n      this.property3 = a * 10;\n    else\n      this.property3 = a;\n  },\n  set property3 (b) { this.property1 = b; }\n}; \nassert (a.property1 === 'value1'); \nassert (a.property2 === 1); \na.property3 = 'value2'; \nassert (a.property1 === 'value2'); \na.property2 = 2.5; \nassert (a.property1 === 25); \nb = delete a[b]; \nassert (b === true); \nassert (a.property1 === undefined); \n\nflow = '';\na = {\n  get q ()\n  {\n    flow += 'get: ' + (typeof q);\n\n    return 0;\n  },\n  set q (v)\n  {\n    flow += ', set: ' + (typeof q);\n  }\n};\n\na.q;\na.q = 1;\n\nassert (flow == 'get: undefined, set: undefined');\n\nvar data = {\n  '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8,\n  '9': 9, '10': 10, '11': 11, '12': 12, '13': 13, '14': 14, '15': 15, '16': 16,\n  '17': 17, '18': 18, '19': 19, '20': 20, '21': 21, '22': 22, '23': 23, '24': 24,\n  '25': 25, '26': 26, '27': 27, '28': 28, '29': 29, '30': 30, '31': 31, '32': 32,\n  '33': 33, '34': 34, '35': 35, '36': 36, '37': 37, '38': 38, '39': 39, '40': 40,\n  '41': 41, '42': 42, '43': 43, '44': 44, '45': 45, '46': 46, '47': 47, '48': 48,\n  '49': 49, '50': 50, '51': 51, '52': 52, '53': 53, '54': 54, '55': 55, '56': 56,\n  '57': 57, '58': 58, '59': 59, '60': 60, '61': 61, '62': 62, '63': 63, '64': 64,\n  '65': 65, '66': 66, '67': 67, '68': 68, '69': 69, '70': 70, '71': 71, '72': 72,\n  '73': 73, '74': 74, '75': 75, '76': 76, '77': 77, '78': 78, '79': 79, '80': 80,\n  '81': 81, '82': 82, '83': 83, '84': 84, '85': 85, '86': 86, '87': 87, '88': 88,\n  '89': 89, '90': 90, '91': 91, '92': 92, '93': 93, '94': 94, '95': 95, '96': 96,\n  '97': 97, '98': 98, '99': 99, '100': 100, '101': 101, '102': 102, '103': 103, '104': 104,\n  '105': 105, '106': 106, '107': 107, '108': 108, '109': 109, '110': 110, '111': 111, '112': 112,\n  '113': 113, '114': 114, '115': 115, '116': 116, '117': 117, '118': 118, '119': 119, '120': 120,\n  '121': 121, '122': 122, '123': 123, '124': 124, '125': 125, '126': 126, '127': 127, '128': 128,\n  '129': 129, '130': 130, '131': 131, '132': 132, '133': 133, '134': 134, '135': 135, '136': 136,\n  '137': 137, '138': 138, '139': 139, '140': 140, '141': 141, '142': 142, '143': 143, '144': 144,\n  '145': 145, '146': 146, '147': 147, '148': 148, '149': 149, '150': 150, '151': 151, '152': 152,\n  '153': 153, '154': 154, '155': 155, '156': 156, '157': 157, '158': 158, '159': 159, '160': 160,\n  '161': 161, '162': 162, '163': 163, '164': 164, '165': 165, '166': 166, '167': 167, '168': 168,\n  '169': 169, '170': 170, '171': 171, '172': 172, '173': 173, '174': 174, '175': 175, '176': 176,\n  '177': 177, '178': 178, '179': 179, '180': 180, '181': 181, '182': 182, '183': 183, '184': 184,\n  '185': 185, '186': 186, '187': 187, '188': 188, '189': 189, '190': 190, '191': 191, '192': 192,\n  '193': 193, '194': 194, '195': 195, '196': 196, '197': 197, '198': 198, '199': 199, '200': 200,\n  '201': 201, '202': 202, '203': 203, '204': 204, '205': 205, '206': 206, '207': 207, '208': 208,\n  '209': 209, '210': 210, '211': 211, '212': 212, '213': 213, '214': 214, '215': 215, '216': 216,\n  '217': 217, '218': 218, '219': 219, '220': 220, '221': 221, '222': 222, '223': 223, '224': 224,\n  '225': 225, '226': 226, '227': 227, '228': 228, '229': 229, '230': 230, '231': 231, '232': 232,\n  '233': 233, '234': 234, '235': 235, '236': 236, '237': 237, '238': 238, '239': 239, '240': 240,\n  '241': 241, '242': 242, '243': 243, '244': 244, '245': 245, '246': 246, '247': 247, '248': 248,\n  '249': 249, '250': 250, '251': 251, '252': 252, '253': 253, '254': 254, '255': 255, '256': 256,\n  '257': 257, '258': 258, '259': 259, '260': 260, '261': 261, '262': 262, '263': 263, '264': 264,\n  '265': 265, '266': 266, '267': 267, '268': 268, '269': 269, '270': 270, '271': 271, '272': 272,\n  '273': 273, '274': 274, '275': 275, '276': 276, '277': 277, '278': 278, '279': 279, '280': 280,\n  '281': 281, '282': 282, '283': 283, '284': 284, '285': 285, '286': 286, '287': 287, '288': 288,\n  '289': 289, '290': 290, '291': 291, '292': 292, '293': 293, '294': 294, '295': 295, '296': 296,\n  '297': 297, '298': 298, '299': 299, '300': 300, '301': 301, '302': 302, '303': 303, '304': 304,\n  '305': 305, '306': 306, '307': 307, '308': 308, '309': 309, '310': 310, '311': 311, '312': 312,\n  '313': 313, '314': 314, '315': 315, '316': 316, '317': 317, '318': 318, '319': 319, '320': 320,\n  '321': 321, '322': 322, '323': 323, '324': 324, '325': 325, '326': 326, '327': 327, '328': 328,\n  '329': 329, '330': 330, '331': 331, '332': 332, '333': 333, '334': 334, '335': 335, '336': 336,\n  '337': 337, '338': 338, '339': 339, '340': 340, '341': 341, '342': 342, '343': 343, '344': 344,\n  '345': 345, '346': 346, '347': 347, '348': 348, '349': 349, '350': 350, '351': 351, '352': 352,\n  '353': 353, '354': 354, '355': 355, '356': 356, '357': 357, '358': 358, '359': 359, '360': 360,\n  '361': 361, '362': 362, '363': 363, '364': 364, '365': 365, '366': 366, '367': 367, '368': 368,\n  '369': 369, '370': 370, '371': 371, '372': 372, '373': 373, '374': 374, '375': 375, '376': 376,\n  '377': 377, '378': 378, '379': 379, '380': 380, '381': 381, '382': 382, '383': 383, '384': 384,\n  '385': 385, '386': 386, '387': 387, '388': 388, '389': 389, '390': 390, '391': 391, '392': 392,\n  '393': 393, '394': 394, '395': 395, '396': 396, '397': 397, '398': 398, '399': 399, '400': 400,\n  '401': 401, '402': 402, '403': 403, '404': 404, '405': 405, '406': 406, '407': 407, '408': 408,\n  '409': 409, '410': 410, '411': 411, '412': 412, '413': 413, '414': 414, '415': 415, '416': 416,\n  '417': 417, '418': 418, '419': 419, '420': 420, '421': 421, '422': 422, '423': 423, '424': 424,\n  '425': 425, '426': 426, '427': 427, '428': 428, '429': 429, '430': 430, '431': 431, '432': 432,\n  '433': 433, '434': 434, '435': 435, '436': 436, '437': 437, '438': 438, '439': 439, '440': 440,\n  '441': 441, '442': 442, '443': 443, '444': 444, '445': 445, '446': 446, '447': 447, '448': 448,\n  '449': 449, '450': 450, '451': 451, '452': 452, '453': 453, '454': 454, '455': 455, '456': 456,\n  '457': 457, '458': 458, '459': 459, '460': 460, '461': 461, '462': 462, '463': 463, '464': 464,\n  '465': 465, '466': 466, '467': 467, '468': 468, '469': 469, '470': 470, '471': 471, '472': 472,\n  '473': 473, '474': 474, '475': 475, '476': 476, '477': 477, '478': 478, '479': 479, '480': 480,\n  '481': 481, '482': 482, '483': 483, '484': 484, '485': 485, '486': 486, '487': 487, '488': 488,\n  '489': 489, '490': 490, '491': 491, '492': 492, '493': 493, '494': 494, '495': 495, '496': 496,\n  '497': 497, '498': 498, '499': 499, '500': 500, '501': 501, '502': 502, '503': 503, '504': 504,\n  '505': 505, '506': 506, '507': 507, '508': 508, '509': 509, '510': 510, '511': 511, '512': 512,\n  '513': 513, '514': 514, '515': 515, '516': 516, '517': 517, '518': 518, '519': 519, '520': 520,\n  '521': 521, '522': 522, '523': 523, '524': 524, '525': 525, '526': 526, '527': 527, '528': 528,\n  '529': 529, '530': 530, '531': 531, '532': 532, '533': 533, '534': 534, '535': 535, '536': 536,\n  '537': 537, '538': 538, '539': 539, '540': 540, '541': 541, '542': 542, '543': 543, '544': 544,\n  '545': 545, '546': 546, '547': 547, '548': 548, '549': 549, '550': 550, '551': 551, '552': 552,\n  '553': 553, '554': 554, '555': 555, '556': 556, '557': 557, '558': 558, '559': 559, '560': 560,\n  '561': 561, '562': 562, '563': 563, '564': 564, '565': 565, '566': 566, '567': 567, '568': 568,\n  '569': 569, '570': 570, '571': 571, '572': 572, '573': 573, '574': 574, '575': 575, '576': 576,\n  '577': 577, '578': 578, '579': 579, '580': 580, '581': 581, '582': 582, '583': 583, '584': 584,\n  '585': 585, '586': 586, '587': 587, '588': 588, '589': 589, '590': 590, '591': 591, '592': 592,\n  '593': 593, '594': 594, '595': 595, '596': 596, '597': 597, '598': 598, '599': 599, '600': 600,\n  '601': 601, '602': 602, '603': 603, '604': 604, '605': 605, '606': 606, '607': 607, '608': 608,\n  '609': 609, '610': 610, '611': 611, '612': 612, '613': 613, '614': 614, '615': 615, '616': 616,\n  '617': 617, '618': 618, '619': 619, '620': 620, '621': 621, '622': 622, '623': 623, '624': 624,\n  '625': 625, '626': 626, '627': 627, '628': 628, '629': 629, '630': 630, '631': 631, '632': 632,\n  '633': 633, '634': 634, '635': 635, '636': 636, '637': 637, '638': 638, '639': 639, '640': 640,\n  '641': 641, '642': 642, '643': 643, '644': 644, '645': 645, '646': 646, '647': 647, '648': 648,\n  '649': 649, '650': 650, '651': 651, '652': 652, '653': 653, '654': 654, '655': 655, '656': 656,\n  '657': 657, '658': 658, '659': 659, '660': 660, '661': 661, '662': 662, '663': 663, '664': 664,\n  '665': 665, '666': 666, '667': 667, '668': 668, '669': 669, '670': 670, '671': 671, '672': 672,\n  '673': 673, '674': 674, '675': 675, '676': 676, '677': 677, '678': 678, '679': 679, '680': 680,\n  '681': 681, '682': 682, '683': 683, '684': 684, '685': 685, '686': 686, '687': 687, '688': 688,\n  '689': 689, '690': 690, '691': 691, '692': 692, '693': 693, '694': 694, '695': 695, '696': 696,\n  '697': 697, '698': 698, '699': 699, '700': 700, '701': 701, '702': 702, '703': 703, '704': 704,\n  '705': 705, '706': 706, '707': 707, '708': 708, '709': 709, '710': 710, '711': 711, '712': 712,\n  '713': 713, '714': 714, '715': 715, '716': 716, '717': 717, '718': 718, '719': 719, '720': 720,\n  '721': 721, '722': 722, '723': 723, '724': 724, '725': 725, '726': 726, '727': 727, '728': 728,\n  '729': 729, '730': 730, '731': 731, '732': 732, '733': 733, '734': 734, '735': 735, '736': 736,\n  '737': 737, '738': 738, '739': 739, '740': 740, '741': 741, '742': 742, '743': 743, '744': 744,\n  '745': 745, '746': 746, '747': 747, '748': 748, '749': 749, '750': 750, '751': 751, '752': 752,\n  '753': 753, '754': 754, '755': 755, '756': 756, '757': 757, '758': 758, '759': 759, '760': 760,\n  '761': 761, '762': 762, '763': 763, '764': 764, '765': 765, '766': 766, '767': 767, '768': 768,\n  '769': 769, '770': 770, '771': 771, '772': 772, '773': 773, '774': 774, '775': 775, '776': 776,\n  '777': 777, '778': 778, '779': 779, '780': 780, '781': 781, '782': 782, '783': 783, '784': 784,\n  '785': 785, '786': 786, '787': 787, '788': 788, '789': 789, '790': 790, '791': 791, '792': 792,\n  '793': 793, '794': 794, '795': 795, '796': 796, '797': 797, '798': 798, '799': 799, '800': 800,\n  '801': 801, '802': 802, '803': 803, '804': 804, '805': 805, '806': 806, '807': 807, '808': 808,\n  '809': 809, '810': 810, '811': 811, '812': 812, '813': 813, '814': 814, '815': 815, '816': 816,\n  '817': 817, '818': 818, '819': 819, '820': 820, '821': 821, '822': 822, '823': 823, '824': 824,\n  '825': 825, '826': 826, '827': 827, '828': 828, '829': 829, '830': 830, '831': 831, '832': 832,\n  '833': 833, '834': 834, '835': 835, '836': 836, '837': 837, '838': 838, '839': 839, '840': 840,\n  '841': 841, '842': 842, '843': 843, '844': 844, '845': 845, '846': 846, '847': 847, '848': 848,\n  '849': 849, '850': 850, '851': 851, '852': 852, '853': 853, '854': 854, '855': 855, '856': 856,\n  '857': 857, '858': 858, '859': 859, '860': 860, '861': 861, '862': 862, '863': 863, '864': 864,\n  '865': 865, '866': 866, '867': 867, '868': 868, '869': 869, '870': 870, '871': 871, '872': 872,\n  '873': 873, '874': 874, '875': 875, '876': 876, '877': 877, '878': 878, '879': 879, '880': 880,\n  '881': 881, '882': 882, '883': 883, '884': 884, '885': 885, '886': 886, '887': 887, '888': 888,\n  '889': 889, '890': 890, '891': 891, '892': 892, '893': 893, '894': 894, '895': 895, '896': 896,\n  '897': 897, '898': 898, '899': 899, '900': 900, '901': 901, '902': 902, '903': 903, '904': 904,\n  '905': 905, '906': 906, '907': 907, '908': 908, '909': 909, '910': 910, '911': 911, '912': 912,\n  '913': 913, '914': 914, '915': 915, '916': 916, '917': 917, '918': 918, '919': 919, '920': 920,\n  '921': 921, '922': 922, '923': 923, '924': 924, '925': 925, '926': 926, '927': 927, '928': 928,\n  '929': 929, '930': 930, '931': 931, '932': 932, '933': 933, '934': 934, '935': 935, '936': 936,\n  '937': 937, '938': 938, '939': 939, '940': 940, '941': 941, '942': 942, '943': 943, '944': 944,\n  '945': 945, '946': 946, '947': 947, '948': 948, '949': 949, '950': 950, '951': 951, '952': 952,\n  '953': 953, '954': 954, '955': 955, '956': 956, '957': 957, '958': 958, '959': 959, '960': 960,\n  '961': 961, '962': 962, '963': 963, '964': 964, '965': 965, '966': 966, '967': 967, '968': 968,\n  '969': 969, '970': 970, '971': 971, '972': 972, '973': 973, '974': 974, '975': 975, '976': 976,\n  '977': 977, '978': 978, '979': 979, '980': 980, '981': 981, '982': 982, '983': 983, '984': 984,\n  '985': 985, '986': 986, '987': 987, '988': 988, '989': 989, '990': 990, '991': 991, '992': 992,\n  '993': 993, '994': 994, '995': 995, '996': 996, '997': 997, '998': 998, '999': 999, '1000': 1000,\n  '1001': 1001, '1002': 1002, '1003': 1003, '1004': 1004, '1005': 1005, '1006': 1006, '1007': 1007, '1008': 1008,\n  '1009': 1009, '1010': 1010, '1011': 1011, '1012': 1012, '1013': 1013, '1014': 1014, '1015': 1015, '1016': 1016,\n  '1017': 1017, '1018': 1018, '1019': 1019, '1020': 1020, '1021': 1021, '1022': 1022, '1023': 1023, '1024': 1024 };\n\nfor (i = 1; i <= 1024; i++)\n{\n  assert (data[i] === i);\n}\n"

/***/ }),
/* 449 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar obj1 = {};\nobj1.prop = \"hi\";\n\nassert (obj1.hasOwnProperty('prop') === true);\nassert (obj1.hasOwnProperty('NO_PROP') === false);\n\n\n// Test if the toString fails.\ntry {\n  obj1.hasOwnProperty({toString: function() { throw new ReferenceError (\"foo\"); }});\n\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n\n// Test if the toObject fails.\n\nvar obj2;\ntry {\n  obj2.hasOwnProperty(\"fail\");\n\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\nvar obj_undef;\nvar obj3 = {};\nObject.defineProperty(obj3, 'Test', { 'get' : function () {throw new ReferenceError (\"foo\"); } });\nassert (obj3.hasOwnProperty(\"Test\") === true);\n\nObject.defineProperty(obj3, 'Test2', { 'get' : function () { return 0/0; } });\nassert (obj3.hasOwnProperty(\"Test2\") === true);\n\nObject.defineProperty(obj3, 'Test4', { 'get' : function () { return obj_undef; } });\nassert (obj3.hasOwnProperty(\"Test4\") === true);\n"

/***/ }),
/* 450 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction Function_A() { }\nfunction Function_B() { }\nFunction_B.prototype = new Function_A();\n\nfunction Function_C() { }\nFunction_C.prototype = new Function_B();\n\nfunction Function_D() { }\nFunction_D.prototype = new Function_C();\n\nvar d_instance = new Function_D();\n\nassert (Function_A.prototype.isPrototypeOf (d_instance) === true)\nassert (Function_A.prototype.isPrototypeOf (Array) === false)\n\n\nassert (Function_A.prototype.isPrototypeOf.call(0, 0) === false);\nassert (Function_A.prototype.isPrototypeOf.call(Function_A, 0) === false);\n\nassert (Function.prototype.isPrototypeOf (Object) === true)\n"

/***/ }),
/* 451 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar obj = {};\n\n// Test if the toString fails.\ntry {\n  obj.propertyIsEnumerable({ toString: function() { throw new ReferenceError (\"foo\"); } });\n\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n\n// Test if the toObject fails.\nvar obj1;\ntry {\n  obj1.propertyIsEnumerable(\"fail\");\n\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\nvar array = [];\nobj.prop = \"bar\";\narray[0] = \"bar\";\n\nassert (obj.propertyIsEnumerable('prop') === true);\nassert (array.propertyIsEnumerable(0) === true);\n\nassert (obj.propertyIsEnumerable('length') === false);\nassert (array.propertyIsEnumerable('length') === false);\nassert (Math.propertyIsEnumerable('random') === false);\n\n// Creating a new property\nObject.defineProperty(obj, 'prop1', { value: 'foo', enumerable: true });\nObject.defineProperty(obj, 'prop2', { value: 'foo', enumerable: false });\nObject.defineProperty(obj, 'prop3', { value: 'foo' });\nassert (obj.propertyIsEnumerable('prop1') === true);\nassert (obj.propertyIsEnumerable('prop2') === false);\nassert (obj.propertyIsEnumerable('prop3') === false);\n\nObject.defineProperty(array, 'prop1', { value: 'foo', enumerable: true });\nObject.defineProperty(array, 'prop2', { value: 'foo', enumerable: false });\nObject.defineProperty(array, 'prop3', { value: 'foo' });\nassert (array.propertyIsEnumerable('prop1') === true);\nassert (array.propertyIsEnumerable('prop2') === false);\nassert (array.propertyIsEnumerable('prop3') === false);\n\n// Modify an existing one\nObject.defineProperty(obj, 'prop', { value: 'foo', enumerable: false });\nassert (obj.propertyIsEnumerable('prop') === false);\nObject.defineProperty(obj, 'prop', { value: 'foo', enumerable: true });\nassert (obj.propertyIsEnumerable('prop') === true);\n\nObject.defineProperty(array, 0, { value: 'foo', enumerable: false });\nassert (array.propertyIsEnumerable(0) === false);\nObject.defineProperty(array, 0, { value: 'foo', enumerable: true });\nassert (array.propertyIsEnumerable(0) === true);\n\n// Enumerability of inherited properties\nfunction construct1()\n{\n  this.prop1 = 'foo';\n}\n\nfunction construct2()\n{\n  this.prop2 = 'foo';\n}\n\nconstruct2.prototype = new construct1;\nconstruct2.prototype.constructor = construct2;\n\nvar obj2 = new construct2();\nobj2.prop3 = 'foo';\n\nassert (obj2.propertyIsEnumerable('prop3') === true);\nassert (obj2.propertyIsEnumerable('prop2') === true);\nassert (obj2.propertyIsEnumerable('prop1') === false);\n\nobj2.prop1 = 'foo';\n\nassert (obj2.propertyIsEnumerable('prop1') === true);\n"

/***/ }),
/* 452 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar obj1 = {};\nobj1.toString = function () { return \"mystring\"; }\n\nassert (obj1.toLocaleString() === \"mystring\");\n\nvar obj2 = {a: 3};\nassert (obj2.toLocaleString() === \"[object Object]\");\n\n\nvar obj3 = {toLocaleString: function() { throw ReferenceError (\"foo\"); }};\ntry {\n  obj3.toLocaleString();\n\n  assert (false);\n} catch (e) {\n  assert (e.message === \"foo\");\n  assert (e instanceof ReferenceError);\n}\n\n// Test invalid toString call\nvar obj4 = {toString: 2};\ntry {\n  obj4.toLocaleString();\n\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\n// Test undefined toString call\nvar obj5 = {};\nvar obj6;\nobj5.toString = obj6\ntry {\n  obj5.toLocaleString();\n\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n"

/***/ }),
/* 453 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar obj = {\n  prop: function() {},\n  foo: 'bar'\n};\n\n// New properties may be added, existing properties may be changed or removed\nobj.foo = 'baz';\nobj.lumpy = 'woof';\ndelete obj.prop;\n\nvar o = Object.freeze(obj);\n\nassert(Object.isFrozen(obj) === true);\n\n// Now any changes will fail\nobj.foo = 'quux'; // silently does nothing\nassert (obj.foo === 'baz');\n\nobj.quaxxor = 'the friendly duck'; // silently doesn't add the property\nassert (obj.quaxxor === undefined);\n\n// ...and in strict mode such attempts will throw TypeErrors\nfunction fail(){\n  'use strict';\n\n  try {\n    obj.foo = 'sparky'; // throws a TypeError\n    assert (false);\n  } catch (e) {\n    assert (e instanceof TypeError);\n  }\n\n  try {\n    delete obj.foo; // throws a TypeError\n    assert (false);\n  } catch (e) {\n    assert (e instanceof TypeError);\n  }\n\n  try {\n    obj.sparky = 'arf'; // throws a TypeError\n    assert (false);\n  } catch (e) {\n    assert (e instanceof TypeError);\n  }\n}\n\nfail();\n\n// Attempted changes through Object.defineProperty will also throw\n\ntry {\n  Object.defineProperty(obj, 'ohai', { value: 17 }); // throws a TypeError\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\ntry {\n  Object.defineProperty(obj, 'foo', { value: 'eit' }); // throws a TypeError\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n"

/***/ }),
/* 454 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar obj = {\n  prop: function() {},\n  foo: 'bar'\n};\n// New properties may be added, existing properties may be changed or removed.\nobj.foo = 'baz';\nobj.lumpy = 'woof';\ndelete obj.prop;\n\nvar o = Object.seal(obj);\n\nassert (o === obj);\nassert (Object.isSealed (obj) === true);\n\n// Changing property values on a sealed object still works.\nobj.foo = 'quux';\nassert (obj.foo === 'quux');\n// But you can't convert data properties to accessors, or vice versa.\ntry {\n    Object.defineProperty(obj, 'foo', { get: function() { return 42; } }); // throws a TypeError\n    assert (false);\n} catch (e) {\n    assert (e instanceof TypeError);\n}\n\n// Now any changes, other than to property values, will fail.\nobj.quaxxor = 'the friendly duck'; // silently doesn't add the property\ndelete obj.foo; // silently doesn't delete the property\n\nassert (obj.quaxxor === undefined);\nassert (obj.foo === 'quux')\n\ntry {\n    // Attempted additions through Object.defineProperty will also throw.\n    Object.defineProperty (obj, 'ohai', { value: 17 }); // throws a TypeError\n    assert (false);\n} catch (e) {\n    assert (e instanceof TypeError);\n}\n\ntry {\n    Object.defineProperties (obj, { 'ohai' : { value: 17 } });\n    assert (false);\n} catch (e) {\n    assert (e instanceof TypeError);\n}\n\nObject.defineProperty (obj, 'foo', { value: 'eit' });\nassert (obj.foo === 'eit')\n\n// Objects aren't sealed by default.\nvar empty = {};\nassert (Object.isSealed (empty) === false);\n\n// If you make an empty object non-extensible, it is vacuously sealed.\nObject.preventExtensions (empty);\nassert (Object.isSealed (empty) === true);\n\n// The same is not true of a non-empty object, unless its properties are all non-configurable.\nvar hasProp = { fee: 'fie foe fum' };\nObject.preventExtensions (hasProp);\nassert (Object.isSealed (hasProp) === false);\n\n// But make them all non-configurable and the object becomes sealed.\nObject.defineProperty (hasProp, 'fee', { configurable: false });\nassert (Object.isSealed (hasProp) === true);\n\n// The easiest way to seal an object, of course, is Object.seal.\nvar sealed = {};\nObject.seal (sealed);\nassert (Object.isSealed (sealed) === true);\n"

/***/ }),
/* 455 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert (010 === 8);\n"

/***/ }),
/* 456 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar r;\n\nr = new RegExp (\"a|b\");\nassert (r.exec(\"a\") == \"a\");\n\nr = new RegExp (\"a|b\");\nassert (r.exec(\"b\") == \"b\");\n\nr = new RegExp (\"a|b|c\");\nassert (r.exec(\"b\") == \"b\");\n\nr = new RegExp (\"a|b|c\");\nassert (r.exec(\"c\") == \"c\");\n\nr = new RegExp (\"a|b|c|d\");\nassert (r.exec(\"\") == undefined);\n\nr = new RegExp (\"a|b|c|d\");\nassert (r.exec(\"a\") == \"a\");\n\nr = new RegExp (\"a|b|c|d\");\nassert (r.exec(\"b\") == \"b\");\n\nr = new RegExp (\"a|b|c|d\");\nassert (r.exec(\"c\") == \"c\");\n\nr = new RegExp (\"a|b|c|d\");\nassert (r.exec(\"d\") == \"d\");\n\nr = new RegExp (\"a|bb|c|d\");\nassert (r.exec(\"e\") == undefined);\n\nr = new RegExp (\"a|bb|c|d\");\nassert (r.exec(\"bb\") == \"bb\");\n\nr = new RegExp (\"a|bb|c|d\");\nassert (r.exec(\"bba\") == \"bb\");\n\nr = new RegExp (\"a|bb|c|d\");\nassert (r.exec(\"bbbb\") == \"bb\");\n\nr = new RegExp (\"a|bb|c|d\");\nassert (r.exec(\"a\") == \"a\");\n\nr = new RegExp (\"a|bb|c|d\");\nassert (r.exec(\"b\") == undefined);\n"

/***/ }),
/* 457 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar t;\n\nt = new RegExp (\"^alma$\").exec(\"alma\");\nassert (t == \"alma\");\n\nt = new RegExp (\"^alma$\").exec(\"almaa\");\nassert (t == undefined);\n\nt = new RegExp (\"^alma$\").exec(\"aalma\");\nassert (t == undefined);\n\nt = new RegExp (\"^alma\").exec(\"alma\");\nassert (t == \"alma\");\n\nt = new RegExp (\"^alma\").exec(\"almaa\");\nassert (t == \"alma\");\n\nt = new RegExp (\"^alma\").exec(\"aalma\");\nassert (t == undefined);\n\nt = new RegExp (\"alma$\").exec(\"alma\");\nassert (t == \"alma\");\n\nt = new RegExp (\"alma$\").exec(\"almaa\");\nassert (t == undefined);\n\nt = new RegExp (\"alma$\").exec(\"aalma\");\nassert (t == \"alma\");\n\nt = new RegExp (\"\\\\bis\\\\b\").exec(\"This island is beautiful\");\nassert (t == \"is\");\n\nt = new RegExp (\"\\\\Bis\\\\B\").exec(\"This island is beautiful\");\nassert (t == undefined);\n\nt = new RegExp (\"\\\\Bis\").exec(\"This island is beautiful\");\nassert (t == \"is\");\n\nt = new RegExp (\"is\\\\B\").exec(\"This island is beautiful\");\nassert (t == \"is\");\n\nt = new RegExp (\"\\\\Bis\\\\b\").exec(\"This island is beautiful\");\nassert (t == \"is\");\n\nt = new RegExp (\"\\\\bis\\\\B\").exec(\"This island is beautiful\");\nassert (t == \"is\");\n\nt = new RegExp (\"al(?=(ma))\").exec(\"al\");\nassert (t == undefined);\n\nt = new RegExp (\"al(?!(ma))\").exec(\"ala\");\nassert (t[0] == \"al\");\nassert (t[1] == undefined);\n\nt = new RegExp (\"al(?=(ma))\").exec(\"alma\");\nassert (t[0] == \"al\");\nassert (t[1] == \"ma\");\n\nt = new RegExp (\"al(?=(ma))\").exec(\"almama\");\nassert (t[0] == \"al\");\nassert (t[1] == \"ma\");\n\nt = new RegExp (\"(al)(?=(ma))ma\").exec(\"al\");\nassert (t == undefined);\n\nt = new RegExp (\"(al)(?=(ma)ma)\").exec(\"al\");\nassert (t == undefined);\n\nt = new RegExp (\"al(?=(ma))*ma\").exec(\"alma\");\nassert (t[0] == \"alma\");\nassert (t[1] == undefined);\n\nt = new RegExp (\"al(?!(ma))*ma\").exec(\"alma\");\nassert (t[0] == \"alma\");\nassert (t[1] == undefined);\n\nt = new RegExp (\"al(?=(ma))ma\").exec(\"alma\");\nassert (t[0] == \"alma\");\nassert (t[1] == \"ma\");\n\nt = new RegExp (\"al(?!(ma))ma\").exec(\"alma\");\nassert (t == undefined);\n\nt = new RegExp (\"(al)(?=(ma))ma\").exec(\"almama\");\nt = new RegExp (\"(al)(?=(ma)ma)\").exec(\"almama\");\n\nt = new RegExp (\"al(?=(ma))ma\").exec(\"almama\");\nassert (t[0] == \"alma\");\nassert (t[1] == \"ma\");\n\nt = new RegExp (\"al(?=(ma)ma)\").exec(\"almama\");\nassert (t[0] == \"al\");\nassert (t[1] == \"ma\");\n\nt = new RegExp (\"al(?!(ma))ma\").exec(\"almama\");\nassert (t == undefined);\n\nt = new RegExp (\"a(?=(a)(a))aab|aaac\").exec(\"aaac\");\nt = new RegExp (\"a(?=(a)(a))aab|aaac\").exec(\"aaab\");\n\nt = new RegExp (\"(?!(a)b)|ab\").exec(\"ab\");\nassert (t[0] == \"ab\");\nassert (t[1] == undefined);\n\nt = new RegExp (\"(?=(a)b)|ab\").exec(\"ab\");\nassert (t[0] == \"\");\nassert (t[1] == \"a\");\n\nt = new RegExp (\"(?=a|.)Dt\").exec(\"Dt\");\nassert (t == \"Dt\");\n\nt = new RegExp (\"(?=.|a)Dt\").exec(\"Dt\");\nassert (t == \"Dt\");\n\nt = new RegExp (\"(?=a|b)Dt\").exec(\"Dt\");\nassert (t == undefined);\n\nt = new RegExp (\"(?=.|P)\").exec(\"a\");\nassert (t == \"\");\n\nt = new RegExp (\"(?=.)\").exec(\"a\");\nassert (t == \"\");\n\nt = new RegExp (\"(?!a|.)Dt\").exec(\"Dt\");\nassert (t == undefined);\n\nt = new RegExp (\"(?!.|a)Dt\").exec(\"Dt\");\nassert (t == undefined);\n\nt = new RegExp (\"(?!a|b)Dt\").exec(\"Dt\");\nassert (t == \"Dt\");\n\nt = new RegExp (\"(?!.|P)\").exec(\"a\");\nassert (t == \"\");\n\nt = new RegExp (\"(?!.)\").exec(\"a\");\nassert (t == \"\");\n\nt = new RegExp (\"abc\",\"g\");\nt.lastIndex = {toString: function () { return \"4\"}};\nvar result = t.exec(\"abc   abc\");\nassert(result[0] === \"abc\");\nassert(result.index === 6);\n\nt = new RegExp (\"abc\",\"g\");\nt.lastIndex = {valueOf: function () { return \"4\"}};\nvar result = t.exec(\"abc   abc\");\nassert(result[0] === \"abc\");\nassert(result.index === 6);\n\nt = new RegExp (\"abc\",\"g\");\nt.lastIndex = \"2\"\nvar result = t.exec(\"abc   abc\");\nassert(result[0] === \"abc\");\nassert(result.index === 6);\n\nt = new RegExp (\"abc\",\"g\");\nt.lastIndex = -12;\nresult = t.exec(\"abc   abc\");\nassert(result);\nassert(t.lastIndex === 3);\n"

/***/ }),
/* 458 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar r;\n\nr = new RegExp (\"(a)b\\\\1\").exec(\"aba\");\nassert (r[0] == \"aba\");\nassert (r[1] == \"a\");\n\nr = new RegExp (\"(a)b\\\\1\").exec(\"b\");\nassert (r == undefined);\n\nr = new RegExp (\"(a)*b\\\\1\").exec(\"b\");\nassert (r[0] == \"b\");\nassert (r[1] == undefined);\n"

/***/ }),
/* 459 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar r;\n\n// Simple test cases\nr = new RegExp (\"()\");\nassert (r.exec (\"a\") == \",\");\n\nr = new RegExp (\"(a)\");\nassert (r.exec (\"a\") == \"a,a\");\n\nr = new RegExp (\"((a)b)c\");\nassert (r.exec (\"abc\") == \"abc,ab,a\");\n\nr = new RegExp (\"(a)*\");\nassert (r.exec (\"b\")[0] == \"\");\nassert (r.exec (\"b\")[1] == undefined);\nassert (r.exec (\"aaaa\") == \"aaaa,a\");\n\nr = new RegExp (\"(a)+\");\nassert (r.exec (\"aaaa\") == \"aaaa,a\");\n\nr = new RegExp (\"(a){4}\");\nassert (r.exec (\"aaaa\") == \"aaaa,a\");\n\nr = new RegExp (\"(a){1,2}\");\nassert (r.exec (\"a\") == \"a,a\");\nassert (r.exec (\"aa\") == \"aa,a\");\nassert (r.exec (\"aaaa\") == \"aa,a\");\n\nr = new RegExp (\"(a)?\");\nassert (r.exec (\"a\") == \"a,a\");\nassert (r.exec (\"b\")[0] == \"\");\nassert (r.exec (\"b\")[1] == undefined);\n\n// Test greedy iterations\nr = new RegExp (\"(a){1,3}a\");\nassert (r.exec(\"aa\") == \"aa,a\");\n\nr = new RegExp (\"(a){1,3}a\");\nassert (r.exec(\"aaa\") == \"aaa,a\");\n\nr = new RegExp (\"(a){1,3}\");\nassert (r.exec(\"a\") == \"a,a\");\n\nr = new RegExp (\"(a){1,3}\");\nassert (r.exec(\"aaa\") == \"aaa,a\");\n\nr = new RegExp (\"(a){1,3}\");\nassert (r.exec(\"aaaa\") == \"aaa,a\");\n\nr = new RegExp (\"(a){1,5}\");\nassert (r.exec(\"aaaa\") == \"aaaa,a\");\n\nr = new RegExp (\"(a|b){1,2}\");\nassert (r.exec(\"a\") == \"a,a\");\n\nr = new RegExp (\"(a|b){1,3}a\");\nassert (r.exec(\"aaa\") == \"aaa,a\");\n\nr = new RegExp (\"(a|b){1,3}a\");\nassert (r.exec(\"aba\") == \"aba,b\");\n\nr = new RegExp (\"(a|b){1,3}a\");\nassert (r.exec(\"b\") == undefined);\n\nr = new RegExp (\"(a|b){1,3}a\");\nassert (r.exec(\"bbb\") == undefined);\n\nr = new RegExp (\"(a|b){1,3}\");\nassert (r.exec(\"a\") == \"a,a\");\n\nr = new RegExp (\"(a|b){1,3}\");\nassert (r.exec(\"aa\") == \"aa,a\");\n\nr = new RegExp (\"(a|b){1,3}\");\nassert (r.exec(\"aaa\") == \"aaa,a\");\n\nr = new RegExp (\"(a|b){1,3}\");\nassert (r.exec(\"ab\") == \"ab,b\");\n\nr = new RegExp (\"(a|b){1,3}\");\nassert (r.exec(\"aba\") == \"aba,a\");\n\nr = new RegExp (\"(a|b){1,3}\");\nassert (r.exec(\"bab\") == \"bab,b\");\n\nr = new RegExp (\"(a|b){1,3}\");\nassert (r.exec(\"bbb\") == \"bbb,b\");\n\nr = new RegExp (\"(a|b){1,4}a\");\nassert (r.exec(\"bbb\") == undefined);\n\nr = new RegExp (\"(a|b){1,4}\");\nassert (r.exec(\"ab\") == \"ab,b\");\n\nr = new RegExp (\"(a|b){1,4}\");\nassert (r.exec(\"aba\") == \"aba,a\");\n\nr = new RegExp (\"(a|b){1,4}\");\nassert (r.exec(\"bbb\") == \"bbb,b\");\n\nr = new RegExp (\"(a|b){1,5}\");\nassert (r.exec(\"aba\") == \"aba,a\");\n\nr = new RegExp (\"(a|b){1,5}\");\nassert (r.exec(\"abab\") == \"abab,b\");\n\nr = new RegExp (\"(a|b){1,5}\");\nassert (r.exec(\"bbb\") == \"bbb,b\");\n\nr = new RegExp (\"(aba)*\");\nassert (r.exec(\"aaaa\") == \",\");\n\nr = new RegExp (\"(aba)+\");\nassert (r.exec(\"aaaa\") == undefined);\n\nr = new RegExp (\"(a|bb|c|d)\");\nassert (r.exec(\"a\") == \"a,a\");\n\nr = new RegExp (\"(a|b)\");\nassert (r.exec(\"a\") == \"a,a\");\n\nr = new RegExp (\"(a|b)+\");\nassert (r.exec(\"aba\") == \"aba,a\");\n\nr = new RegExp (\"(a|b)\");\nassert (r.exec(\"b\") == \"b,b\");\n\nr = new RegExp (\"(a)\");\nassert (r.exec(\"a\") == \"a,a\");\n\nr = new RegExp (\"(a)*\");\nassert (r.exec(\"a\") == \"a,a\");\n\nr = new RegExp (\"(a)*\");\nassert (r.exec(\"aaaa\") == \"aaaa,a\");\n\nr = new RegExp (\"(a)+\");\nassert (r.exec(\"aaaa\") == \"aaaa,a\");\n\nr = new RegExp (\"(a|aa){0,3}b\");\nassert (r.exec(\"aaaaaab\") == \"aaaaaab,aa\");\n\nr = new RegExp (\"((a){2,3}){4}b\");\nassert (r.exec(\"aaaaaaaab\") == \"aaaaaaaab,aa,a\");\n\n// Test non-greedy iterations\nr = new RegExp (\"(a)+?\");\nassert (r.exec(\"aaaa\") == \"a,a\");\n\nr = new RegExp (\"(a)*?aa\");\nassert (r.exec(\"aaaa\") == \"aa,\");\n\nr = new RegExp (\"(aaa|aa)*?aa\");\nassert (r.exec(\"aaaa\")[0] == \"aa\");\nassert (r.exec(\"aaaa\")[1] == undefined);\n\nr = new RegExp (\"(a)??aa\");\nassert (r.exec(\"aaaa\")[0] == \"aa\");\nassert (r.exec(\"aaaa\")[1] == undefined);\n\nr = new RegExp (\"(a)?aa\");\nassert (r.exec(\"aaaa\") == \"aaa,a\");\n\nr = new RegExp (\"(()*?)*?a\");\nassert (r.exec(\"ba\")[0] == \"a\");\nassert (r.exec(\"ba\")[1] == undefined);\nassert (r.exec(\"ba\")[2] == undefined);\n\nr = new RegExp (\"((bb?)*)*a\");\nassert (r.exec(\"bbba\") == \"bbba,bbb,b\");\n\nr = new RegExp (\"((bb?)*)*bbb\\\\Ba\");\nassert (r.exec(\"bbba\")[0] == \"bbba\");\nassert (r.exec(\"bbba\")[1] == undefined);\nassert (r.exec(\"bbba\")[2] == undefined);\n\nr = new RegExp (\"(a??){0,1}a\");\nassert (r.exec(\"aa\") == \"aa,a\");\n\nr = new RegExp (\"(a?){0,1}a\");\nassert (r.exec(\"aa\") == \"aa,a\");\n\nr = new RegExp (\"(a{0,1}?){0,1}a\");\nassert (r.exec(\"aa\") == \"aa,a\");\n"

/***/ }),
/* 460 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar r;\n\nr = new RegExp (\"[abc]*\").exec(\"aaabbcccabcacbacabacbacab\");\nassert (r == \"aaabbcccabcacbacabacbacab\");\n\nr = new RegExp (\"[abc]*\").exec(\"aaabbcccabdcacb\");\nassert (r == \"aaabbcccab\");\n\nr = new RegExp (\"[abc]*\").exec(\"defghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"[a-z]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"abcdefghjklmnopqrstuvwxyz\");\n\nr = new RegExp (\"[A-Z]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"[^a-z]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"[^A-Z]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"abcdefghjklmnopqrstuvwxyz\");\n\nr = new RegExp (\"\\\\d*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"\\\\D*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"abcdefghjklmnopqrstuvwxyz\");\n\nr = new RegExp (\"\\\\w*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"abcdefghjklmnopqrstuvwxyz\");\n\nr = new RegExp (\"\\\\W*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"\\\\s*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"\\\\S*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"abcdefghjklmnopqrstuvwxyz\");\n\nr = new RegExp (\"[\\\\d]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"[\\\\D]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"abcdefghjklmnopqrstuvwxyz\");\n\nr = new RegExp (\"[\\\\w]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"abcdefghjklmnopqrstuvwxyz\");\n\nr = new RegExp (\"[\\\\W]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"[\\\\s]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"[\\\\S]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"abcdefghjklmnopqrstuvwxyz\");\n\nr = new RegExp (\"[^\\\\d]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"abcdefghjklmnopqrstuvwxyz\");\n\nr = new RegExp (\"[^\\\\D]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"[^\\\\w]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"[^\\\\W]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"abcdefghjklmnopqrstuvwxyz\");\n\nr = new RegExp (\"[^\\\\s]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"abcdefghjklmnopqrstuvwxyz\");\n\nr = new RegExp (\"[^\\\\S]*\").exec(\"abcdefghjklmnopqrstuvwxyz\");\nassert (r == \"\");\n\nr = new RegExp (\"\\\\d*\").exec(\"0123456789\");\nassert (r == \"0123456789\");\n\ntry\n{\n  r = new RegExp(\"[\");\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof SyntaxError);\n}\n\ntry\n{\n  r = new RegExp(\"[\\\\\");\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof SyntaxError);\n}\n"

/***/ }),
/* 461 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar r;\n\nr = new RegExp ();\nassert (r.source == \"(?:)\");\nassert (r.global == false);\nassert (r.ignoreCase == false);\nassert (r.multiline == false);\n\nr = new RegExp (\"a\");\nassert (r.source == \"a\");\nassert (r.global == false);\nassert (r.ignoreCase == false);\nassert (r.multiline == false);\n\nr = new RegExp (\"a\",\"gim\");\nassert (r.source == \"a\");\nassert (r.global == true);\nassert (r.ignoreCase == true);\nassert (r.multiline == true);\n\nr = RegExp (\"a\");\nassert (r.source == \"a\");\nassert (r.global == false);\nassert (r.ignoreCase == false);\nassert (r.multiline == false);\n\nr = RegExp (\"a\",\"gim\");\nassert (r.source == \"a\");\nassert (r.global == true);\nassert (r.ignoreCase == true);\nassert (r.multiline == true);\n\nvar r2;\ntry {\n  r2 = RegExp (r,\"gim\");\n  assert(false);\n}\ncatch ( e )\n{\n  assert (e instanceof TypeError);\n}\n\nr2 = RegExp (r);\nassert (r2.source == \"a\");\nassert (r2.global == true);\nassert (r2.ignoreCase == true);\nassert (r2.multiline == true);\n\nr2 = RegExp (r, undefined);\nassert (r2.source == \"a\");\nassert (r2.global == true);\nassert (r2.ignoreCase == true);\nassert (r2.multiline == true);\n\nr = /(?:)/;\nassert (r.source == \"(?:)\");\nassert (r.global == false);\nassert (r.ignoreCase == false);\nassert (r.multiline == false);\n\nr = /a/;\nassert (r.source == \"a\");\nassert (r.global == false);\nassert (r.ignoreCase == false);\nassert (r.multiline == false);\n\nr = /a/gim;\nassert (r.source == \"a\");\nassert (r.global == true);\nassert (r.ignoreCase == true);\nassert (r.multiline == true);\n\nassert(Object.prototype.toString.call(RegExp.prototype) === '[object RegExp]');\n\n/* The 'undefined' argument for the RegExp constructor should not be converted to string,\n * and it should behave just like when there is no argument.\n */\nr1 = new RegExp();\nr2 = new RegExp(undefined);\nvar foo;\nr3 = new RegExp(foo)\n\nassert (r1.source === r2.source);\nassert (r2.source === r3.source);\n\nr = new RegExp (\"foo\", undefined);\nassert (r.source === \"foo\");\nassert (r.global === false);\nassert (r.ignoreCase === false);\nassert (r.multiline === false);\n\nr = new RegExp (\"foo\", void 0);\nassert (r.source === \"foo\");\nassert (r.global === false);\nassert (r.ignoreCase === false);\nassert (r.multiline === false);\n\ntry {\n  new RegExp (undefined, \"ii\");\n  assert (false);\n} catch (e) {\n  assert (e instanceof SyntaxError);\n}\n\ntry {\n  new RegExp (\"\", \"gg\");\n  assert (false);\n} catch (e) {\n  assert (e instanceof SyntaxError);\n}\n\ntry {\n  new RegExp (void 0, \"mm\");\n  assert (false);\n} catch (e) {\n  assert (e instanceof SyntaxError);\n}\n\nr = new RegExp (undefined, undefined);\nassert (r.source == \"(?:)\");\nassert (r.global == false);\nassert (r.ignoreCase == false);\nassert (r.multiline == false);\n\n/* RegExp properties */\nassert (RegExp.length === 2);\nassert (RegExp.prototype.source === \"(?:)\");\nassert (RegExp.prototype.global === false);\nassert (RegExp.prototype.ignoreCase === false);\nassert (RegExp.prototype.multiline === false);\n\nRegExp.prototype.source = \"a\";\nRegExp.prototype.global = true;\nRegExp.prototype.ignoreCase = true;\nRegExp.prototype.multiline = true;\nassert (RegExp.prototype.source === \"(?:)\");\nassert (RegExp.prototype.global === false);\nassert (RegExp.prototype.ignoreCase === false);\nassert (RegExp.prototype.multiline === false);\n\ndelete RegExp.prototype.source;\ndelete RegExp.prototype.global;\ndelete RegExp.prototype.ignoreCase;\ndelete RegExp.prototype.multiline;\nassert (RegExp.prototype.source === \"(?:)\");\nassert (RegExp.prototype.global === false);\nassert (RegExp.prototype.ignoreCase === false);\nassert (RegExp.prototype.multiline === false);\n"

/***/ }),
/* 462 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar t;\n\nt = /\\//.exec(\"/\");\nassert (t == \"/\");\n\nt = /[/]/.exec(\"/\");\nassert (\"a\"+/x/+\"b\" == \"a/x/b\");\n\nt = /\\/\\[[\\]/]/.exec(\"/[/\");\nassert (t == \"/[/\");\n\nt = /\\u0000/.exec(\"\\u0000\");\nassert (t == \"\\u0000\");\n\ntry {\n  eval(\"/\" + String.fromCharCode(\"0x0000\") + \"/\");\n} catch (e) {\n  assert (false);\n}\n\ntry {\n  eval(\"var x = 5\\n\\n/foo/\");\n  assert(false);\n} catch (e) {\n  assert(e instanceof SyntaxError);\n}\n\ntry {\n  eval(\"var x = 5;\\n\\n/foo/\");\n} catch (e) {\n  assert(false);\n}\n\ntry {\n  eval(\"for (;false;/abc/.exec(\\\"abc\\\")) {5}\");\n} catch (e) {\n  assert(false);\n}\n\ntry {\n  eval(\"var a = [] /foo/\");\n  assert(false);\n} catch (e) {\n  assert(e instanceof SyntaxError);\n}\n\ntry {\n  eval(\"/\");\n  assert(false);\n} catch (e) {\n  assert(e instanceof SyntaxError);\n}\n\ntry {\n  eval(\"var x = /aaa/\");\n} catch (e) {\n  assert (false);\n}\n\ntry {\n  eval(\"{}/a/g\");\n} catch (e) {\n  assert (false);\n}\n\ntry {\n  eval(\"var a, g; +{}/a/g\");\n} catch (e) {\n  assert (false);\n}\n"

/***/ }),
/* 463 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar r;\n\n// Simple test cases\nr = new RegExp (\"(?:)\");\nassert (r.exec (\"a\") == \"\");\n\nr = new RegExp (\"(?:a)\");\nassert (r.exec (\"a\") == \"a\");\n\nr = new RegExp (\"(?:(?:a)b)c\");\nassert (r.exec (\"abc\") == \"abc\");\n\nr = new RegExp (\"(?:a)*\");\nassert (r.exec (\"b\") == \"\");\nassert (r.exec (\"aaaa\") == \"aaaa\");\n\nr = new RegExp (\"(?:a)+\");\nassert (r.exec (\"aaaa\") == \"aaaa\");\n\nr = new RegExp (\"(?:a){4}\");\nassert (r.exec (\"aaaa\") == \"aaaa\");\n\nr = new RegExp (\"(?:a){1,2}\");\nassert (r.exec (\"a\") == \"a\");\nassert (r.exec (\"aa\") == \"aa\");\nassert (r.exec (\"aaaa\") == \"aa\");\n\nr = new RegExp (\"(?:a)?\");\nassert (r.exec (\"a\") == \"a\");\nassert (r.exec (\"b\") == \"\");\n\n// Test greedy iterations\nr = new RegExp (\"(?:a){1,3}a\");\nassert (r.exec (\"aa\") == \"aa\");\n\nr = new RegExp (\"(?:a){1,3}a\");\nassert (r.exec (\"aaa\") == \"aaa\");\n\nr = new RegExp (\"(?:a){1,3}\");\nassert (r.exec (\"a\") == \"a\");\n\nr = new RegExp (\"(?:a){1,3}\");\nassert (r.exec (\"aaa\") == \"aaa\");\n\nr = new RegExp (\"(?:a){1,3}\");\nassert (r.exec (\"aaaa\") == \"aaa\");\n\nr = new RegExp (\"(?:a){1,5}\");\nassert (r.exec (\"aaaa\") == \"aaaa\");\n\nr = new RegExp (\"(?:a|b){1,2}\");\nassert (r.exec (\"a\") == \"a\");\n\nr = new RegExp (\"(?:a|b){1,3}a\");\nassert (r.exec (\"aaa\") == \"aaa\");\n\nr = new RegExp (\"(?:a|b){1,3}a\");\nassert (r.exec (\"aba\") == \"aba\");\n\nr = new RegExp (\"(?:a|b){1,3}a\");\nassert (r.exec (\"b\") == undefined);\n\nr = new RegExp (\"(?:a|b){1,3}a\");\nassert (r.exec (\"bbb\") == undefined);\n\nr = new RegExp (\"(?:a|b){1,3}\");\nassert (r.exec (\"a\") == \"a\");\n\nr = new RegExp (\"(?:a|b){1,3}\");\nassert (r.exec (\"aa\") == \"aa\");\n\nr = new RegExp (\"(?:a|b){1,3}\");\nassert (r.exec (\"aaa\") == \"aaa\");\n\nr = new RegExp (\"(?:a|b){1,3}\");\nassert (r.exec (\"ab\") == \"ab\");\n\nr = new RegExp (\"(?:a|b){1,3}\");\nassert (r.exec (\"aba\") == \"aba\");\n\nr = new RegExp (\"(?:a|b){1,3}\");\nassert (r.exec (\"bab\") == \"bab\");\n\nr = new RegExp (\"(?:a|b){1,3}\");\nassert (r.exec (\"bbb\") == \"bbb\");\n\nr = new RegExp (\"(?:a|b){1,4}a\");\nassert (r.exec (\"bbb\") == undefined);\n\nr = new RegExp (\"(?:a|b){1,4}\");\nassert (r.exec (\"ab\") == \"ab\");\n\nr = new RegExp (\"(?:a|b){1,4}\");\nassert (r.exec (\"aba\") == \"aba\");\n\nr = new RegExp (\"(?:a|b){1,4}\");\nassert (r.exec (\"bbb\") == \"bbb\");\n\nr = new RegExp (\"(?:a|b){1,5}\");\nassert (r.exec (\"abab\") == \"abab\");\n\nr = new RegExp (\"(?:aba)*\");\nassert (r.exec (\"aaaa\") == \"\");\n\nr = new RegExp (\"(?:aba)+\");\nassert (r.exec (\"aaaa\") == undefined);\n\nr = new RegExp (\"(?:a|bb|c|d)\");\nassert (r.exec (\"a\") == \"a\");\n\nr = new RegExp (\"(?:a|b|c|d)\");\nassert (r.exec (\"\") == undefined);\n\nr = new RegExp (\"(?:a|b|c|d)\");\nassert (r.exec (\"a\") == \"a\");\n\nr = new RegExp (\"(?:a|b|c|d)\");\nassert (r.exec (\"b\") == \"b\");\n\nr = new RegExp (\"(?:a|b|c|d)\");\nassert (r.exec (\"c\") == \"c\");\n\nr = new RegExp (\"(?:a|b|c|d)\");\nassert (r.exec (\"d\") == \"d\");\n\nr = new RegExp (\"(?:a|b)+\");\nassert (r.exec (\"aba\") == \"aba\");\n\nr = new RegExp (\"(?:a|b)\");\nassert (r.exec (\"b\") == \"b\");\n\nr = new RegExp (\"(?:a)\");\nassert (r.exec (\"a\") == \"a\");\n\nr = new RegExp (\"(?:a)*\");\nassert (r.exec (\"a\") == \"a\");\n\nr = new RegExp (\"(?:a)*\");\nassert (r.exec (\"aaaa\") == \"aaaa\");\n\nr = new RegExp (\"(?:a)+\");\nassert (r.exec (\"aaaa\") == \"aaaa\");\n\nr = new RegExp (\"(?:a)?aa\");\nassert (r.exec (\"aaaa\") == \"aaa\");\n\nr = new RegExp (\"(?:a?){0,1}a\");\nassert (r.exec (\"aa\") == \"aa\");\n\nr = new RegExp (\"(?:a|aa){0,3}b\");\nassert (r.exec (\"aaaaaab\") == \"aaaaaab\");\n\nr = new RegExp (\"(?:(?:a){2,3}){4}b\");\nassert (r.exec (\"aaaaaaaab\") == \"aaaaaaaab\");\n\n// Test non-greedy iterations\nr = new RegExp (\"(?:a)+?\");\nassert (r.exec (\"aaaa\") == \"a\");\n\nr = new RegExp (\"(?:a)*?aa\");\nassert (r.exec (\"aaaa\") == \"aa\");\n\nr = new RegExp (\"(?:aaa|aa)*?aa\");\nassert (r.exec (\"aaaa\") == \"aa\");\n\nr = new RegExp (\"(?:a)??aa\");\nassert (r.exec (\"aaaa\") == \"aa\");\n\nr = new RegExp (\"(?:(?:)*?)*?a\");\nassert (r.exec (\"ba\") == \"a\");\n\nr = new RegExp (\"(?:(?:bb?)*)*a\");\nassert (r.exec (\"bbba\") == \"bbba\");\n\nr = new RegExp (\"(?:(?:bb?)*)*bbb\\\\Ba\");\nassert (r.exec (\"bbba\") == \"bbba\");\n\nr = new RegExp (\"(?:a??){0,1}a\");\nassert (r.exec (\"aa\") == \"aa\");\n\nr = new RegExp (\"(?:a{0,1}?){0,1}a\");\nassert (r.exec (\"aa\") == \"aa\");\n"

/***/ }),
/* 464 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar r;\n\nr = new RegExp (\"a\");\nassert (r.exec (\"a\") == \"a\");\nassert (r.exec (\"b\") == null);\ntry {\n  r.exec.call({}, \"a\");\n  assert (false)\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n}\n\nassert (r.test (\"a\") == true);\nassert (r.test (\"b\") == false);\ntry {\n  r.test.call({}, \"a\");\n  assert (false)\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n}\n\nr = new RegExp (\"a\", \"mig\");\nassert (r.toString () == \"/a/gim\");\ntry {\n  r.toString.call({}, \"a\");\n  assert (false)\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n}\n\n\n/* Test continous calls to the exec method to see how does the match\n * updates the lastIndex propertyand see if the match restarts.\n */\nvar re = new RegExp(\"a\", \"g\");\nresult = re.exec(\"a\");\nassert (result.length === 1);\nassert (result[0] === \"a\");\nassert (re.lastIndex === 1);\n\nassert (re.exec(\"a\") === null);\nassert (re.lastIndex === 0);\n\nresult = re.exec(\"a\");\nassert (result.length === 1);\nassert (result[0] === \"a\");\nassert (re.lastIndex === 1);\n\nvar re1 = /foo/gim;\nvar re2 = /bar/g;\n\ntry {\n  re2.compile(\"asd\", \"ggim\");\n  assert (false);\n} catch (e) {\n  assert (e instanceof SyntaxError);\n  assert (re2 == \"/bar/g\");\n}\n\ntry {\n  re2.compile(\"[\", undefined);\n  assert (false);\n} catch (e) {\n  assert (e instanceof SyntaxError);\n  assert (re2 == \"/bar/g\");\n}\n\ntry {\n  re2.compile(re1, \"im\");\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n  assert (re2 == \"/bar/g\");\n}\n\nre2.lastIndex = 2;\nre2.compile(\"asd\", \"im\");\n\nassert (re2 == \"/asd/im\");\nassert (re2.global === false);\nassert (re2.ignoreCase === true);\nassert (re2.multiline === true);\nassert (re2.source === \"asd\");\nassert (re2.lastIndex === 0);\n\nre2.compile(re1);\nassert (re2.toString() === re1.toString());\nassert (re2.global === re1.global);\nassert (re2.ignoreCase === re1.ignoreCase);\nassert (re2.multiline === re1.multiline);\nassert (re2.source === re1.source);\nassert (re2.lastIndex === 0);\n"

/***/ }),
/* 465 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar r;\n\nr = new RegExp (\"a\");\nassert (r.exec (\"a\") == \"a\");\nassert (r.exec (\"b\") == undefined);\n\nr = new RegExp (\"abc\");\nassert (r.exec (\"abc\") == \"abc\");\n\nr = new RegExp (\"a*\");\nassert (r.exec (\"aaa\") == \"aaa\");\nassert (r.exec (\"b\") == \"\");\n\nr = new RegExp (\"a+\");\nassert (r.exec (\"aaa\") == \"aaa\");\nassert (r.exec (\"b\") == undefined);\n\nr = new RegExp (\"ab*\");\nassert (r.exec (\"a\") == \"a\");\nassert (r.exec (\"ab\") == \"ab\");\nassert (r.exec (\"abbbb\") == \"abbbb\");\nassert (r.exec (\"bbb\") == undefined);\n\nr = new RegExp (\"a?\");\nassert (r.exec (\"a\") == \"a\");\nassert (r.exec (\"b\") == \"\");\n\nr = new RegExp (\"a{4}\");\nassert (r.exec (\"aaa\") == undefined);\nassert (r.exec (\"aaaaa\") == \"aaaa\");\nassert (r.exec (\"aaaa\") == \"aaaa\");\n\nr = new RegExp (\"a{2,6}\");\nassert (r.exec (\"a\") == undefined);\nassert (r.exec (\"aa\") == \"aa\");\nassert (r.exec (\"aaaaaa\") == \"aaaaaa\");\nassert (r.exec (\"aaaaaaa\") == \"aaaaaa\");\n\nr = new RegExp (\".*\");\nassert (r.exec (\"abcdefghijkl\") == \"abcdefghijkl\");\n\nr = /\\n/;\nassert (r.exec (\"\\n\") == \"\\n\");\n\nassert (/[\\12]+/.exec (\"1\\n\\n\\n\\n\\n2\") == \"\\n\\n\\n\\n\\n\");\nassert (/[\\1284]+/.exec (\"1\\n\\n8\\n4\\n\\n2\") == \"\\n\\n8\\n4\\n\\n\");\nassert (/[\\89]12/.exec (\"1\\9128123\") == \"912\");\nassert (/[\\11]/.exec (\"1\\n\\n\\t\\n\\n2\") == \"\\t\");\nassert (/[\\142][\\143][\\144]/.exec (\"abcde\") == \"bcd\");\n\nassert (/\\12+/.exec (\"1\\n\\n\\n\\n\\n2\") == \"\\n\\n\\n\\n\\n\");\nassert (/\\11/.exec (\"1\\n\\n\\t\\n\\n2\") == \"\\t\");\nassert (/\\142\\143\\144/.exec (\"abcde\") == \"bcd\");\nassert (/\\942\\143\\144/.exec (\"a942cde\") == \"942cd\");\nassert (/\\14234/.exec (\"b34\") == \"b34\");\n\nassert (/(\\d+)\\2([abc]+)\\1\\2/.exec(\"123abc123abc\") == \"123abc123abc,123,abc\");\nassert (/([abc]+)\\40([d-f]+)\\12\\1/.exec(\"abc def\\nabc\") == \"abc def\\nabc,abc,def\");\n\nvar expected = \"8765432911,8,7,6,5,4,3,2,9,1\";\nassert (/(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)\\9(\\d)\\9/.exec(\"8765432911\") == expected);\n\nr = /\\c/;\nassert (r.exec (\"\\\\c\") == \"\\\\c\");\n\nr = /[\\c]/;\nassert (r.exec (\"c\") == \"c\");\n\nr = /[\\c1]/;\nassert (r.exec (\"\\u0011\") == \"\\u0011\");\n\nr = /\\c3/;\nassert (r.exec (\"\\\\c3\") == \"\\\\c3\");\n\nr = /\\cIasd/;\nassert (r.exec (\"\\tasd\") == \"\\tasd\");\n"

/***/ }),
/* 466 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ndelete Function.prototype.toString;\nassert (Math.cos + 1 === '[object Function]1');\n"

/***/ }),
/* 467 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nv_1 = [];\nv_1 * v_1[v_1 % v_1];\n"

/***/ }),
/* 468 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nv_1 = 1;\nv_1[1] = 1;\n"

/***/ }),
/* 469 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar v_1 = [,];\nObject.defineProperty(v_1, \"0\", {\n    set: function() {},\n});\n"

/***/ }),
/* 470 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry\n{\n  Symbol.for.length.toString.length.toExponential.length.valueOf.length.toExponential.length.valueOf.length.toFixed.name.anchor.name.bold.length.toExponential.caller;\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof ReferenceError);\n}\n"

/***/ }),
/* 471 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n[print(typeof v_1)];\n"

/***/ }),
/* 472 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n  function f_1() {\n    v_1 + v_1;\n  }\n\n  f_1(new f_1);\n\n  assert (false);\n} catch (e) {\n  assert (e instanceof ReferenceError);\n}\n"

/***/ }),
/* 473 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry\n{\n  print({toString: function() { throw new TypeError(\"foo\"); }}, []);\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n  assert (e.message === \"foo\");\n}\n"

/***/ }),
/* 474 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ndo {\n    try {\n    } finally {\n        break;\n    }\n} while (false);\n"

/***/ }),
/* 475 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n    eval(\"do { \\\n        return null; \\\n        } while (false);\");\n    assert (false);\n} catch (e) {\n    assert (e instanceof SyntaxError);\n}\n"

/***/ }),
/* 476 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nv_1 = Math.floor('\\u3d52');\nv_1 = Math.floor([]);\n"

/***/ }),
/* 477 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Test raised by fuzzer\nv_0 = [,];\nv_1 = [,];\nv_2 = Object.defineProperties([,], { '0': {  get: function() { } } });\n\n// Test change from data to accessor type\nvar a = { x:2 };\nObject.defineProperty(a, \"x\", {\n      enumerable: true,\n      configurable: true,\n      get: function() { return 0; }\n});\n\n// Test change from accessor to data type\nvar obj = {test: 2};\n\nObject.defineProperty(obj, \"test\", {\n      enumerable: true,\n      configurable: true,\n      get: function() { return 0; }\n});\n\nObject.defineProperty(obj, \"x\", {\n      enumerable: true,\n      configurable: true,\n      value: -2\n});\n"

/***/ }),
/* 478 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction dec(x) { return x - 1 };\nfor (var i = 5; i > 0; i = dec(i)) {}\nfor (var i = 11; i = dec (i); i--) {}\nfor (var i = dec (12); i > 0; i--) {}\n"

/***/ }),
/* 479 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar v_1 = { };\n\nfor (i = 0; i < 1; i++) {\n  with ( v_1 ) {\n    with ( v_1 ) { }\n  }\n}\n"

/***/ }),
/* 480 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction Error() { }\n"

/***/ }),
/* 481 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nwith(0xB276)\n  eval(\"foo = true;\");\n"

/***/ }),
/* 482 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015-2016 Samsung Electronics Co., Ltd.\n// Copyright 2015-2016 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry\n{\n  v_0 = new RegExp(\"N(?![^6](?:.)|(?!C[^k-o]*|p){0,}|H)|\\\\\\\\xDF\\\\db{0,}|i\\\\\\\\0?)\");\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof SyntaxError);\n  assert (e.message === \"Unexpected end of paren.\");\n}\n"

/***/ }),
/* 483 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nv_0 = /(?!(?!l{666,}))/;\n\ntry\n{\n  v_0.exec(\"llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll\");\n}\ncatch (e)\n{\n  assert (e instanceof RangeError);\n  assert (e.message === \"RegExp executor steps limit is exceeded.\");\n}\n"

/***/ }),
/* 484 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar r;\nr = new RegExp(\"]\");\nassert (r.exec(\"]\") == \"]\");\n\nr = new RegExp(\"}\");\nassert (r.exec(\"}\") == \"}\");\n"

/***/ }),
/* 485 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n  isNaN(__proto__);\n} catch (e) {}\n"

/***/ }),
/* 486 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n  SyntaxError(RegExp());\n  isFinite(foo);\n} catch (e) {}\n"

/***/ }),
/* 487 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n    RegExp(\"\");\n    eval(encodeURI(isNaN(__proto__)));\n} catch (e) { }\n"

/***/ }),
/* 488 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n    Boolean(decodeURI(decodeURIComponent(Number())));\n} catch(err) {}\n try {\n    ReferenceError(isNaN(__proto__));\n } catch(err) {}\n try {\n    isNaN(__proto__);\n } catch(err) {}\n try {\n    load();\n } catch(err) {}\n try {\n    RegExp(\"\\n\");\n } catch(err) {}\n try {} catch(err) {}\n try {\n    ReferenceError(performance.__proto__.isPrototypeOf(arguments.map(os)));\n } catch(err) {}\n try {\n    Float64Array(performance,WeakSet(),Infinity.valueOf());\n } catch(err) {}\n try {\n    arguments.push(Int8Array(Boolean(isFinite(quit())),ArrayBuffer(os.system()),Array(read())));\n } catch(err) {}\n try {\n    Boolean(encodeURI(DataView(ArrayBuffer(os),parseFloat(Set()),URIError(Object(Int8Array(Function(parseInt(write(),RangeError(__proto__.valueOf()))),Int16Array(Map(),__proto__.valueOf(),readbuffer()),Math))))));\n } catch(err) {}\n"

/***/ }),
/* 489 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n    Boolean(decodeURI(decodeURIComponent(Number())));\n } catch(err) {}\n try {\n    ReferenceError(isNaN(__proto__));\n } catch(err) {}\n try {\n    isNaN(__proto__);\n } catch(err) {}\n try {\n    load();\n } catch(err) {}\n try {\n    RegExp(\"\\n\");\n } catch(err) {}\n try {\n    Set();\n } catch(err) {}\n try {\n    ReferenceError(performance.__proto__.isPrototypeOf(arguments.map(os)));\n } catch(err) {}\n try {\n    Float64Array(performance,WeakSet(),Infinity.valueOf());\n } catch(err) {}\n try {\n    arguments.push(Int8Array(Boolean(isFinite(quit())),ArrayBuffer(os.system()),Array(read())));\n } catch(err) {}\n try {\n    Boolean(encodeURI(DataView(ArrayBuffer(os),parseFloat(Set()),URIError(Object(Int8Array(Function(parseInt(write(),RangeError(__proto__.valueOf()))),Int16Array(Map(),__proto__.valueOf(),readbuffer()),Math))))));\n } catch(err) {}\n"

/***/ }),
/* 490 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nparseInt(NaN,RegExp(\"54\"));\n\ntry {\n    parseInt(ArrayBuffer());\n} catch(err) {}\n\ntry {\n    isNaN(__proto__);\n} catch(err) {}\n\ntry {\n    RangeError(parseInt(Infinity,readbuffer()));\n} catch (err) {}\n"

/***/ }),
/* 491 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n    String(\"test\");\n    isNaN(__proto__);\n} catch(err) {}\n\ntry {\n    SyntaxError(RegExp(\"[/]\"));\n} catch(err) {}\n"

/***/ }),
/* 492 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n    RegExp(\"\\u2029\");\n} catch(err) {}\n\ntry {\n    URIError(isNaN(__proto__));\n} catch(err) {}\n"

/***/ }),
/* 493 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'�'\n"

/***/ }),
/* 494 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* 256 \"a\" in the array */\n\ntry {\n      [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n        \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n          \"a\", \"a\", \"a\", \"a\"];\n} catch(e) { }\n"

/***/ }),
/* 495 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert (isNaN (parseInt (RegExp (\"\\u2029\"))));\n"

/***/ }),
/* 496 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction check_reference_error (s) {\n  try {\n    eval (s);\n    assert (false);\n  } catch (e) {\n    assert (e instanceof ReferenceError);\n  }\n}\n\ncheck_reference_error ('v_0 = {0: delete 3. instanceof foo() ^ {} }');\n"

/***/ }),
/* 497 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nwhile(false) foo\n"

/***/ }),
/* 498 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nNaN == RegExp;\nNaN == Date;\n"

/***/ }),
/* 499 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar res = RegExp.prototype.exec(10);\n\nassert (res[0] === \"\");\nassert (res.input === \"10\");\nassert (res.index === 0);\nassert (res.length === 1);\n"

/***/ }),
/* 500 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n  v_1 = RegExp.prototype.test;\n  v_1(ReferenceError);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n  assert (e.message === \"Incomplete RegExp type\");\n}\n\ntry {\n  v_1 = RegExp.prototype.exec;\n  v_1(ReferenceError);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n  assert (e.message === \"Incomplete RegExp type\");\n}\n\ntry {\n  v_1 = RegExp.prototype.toString;\n  v_1(ReferenceError);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n  assert (e.message === \"Incomplete RegExp type\");\n}\n"

/***/ }),
/* 501 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry\n{\n  eval ('var y = 4e;');\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof SyntaxError);\n}\n"

/***/ }),
/* 502 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'\\0'+'456';\n"

/***/ }),
/* 503 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry\n{\n  eval ('\\xbf\\x0a\\x0a');\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof SyntaxError);\n}\n"

/***/ }),
/* 504 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f_0(a_0) {\n    \"use strict\";\n    Object.freeze({a: \"foo\"});\n}\n"

/***/ }),
/* 505 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f_0(){\n    'use strict';\n    var v_0 = {\n        p_0: function(a_0, a_1) {}\n    };\n    f_1(function(a_2) {});\n}\n"

/***/ }),
/* 506 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar v_0 = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n    64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n    80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,\n    96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,\n    112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,\n    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,\n    144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,\n    176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,\n    192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,\n    208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,\n    224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,\n    240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255\n];\n"

/***/ }),
/* 507 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n(function () {\n  var d = {};\n  var a = [arguments];\n})();\n"

/***/ }),
/* 508 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n    var v_0 = [\n        ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,     \n        ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,     \n        ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,     \n        ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,     \n        ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,     \n        ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,     ];\n    }\ncatch(e) {}\n"

/***/ }),
/* 509 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nnew RegExp(\"m\\u2820\");\nparseInt(\"145\");\n"

/***/ }),
/* 510 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n  eval('if (true) /abc/.exec(\"abc\");');\n} catch (e) {\n  assert (false);\n}\n\ntry {\n  eval('if (true) {} /abc/.exec(\"abc\");');\n} catch (e) {\n  assert (false);\n}\n\ntry {\n  eval('var a\\n/abc/.exec(\"abc\");');\n} catch (e) {\n  assert (false);\n}\n"

/***/ }),
/* 511 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar setMethods =\n[\n    \"setTime\",\n    \"setMilliseconds\",\n    \"setSeconds\",\n    \"setUTCMilliseconds\",\n    \"setSeconds\",\n    \"setUTCSeconds\",\n    \"setMinutes\",\n    \"setUTCMinutes\",\n    \"setHours\",\n    \"setUTCHours\",\n    \"setDate\",\n    \"setUTCDate\",\n    \"setMonth\",\n    \"setUTCMonth\",\n    \"setFullYear\",\n    \"setUTCFullYear\"\n]\n\nfor(var i in setMethods)\n{\n  var setMethod = setMethods[i];\n  try\n  {\n    ({method: Date.prototype[setMethod]}).method(0);\n  }\n  catch (e)\n  {\n    assert(e instanceof TypeError);\n  }\n}\n"

/***/ }),
/* 512 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar result = RegExp.prototype.compile([]);\nassert(result === undefined);\n"

/***/ }),
/* 513 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\na = \"é\"\n"

/***/ }),
/* 514 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nJSON.stringify & (Date = 1);\n\nb = 1;\nthis.a = 2;\nthis.a\nb = 3;\nassert(b == 3);\nassert(a == 2);\nthis.a & (b = 4);\nassert(b == 4);\nassert(a == 2);\n"

/***/ }),
/* 515 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f_0() {\n      var f_0 = print;\n}\n"

/***/ }),
/* 516 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f_0() {\n  var f_0 = 10;\n}\n"

/***/ }),
/* 517 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nFunction.prototype.length = function() {};\nFunction.prototype.bind(0);\nassert (Function.prototype.length === 0);\n"

/***/ }),
/* 518 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction a()\n{\n  for (i = 1; i < 5; i++)\n    if (i) {\n      5;\n    }\n}\n"

/***/ }),
/* 519 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a;\n\n(a) = 1;\n\nassert (a === 1);\n"

/***/ }),
/* 520 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n  eval(\"this / 10\");\n} catch (e) {\n  assert (false);\n}\n\ntry {\n  eval(\"var v_0 = 10;\\nv_0++ / 1\");\n} catch (e) {\n  assert (false);\n}\n\ntry {\n  eval(\"var v_0 = 10;\\nif (v_0++ / 1) {\\n}\");\n} catch (e) {\n  assert (false);\n}\n"

/***/ }),
/* 521 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a = \"foo\", r;\nswitch(a) {\n    case true ? \"foo\" : \"bar\":\n        r = \"OK\";\n        break;\n}\nassert(r === \"OK\");\n"

/***/ }),
/* 522 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nswitch (true) {\n    case {\"foo\": \"bar\"}:\n        break;\n}\n"

/***/ }),
/* 523 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n  eval(\"if (true) {}\\n/a/;\");\n} catch (e) {\n  assert (false);\n}\n"

/***/ }),
/* 524 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nswitch (1) {\n  case 0:\n    assert(false);\n    break;\n  case 2:\n    assert(false);\n    break;\n}\n"

/***/ }),
/* 525 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f(){return}\n\nswitch (1) {\n  case 1:\n    break}\n\nwhile (false) {continue}\n"

/***/ }),
/* 526 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction check_syntax_error (code) {\n  try {\n    eval(code);\n    assert (false);\n  } catch (e) {\n    assert (e instanceof SyntaxError);\n  }\n}\n\ncheck_syntax_error (\"function eval () {'use strict';}\");\ncheck_syntax_error (\"function f (eval) {'use strict';}\");\ncheck_syntax_error (\"function arguments () {'use strict';}\");\ncheck_syntax_error (\"function f (arguments) {'use strict';}\");\n\ncheck_syntax_error (\"(function eval () {'use strict';})\");\ncheck_syntax_error (\"(function f (eval) {'use strict';})\");\ncheck_syntax_error (\"(function arguments () {'use strict';})\");\ncheck_syntax_error (\"(function f (arguments) {'use strict';})\");\n"

/***/ }),
/* 527 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nfunction f (g) {\n  new g ({prop_name: 'value'});\n}\n"

/***/ }),
/* 528 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f(a, b) {\n  return {\n    a: a,\n    b: b\n  };\n}\n\nvar o = f('1', '2');\n\nassert(o.a == '1');\nassert(o.b == '2');\n"

/***/ }),
/* 529 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n\teval(\"switch(foo){} {}\");\n\tassert(false);\n} catch (e) {\n\tassert(e instanceof ReferenceError);\n}\n\n"

/***/ }),
/* 530 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar code = 'try\\n\\\n{\\n\\\n  print({toStSing:!function() { throw new TypeError(\"foo\"); }}, []);t (false);\\n\\\n}\\n\\\ncatch (e)\\n\\\n{\\n\\\n  assert*(e instanceof\\n\\\n  assert );\\n\\\n  asstrt (e.a%e === \"foo\");\\n\\\n}';\n\ntry {\n  eval(code);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\ntry {\n  eval(\"var x; x instanceof assert;\");\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n"

/***/ }),
/* 531 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction check_syntax_error (s) {\n  try {\n    eval (s);\n    assert (false);\n  } catch (e) {\n    assert (e instanceof SyntaxError);\n  }\n}\n\n/* Test case #1 */\ncheck_syntax_error (\n\" new function f(f) {                                \\\n  return {className: 'xxx'};                         \\\n};                                                   \\\nx = 1;                                               \\\nfunction g(active) {                                 \\\n  for (i = 1; i <= 1000; i++) { if (i == active) {   \\\n  x = i;   if (f(\\\"\\\" + i) != null) { }              \\\n    } else {                                         \\\n  if (f(\\\"\\\" + i) != null) }                         \\\n  }                                                  \\\n}                                                    \\\ng(0)                                                 \\\n\");\n\n/* Test case #2 */\ncheck_syntax_error (\n\" new function a(a) {;for (f in [1,2,3]) print(f);   \\\n}; 1;                                                \\\nfunction g(active) {                                 \\\n  for (i = 1; i <= 1000; i++) { if (i == active) {   \\\n  xI                                                 \\\n      if (f != null) { }                             \\\n    } else {                                         \\\n  if (f(\\\"\\\" + i) != null) }                         \\\n  }                                                  \\\n}                                                    \\\ng(0)                                                 \\\n\");\n\n/* Test case #3 */\ncheck_syntax_error (\n\" new function f(f) {;for (f in [1,2,3]) pRint(f);   \\\n}; 1;                                                \\\nfunction g(active) {                                 \\\n  for (i = 1; i <= 1000; i++) { if (i == active) {   \\\n  x                                                  \\\n      if (f != null) { }                             \\\n    } else {                                         \\\n  if (f(\\\"\\\" + i) != null) }                         \\\n  }                                                  \\\n}                                                    \\\ng(0)                                                 \\\n\");\n"

/***/ }),
/* 532 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a = JSON.stringify (b=+'�');\n\nassert(a === \"null\");\n\nvar b = JSON.stringify (b=-'�0001');\n\nassert(b === \"null\");\n\nvar c = JSON.stringify (b=+'�');\n\nassert(c === \"null\");\n"

/***/ }),
/* 533 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n  eval(\"7E9.\");\n  assert(false);\n} catch (e) {\n  assert(e instanceof SyntaxError);\n}\n\nassert(7E9.toString() === \"7000000000\");\n"

/***/ }),
/* 534 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2016 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a = {}, b = 0;\n\nwhile (a[b]) {\n  assert (false);\n}\n\nfor ( ; a[b]; ) {\n  assert (false);\n}\n\nvar flag = false;\ndo\n{\n  assert (!flag);\n  flag = true;\n} while (a[b]);\n\na = { };\na.b = { c : 1 };\n\nwith (a.b)\n{\n  assert (c === 1);\n}\n"

/***/ }),
/* 535 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction check_syntax_error (script)\n{\n  try\n  {\n    eval (script);\n    assert (false);\n  }\n  catch (e)\n  {\n    assert (e instanceof SyntaxError);\n  }\n}\n\ncheck_syntax_error ('{');\ncheck_syntax_error ('}');\ncheck_syntax_error ('[');\ncheck_syntax_error (']');\ncheck_syntax_error ('(');\ncheck_syntax_error (')');\n\ncheck_syntax_error ('function f (');\ncheck_syntax_error ('function f ()');\ncheck_syntax_error ('function f () {');\ncheck_syntax_error ('function f () }');\ncheck_syntax_error ('function f ({) }');\ncheck_syntax_error ('function f { }');\ncheck_syntax_error ('function f {');\ncheck_syntax_error ('function f }');\n\ncheck_syntax_error ('a = [[];');\n\ncheck_syntax_error ('a = {;');\ncheck_syntax_error ('a = };');\ncheck_syntax_error ('a = {{};');\n\ncheck_syntax_error ('a = {get q {} };');\ncheck_syntax_error ('a = {get q ( {} };');\ncheck_syntax_error ('a = {get q ) {} };');\ncheck_syntax_error ('a = {get q () };');\ncheck_syntax_error ('a = {get q () { };');\ncheck_syntax_error ('a = {get q () };');\ncheck_syntax_error ('a = {get q () { };');\n"

/***/ }),
/* 536 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert((7 < 4) == false);\nassert((7 > 4) == true);\n\nassert((7 <= 11) == true);\nassert((11 <= 11) == true);\n\nassert((7 >= 11) == false);\nassert((7 >= 7) == true);\n\nassert(0 > (0 - 'Infinity'));\nassert(0 < (0 - '-Infinity'));\nassert((0 - 'Infinity') < (0 - '-Infinity'));\n\nassert('a' > '');\nassert(!('' < ''));\nassert(!('' > ''));\nassert('abcd' > 'abc');\nassert('abc' < 'abcd');\nassert('abcd' <= 'abcd');\nassert('abcd' >= 'abcd');\nassert(!('abcd' > 'abcd'));\n"

/***/ }),
/* 537 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert((9 << 2) === 36);\nassert((14 << 2) === 56);\n\nassert((9 >> 2) === 2);\nassert((-14 >> 2) === -4);\n\nassert((9 >>> 2) === (9 >> 2));\n"

/***/ }),
/* 538 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert(isNaN(Math['sqrt'] (NaN)));\nassert(isNaN(Math['sqrt'] (-1.0)));\nassert(isNaN(Math['sqrt'] (-Infinity)));\nassert(Math['sqrt'] (0.0) === 0.0);\nassert(Math['sqrt'] (Infinity) === Infinity);\n\nassert(Math['sqrt'] (1.0) === 1.0);\nassert(Math['sqrt'] (2.0) >= Math['SQRT2'] * 0.999999);\nassert(Math['sqrt'] (2.0) <= Math['SQRT2'] * 1.000001);\nassert(Math['sqrt'] (0.5) >= Math['SQRT1_2'] * 0.999999);\nassert(Math['sqrt'] (0.5) <= Math['SQRT1_2'] * 1.000001);\n\nvar sqrt_1e38 = Math['sqrt'] (1.0e+38);\nassert(sqrt_1e38 > 0.999999 * 1.0e+19);\nassert(sqrt_1e38 < 1.000001 * 1.0e+19);\n\nvar sqrt_1e38 = Math['sqrt'] (1.0e-38);\nassert(sqrt_1e38 > 0.999999 * 1.0e-19);\nassert(sqrt_1e38 < 1.000001 * 1.0e-19);\n"

/***/ }),
/* 539 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar temp;\n\ntry\n{\n  a = 1;\n\n  assert (false);\n} catch (e)\n{\n  assert (e instanceof ReferenceError);\n}\n\ntry\n{\n  NaN = 1;\n\n  assert (false);\n} catch (e)\n{\n  assert (e instanceof TypeError);\n}\n\nfunction f()\n{\n  assert(this === undefined);\n}\n\nf();\n\nObject.function_prop = function ()\n{\n  assert (this === Object);\n}\n\nObject.function_prop ();\n\ntry\n{\n  var temp = f.caller;\n\n  assert (false);\n} catch (e)\n{\n  //ROB//assert (e instanceof TypeError);\n}\n\ntry\n{\n  delete this.NaN;\n\n  assert (false);\n} catch (e)\n{\n  assert (e instanceof TypeError);\n}\n\n(function (a) {\n  (function (a) {\n  });\n});\n"

/***/ }),
/* 540 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// check properties\nassert(Object.getOwnPropertyDescriptor(String.prototype.charAt, 'length').configurable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.charAt, 'length').enumerable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.charAt, 'length').writable === false);\n\nassert(String.prototype.charAt.length === 1);\n\n// check empty string\nassert(String.prototype.charAt.call(new String()) === \"\");\n\n// check NaN\nassert(\"hello world!\".charAt(NaN) === \"h\");\n\n// check Object\nassert(String.prototype.charAt.call({})  === \"[\");\n\n// simple checks\nassert(\"hello world!\".charAt(0) === \"h\");\n\nassert(\"hello world!\".charAt(1) === \"e\");\n\n// check +-Inf\nassert(\"hello world!\".charAt(-Infinity) === \"\");\n\nassert(\"hello world!\".charAt(Infinity) === \"\");\n\nassert(\"hello world!\".charAt(11) === \"!\");\n\nassert(\"hello world!\".charAt(12) === \"\");\n\n// check unicode\nassert(\"hello\\u000B\\u000C\\u0020\\u00A0world!\".charAt(8) === \"\\u00A0\");\n\nassert(\"hello\\uD834\\uDF06world!\".charAt(6) === \"\\uDF06\");\n\nassert(\"hell\\u006F\\u006F w\\u006F\\u006Frld!\".charAt(8) === \"\\u006F\");\n\nassert(\"\\u00A9\\u006F\".charAt(2) === \"\");\n\n// check negative\nassert(\"hello world!\".charAt(-1) === \"\");\n\nassert(\"hello world!\".charAt(-9999999) === \"\");\n\nassert(\"hello world!\".charAt(-0) === \"h\");\n\n// check undefined\nassert(\"hello world!\".charAt(undefined) === \"h\");\n\n// check booleans\nassert(\"hello world!\".charAt(true) === \"e\");\n\nassert(\"hello world!\".charAt(false) === \"h\");\n\n// check this is undefined\ntry {\n  String.prototype.charAt.call(undefined);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// check this is null\ntry {\n  String.prototype.charAt.call(null);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - undefined\ntry {\n  assert(true.charAt() === \"\");\n  assert(false);\n} catch (e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - null\ntry {\n  assert(String.prototype.charAt.call(null, 0) === \"\");\n  assert(false);\n} catch (e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - Boolean\nassert(String.prototype.charAt.call(true, 1) === \"r\");\n\n// check coercible - Object\nvar test_object = {firstName:\"John\", lastName:\"Doe\"};\nassert(String.prototype.charAt.call(test_object, 1) === \"o\");\n\n// check coercible - Number\nassert(String.prototype.charAt.call(123, 2) === \"3\");\n"

/***/ }),
/* 541 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// check properties\nassert(Object.getOwnPropertyDescriptor(String.prototype.charCodeAt, 'length').configurable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.charCodeAt, 'length').enumerable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.charCodeAt, 'length').writable === false);\n\nassert(String.prototype.charCodeAt.length === 1);\n\n// check empty string\nassert(isNaN(String.prototype.charCodeAt.call(new String())));\n\n// check Object with NaN pos\nassert(String.prototype.charCodeAt.call({}) === 91);\n\n// simple checks\nassert(\"hello world!\".charCodeAt(0) === 104);\n\nassert(\"hello world!\".charCodeAt(1) === 101);\n\nassert(\"HELLO WORLD\".charCodeAt(10) === 68);\n\n// check +-Inf\nassert(isNaN(\"hello world!\".charCodeAt(-Infinity)));\n\nassert(isNaN(\"hello world!\".charCodeAt(Infinity)));\n\nassert(\"hello world!\".charCodeAt(11) === 33);\n\nassert(isNaN(\"hello world!\".charCodeAt(12)));\n\n// check unicode\nassert(\"hello\\u000B\\u000C\\u0020\\u00A0world!\".charCodeAt(8) === 160);\n\nassert(\"hello\\uD834\\uDF06world!\".charCodeAt(6) === 57094);\n\nassert(\"hell\\u006F\\u006F w\\u006F\\u006Frld!\".charCodeAt(8) === 111);\n\nassert(isNaN(\"\\u00A9\\u006F\".charCodeAt(2)));\n\n// check negative\nassert(isNaN(\"hello world!\".charCodeAt(-1)));\n\nassert(isNaN(\"hello world!\".charCodeAt(-9999999)));\n\nassert(\"hello world!\".charCodeAt(-0) === 104);\n\n// check undefined\nassert(\"hello world!\".charCodeAt(undefined) === 104);\n\n// check booleans\nassert(\"hello world!\".charCodeAt(true) === 101);\n\nassert(\"hello world!\".charCodeAt(false) === 104);\n\n// check index above uint32_t\nassert(isNaN(\"hello world!\".charCodeAt(4294967299)));\n\n// check coercible - undefined\ntry {\n  assert(isNaN(String.prototype.charCodeAt.call(undefined)));\n  assert(false);\n} catch (e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - null\ntry {\n  assert(isNaN(String.prototype.charCodeAt.call(null, 0)));\n  assert(false);\n} catch (e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - Boolean\nassert(String.prototype.charCodeAt.call(true, 1) === 114);\nassert(String.prototype.charCodeAt.call(true) === 116);\n\n// check coercible - Object\nvar test_object = {firstName:\"John\", lastName:\"Doe\"};\nassert(String.prototype.charCodeAt.call(test_object, 1) === 111);\n\n// check coercible - Number\nassert(String.prototype.charCodeAt.call(123, 2) === 51);\n"

/***/ }),
/* 542 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// check properties\nassert(Object.getOwnPropertyDescriptor(String.prototype.concat, 'length').configurable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.concat, 'length').enumerable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.concat, 'length').writable === false);\n\n// simple checks\nvar s1 = \"Hello \";\nvar s2 = \"world!\";\nvar s3 = \" \";\nassert(s1.concat(s2, s3, 3, 10, \"  \", \".\") === \"Hello world! 310  .\");\nassert(\"Hello \".concat(s1) === \"Hello Hello \");\n\nassert(s1.concat(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9) === \"Hello 012345678901234567890123456789\");\n\nassert(\"\".concat() === \"\");\n\n// check unicode\nassert(\"\\u0041\".concat(\"\\u0041\", \"\\u1041\") === \"\\u0041\\u0041\\u1041\");\nassert(\"\\u0041\\u1D306A\".concat(\"\\u0041\", \"\\u1041\") === \"\\u0041\\u1D306A\\u0041\\u1041\");\n\n// check undefined\nvar y;\nassert(\"Check \".concat(y) === \"Check undefined\");\n\n// check toString error in this object\nvar y = {};\ny.toString = function () { throw new ReferenceError (\"foo\");}\ny.concat = String.prototype.concat;\ntry {\n  y.concat(\"cat\");\n  assert(false);\n} catch (e) {\n  assert(e instanceof ReferenceError);\n}\n\n// check toString error in arguments\nvar x = {};\nx.toString = function () { throw new ReferenceError (\"foo\");}\ntry {\n  \"a\".concat(x);\n  assert(false);\n} catch (e) {\n  assert(e instanceof ReferenceError);\n}\n"

/***/ }),
/* 543 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// check properties\nassert(Object.getOwnPropertyDescriptor(String.prototype.indexOf, 'length').configurable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.indexOf, 'length').enumerable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.indexOf, 'length').writable === false);\n\nassert(String.prototype.indexOf.length === 1);\n\nassert(\"Hello world, welcome to the universe.\".indexOf(\"welcome\") === 13);\n\nassert(\"Hello world, welcome to the universe.\".indexOf(\"Hello world, welcome to the universe.\") === 0);\n\nassert(\"Hello world, welcome to the universe.\".indexOf(\"welcome\",10) == 13);\n\nassert(\"Hello world, welcome to the universe.\".indexOf(\"welcome\",-100) == 13);\n\nassert(\"Hello world, welcome to the universe.\".indexOf(\"welcome\", 15) === -1);\n\nassert(\"Hello world, welcome to the universe.\".indexOf(\"o\", 15) === 17);\n\n// check utf8 strings\nassert(\"\\uFFA2\".indexOf(\"\\uFFA2\") === 0);\n\nassert(\"\\uFFA2\".indexOf(\"A\") === -1);\n\nassert(\"w2\\uFFA2A\".indexOf(\"A\") === 3);\n\nassert(\"w2\\u1D306A\".indexOf(\"A\") === 4);\n\nassert(\"\\uD834\\uDF06\".indexOf(\"\\uDF06\") === 1);\n\nassert(\"\\uD834\\uDF06w2\\u1D306D\".indexOf(\"D\") === 6);\n\nassert(\"\\ud800\\dc00\".indexOf(\"\\dc00\") === 1);\n\nassert(\"\\u8000\\u0700\\u8000\\u8000A\".indexOf(\"A\", 3) === 4);\n\n// check prefix search\nassert(\"aaaabaaa\".indexOf(\"aaaba\") === 1);\n\n// check empty string\nassert(String.prototype.indexOf.call(new String()) === -1);\n\nassert(String.prototype.indexOf.call(\"\",\"\") === 0);\n\n// check NaN\nassert(\"Hello world, welcome to the universe.\".indexOf(NaN) === -1);\n\nassert(\"Hello world, welcome to the universe.\".indexOf(\"welcome\",NaN) === 13);\n\n// check Object\nassert(String.prototype.indexOf.call({}) === -1);\n\n// check +-Inf\nassert(\"hello world!\".indexOf(\"world\", -Infinity) === 6);\n\nassert(\"hello world!\".indexOf(\"world\", Infinity) === -1);\n\n// check numbers\nassert(\"hello world!\".indexOf(-1) === -1);\n\nassert(\"hello 0 world!\".indexOf(-0) === 6);\n\n// check undefined\nassert(\"hello world!\".indexOf(undefined) === -1);\n\nvar undefined_var;\nassert(\"Hello world, welcome to the universe.\".indexOf(\"welcome\", undefined_var) === 13);\n\n// check booleans\nassert(\"true\".indexOf(true, false) === 0);\n\n// check coercible - undefined\ntry {\n  String.prototype.indexOf.call(undefined);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - null\ntry {\n  String.prototype.indexOf.call(null);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - Boolean\nassert(String.prototype.indexOf.call(true, \"e\") === 3);\nassert(String.prototype.indexOf.call(false, \"e\") === 4);\n\n// check coercible - Object\nvar test_object = {firstName:\"John\", lastName:\"Doe\"};\nassert(String.prototype.indexOf.call(test_object, \"Obj\") === 8);\n\n// check coercible - Number\nassert(String.prototype.indexOf.call(123, \"2\") === 1);\n"

/***/ }),
/* 544 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// check properties\nassert(Object.getOwnPropertyDescriptor(String.prototype.lastIndexOf, 'length').configurable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.lastIndexOf, 'length').enumerable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.lastIndexOf, 'length').writable === false);\n\nassert(String.prototype.lastIndexOf.length === 1);\n\n// simple checks\nassert(\"Hello welcome, welcome to the universe.\".lastIndexOf(\"welcome\") === 15);\n\nassert(\"Hello world, welcome to the universe.\".lastIndexOf(\"Hello world, welcome to the universe.\") === 0);\n\nassert(\"Hello welcome, welcome to the universe.\".lastIndexOf(\"welcome\", 5) === -1);\n\nassert(\"Hello welcome, welcome to the universe.\".lastIndexOf(\"welcome\", -100) == -1);\n\nassert(\"Hello welcome, welcome to the universe.\".lastIndexOf(\"welcome\", 15) === 15);\n\nassert(\"Hello welcome, welcome to the universe o.\".lastIndexOf(\"o\", 10) === 10);\n\nassert(\"Hello welcome, welcome to the universe o.\".lastIndexOf(\"o\", 25) === 24);\n\nassert(\"Helloooo woooorld\".lastIndexOf(\"oooo\", 6) === 4);\n\n// check utf8 strings\nassert(\"\\uFFA2\".lastIndexOf(\"\\uFFA2\") === 0);\n\nassert(\"\\uFFA2\".lastIndexOf(\"A\") === -1);\n\nassert(\"w2\\uFFA2 A\".lastIndexOf(\"A\") === 4);\n\nassert(\"w2\\u1D306A\".indexOf(\"A\") === 4);\n\nassert(\"\\u0070A\".lastIndexOf(\"A\") === 1);\n\nassert(\"\\u8000A\".lastIndexOf(\"A\") === 1);\n\nassert(\"\\u0080\\u0080\\u0980\\u1080A\".lastIndexOf(\"A\") === 4);\n\nassert(\"\\u0080\\u0980\\u1080A\\u0080\\u0080\\u0980\\u1080\".lastIndexOf(\"A\", 4) === 3);\n\nassert(\"\\u0080\\u0080\\u0980\\u1080A\\u0980AA\\u0980A\".lastIndexOf(\"A\\u0980A\") === 7);\n\nassert(\"\\u0080\\u0080\\u0980\\u1080A\\u0980AA\\u0980A\".lastIndexOf(\"A\\u0980A\", 4) === 4);\n\nassert(\"\\uD834\\uDF06\".lastIndexOf(\"\\uDF06\") === 1);\n\nassert(\"\\uD834\\uDF06w2\\u1D306D\\uDF06w2\\u1D306D\".lastIndexOf(\"D\") === 12);\n\nassert(\"\\ud800\\dc00\\ud800\\dc00\".lastIndexOf(\"\\dc00\") === 6);\n\n// check empty string\nassert(String.prototype.lastIndexOf.call(new String()) === -1);\n\nassert(String.prototype.lastIndexOf.call(\"Hello world, welcome to the universe.\",\"\") === 37);\n\nassert(String.prototype.lastIndexOf.call(\"\",\"\") === 0);\n\n// check NaN\nassert(\"Hello world, welcome to the universe.\".lastIndexOf(NaN) === -1);\n\nassert(\"Hello world, welcome to the universe.\".lastIndexOf(\"o\", NaN) === 22);\n\n// check Object\nassert(String.prototype.lastIndexOf.call({}) === -1);\n\n// check +-Inf\nassert(\"hello world!\".lastIndexOf(\"world\", -Infinity) === -1);\n\nassert(\"hello world!\".lastIndexOf(\"world\", Infinity) === 6);\n\n// check numbers\nassert(\"hello world!\".lastIndexOf(-1) === -1);\n\nassert(\"hello 0 world!\".lastIndexOf(-0) === 6);\n\n// check undefined\nassert(\"hello world!\".lastIndexOf(undefined) === -1);\n\nvar undefined_var;\nassert(\"Hello world, welcome to the universe.\".lastIndexOf(\"welcome\", undefined_var) === 13);\n\n// check booleans\nassert(\"true\".lastIndexOf(true, false) === 0);\n\n// check coercible - undefined\ntry {\n  String.prototype.lastIndexOf.call(undefined);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - null\ntry {\n  String.prototype.lastIndexOf.call(null);\n  assert(false);\n} catch (e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - Boolean\nassert(String.prototype.lastIndexOf.call(true, \"e\") === 3);\nassert(String.prototype.lastIndexOf.call(false, \"e\") === 4);\n\n// check coercible - Object\nvar test_object = {firstName:\"John\", lastName:\"Doe\"};\nassert(String.prototype.lastIndexOf.call(test_object, \"Obj\") === 8);\n\n// check coercible - Number\nassert(String.prototype.lastIndexOf.call(123, \"2\") === 1);\n"

/***/ }),
/* 545 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar str1 = \"ab\";\nvar str2 = \"cd\";\nassert (str1.localeCompare(str1) === 0);\nassert (str1.localeCompare(str2) === -1);\nassert (str2.localeCompare(str1) === 1);\n\nvar x = \"32\";\nvar y = \"-32\";\nassert (y.localeCompare(-31) === 1);\nassert (y.localeCompare(\"\") === 1);\nassert (y.localeCompare(-32) === 0);\nassert (x.localeCompare(33) === -1);\nassert (x.localeCompare() === -1);\nassert (x.localeCompare(null) === -1);\nassert (x.localeCompare(NaN) === -1);\nassert (x.localeCompare(Infinity) === -1);\nassert (x.localeCompare(-Infinity) === 1);\n\nvar array1 = [\"1\", 2];\nvar array2 = [3, 4];\nassert (String.prototype.localeCompare.call(42, array1) === 1);\nassert (String.prototype.localeCompare.call(array1, null) === -1);\nassert (String.prototype.localeCompare.call(array1, array1) === 0);\nassert (String.prototype.localeCompare.call(array1, array2) === -1);\nassert (String.prototype.localeCompare.call(array2, array1) === 1);\n\ntry {\n  var res = String.prototype.localeCompare.call(null, 0);\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\ntry {\n  var res = String.prototype.localeCompare.call();\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n"

/***/ }),
/* 546 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// check properties\nassert(Object.getOwnPropertyDescriptor(String.prototype.match, 'length').configurable === false);\nassert(Object.getOwnPropertyDescriptor(String.prototype.match, 'length').enumerable === false);\nassert(Object.getOwnPropertyDescriptor(String.prototype.match, 'length').writable === false);\n\nfunction match_equals (match_result, expected)\n{\n  if (match_result.length !== expected.length)\n  {\n    return false;\n  }\n\n  for(var i = 0; i < expected.length; i++)\n  {\n    if (match_result[i] !== expected[i])\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nassert (match_equals (\"hello\".match(\"o\"), [\"o\"]));\nassert (\"hello\".match(/ /g) == void 0);\n\nassert (match_equals (\"hello\".match(/o/), [\"o\"]));\n\nassert (match_equals (\"hello\".match(/l/), [\"l\"]));\nassert (match_equals (\"hello\".match(/l/g), [\"l\", \"l\"]));\n\nassert (\"\".match(/a/g) == void 0);\n\nassert (\"\".match() !== void 0 );\n\nassert (match_equals (\"\".match(), [\"\"]));\nassert (match_equals (\"\".match(undefined), [\"\"]));\nassert (match_equals (\"\".match(\"\"), [\"\"]));\n\nassert (match_equals (\"test 1, test 2, test 3, test 45\".match(/[0-9]+/g), [\"1\", \"2\", \"3\", \"45\"]));\n\nvar re = new RegExp(\"\", \"g\");\nassert (match_equals (\"a\".match(re), [\"\", \"\"]));\n\n\n/* Check Object coercible */\ntry {\n  String.prototype.match.call(undefined, \"\");\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n}\n\n/* Check toString conversion */\ntry {\n  var obj = { toString: function() { throw new ReferenceError(\"foo\"); } };\n  String.prototype.match.call(obj, \"\");\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof ReferenceError);\n  assert (e.message === \"foo\");\n}\n\n/* Check Invalid RegExp */\ntry {\n  var obj = { toString: function() { throw new ReferenceError(\"foo\"); } };\n  \"\".match (obj);\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof ReferenceError);\n  assert (e.message === \"foo\");\n}\n\n/* Check if lastIndex is set to 0 on start */\nvar re = /a/g;\nre.lastIndex = 3;\n\nassert (match_equals (\"a\".match(re), [\"a\"]));\n"

/***/ }),
/* 547 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 University of Szeged\n// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert (\"abcabc\".replace(\"bc\", \":\") === \"a:abc\");\nassert (\"hello\".replace(\"\", \":\") === \":hello\");\n\nassert (\"xabcxabcx\".replace (/abc/g, \"[$&][$`][$']\") === \"x[abc][x][xabcx]x[abc][xabcx][x]x\");\nassert (\"abc\".replace (/a(b)c|d()/, \"[$1][$01][$2][$02][$99][$123][$012]\") === \"[b][b][][][$99][b23][b2]\");\nassert (\"abc\".replace(\"abc\", \"$x$$5$0$00$\") === \"$x$5$0$00$\");\n\nassert (\"#x#\".replace(\"x\", \"$1\") === \"#$1#\");\nassert (\"#x#\".replace(/(x)/, \"$1$2\") === \"#x$2#\");\nassert (\"#x#\".replace(/(x)/, \"$01$02$11$20\") === \"#x$02x1$20#\");\nassert (\"#xy#\".replace(/(x)((((((((((y))))))))))/, \"$07|$20|$11|$12|$110|$99|$011\") === \"#y|y0|y|x2|y0|y9|x1#\");\nassert (\"#xy#\".replace(/(x)((((((((y))))))))/, \"$00|$01|$011|$090|$10|$99\") === \"#$00|x|x1|y0|x0|y9#\");\n\nassert (\"a true true story\".replace(true) === \"a undefined true story\");\nassert (\"1234\".replace(23, 32) === \"1324\");\n\nassert (\"abcabc\".replace(/bc/, \":\") === \"a:abc\");\nassert (\"axbcxx\".replace(/x*/g, \":\") === \":a::b:c::\");\n\nassert (String.prototype.replace.call (12321, /2/g, \".\") === \"1.3.1\");\n\ntry\n{\n  String.prototype.replace.call (null, \"u\", \".\");\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n}\n\nassert (\"98765\".replace(76, function () { return {}; }) === \"98[object Object]5\");\n\nfunction concat_arguments()\n{\n  var str = \"\";\n  for (var i = 0; i < arguments.length; i++)\n  {\n    str += \"[\" + arguments[i] + \"]\";\n  }\n  return str;\n}\n\nassert (\"abcdabcd\".replace(\"cd\", concat_arguments) === \"ab[cd][2][abcdabcd]abcd\");\nassert (\"abcdef\".replace (/a((b)c)|d()/, concat_arguments) === \"[abc][bc][b][undefined][0][abcdef]def\");\n\ntry\n{\n  \"x\".replace(\"x\", function() { throw \"MyError\"; });\n  assert (false);\n}\ncatch (e)\n{\n  assert (e === \"MyError\");\n}\n\nassert (\"\\ud801\\udc00\".replace(\"\\ud801\", \"#\") === \"#\\udc00\");\nassert (\"\\ud801\\udc00\".replace(\"\\udc00\", \"#\") === \"\\ud801#\");\n\nvar global = this;\n\nfunction case1()\n{\n  assert(this === global);\n  return \"y\";\n}\n\nfunction case2()\n{\n  \"use strict\";\n  assert(this === undefined);\n  return \"y\";\n}\n\nassert (\"x\".replace(\"x\", case1) === \"y\");\nassert (\"x\".replace(\"x\", case2) === \"y\");\n\nvar regexp = /r/g;\n\nObject.defineProperty(regexp, \"lastIndex\", {\n  configurable : false,\n  enumerable : false,\n  value : 0,\n  writable : false\n});\n\ntry {\n  \"r\".replace (regexp, \"x\");\n  assert (false);\n} catch (e) {\n  assert (e instanceof TypeError);\n}\n\n// The real \"exec\" never returns with a number.\nObject.getPrototypeOf(/x/).exec = function () { return 1234; }\n\nassert (/y/.exec(\"y\") === 1234);\n\n// Changing exec should not affect replace.\nassert (\"y\".replace (/y/, \"x\") === \"x\");\n"

/***/ }),
/* 548 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 University of Szeged\n// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert (\"abcabbcd\".search (/abb+c/) === 3);\nassert (\"ababbccabd\".search (\"((?:(ax))|(bx)|ab*c+)\") === 2);\nassert (\"acbaabcabcabc\".search (/b+c/g) === 5);\nassert (\"abcabd\".search (\"c?a+d\") === -1);\n\nassert (String.prototype.search.call ({}, \"ec+t\") === 4);\n\ntry\n{\n  String.prototype.search.call (null, \"u\");\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n}\n\nvar regexp = /x/g;\nregexp.lastIndex = \"index\";\n\nassert (\"aaxbb\".search (regexp) === 2);\nassert (\"aabb\".search (regexp) === -1);\nassert (regexp.lastIndex === \"index\");\n\nObject.defineProperty(regexp, \"lastIndex\", {\n  configurable : false,\n  enumerable : false,\n  value : \"index2\",\n  writable : false\n});\n\nassert (\"axb\".search (regexp) === 1);\nassert (\"aabb\".search (regexp) === -1);\nassert (regexp.lastIndex === \"index2\");\n\nassert (\"##\\ud801\\udc00\".search (\"\\ud801\") === 2);\nassert (\"##\\ud801\\udc00\".search (\"\\udc00\") === 3);\n\n// The real \"exec\" never returns with a number.\nObject.getPrototypeOf(/x/).exec = function () { return \"???\"; }\n\nassert (/y/.exec(\"y\") === \"???\");\n\n// Changing exec should not affect search.\nassert (\"ay\".search (/y/) === 1);\n"

/***/ }),
/* 549 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar str = \"universe\";\nvar res;\n\nres = str.slice();\nassert (res === \"universe\");\n\nres = str.slice(1, 6);\nassert (res === \"niver\");\n\nres = str.slice(\"a\", \"-4\");\nassert (res === \"univ\");\n\nres = str.slice(-5);\nassert (res === \"verse\");\n\nres = str.slice(-12, undefined);\nassert (res === \"universe\");\n\nres = str.slice(undefined, -20);\nassert (res === \"\");\n\nres = str.slice(undefined, undefined);\nassert (res === \"universe\");\n\nres = str.slice(Infinity, NaN);\nassert (res === \"\");\n\nres = str.slice(-Infinity, Infinity);\nassert (res === \"universe\");\n\nres = str.slice(NaN, -Infinity);\nassert (res === \"\");\n\nres = str.slice(false, true);\nassert (res === \"u\");\n\nvar x;\nres = str.slice(x, x);\nassert (res === \"universe\");\n\nvar obj = {y: \"foo\"};\nvar arr = [x, x];\nres = str.slice(obj, arr);\nassert (res === \"\");\n"

/***/ }),
/* 550 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar res = \"\".split();\nassert (res[0] === \"\");\n\nres = \"foo\".split();\nassert (res[0] === \"foo\");\n\nvar str = \"foo//bar/baz//foo\";\nres = str.split(\"\");\n\nassert (res.length === 17);\nfor (var i = 0; i < res.length; i++)\n{\n  assert (res[i] === str[i]);\n}\n\nres = str.split(\"\", \"foo\");\nassert (res.length === 0);\n\nres = str.split(\"\", \"4\");\nassert (res.length === 4);\nfor (var i = 0; i < res.length; i++)\n{\n  assert (res[i] === str[i]);\n}\n\nres = str.split(undefined, undefined)\nassert (res.length === 1);\nassert (res[0] === \"foo//bar/baz//foo\");\n\nres = str.split(\"a\", false);\nassert (res.length === 0);\n\nres = str.split(\"a\", true);\nassert (res.length === 1);\nassert (res[0] === \"foo//b\");\n\nres = str.split(\"a\", NaN);\nassert (res.length === 0);\n\nres = str.split(\"a\", Infinity);\nassert (res.length === 0);\n\nres = str.split([\"o\"])\nassert (res.length === 5);\nassert (res[0] === \"f\");\nassert (res[1] === \"\");\nassert (res[2] === \"//bar/baz//f\");\nassert (res[3] === \"\");\nassert (res[4] === \"\");\n\nres = str.split([\"o\", \"/\"]);\nassert (res.length === 1);\nassert (res[0] === \"foo//bar/baz//foo\");\n\nres = str.split(\"a\", [\"2\"]);\nassert (res.length === 2);\nassert (res[0] === \"foo//b\");\nassert (res[1] === \"r/b\");\n\nres = str.split(\"a\", [\"2\", \"3\"]);\nassert (res.length === 0);\n\nvar obj = {x: 12, b: undefined};\nres = str.split(obj, 4);\nassert (res.length === 1);\nassert (res[0] === \"foo//bar/baz//foo\");\n\nres = str.split(\"o\", obj);\nassert (res.length === 0);\n\nres = str.split(false, true);\nassert (res.length === 1);\nassert (res[0] === \"foo//bar/baz//foo\");\n\nres = str.split(/\\/\\//);\nassert (res.length === 3);\nassert (res[0] === \"foo\");\nassert (res[1] === \"bar/baz\");\nassert (res[2] === \"foo\");\n\nres = str.split(/\\/\\//, 1);\nassert (res.length === 1);\nassert (res[0] === \"foo\");\n\nres = str.split(/\\/\\//, -1);\nassert (res.length === 3);\nassert (res[0] === \"foo\");\nassert (res[1] === \"bar/baz\");\nassert (res[2] === \"foo\");\n\nstr = \"fo123o12bar\";\nres = str.split(12, undefined);\nassert (res.length === 3);\nassert (res[0] === \"fo\");\nassert (res[1] === \"3o\");\nassert (res[2] === \"bar\");\n\nstr = \"aaabababaab\";\nres = str.split(/aa+/);\nassert (res.length === 3);\nassert (res[0] === \"\");\nassert (res[1] === \"babab\");\nassert (res[2] === \"b\");\n\nstr = \"A<B>bold</B>and<CODE>coded</CODE>\";\nres = str.split(/<(\\/)?([^<>]+)>/);\nassert (res.length === 13);\nvar expected = [\"A\", undefined, \"B\", \"bold\", \"/\", \"B\", \"and\", undefined, \"CODE\", \"coded\", \"/\", \"CODE\", \"\"];\nfor (var i = 0; i < res.length; i++)\n{\n  assert (res[i] === expected[i]);\n}\n\n/* Check Object coercible */\ntry {\n  String.prototype.split.call(undefined, \"\");\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n}\n\n/* Check toString conversion */\ntry {\n  var obj = { toString: function() { throw new ReferenceError(\"foo\"); } };\n  String.prototype.split.call(obj, \"\");\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof ReferenceError);\n  assert (e.message === \"foo\");\n}\n\n/* Check Invalid RegExp */\ntry {\n  var obj = { toString: function() { throw new ReferenceError(\"foo\"); } };\n  \"\".split(obj);\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof ReferenceError);\n  assert (e.message === \"foo\");\n}\n"

/***/ }),
/* 551 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// check properties\nassert(Object.getOwnPropertyDescriptor(String.prototype.substr, 'length').configurable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.substr, 'length').enumerable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.substr, 'length').writable === false);\n\nassert(String.prototype.substr.length === 2);\n\nassert(String.prototype.substr.call(new String()) === \"\");\n\nassert(String.prototype.substr.call({}) === \"[object Object]\");\n\n// check this is undefined\ntry {\n  String.prototype.substr.call(undefined);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// check this is null\ntry {\n  String.prototype.substr.call(null);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// simple checks\nassert(\"Hello world!\".substr(0, 11) === \"Hello world\");\n\nassert(\"Hello world!\".substr(11, 0) === \"\");\n\nassert(\"Hello world!\".substr(0, 12) === \"Hello world!\");\n\nassert(\"Hello world!\".substr(12, 0) === \"\");\n// check NaN\nassert(\"Hello world!\".substr(NaN, 12) === \"Hello world!\");\n\n// check NaN\nassert(\"Hello world!\".substr(2, NaN) === \"\");\n\n// check end undefined\nassert(\"Hello world!\".substr(2, undefined) === \"llo world!\");\n\n// check negative\nassert(\"Hello world!\".substr(-1,8) === \"!\");\n\n// check negative\nassert(\"Hello\\tworld!\".substr(5,-8) === \"\");\n\n// check negative\nassert(\"Hello world!\".substr(-1,-8) === \"\");\n\n// check ranges\nassert(\"Hello world!\".substr(-1,10000) === \"!\");\n\nassert(\"Hello world!\".substr(10000,1000000) === \"\");\n\nassert(\"Hello world!\".substr(100000,1) === \"\");\n\n// check both undefined\nassert(\"Hello world!\".substr(undefined, undefined) === \"Hello world!\");\n\nvar undef_var;\nassert(\"Hello world!\".substr(undef_var, undef_var) === \"Hello world!\");\n\n// check integer conversion\nassert(\"Hello world!\".substr(undefined, 5) === \"Hello\");\n\nassert(\"Hello world!\".substr(undefined, \"bar\") === \"\");\n\nassert(\"Hello world!\".substr(2, true) === \"l\");\n\nassert(\"Hello world!\".substr(2, false) === \"\");\n\nassert(\"Hello world!\".substr(5, obj) === \" world!\");\n\n// check other objects\nvar obj = { substr : String.prototype.substr }\n\nobj.toString = function() {\n    return \"Iam\";\n}\nassert(obj.substr(0,1) === \"I\");\n\nobj.toString = function() {\n  throw new ReferenceError (\"foo\");\n};\n\ntry {\n  assert(obj.substr(100000,1));\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// check coercible - undefined\ntry {\n  assert(true.substr() === \"\");\n  assert(false);\n} catch (e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - null\ntry {\n  assert(String.prototype.substr.call(null, 0, 1) === \"\");\n  assert(false);\n} catch (e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - Boolean\nassert(String.prototype.substr.call(true, 0, 1) === \"t\");\n\n// check coercible - Object\nvar test_object = {firstName:\"John\", lastName:\"Doe\"};\nassert(String.prototype.substr.call(test_object, 0, 7) === \"[object\");\n\n// check coercible - Number\nassert(String.prototype.substr.call(123, 0, 3) === \"123\");\n"

/***/ }),
/* 552 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// check properties\nassert(Object.getOwnPropertyDescriptor(String.prototype.substring, 'length').configurable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.substring, 'length').enumerable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.substring, 'length').writable === false);\n\nassert(String.prototype.substring.length === 2);\n\nassert(String.prototype.substring.call(new String()) === \"\");\n\nassert(String.prototype.substring.call({}) === \"[object Object]\");\n\n// check this is undefined\ntry {\n  String.prototype.substring.call(undefined);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// check this is null\ntry {\n  String.prototype.substring.call(null);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// simple checks\nassert(\"hello world!\".substring(0, 11) === \"hello world\");\n\nassert(\"hello world!\".substring(11, 0) === \"hello world\");\n\nassert(\"hello world!\".substring(0, 12) === \"hello world!\");\n\nassert(\"hello world!\".substring(12, 0) === \"hello world!\");\n\n// check NaN\nassert(\"hello world!\".substring(NaN, 12) === \"hello world!\");\n\n// check NaN\nassert(\"hello world!\".substring(2, NaN) === \"he\");\n\n// check end undefined\nassert(\"hello world!\".substring(2, undefined) === \"llo world!\");\n\n// check negative\nassert(\"hello world!\".substring(-1,8) === \"hello wo\");\n\n// check negative\nassert(\"hello\\tworld!\".substring(5,-8) === \"hello\");\n\n// check negative\nassert(\"hello world!\".substring(-1,-8) === \"\");\n\n// check ranges\nassert(\"hello world!\".substring(-1,10000) === \"hello world!\");\n\nassert(\"hello world!\".substring(10000,1000000) === \"\");\n\nassert(\"hello world!\".substring(100000,1) === \"ello world!\");\n\n// check both undefined\nassert(\"hello world!\".substring(undefined, undefined) === \"hello world!\");\n\nvar undef_var;\nassert(\"hello world!\".substring(undef_var, undef_var) === \"hello world!\");\n\n// check integer conversion\nassert(\"hello world!\".substring(undefined, 5) === \"hello\");\n\nassert(\"hello world!\".substring(undefined, \"bar\") === \"\");\n\nassert(\"hello world!\".substring(2, true) === \"e\");\n\nassert(\"hello world!\".substring(2, false) === \"he\");\n\nassert(\"hello world!\".substring(5, obj) === \" world!\");\n\n// check other objects\nvar obj = { substring : String.prototype.substring }\n\nobj.toString = function() {\n    return \"Iam\";\n}\nassert(obj.substring(100000,1) === \"am\");\n\nobj.toString = function() {\n  throw new ReferenceError (\"foo\");\n};\n\ntry {\n  assert(obj.substring(100000,1));\n  assert(false);\n} catch (e) {\n  assert(e.message === \"foo\");\n  assert(e instanceof ReferenceError);\n}\n\n// check coercible - undefined\ntry {\n  assert(true.substring() === \"\");\n  assert(false);\n} catch (e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - null\ntry {\n  assert(String.prototype.substring.call(null, 0, 1) === \"\");\n  assert(false);\n} catch (e) {\n  assert(e instanceof TypeError);\n}\n\n// check coercible - Boolean\nassert(String.prototype.substring.call(true, 0, 1) === \"t\");\n\n// check coercible - Object\nvar test_object = {firstName:\"John\", lastName:\"Doe\"};\nassert(String.prototype.substring.call(test_object, 0, 7) === \"[object\");\n\n// check coercible - Number\nassert(String.prototype.substring.call(123, 0, 3) === \"123\");\n"

/***/ }),
/* 553 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n// Copyright 2015 University of Szeged.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// check properties\nassert(Object.getOwnPropertyDescriptor(String.prototype.trim, 'length').configurable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.trim, 'length').enumerable === false);\n\nassert(Object.getOwnPropertyDescriptor(String.prototype.trim, 'length').writable === false);\n\nassert(String.prototype.trim.length === 0);\n\n// check this value\nassert(String.prototype.trim.call(new String()) === \"\");\n\nassert(String.prototype.trim.call({}) === \"[object Object]\");\n\n// check undefined\ntry {\n  String.prototype.trim.call(undefined);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// check null\ntry {\n  String.prototype.trim.call(null);\n  assert(false);\n} catch(e) {\n  assert(e instanceof TypeError);\n}\n\n// simple checks\nassert(\" hello world\".trim() === \"hello world\");\n\nassert(\"hello world \".trim() === \"hello world\");\n\nassert(\"    hello world   \".trim() === \"hello world\");\n\nassert(\"\\t  hello world\\n\".trim() === \"hello world\");\n\nassert(\"\\t\\n  hello world\\t \\n \".trim() === \"hello world\");\n\nassert(\"hello world\\n   \\t\\t\".trim() === \"hello world\");\n\nassert(\" hello world \\\\ \".trim() === \"hello world \\\\\");\n\nassert(\"**hello world**\".trim() === \"**hello world**\");\n\nassert(\" \\t \\n\".trim() === \"\");\n\nassert(\"          \".trim() === \"\");\n\nassert(\"\".trim() === \"\");\n\nassert(\"\\uf389\".trim() === \"\\uf389\");\nassert(String.prototype.trim.call('\\uf389') === \"\\uf389\");\nassert(\"\\u20291\\u00D0\".trim() === \"1\\u00D0\");\nassert(\"\\u20291\\u00A0\".trim() === \"1\");\n\nassert(\"\\u0009\\u000B\\u000C\\u0020\\u00A01\".trim() === \"1\");\nassert(\"\\u000A\\u000D\\u2028\\u202911\".trim() === \"11\");\n\nassert(\"\\u0009\\u000B\\u000C\\u0020\\u00A01\\u0009\\u000B\\u000C\\u0020\\u00A0\".trim() === \"1\");\nassert(\"\\u000A\\u000D\\u2028\\u202911\\u000A\\u000D\\u2028\\u2029\".trim() === \"11\");\n"

/***/ }),
/* 554 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert (String.prototype.length === 0);\n"

/***/ }),
/* 555 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar str0 = \"𐐀\";\nvar str1 = \"\\ud801\\udc00\";\nvar str2 = \"\\ud801\";\nvar str3 = \"\\udc00\";\n\nvar str_concat = str2 + str3;\n\nassert(str0 == str_concat);\nassert(str1 == str_concat);\n"

/***/ }),
/* 556 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 University of Szeged\n// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Conversion\n\nassert (\"0123456789abcdefghijklmnopqrstuvwxzyABCDEFGHIJKLMNOPQRSTUVWXYZ\".toLowerCase()\n        == \"0123456789abcdefghijklmnopqrstuvwxzyabcdefghijklmnopqrstuvwxyz\");\nassert (\"0123456789abcdefghijklmnopqrstuvwxzyABCDEFGHIJKLMNOPQRSTUVWXYZ\".toUpperCase()\n        == \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXZYABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n\nassert (\"\\u0130\".toLowerCase() == \"i\\u0307\");\nassert (\"\\xdf\".toUpperCase() == \"SS\");\nassert (\"\\u1fd7\".toUpperCase() == \"\\u0399\\u0308\\u0342\");\n\nassert (\"H\\u0130-+\".toLowerCase() == \"hi\\u0307-+\");\nassert (\"\\xdf\\u1fd7\\xdf\".toUpperCase() == \"SS\\u0399\\u0308\\u0342SS\");\nassert (\"\\u0130\\u0130\\u0130\".toLowerCase() == \"i\\u0307i\\u0307i\\u0307\");\n\n// Although codepoint 0x10400 and 0x10428 are an upper-lowercase pair,\n// we must not do their conversion in JavaScript. We must also ignore\n// stray surrogates.\n\n//assert (\"\\ud801\\ud801\\udc00\\udc00\".toLowerCase() == \"\\ud801\\ud801\\udc00\\udc00\");\n//assert (\"\\ud801\\ud801\\udc28\\udc28\".toUpperCase() == \"\\ud801\\ud801\\udc28\\udc28\");\n\n// Conversion of non-string objects.\n\nassert (String.prototype.toUpperCase.call(true) == \"TRUE\");\nassert (String.prototype.toLowerCase.call(-23) == \"-23\");\n\nvar object = { toString : function() { return \"<sTr>\"; } };\nassert (String.prototype.toUpperCase.call(object) == \"<STR>\");\nassert (String.prototype.toLowerCase.call(object) == \"<str>\");\n\ntry\n{\n  String.prototype.toUpperCase.call(null);\n  assert(false);\n}\ncatch (e)\n{\n  assert (e instanceof TypeError);\n}\n"

/***/ }),
/* 557 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a = 'abcd';\nvar b = 'dfgh';\n\nc = a + b;\n\nassert(c == a + b);\nassert(c === a + b);\nassert(c != a);\nassert(c != b);\nassert(c !== a);\nassert(c !== b);\nassert(c != b + a);\nassert(c !== b + a);\n"

/***/ }),
/* 558 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a = 1;\n\nswitch (a) {\n  case 1:\n  case 2:\n    break;\n  case 3:\n    assert (0);\n}\n\nswitch (a) {\n  case 1:\n    break;\n  case 2:\n  case 3:\n    assert (0);\n}\n\nswitch (a) {\n  default:\n    assert (0);\n  case 1:\n    break;\n  case 2:\n  case 3:\n    assert (0);\n}\n\nswitch (a) {\n  default:\n    break;\n  case 2:\n  case 3:\n    assert (0);\n}\n\nswitch (a) {\n  case 3:\n    assert (0);\n  default:\n    assert (0);\n  case 1:\n}\n\nexecuted_case = '';\nswitch (a) {\n  default:\n    executed_case = 'default';\n    break;\n  case 2:\n    executed_case = 'case 2';\n    break;\n}\nassert (executed_case === 'default');\n\nvar counter = 0;\n\nswitch (\"var\") {\n  case \"var\":\n    counter++;\n  case \"var1\":\n    counter++;\n  case \"var2\":\n    counter++;\n  default:\n    counter++;\n}\n\nassert (counter === 4);\n\nvar flow = '';\n\nswitch (\"var\") {\n  case \"var\":\n    flow += '1';\n  case \"var1\":\n    flow += '2';\n  case \"var2\":\n    flow += '3';\n    switch (flow) {\n      case '123':\n       flow += 'a';\n       break;\n      default:\n       flow += 'b';\n    }\n  default:\n    flow += '4';\n}\n\nassert (flow === '123a4');\n"

/***/ }),
/* 559 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar a = new String ('abcd');\nvar b = String.fromCharCode (97, 98, 99, 100);\n\nassert (a + '' === 'abcd');\nassert (b + '' === 'abcd');\nassert (a + b === 'abcdabcd');\n"

/***/ }),
/* 560 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar i = 0;\n\nfunction a() {}\n\na.prototype.b = function() { i++; }\n\na.prototype.c = function() { this.b(); i++; }\n\nvar aa = new a();\naa.c();\n\nassert (i === 2);\n"

/***/ }),
/* 561 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar was_catch = false, was_finally = false;\n\ntry {\n} catch (err) {\n  was_catch = true;\n} finally {\n  was_finally = true;\n}\n\nassert (!was_catch && was_finally);\n\nwas_catch = false;\nwas_finally = false;\n\ntry {\n  throw 1;\n  assert (0);\n} catch (err) {\n  assert (err === 1);\n  was_catch = true;\n} finally {\n  was_finally = true;\n}\n\nassert (was_catch && was_finally);"

/***/ }),
/* 562 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction f()\n{\n  return 1;\n}\n\nassert(typeof(a) === \"undefined\");\nassert(typeof(null) === \"object\");\nassert(typeof(false) === \"boolean\");\nassert(typeof(true) === \"boolean\");\nassert(typeof(1) === \"number\");\nassert(typeof(1.1) === \"number\");\nassert(typeof('abcd') === \"string\");\nassert(typeof(\"1.1\") === \"string\");\nassert(typeof(this) === \"object\");\nassert(typeof(f) === \"function\");\n"

/***/ }),
/* 563 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert (+0 === -0);\nassert (1/-0 === -Infinity);\nassert (1/+0 === Infinity);\nassert (\"3\" -+-+-+ \"1\" + \"1\" / \"3\" * \"6\" + \"2\" === \"42\");\nassert (isNaN (-NaN));"

/***/ }),
/* 564 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nassert (x === undefined);\nassert (y === undefined);\nassert (z === undefined);\nassert (i === undefined);\nassert (j === undefined);\nassert (k === undefined);\nassert (q === undefined);\nassert (v === undefined);\n\neval ('var n');\neval ('var m = 1');\n\ntry\n{\n  x = p;\n  assert (false);\n}\ncatch (e)\n{\n  assert (e instanceof ReferenceError);\n}\n\n{\n  var y;\n}\nvar x = y;\n\ndo var z; while (0);\n\nfor (var i, j = function () {var p;}; i === undefined; i = null)\n{\n}\n\nfor (var q in {})\n{\n}\n\n{ var v = 1 }\n\ntry\n{\n  var k\n  l\n  assert (false)\n}\ncatch (e)\n{\n  assert (e instanceof ReferenceError);\n}\n"

/***/ }),
/* 565 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2014 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar real = 42;\nvar float = 3.14;\nvar integer = -4;\nvar exponent = 1e7;\nvar str = 'literal';\n\na = 42;\n"

/***/ }),
/* 566 */
/***/ (function(module, exports) {

module.exports = "// Copyright 2015 Samsung Electronics Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntry {\n  eval(\"/*var \" + String.fromCharCode(0) + \"xx = 1*/\");\n}\ncatch (e) {\n  assert (false);\n}\n\nassert (\"x\\0y\" !== \"x\\0z\");\n"

/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(2);
if(typeof window !== 'undefined' && window.initMochaPhantomJS) { window.initMochaPhantomJS(); }
mocha.setup({"ui":"bdd"});
__webpack_require__(568)
__webpack_require__(321);
if(false) {}

/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {

var fs = __webpack_require__(55);
var path = __webpack_require__(13);
var dir = path.join(__dirname, '..', 'contrib', 'test-suites', 'js-corpus');
var expect = __webpack_require__(15).expect;

if (fs.readdirSync) __webpack_require__(569);

var list = __webpack_require__(572);

describe('Corpus Tests', function () {
	var _loop = function _loop(file) {
		it(file, function () {
			var entry = list[file];
			var stdout = [];
			var Engine = __webpack_require__(63).Engine;
			var source = entry.source;
			var e = new Engine({ addInternalStack: true });
			e.realm.print = function () {
				stdout.push(Array.prototype.join.call(arguments, '\t'));
			};
			e.evalSync(source);
			expect(stdout).to.deep.equal(entry.stdout);
		});
	};

	for (var file in list) {
		_loop(file);
	}
});
/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {

var fs = __webpack_require__(55);
var path = __webpack_require__(13);
var dir = path.join(__dirname, 'test-suites', 'js-corpus');
var vm = __webpack_require__(570);
var files = fs.readdirSync(dir);
var out = {};
files.forEach(function(file, idx) {
	if ( /\.js$/.test(file) === false ) return;
	var source = fs.readFileSync(path.join(dir, file), 'utf8');
	var lines = [];
	//console.log(file);
	function stub() {
		let args = Array.prototype.slice.call(arguments, 0);
		let str = Array.prototype.join.call(args.map((x) => String(x)), '\t');
		lines.push(str);
	}
	vm.runInNewContext(source, {
		print: stub,
		console: {
			log: stub
		}
	}, "vm");

	out[file] = {
		source: source,
		stdout: lines
	};
});


fs.writeFileSync(path.join(dir, 'expected.json'), JSON.stringify(out, null, '\t'), 'utf8');

/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

var indexOf = __webpack_require__(571);

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};


/***/ }),
/* 571 */
/***/ (function(module, exports) {


var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),
/* 572 */
/***/ (function(module) {

module.exports = {"arary.js":{"source":"var i = 0;\nfunction inspect(x) {\n\tconsole.log([++i, typeof x, x, JSON.stringify(x)].join(\"\\t\"));\n}\n\nvar a = [1,2,3,4];\ninspect(a);\na.length = 2;\ninspect(a);\ninspect(a[3]);\ninspect(Object.getOwnPropertyNames(a));\n\nvar b = ['a','b','c'];\nb.length = 6;\ninspect(b);\ninspect(Object.getOwnPropertyNames(b));\n","stdout":["1\tobject\t1,2,3,4\t[1,2,3,4]","2\tobject\t1,2\t[1,2]","3\tundefined\t\t","4\tobject\t0,1,length\t[\"0\",\"1\",\"length\"]","5\tobject\ta,b,c,,,\t[\"a\",\"b\",\"c\",null,null,null]","6\tobject\t0,1,2,length\t[\"0\",\"1\",\"2\",\"length\"]"]},"boolean.js":{"source":"var i = 0;\nfunction inspect(x) {\n\tconsole.log([++i, typeof x, x].join(\"\\t\"));\n}\n\ninspect(new Boolean('Rob'));\ninspect(new Boolean(7));\ninspect(new Boolean(0));\ninspect(new Boolean('0'));\ninspect(new Boolean(false));\ninspect(new Boolean('false'));\ninspect(new Boolean());\n\ninspect(Boolean('Rob'));\ninspect(Boolean(7));\ninspect(Boolean(0));\ninspect(Boolean('0'));\ninspect(Boolean(false));\ninspect(Boolean('false'));\ninspect(Boolean());\n","stdout":["1\tobject\ttrue","2\tobject\ttrue","3\tobject\tfalse","4\tobject\ttrue","5\tobject\tfalse","6\tobject\ttrue","7\tobject\tfalse","8\tboolean\ttrue","9\tboolean\ttrue","10\tboolean\tfalse","11\tboolean\ttrue","12\tboolean\tfalse","13\tboolean\ttrue","14\tboolean\tfalse"]},"classes.js":{"source":"class A {\n\tstatic x() { console.log(\"A.x\"); }\n\tx() { console.log(\"A::x\", this.y); }\n\tstatic y() { console.log(\"A.y\"); }\n\tconstructor(n) { console.log(\"A()\", n); }\n}\n\nclass B extends A {\n\tconstructor(n) { \n\t\tsuper(n+1);\n\t\tconsole.log(\"B()\", n); \n\t}\n\tx() { \n\t\tsuper.x();\n\t\tconsole.log(\"B::x\", this.y);\n\t}\n\tstatic z() {\n\t\tsuper.y();\n\t}\n}\n\nfunction keys(o) {\n\treturn (Object.getOwnPropertyNames(o)).sort();\n}\n\nconsole.log(\"A\", keys(A));\nconsole.log(\"B\", keys(B));\nconsole.log(\"A.prototype\", keys(A.prototype));\nconsole.log(\"B.prototype\", keys(B.prototype));\n\nlet o = new B(4);\no.y = 10;\no.x();\n\n\no = new B(4);\no.x();\n\nA.x();\nB.y();\nB.z();\n","stdout":["A\tlength,name,prototype,x,y","B\tlength,name,prototype,z","A.prototype\tconstructor,x","B.prototype\tconstructor,x","A()\t5","B()\t4","A::x\t10","B::x\t10","A()\t5","B()\t4","A::x\tundefined","B::x\tundefined","A.x","A.y","A.y"]},"closure.js":{"source":"let i = 0;\nvar v = 99;\n\nfunction inspect(x) {\n\tconsole.log([++i, typeof x, x].join(\"\\t\"));\n}\n\nfunction counter1(initial) {\n\tvar v = initial;\n\treturn {\n\t\tadd() { return ++v; },\n\t\tsubtract() { return --v; },\n\t\tvalue() { return v; }\n\t}\n}\n\nfunction counter2(v) {\n\treturn {\n\t\tadd() { return ++v; },\n\t\tsubtract() { return --v; },\n\t\tvalue() { return v; }\n\t}\n}\n\nfunction counter3(initial) {\n\tlet v = initial;\n\treturn {\n\t\tadd() { return ++v; },\n\t\tsubtract() { return --v; },\n\t\tvalue() { return v; }\n\t}\n}\n\nfunction test(fn) {\n\n\tlet x = fn(10);\n\tlet y = fn(0);\n\n\tlet v = 20;\n\tinspect(x.value());\n\tinspect(x.add());\n\tinspect(y.add());\n\tinspect(x.subtract());\n\tinspect(v);\n\n}\n\ntest(counter1);\ntest(counter2);\ntest(counter3);\n\n\n","stdout":["1\tnumber\t10","2\tnumber\t11","3\tnumber\t1","4\tnumber\t10","5\tnumber\t20","6\tnumber\t10","7\tnumber\t11","8\tnumber\t1","9\tnumber\t10","10\tnumber\t20","11\tnumber\t10","12\tnumber\t11","13\tnumber\t1","14\tnumber\t10","15\tnumber\t20"]},"equality.js":{"source":"var i = 0;\nfunction inspect(a,b) {\n\t++i;\n\tconsole.log([i, typeof a, a, typeof b, b, a == b, a === b ].join(\"\\t\"));\n\tconsole.log([i, typeof b, b, typeof a, a, b == a, b === a ].join(\"\\t\"));\n\n}\n\ninspect(null, undefined);\ninspect(null, 0);\ninspect(undefined, 0);\n\ninspect('0', 0);\ninspect('true', true);\ninspect({}, true);\ninspect(function x() {}, true);\n","stdout":["1\tobject\t\tundefined\t\ttrue\tfalse","1\tundefined\t\tobject\t\ttrue\tfalse","2\tobject\t\tnumber\t0\tfalse\tfalse","2\tnumber\t0\tobject\t\tfalse\tfalse","3\tundefined\t\tnumber\t0\tfalse\tfalse","3\tnumber\t0\tundefined\t\tfalse\tfalse","4\tstring\t0\tnumber\t0\ttrue\tfalse","4\tnumber\t0\tstring\t0\ttrue\tfalse","5\tstring\ttrue\tboolean\ttrue\tfalse\tfalse","5\tboolean\ttrue\tstring\ttrue\tfalse\tfalse","6\tobject\t[object Object]\tboolean\ttrue\tfalse\tfalse","6\tboolean\ttrue\tobject\t[object Object]\tfalse\tfalse","7\tfunction\tfunction x() {}\tboolean\ttrue\tfalse\tfalse","7\tboolean\ttrue\tfunction\tfunction x() {}\tfalse\tfalse"]},"es6-edge.js":{"source":"\n\nfunction hasRest(a, b, ...c) {\n\tconsole.log(arguments.length, arguments, Array.prototype.join.call(arguments,\" \"));\n\tconsole.log(c);\n}\n\nhasRest(1,2,3,4,5,6,7);\n\nconsole.log(\"Math.pow(2,10) == \", 2**10);","stdout":["7\t[object Arguments]\t1 2 3 4 5 6 7","3,4,5,6,7","Math.pow(2,10) == \t1024"]},"es6.js":{"source":"'use strict';\n\nvar arrow = (x) => x*2;\n\nconsole.log(arrow(10));\n\nvar arrow2 = (x) => {\n\tconsole.log(\"xyzzy\");\n}\n\narrow2();\n\nclass Clazz {\n\twhatever() { return 30; }\n\tstatic something() { return 40; }\n}\n\nvar x = new Clazz();\nconsole.log(typeof x.whatever, x.whatever());\n\nconsole.log(typeof Clazz.whatever);\nconsole.log(typeof Clazz.prototype.whatever);\nconsole.log(typeof Clazz.something, Clazz.something());\n\nlet y = 0;\nfor ( let y of [8,6,7,5,3,0,9] )\n\tconsole.log(y);\n\nconsole.log(y);\n\n//Array Find\n\nconsole.log([1,2,3,4,5].find(function(t) {\n\tconsole.log(JSON.stringify(arguments));\n\treturn t == 4;\n\n}));\n\nconsole.log([1,2,3,4,5].find(function(t) {\n\treturn t == 0;\n}));\n\nconsole.log(`1 ${2} 3 ${4} ${typeof(Math)}`)\nconsole.log `1 ${2} 3 ${4} ${typeof(Math)}`\n\nfunction raw(s) { return s.raw.join('|') + Object.keys(s).join(\"%\") }\n\nconsole.log(raw `Two\\nLines ${x}\\nThree\\nLines`)\nconsole.log(String.raw `Two\\nLines ${x}\\nThree\\nLines`)\nconsole.log(String.raw({ raw: 'test' }, 0, 1, 2));\n","stdout":["20","xyzzy","function\t30","undefined","function","function\t40","8","6","7","5","3","0","9","0","{\"0\":1,\"1\":0,\"2\":[1,2,3,4,5]}","{\"0\":2,\"1\":1,\"2\":[1,2,3,4,5]}","{\"0\":3,\"1\":2,\"2\":[1,2,3,4,5]}","{\"0\":4,\"1\":3,\"2\":[1,2,3,4,5]}","4","undefined","1 2 3 4 object","1 , 3 , ,\t2\t4\tobject","Two\\nLines |\\nThree\\nLines0%1","Two\\nLines [object Object]\\nThree\\nLines","t0e1s2t"]},"es8.js":{"source":"function testStringPad(str, len, pad) {\n\tconsole.log(str,len,pad, \"L\", JSON.stringify(str.padStart(len, pad)));\n\tconsole.log(str,len,pad, \"R\", JSON.stringify(str.padEnd(len, pad)));\n\n}\n\n\n\ntestStringPad(\"cow\", 20);\ntestStringPad(\"cow\", 20, ' ');\ntestStringPad(\"cow\", 20, null);\ntestStringPad(\"cow\", 20, 12);\ntestStringPad(\"cow\", 20, 'cat ');\ntestStringPad(\"cow\", 1);\ntestStringPad(\"cow\", 1, 'cat ');\n","stdout":["cow\t20\tundefined\tL\t\"                 cow\"","cow\t20\tundefined\tR\t\"cow                 \"","cow\t20\t \tL\t\"                 cow\"","cow\t20\t \tR\t\"cow                 \"","cow\t20\tnull\tL\t\"nullnullnullnullncow\"","cow\t20\tnull\tR\t\"cownullnullnullnulln\"","cow\t20\t12\tL\t\"12121212121212121cow\"","cow\t20\t12\tR\t\"cow12121212121212121\"","cow\t20\tcat \tL\t\"cat cat cat cat ccow\"","cow\t20\tcat \tR\t\"cowcat cat cat cat c\"","cow\t1\tundefined\tL\t\"cow\"","cow\t1\tundefined\tR\t\"cow\"","cow\t1\tcat \tL\t\"cow\"","cow\t1\tcat \tR\t\"cow\""]},"fib.js":{"source":"\nfunction fib(x) {\n\tif ( x == 1 ) return 1;\n\tif ( x == 2 ) return 1;\n\tvar result = fib(x-1) + fib(x-2);\n\treturn result;\n}\n\nfor ( var i = 1; i < 15; ++i ) {\n\t//print(i);\n\t//if ( i % 2 == 1 ) continue;\n\t//var f = fib(i);\n\t//print(i, \"\\t\", f);\n\n}\n","stdout":[]},"fib2.js":{"source":"\nvar results = {0:0,1:1,2:1};\nfunction fib(x) {\n\tif ( !(x in results )) results[x] = fib(x-1) + fib(x-2);\n\treturn results[x];\n}\n\n\nvar val = fib(20);\nconsole.log(val);\nif ( val != 6765 ) throw new Error(\"Failed\");\n","stdout":["6765"]},"fixme.js":{"source":"y = 1;\nfunction a(b) {\n\treturn function(c) { return (d) => d*c*b+y; };\n}\n\n\n\nconsole.log([2,3,4,5,6].map(a).map((x) => x(2)(3)));\n\n\n/*\nlet stack = [];\nfor ( let i = 0; i < 10; ++i ) stack.push(() => console.log(i));\nstack.forEach((v) => v());\n*/\n","stdout":["13,19,25,31,37"]},"fixme2.js":{"source":"a = 'tacos';\nfunction x(y) { console.log(y,a); }\n\nfunction w(a) { return x(a); }\n\nw(2);\n\n","stdout":["2\ttacos"]},"fixme3.js":{"source":"function foo() {\n    var ParentClass = function () {\n        function ParentClass() {\n        }\n        ParentClass.prototype.f = function () {\n            return 'hello world';\n        };\n        return ParentClass;\n    }();\n    var MyClass = function () {\n        function MyClass() {\n            ParentClass.apply(this, arguments);\n        }\n        MyClass.prototype = Object.create(ParentClass.prototype);\n        return MyClass;\n    }();\n    var x = new MyClass('test');\n    console.log(x.f());\n}\n\nfoo();\n\n","stdout":["hello world"]},"fixme4.js":{"source":"\nlet a = [];\nfor ( let i = 0; i < 9; ++i ) a.push(function() { return i; });\n\nconsole.log(a.map(x => x()));\n","stdout":["0,1,2,3,4,5,6,7,8"]},"fixme5.js":{"source":"function a() {\n\treturn new.target;\n}\n\nconsole.log(a());\nconsole.log(new a);\nconsole.log(new a());\n","stdout":["undefined","function a() {\n\treturn new.target;\n}","function a() {\n\treturn new.target;\n}"]},"fn-hoist.js":{"source":"var x = 10;\nconsole.log(x);\nif ( true ) {\n  console.log(x);\n  x();\n  function x() { console.log(\"hi\"); }\n}\nconsole.log(x);","stdout":["10","function x() { console.log(\"hi\"); }","hi","function x() { console.log(\"hi\"); }"]},"nbody.js":{"source":"/* The Computer Language Benchmarks Game\n   https://salsa.debian.org/benchmarksgame-team/benchmarksgame/\n   contributed by Isaac Gouy */\n\nvar PI = 3.141592653589793;\nvar SOLAR_MASS = 4 * PI * PI;\nvar DAYS_PER_YEAR = 365.24;\n\nfunction Body(x,y,z,vx,vy,vz,mass){\n   this.x = x;\n   this.y = y;\n   this.z = z;\n   this.vx = vx;\n   this.vy = vy;\n   this.vz = vz;\n   this.mass = mass;\n}\n\nBody.prototype.offsetMomentum = function(px,py,pz) {\n   this.vx = -px / SOLAR_MASS;\n   this.vy = -py / SOLAR_MASS;\n   this.vz = -pz / SOLAR_MASS;\n   return this;\n}\n\nfunction Jupiter(){\n   return new Body(\n      4.84143144246472090e+00,\n      -1.16032004402742839e+00,\n      -1.03622044471123109e-01,\n      1.66007664274403694e-03 * DAYS_PER_YEAR,\n      7.69901118419740425e-03 * DAYS_PER_YEAR,\n      -6.90460016972063023e-05 * DAYS_PER_YEAR,\n      9.54791938424326609e-04 * SOLAR_MASS\n   );\n}\n\nfunction Saturn(){\n   return new Body(\n      8.34336671824457987e+00,\n      4.12479856412430479e+00,\n      -4.03523417114321381e-01,\n      -2.76742510726862411e-03 * DAYS_PER_YEAR,\n      4.99852801234917238e-03 * DAYS_PER_YEAR,\n      2.30417297573763929e-05 * DAYS_PER_YEAR,\n      2.85885980666130812e-04 * SOLAR_MASS\n   );\n}\n\nfunction Uranus(){\n   return new Body(\n      1.28943695621391310e+01,\n      -1.51111514016986312e+01,\n      -2.23307578892655734e-01,\n      2.96460137564761618e-03 * DAYS_PER_YEAR,\n      2.37847173959480950e-03 * DAYS_PER_YEAR,\n      -2.96589568540237556e-05 * DAYS_PER_YEAR,\n      4.36624404335156298e-05 * SOLAR_MASS\n   );\n}\n\nfunction Neptune(){\n   return new Body(\n      1.53796971148509165e+01,\n      -2.59193146099879641e+01,\n      1.79258772950371181e-01,\n      2.68067772490389322e-03 * DAYS_PER_YEAR,\n      1.62824170038242295e-03 * DAYS_PER_YEAR,\n      -9.51592254519715870e-05 * DAYS_PER_YEAR,\n      5.15138902046611451e-05 * SOLAR_MASS\n   );\n}\n\nfunction Sun(){\n   return new Body(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, SOLAR_MASS);\n}\n\n\nfunction NBodySystem(bodies){\n   this.bodies = bodies;\n   var px = 0.0;\n   var py = 0.0;\n   var pz = 0.0;\n   var size = this.bodies.length;\n   for (var i=0; i<size; i++){\n      var b = this.bodies[i];\n      var m = b.mass;\n      px += b.vx * m;\n      py += b.vy * m;\n      pz += b.vz * m;\n   }\n   this.bodies[0].offsetMomentum(px,py,pz);\n}\n\nNBodySystem.prototype.advance = function(dt){\n   var dx, dy, dz, distance, mag;\n   var size = this.bodies.length;\n\n   for (var i=0; i<size; i++) {\n      var bodyi = this.bodies[i];\n      for (var j=i+1; j<size; j++) {\n         var bodyj = this.bodies[j];\n         dx = bodyi.x - bodyj.x;\n         dy = bodyi.y - bodyj.y;\n         dz = bodyi.z - bodyj.z;\n\n         distance = Math.sqrt(dx*dx + dy*dy + dz*dz);\n         mag = dt / (distance * distance * distance);\n\n         bodyi.vx -= dx * bodyj.mass * mag;\n         bodyi.vy -= dy * bodyj.mass * mag;\n         bodyi.vz -= dz * bodyj.mass * mag;\n\n         bodyj.vx += dx * bodyi.mass * mag;\n         bodyj.vy += dy * bodyi.mass * mag;\n         bodyj.vz += dz * bodyi.mass * mag;\n      }\n   }\n\n   for (var i=0; i<size; i++) {\n      var body = this.bodies[i];\n      body.x += dt * body.vx;\n      body.y += dt * body.vy;\n      body.z += dt * body.vz;\n   }\n}\n\nNBodySystem.prototype.energy = function(){\n   var dx, dy, dz, distance;\n   var e = 0.0;\n   var size = this.bodies.length;\n\n   for (var i=0; i<size; i++) {\n      var bodyi = this.bodies[i];\n\n      e += 0.5 * bodyi.mass *\n         ( bodyi.vx * bodyi.vx\n         + bodyi.vy * bodyi.vy\n         + bodyi.vz * bodyi.vz );\n\n      for (var j=i+1; j<size; j++) {\n         var bodyj = this.bodies[j];\n         dx = bodyi.x - bodyj.x;\n         dy = bodyi.y - bodyj.y;\n         dz = bodyi.z - bodyj.z;\n\n         distance = Math.sqrt(dx*dx + dy*dy + dz*dz);\n         e -= (bodyi.mass * bodyj.mass) / distance;\n      }\n   }\n   return e;\n}\n\n\nvar n = 500;\nvar bodies = new NBodySystem( Array( \n   Sun(),Jupiter(),Saturn(),Uranus(),Neptune() \n));\n\nconsole.log(bodies.energy().toFixed(9));\nfor (var i=0; i<n; i++){ bodies.advance(0.01); }\nconsole.log(bodies.energy().toFixed(9));\n\n","stdout":["-0.169075164","-0.169021528"]},"number.js":{"source":"function test(n) {\n\tvar a = Number(n);\n\tvar b = new Number(n);\n\n\tconsole.log(n, typeof a, a, a.toExponential(), a.toFixed(), a.toPrecision());\n\tconsole.log(n, typeof a, a, a.toExponential(3), a.toFixed(3), a.toPrecision(3));\n\tconsole.log(n, typeof b, b, b.toExponential(), b.toFixed(), b.toPrecision());\n\tconsole.log(n, typeof n, n, n.toExponential(), n.toFixed(), n.toPrecision());\n}\n\ntest(0);\ntest(100)\ntest(NaN);\ntest(100)","stdout":["0\tnumber\t0\t0e+0\t0\t0","0\tnumber\t0\t0.000e+0\t0.000\t0.00","0\tobject\t0\t0e+0\t0\t0","0\tnumber\t0\t0e+0\t0\t0","100\tnumber\t100\t1e+2\t100\t100","100\tnumber\t100\t1.000e+2\t100.000\t100","100\tobject\t100\t1e+2\t100\t100","100\tnumber\t100\t1e+2\t100\t100","NaN\tnumber\tNaN\tNaN\tNaN\tNaN","NaN\tnumber\tNaN\tNaN\tNaN\tNaN","NaN\tobject\tNaN\tNaN\tNaN\tNaN","NaN\tnumber\tNaN\tNaN\tNaN\tNaN","100\tnumber\t100\t1e+2\t100\t100","100\tnumber\t100\t1.000e+2\t100.000\t100","100\tobject\t100\t1e+2\t100\t100","100\tnumber\t100\t1e+2\t100\t100"]},"object.js":{"source":"function Rob() {\n\n};\n\nfunction test(n) {\n\tconsole.log(\n\t\ttypeof n,\n\t\tObject.prototype.isPrototypeOf.call(n, Rob),\n\t\tObject.prototype.isPrototypeOf.call(Rob, n)\n\t);\n}\n\n\ntest({});\ntest(0);\n\ntest(function() {});\ntest(new Rob());\ntest(Object.prototype);\n","stdout":["object\tfalse\tfalse","number\tfalse\tfalse","function\tfalse\tfalse","object\tfalse\tfalse","object\ttrue\tfalse"]},"proto-keys.js":{"source":"console.log('Boolean.prototyp', Object.keys(Boolean.prototype));\nconsole.log('Number.prototype', Object.keys(Number.prototype));\nconsole.log('String.prototype', Object.keys(String.prototype));\n","stdout":["Boolean.prototyp\t","Number.prototype\t","String.prototype\t"]},"simple.js":{"source":"var a = 2;\nvar b = 2;\n\nif ( 2 + 2 != 4 ) throw \"Didnt work!\";\nprint(\"Okay\");\n","stdout":["Okay"]},"test.js":{"source":"var rob = 2*3+4;\nconsole.log(\"Rob is\", rob);\nif ( rob % 2 == 1 ) {\n\tconsole.log(\"+\");\n} else {\n\tconsole.log(\"-\");\n}\n\nvar x = 2;\nfunction d(x) {\n\tconsole.log(\"Rob is great!\", x);\n\treturn x*2;\n\tconsole.log(\"Nope\");\n}\nvar rob2 = d(10);\nconsole.log(\"Okay\");\nd(rob2);\nconsole.log(x);\n\n//console.log(d(10))\n\nfunction start(d) {\n\tvar count = d;\n\tfunction p() {\n\t\tconsole.log(++count);\n\t}\n\treturn p;\n}\n\nvar z = start(10);\nz()\nz()\nz()\nvar y = start(100)\ny()\ny()\nz()\ny()\nvar o = {a: 1, b: 2, c: 3};","stdout":["Rob is\t10","-","Rob is great!\t10","Okay","Rob is great!\t20","2","11","12","13","101","102","14","103"]},"with.js":{"source":"let x = 10;\nwith ( Math ) {\n\tlet x = 20;\n\tconsole.log(x, sin(PI));\n}\n\nlet y = {x: 30}\nlet z = 'z';\nwith ( y ) {\n\t//y.z = 'Z';\n\tconsole.log(z);\n}\n\nconsole.log(x);\n","stdout":["20\t1.2246467991473532e-16","z","10"]}};

/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(2);
if(typeof window !== 'undefined' && window.initMochaPhantomJS) { window.initMochaPhantomJS(); }
mocha.setup({"ui":"bdd"});
__webpack_require__(574)
__webpack_require__(321);
if(false) {}

/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var expect = __webpack_require__(15).expect;
var Engine = __webpack_require__(63).Engine;

var FutureValue = __webpack_require__(227);
var Value = __webpack_require__(152);

function ensure_not_done(e) {
	expect(e.done).to.be.false;
}

function resolves(e, value) {
	do {
		var f = e.next();
	} while (!f.done);

	return f.value;
}

describe('FutureValue', function () {
	describe('Basic Tests', function () {

		it('simple', function () {

			var e = new Engine({
				foreignObjectMode: 'smart'
			});

			var fv = new FutureValue(e.realm);
			e.addGlobalFx('a', function () {
				return fv;
			});
			e.load('a()');

			for (var i = 0; i < 20; ++i) {
				ensure_not_done(e.generator.next());
			}

			fv.resolve(Value.fromNative(22));
			var val = resolves(e.generator);
			expect(val.toNative()).to.equal(22);
		});

		it('Fetch function', function () {

			var e = new Engine({
				foreignObjectMode: 'smart'
			});

			var fv = new FutureValue(e.realm);
			e.addGlobalFx('getFuture', function () {
				return fv;
			});
			e.evalSync('function a(o) { return getFuture(); };');
			var gen = e.fetchFunction('a')();

			for (var i = 0; i < 20; ++i) {
				ensure_not_done(gen.next());
			}

			fv.resolve(Value.fromNative(22));
			expect(resolves(gen)).to.equal(22);
		});
		it('Simple Run test', function () {
			var e = new Engine();
			e.load('2+2');
			return e.run().then(function (v) {
				expect(v.toNative()).to.equal(4);
			});
		});
		it('Run with async callback.', function () {

			var e = new Engine({
				foreignObjectMode: 'smart'
			});

			var fv = new FutureValue(e.realm);
			e.addGlobal('fv', fv);
			e.load('function a(o) { return o; }; a(fv);');
			setTimeout(function () {
				fv.resolve(Value.fromNative(22));
			}, 10);

			return e.run().then(function (value) {
				expect(value.toNative()).to.equal(22);
			});
		});
	});
});

/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(2);
if(typeof window !== 'undefined' && window.initMochaPhantomJS) { window.initMochaPhantomJS(); }
mocha.setup({"ui":"bdd"});
__webpack_require__(576)
__webpack_require__(321);
if(false) {}

/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _create = __webpack_require__(202);

var _create2 = _interopRequireDefault(_create);

var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var expect = __webpack_require__(15).expect;
var Engine = __webpack_require__(63).Engine;
var esper = __webpack_require__(63);

function a(code, o) {
	var e = new Engine({
		foreignObjectMode: 'smart',
		addExtraErrorInfoToStacks: true
	});

	e.evalSync('function a(arg) {\n' + code + '}');
	var fx = e.fetchFunctionSync('a');
	var args = Array.prototype.slice.call(arguments, 1);
	return fx.apply(null, args);
}

function b(code) {
	var e = new Engine({
		foreignObjectMode: 'smart'
	});

	var User = function () {
		function User() {
			(0, _classCallCheck3.default)(this, User);

			this.name = 'Annoner';
			this.secret = 'sauce';
		}

		(0, _createClass3.default)(User, [{
			key: 'ident',
			value: function ident() {
				return this.name + ' (' + (this.age || '?') + ')';
			}
		}, {
			key: 'identity',
			value: function identity(o) {
				return o;
			}
		}, {
			key: 'bad',
			value: function bad() {
				return 'oh no!';
			}
		}, {
			key: 'toString',
			value: function toString() {
				return this.name;
			}
		}]);
		return User;
	}();

	User.prototype.type = 'User';
	User.prototype.code = 1234;

	User.prototype.apiProperties = ['name', 'age', 'type'];
	User.prototype.apiMethods = ['ident', 'identity'];

	e.evalSync('var a = ' + code.toString());
	var fx = e.fetchFunctionSync('a');
	return fx.call(null, new User());
}

describe('Smart Link', function () {
	describe('Test Harness', function () {

		it('should run code with return values', function () {
			expect(a('return 2+2')).to.equal(4);
		});

		it('should be using smart objects', function () {
			expect(a('return Esper.str(arg)', {})).to.match(/^\[SmartLink/);
		});
	});

	describe('Passing Arguments to fetchFunctionSync', function () {

		it('should pass nothing as type undefined', function () {
			expect(a('return typeof arg')).to.equal('undefined');
		});

		it('should pass nothing as undefined', function () {
			expect(a('return arg')).to.equal(undefined);
		});

		it('should pass undefined as undefined', function () {
			expect(a('return typeof arg', void 0)).to.equal('undefined');
		});

		it('should pass null as typeof object', function () {
			expect(a('return typeof arg', null)).to.equal('object');
		});

		it('should pass null as null', function () {
			expect(a('return arg', null)).to.equal(null);
		});

		it('should pass numbers typeof number', function () {
			expect(a('return typeof arg', 7)).to.equal('number');
		});

		it('should pass numbers as numbers', function () {
			expect(a('return arg', 7)).to.equal(7);
		});

		it('should pass objects as objects', function () {
			expect(a('return typeof arg', {})).to.equal('object');
		});

		it('should pass functions as function', function () {
			expect(a('return typeof arg', function () {})).to.equal('function');
		});
	});

	describe('Maps well known values', function () {
		it('should map Object', function () {
			expect(a('return arg === Object', Object)).to.be.true;
		});

		it('should use Object Prototype', function () {
			expect(a('return Object.getPrototypeOf(arg) === Object.prototype', { rob: 1 })).to.be.true;
			expect(a('return arg.toString === Object.prototype.toString', { rob: 1 })).to.be.true;
		});

		it('should use Function Prototype', function () {
			//expect(a('return Object.getPrototypeOf(arg) === Function.prototype', function() {} )).to.be.true;
			expect(a('return arg.call === Function.prototype.call', function () {})).to.be.true;
		});

		it('should use Array Prototype', function () {
			expect(a('return Object.getPrototypeOf(arg) === Array.prototype', [1, 2, 3])).to.be.true;
			expect(a('return arg.join === Array.prototype.join', [1, 2, 3])).to.be.true;
		});
	});

	describe('Reading properties', function () {
		var obj = { x: { y: 20 } };
		it('should do subobjects', function () {
			expect(a('return arg.x.y', obj)).to.equal(20);
		});

		it('should do subobjects as object type', function () {
			expect(a('return typeof arg.x', obj)).to.equal('object');
		});

		it('subobjects should be SmartLinks', function () {
			expect(a('return Esper.str(arg.x)', obj)).to.match(/^\[SmartLink/);
		});

		it('should send the correct this value', function () {
			var o1 = { x: 1, getX: function getX() {
					return this.x;
				} };
			var o2 = (0, _create2.default)(o1);
			o2.x = 2;
			expect(a('return arg.getX()', o2)).to.equal(2);
		});

		it('should send the correct this value with getter', function () {
			var o1 = { x: 1 };
			Object.defineProperty(o1, 'getX', {
				get: function get() {
					return this.x;
				}
			});
			var o2 = (0, _create2.default)(o1);
			o2.x = 2;
			expect(a('return arg.getX', o2)).to.equal(2);
		});

		it('should send the correct this value with setter', function () {
			var o1 = { x: 1 };
			Object.defineProperty(o1, 'esper_getX', {
				configurable: true,
				enumerable: true,
				get: function get() {
					return 6;
				},
				set: function set() {
					return this.y = this.x;
				}
			});
			var o2 = (0, _create2.default)(o1);
			o2.x = 2;
			o2.apiUserProperties = ['getX'];
			expect(a('return arg.getX = 7;', o2)).to.equal(7);
			expect(o2.y).to.equal(2);
		});
	});

	describe('Writing properties', function () {
		var obj = { x: 10 };
		it('shouldnt allow writes by default', function () {
			expect(function () {
				return a('arg.x = 1', obj);
			}).to.throw('Can\'t write to protected property: x');
		});
	});

	it('Privlaged Threads', function () {
		var e = new Engine({
			foreignObjectMode: 'smart',
			addExtraErrorInfoToStacks: true
		});
		e.realm.globalScope.add('x', esper.Value.undef);
		var run = function run(code) {
			e.evalSync('function a(arg) {\n' + code + '}');
			var fx = e.fetchFunctionSync('a');
			var args = Array.prototype.slice.call(arguments, 1);
			return fx.apply(null, args);
		};

		var User = function User() {
			(0, _classCallCheck3.default)(this, User);

			this.name = 'Annoner';
			this.secret = 'sauce';
		};

		User.prototype.apiProperties = ['name'];
		var u = new User();
		run('x = arg', u);
		//expect(run('return Esper.str(x)')).to.equal("[SmartLink: Annoner, props: name,age,type,ident,identity]");
		expect(function () {
			return run('x.secret');
		}).to.throw();
		esper.SmartLinkValue.makeThreadPrivlaged(e.evaluator);
		expect(run('return x.secret')).to.equal('sauce');
	});

	describe('Respect API properties', function () {
		it('read allowed property', function () {
			expect(b(function (o) {
				return o.name;
			})).to.equal('Annoner');
			expect(b(function (o) {
				return o.age;
			})).to.be.undefined;
			expect(b(function (o) {
				return o.type;
			})).to.equal('User');
			expect(b(function (o) {
				return o.ident();
			})).to.equal('Annoner (?)');
			expect(b(function (o) {
				return o.somethingThatDoesntExist;
			})).to.be.undefined;
		});

		it('methods', function () {
			expect(b(function (o) {
				return o.identity(7);
			})).to.equal(7);
			expect(b(function (o) {
				return o.identity.call(null, 7);
			})).to.equal(7);
		});

		it('can\'t read unregistered property', function () {
			expect(function () {
				return b(function (o) {
					return o.secret;
				});
			}).to.throw();
			expect(function () {
				return b(function (o) {
					return o.bad();
				});
			}).to.throw();
			expect(function () {
				return b(function (o) {
					return o.code;
				});
			}).to.throw();
		});

		it('can\'t overwrite properties', function () {
			expect(function () {
				return b(function (o) {
					return o.name = 'Rob';
				});
			}).to.throw();
			expect(function () {
				return b(function (o) {
					return o.secret = 'something';
				});
			}).to.throw();
		});

		it('supports user assinged properties', function () {
			expect(b(function (o) {
				o.nue = 5;
				o.nue += 2;
				return o.nue;
			})).to.equal(7);
		});
	});

	describe('esper_ method overrides', function () {
		it('will use an esper_ property if it exists', function () {
			expect(a('return arg.one();', {
				apiProperties: [],
				one: function one() {
					return 1;
				},
				esper_one: function esper_one() {
					return 2;
				}
			})).to.equal(2);
		});
		it('respects esper_ properties wrt getters', function () {
			var obj = { one: 5 };
			Object.defineProperty(obj, 'esper_one', {
				get: function get() {
					return this.one * 2;
				}
			});
			expect(a('return arg.one;', obj)).to.equal(10);
			expect(obj.one).to.equal(5);
		});
		it('respects esper_ properties wrt getters and setters', function () {
			var obj = { one: 5, apiUserProperties: ['one'] };
			Object.defineProperty(obj, 'esper_one', {
				get: function get() {
					return this.one * 2;
				},
				set: function set(v) {
					this.one = v + 1;
				},
				enumerable: true
			});
			expect(a('return arg.one;', obj)).to.equal(10);
			expect(a('arg.one = 2; return arg.one', obj)).to.equal(6);
			expect(obj.one).to.equal(3);
		});

		it('respects esper_ properties wrt getters and setters w/ Privlaged Threads', function () {
			var obj = { one: 5, apiUserProperties: ['x'] };
			Object.defineProperty(obj, 'esper_one', {
				get: function get() {
					return this.one * 2;
				},
				set: function set(v) {
					this.one = v + 1;
				},
				enumerable: true
			});

			var e = new Engine({
				foreignObjectMode: 'smart',
				addExtraErrorInfoToStacks: true,
				addInternalStack: true
			});
			e.realm.globalScope.add('x', esper.Value.undef);
			var run = function run(code) {
				e.evalSync('function a(arg) {\n' + code + '}');
				var fx = e.fetchFunctionSync('a');
				var args = Array.prototype.slice.call(arguments, 1);
				try {
					var out = fx.apply(null, args);
				} catch (e) {
					console.log('EE', e.stack);
					throw e;
				}

				return out;
			};
			esper.SmartLinkValue.makeThreadPrivlaged(e.evaluator);
			expect(run('return arg.one;', obj)).to.equal(10);
			expect(run('arg.one = 2; return arg.one', obj)).to.equal(6);
			expect(obj.one).to.equal(3);
		});
	});

	describe('Remote Invocation', function () {
		it('should invoke String function not as a constructor', function () {
			expect(a('return typeof arg(7)', String)).to.equal('string');
		});

		it('should invoke String constructor as a constructor', function () {
			expect(a('return typeof new arg(7)', String)).to.equal('object');
		});

		it('should invoke Date function not as a constructor', function () {
			expect(a('return typeof arg(7)', Date)).to.equal('string');
		});

		it('should invoke Date constructor as a constructor', function () {
			expect(a('return typeof new arg(7)', Date)).to.equal('object');
		});

		it('should pass the issue #9 test code', function () {
			expect(a("return new arg('December 25, 1995 23:15:30').getMonth();", Date)).to.equal(11);
		});
	});
});

/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(2);
if(typeof window !== 'undefined' && window.initMochaPhantomJS) { window.initMochaPhantomJS(); }
mocha.setup({"ui":"bdd"});
__webpack_require__(578)
__webpack_require__(321);
if(false) {}

/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck2 = __webpack_require__(142);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(143);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var expect = __webpack_require__(15).expect;
var Engine = __webpack_require__(63).Engine;

var FutureValue = __webpack_require__(227);
var Value = __webpack_require__(152);

function ensure_not_done(e) {
	expect(e.done).to.be.false;
}

function resolves(e, value) {
	do {
		var f = e.next();
	} while (!f.done);

	return f.value;
}

function b(code) {
	var e = new Engine({
		foreignObjectMode: 'smart'
	});

	var User = function () {
		function User() {
			(0, _classCallCheck3.default)(this, User);

			this.name = 'Annoner';
		}

		(0, _createClass3.default)(User, [{
			key: 'toString',
			value: function toString() {
				return this.name;
			}
		}]);
		return User;
	}();

	e.evalSync('var a = ' + code.toString());
	var fx = e.fetchFunctionSync('a');
	return fx.call(null, new User());
}

describe('Misc', function () {
	it('Function Parsing Tests', function () {

		var e = new Engine({
			foreignObjectMode: 'smart'
		});

		var f = e.functionFromSourceSync('return 10');
		var r = f();
		expect(r).to.equal(10);
	});

	describe('Boomark Tests', function () {
		it('Array of Links', function () {
			expect(b(function (o) {
				return [o, o, o];
			}).toString()).to.equal('Annoner,Annoner,Annoner');
		});

		it('boomarkInvokeMode', function () {
			var e = new Engine({
				foreignObjectMode: 'smart',
				bookmarkInvocationMode: 'loop'
			});
			e.evalSync('var get = (' + function () {
				var o = {};
				o.rob = function () {
					return 'Rob is great!';
				};
				return o;
			}.toString() + ')');
			var value = e.fetchFunctionSync('get')();
			expect(value.rob()).to.equal('Rob is great!');
		});
	});
});

/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(2);
if(typeof window !== 'undefined' && window.initMochaPhantomJS) { window.initMochaPhantomJS(); }
mocha.setup({"ui":"bdd"});
__webpack_require__(580)
__webpack_require__(321);
if(false) {}

/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var expect = __webpack_require__(15).expect;
var Engine = __webpack_require__(63).Engine;

var FutureValue = __webpack_require__(227);
var Value = __webpack_require__(152);

describe('Extra Error Info', function () {
	it('UndefinedVariable', function () {
		try {
			new Engine({ strict: true, extraErrorInfo: true }).evalSync('var otherthing; console.log(something);');
			expect(false).to.be.true;
		} catch (e) {
			expect(e.line).to.equal(1);
			expect(e.code).to.equal('UndefinedVariable');
			expect(e.when).to.equal('read');
			expect(e.strict).to.be.true;
			expect(e.candidates).to.contain('otherthing');
			expect(e.ast.type).to.equal('Identifier');
		}
	});

	it('CallNonFunction on Object', function () {
		try {
			new Engine({ extraErrorInfo: true }).evalSync('var v = {a: function() {}, b:1};\nconsole.log(v.c());');
			expect(false).to.be.true;
		} catch (e) {
			expect(e.line).to.equal(2);
			expect(e.code).to.equal('CallNonFunction');
			expect(e.candidates).to.contain('a');
			expect(e.candidates).to.not.contain('b');
			expect(e.ast.type).to.equal('CallExpression');
		}
	});

	it('CallNonFunction on Link', function () {
		try {
			var e = new Engine({ extraErrorInfo: true });
			e.addGlobal('rob', { a: 10, b: function b() {} });
			e.evalSync('console.log(rob.c());');
			expect(false).to.be.true;
		} catch (e) {
			expect(e.line).to.equal(1);
			expect(e.code).to.equal('CallNonFunction');
			expect(e.candidates).to.contain('b');
			expect(e.candidates).to.not.contain('a');
			expect(e.ast.type).to.equal('CallExpression');
		}
	});

	it('CallNonFunction on SmartLink', function () {
		try {
			var e = new Engine({ extraErrorInfo: true, foreignObjectMode: 'smart' });
			e.addGlobal('rob', { a: 10, b: function b() {}, c: function c() {}, apiMethods: ['c'] });
			e.evalSync('console.log(rob.d());');
			expect(false).to.be.true;
		} catch (e) {
			expect(e.line).to.equal(1);
			expect(e.code).to.equal('CallNonFunction');
			expect(e.candidates).to.contain('c');
			expect(e.candidates).to.not.contain('b');
			expect(e.candidates).to.not.contain('a');
			expect(e.ast.type).to.equal('CallExpression');
		}
	});

	it('CallNonFunction on global', function () {
		try {
			new Engine({ extraErrorInfo: true }).evalSync('function y() {};\nvar z = 10;\nvar a = 7;\na();');
			expect(false).to.be.true;
		} catch (e) {
			expect(e.line).to.equal(4);
			expect(e.code).to.equal('CallNonFunction');
			expect(e.candidates).to.contain('y');
			expect(e.candidates).to.not.contain('z');
			expect(e.ast.type).to.equal('CallExpression');
		}
	});

	it('Change an added global const', function () {
		var engine = new Engine({ extraErrorInfo: true, strict: true });
		engine.addGlobalValue('pi', 3.14, { const: true });
		try {
			engine.evalSync('pi = 3;');
			expct(false).to.equal(true);
		} catch (e) {
			expect(e.name).to.equal('TypeError');
		}
		expect(engine.globalScope.get('pi').toNative()).to.equal(3.14);
	});
});

/***/ })
/******/ ]);